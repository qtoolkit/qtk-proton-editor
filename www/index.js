var editor =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var proton_editor_1 = __webpack_require__(1);
	function run() {
	    proton_editor_1.ProtonEditor.run();
	}
	exports.run = run;
	//# sourceMappingURL=index.js.map

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var qtk_particles_editor_1 = __webpack_require__(2);
	var view_model_1 = __webpack_require__(377);
	var ProtonEditor = (function (_super) {
	    __extends(ProtonEditor, _super);
	    function ProtonEditor() {
	        _super.apply(this, arguments);
	    }
	    ProtonEditor.run = function () {
	        return qtk_particles_editor_1.ParticlesEditor.run("proton-editor", view_model_1.ProtonViewModel.TYPE);
	    };
	    return ProtonEditor;
	}(qtk_particles_editor_1.ParticlesEditor));
	exports.ProtonEditor = ProtonEditor;
	;
	//# sourceMappingURL=proton-editor.js.map

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var document_1 = __webpack_require__(3);
	exports.Document = document_1.Document;
	var draw_info_1 = __webpack_require__(360);
	exports.DrawInfo = draw_info_1.DrawInfo;
	var particles_editor_1 = __webpack_require__(361);
	exports.ParticlesEditor = particles_editor_1.ParticlesEditor;
	var command_draw_1 = __webpack_require__(367);
	exports.CommandDraw = command_draw_1.CommandDraw;
	var command_new_1 = __webpack_require__(368);
	exports.CommandNew = command_new_1.CommandNew;
	var command_open_1 = __webpack_require__(369);
	exports.CommandOpen = command_open_1.CommandOpen;
	var command_save_1 = __webpack_require__(370);
	exports.CommandSave = command_save_1.CommandSave;
	var command_export_1 = __webpack_require__(371);
	exports.CommandExport = command_export_1.CommandExport;
	var command_about_1 = __webpack_require__(373);
	exports.CommandAbout = command_about_1.CommandAbout;
	var command_remove_1 = __webpack_require__(374);
	exports.CommandRemove = command_remove_1.CommandRemove;
	var command_content_1 = __webpack_require__(375);
	exports.CommandContent = command_content_1.CommandContent;
	var particles_view_model_1 = __webpack_require__(376);
	exports.ParticlesViewModel = particles_view_model_1.ParticlesViewModel;
	var iparticles_view_model_1 = __webpack_require__(366);
	exports.ParticlesViewModelFactory = iparticles_view_model_1.ParticlesViewModelFactory;
	//# sourceMappingURL=index.js.map

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var Document = (function () {
	    function Document() {
	    }
	    Document.prototype.toJson = function () {
	        var json = {
	            data: this.data,
	            propsDesc: this.propsDesc.map(function (item) {
	                return item.toJson();
	            })
	        };
	        return json;
	    };
	    Document.prototype.fromJson = function (json) {
	        this.data = json.data;
	        this.propsDesc = json.propsDesc.map(function (item) {
	            return qtk_1.PagePropsDesc.create(item.title, item.propsDesc.items);
	        });
	        if (!this.data.backGroundColor) {
	            this.data.backGroundColor = "#f6f6f6";
	        }
	        return this;
	    };
	    Document.prototype.fromTemplate = function (name) {
	        var json = Document.templates[name];
	        var data = {};
	        this.propsDesc = json.map(function (item) {
	            var pagePropsDesc = qtk_1.PagePropsDesc.create(item.title, item.propsDesc);
	            item.propsDesc.forEach(function (desc) {
	                if (desc.path) {
	                    data[desc.path] = desc.value;
	                }
	            });
	            return pagePropsDesc;
	        });
	        this.data = data;
	        if (!this.data.backGroundColor) {
	            this.data.backGroundColor = "#f6f6f6";
	        }
	        return this;
	    };
	    Document.prototype.getTemplateList = function () {
	        return Document.templateNames;
	    };
	    Document.create = function () {
	        return new Document();
	    };
	    Document.registerTemplate = function (name, json) {
	        Document.templates[name] = json;
	        Document.templateNames.push(name);
	    };
	    Document.getTemplateList = function () {
	        return Document.templateNames;
	    };
	    Document.templates = {};
	    Document.templateNames = [];
	    return Document;
	}());
	exports.Document = Document;
	//# sourceMappingURL=document.js.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var rect_1 = __webpack_require__(5);
	exports.Rect = rect_1.Rect;
	var point_1 = __webpack_require__(6);
	exports.Point = point_1.Point;
	var style_1 = __webpack_require__(7);
	exports.Style = style_1.Style;
	var matrix_1 = __webpack_require__(16);
	exports.Matrix = matrix_1.Matrix;
	var canvas_1 = __webpack_require__(17);
	exports.Canvas = canvas_1.Canvas;
	var edit_1 = __webpack_require__(21);
	exports.Edit = edit_1.Edit;
	var label_1 = __webpack_require__(22);
	exports.Label = label_1.Label;
	var emitter_1 = __webpack_require__(8);
	exports.Emitter = emitter_1.Emitter;
	var page_1 = __webpack_require__(90);
	exports.Page = page_1.Page;
	var key_event_1 = __webpack_require__(20);
	exports.KeyEvent = key_event_1.KeyEvent;
	var view_port_1 = __webpack_require__(91);
	exports.ViewPort = view_port_1.ViewPort;
	var pages_1 = __webpack_require__(92);
	exports.Pages = pages_1.Pages;
	var main_loop_1 = __webpack_require__(93);
	exports.MainLoop = main_loop_1.MainLoop;
	var image_1 = __webpack_require__(94);
	exports.Image = image_1.Image;
	var group_1 = __webpack_require__(95);
	exports.Group = group_1.Group;
	var dialog_1 = __webpack_require__(96);
	exports.Dialog = dialog_1.Dialog;
	var button_1 = __webpack_require__(98);
	exports.Button = button_1.Button;
	var slider_1 = __webpack_require__(99);
	exports.Slider = slider_1.Slider;
	var switch_1 = __webpack_require__(101);
	exports.Switch = switch_1.Switch;
	var matrix_stack_1 = __webpack_require__(26);
	exports.MatrixStack = matrix_stack_1.MatrixStack;
	var tab_page_1 = __webpack_require__(102);
	exports.TabPage = tab_page_1.TabPage;
	var rich_text_1 = __webpack_require__(103);
	exports.RichText = rich_text_1.RichText;
	var tab_button_1 = __webpack_require__(108);
	exports.TabButton = tab_button_1.TabButton;
	var tab_control_1 = __webpack_require__(112);
	exports.TabControl = tab_control_1.TabControl;
	var image_tile_1 = __webpack_require__(11);
	exports.ImageDrawType = image_tile_1.ImageDrawType;
	exports.ImageTile = image_tile_1.ImageTile;
	var rich_text_edit_1 = __webpack_require__(114);
	exports.RichTextEdit = rich_text_edit_1.RichTextEdit;
	var tab_button_group_1 = __webpack_require__(113);
	exports.TabButtonGroup = tab_button_group_1.TabButtonGroup;
	var combo_box_1 = __webpack_require__(115);
	exports.ComboBox = combo_box_1.ComboBox;
	exports.ComboBoxEditable = combo_box_1.ComboBoxEditable;
	var grid_view_1 = __webpack_require__(120);
	exports.GridView = grid_view_1.GridView;
	var list_view_1 = __webpack_require__(116);
	exports.ListView = list_view_1.ListView;
	var tree_item_1 = __webpack_require__(122);
	exports.TreeItem = tree_item_1.TreeItem;
	var tree_view_1 = __webpack_require__(123);
	exports.TreeView = tree_view_1.TreeView;
	var application_1 = __webpack_require__(125);
	exports.Application = application_1.Application;
	var movable_1 = __webpack_require__(167);
	exports.Movable = movable_1.Movable;
	var theme_manager_1 = __webpack_require__(126);
	exports.ThemeManager = theme_manager_1.ThemeManager;
	var draggable_1 = __webpack_require__(168);
	exports.Draggable = draggable_1.Draggable;
	var droppable_1 = __webpack_require__(169);
	exports.Droppable = droppable_1.Droppable;
	var resizable_1 = __webpack_require__(170);
	exports.Resizable = resizable_1.Resizable;
	exports.ResizableOptions = resizable_1.ResizableOptions;
	var menu_1 = __webpack_require__(171);
	exports.Menu = menu_1.Menu;
	exports.MenuItem = menu_1.MenuItem;
	var radio_button_1 = __webpack_require__(110);
	exports.RadioButton = radio_button_1.RadioButton;
	var tree_item_data_1 = __webpack_require__(124);
	exports.TreeItemData = tree_item_data_1.TreeItemData;
	var check_button_1 = __webpack_require__(111);
	exports.CheckButton = check_button_1.CheckButton;
	var window_normal_1 = __webpack_require__(172);
	exports.WindowNormal = window_normal_1.WindowNormal;
	var widget_factory_1 = __webpack_require__(27);
	exports.WidgetFactory = widget_factory_1.WidgetFactory;
	var menu_bar_1 = __webpack_require__(173);
	exports.MenuBar = menu_bar_1.MenuBar;
	exports.MenuBarItem = menu_bar_1.MenuBarItem;
	var color_tile_1 = __webpack_require__(144);
	exports.ColorTile = color_tile_1.ColorTile;
	exports.ColorLine = color_tile_1.ColorLine;
	var list_item_1 = __webpack_require__(118);
	exports.ListItem = list_item_1.ListItem;
	exports.ListItemStyle = list_item_1.ListItemStyle;
	var chart_view_1 = __webpack_require__(174);
	exports.ChartView = chart_view_1.ChartView;
	var graphics_1 = __webpack_require__(29);
	exports.RoundType = graphics_1.RoundType;
	exports.Graphics = graphics_1.Graphics;
	var accordion_1 = __webpack_require__(327);
	exports.Accordion = accordion_1.Accordion;
	var service_locator_1 = __webpack_require__(128);
	exports.ServiceLocator = service_locator_1.ServiceLocator;
	var ruler_1 = __webpack_require__(330);
	exports.VRuler = ruler_1.VRuler;
	exports.HRuler = ruler_1.HRuler;
	var title_content_1 = __webpack_require__(328);
	exports.TitleContent = title_content_1.TitleContent;
	var title_label_1 = __webpack_require__(146);
	exports.TitleLabel = title_label_1.TitleLabel;
	var title_range_1 = __webpack_require__(148);
	exports.TitleRange = title_range_1.TitleRange;
	var title_vector_1 = __webpack_require__(150);
	exports.TitleVector = title_vector_1.TitleVector;
	var title_edit_1 = __webpack_require__(145);
	exports.TitleEdit = title_edit_1.TitleEdit;
	var title_slider_1 = __webpack_require__(152);
	exports.TitleSlider = title_slider_1.TitleSlider;
	var property_page_1 = __webpack_require__(140);
	exports.PropertyPage = property_page_1.PropertyPage;
	var property_dialog_1 = __webpack_require__(139);
	exports.PropertyDialog = property_dialog_1.PropertyDialog;
	var range_edit_1 = __webpack_require__(149);
	exports.RangeEdit = range_edit_1.RangeEdit;
	var vector_edit_1 = __webpack_require__(151);
	exports.VectorEdit = vector_edit_1.VectorEdit;
	var choosable_edit_1 = __webpack_require__(155);
	exports.ChoosableEdit = choosable_edit_1.ChoosableEdit;
	var title_text_area_1 = __webpack_require__(153);
	exports.TitleTextArea = title_text_area_1.TitleTextArea;
	var property_sheets_1 = __webpack_require__(331);
	exports.PropertySheets = property_sheets_1.PropertySheets;
	var progress_bar_1 = __webpack_require__(100);
	exports.ProgressBarType = progress_bar_1.ProgressBarType;
	exports.ProgressBar = progress_bar_1.ProgressBar;
	var title_choosable_edit_1 = __webpack_require__(154);
	exports.TitleChoosableEdit = title_choosable_edit_1.TitleChoosableEdit;
	var dock_layouter_1 = __webpack_require__(135);
	exports.DockLayouter = dock_layouter_1.DockLayouter;
	exports.DockLayouterParam = dock_layouter_1.DockLayouterParam;
	var grid_layouter_1 = __webpack_require__(121);
	exports.GridLayouter = grid_layouter_1.GridLayouter;
	exports.GridLayouterParam = grid_layouter_1.GridLayouterParam;
	var list_layouter_1 = __webpack_require__(117);
	exports.ListLayouter = list_layouter_1.ListLayouter;
	exports.ListLayouterParam = list_layouter_1.ListLayouterParam;
	var simple_layouter_1 = __webpack_require__(119);
	exports.SimpleLayouter = simple_layouter_1.SimpleLayouter;
	exports.SimpleLayouterParam = simple_layouter_1.SimpleLayouterParam;
	var linear_layouter_1 = __webpack_require__(136);
	exports.LinearLayouter = linear_layouter_1.LinearLayouter;
	exports.LinearLayouterParam = linear_layouter_1.LinearLayouterParam;
	var widget_1 = __webpack_require__(23);
	exports.Widget = widget_1.Widget;
	exports.WidgetState = widget_1.WidgetState;
	exports.WidgetMode = widget_1.WidgetMode;
	exports.HitTestResult = widget_1.HitTestResult;
	var consts_1 = __webpack_require__(109);
	exports.Direction = consts_1.Direction;
	exports.Align = consts_1.Align;
	exports.AlignH = consts_1.AlignH;
	exports.AlignV = consts_1.AlignV;
	exports.Orientation = consts_1.Orientation;
	exports.Services = consts_1.Services;
	var title_combo_box_1 = __webpack_require__(157);
	exports.TitleComboBox = title_combo_box_1.TitleComboBox;
	exports.TitleComboBoxEditable = title_combo_box_1.TitleComboBoxEditable;
	var message_box_1 = __webpack_require__(134);
	exports.ButtonOption = message_box_1.ButtonOption;
	exports.ButtonsOptions = message_box_1.ButtonsOptions;
	exports.TitleOptions = message_box_1.TitleOptions;
	exports.MessageBox = message_box_1.MessageBox;
	var scroll_view_1 = __webpack_require__(104);
	exports.ScrollerBarVisibility = scroll_view_1.ScrollerBarVisibility;
	exports.ScrollBarStyle = scroll_view_1.ScrollBarStyle;
	exports.ScrollView = scroll_view_1.ScrollView;
	var device_info_1 = __webpack_require__(127);
	exports.DeviceInfo = device_info_1.DeviceInfo;
	var view_model_1 = __webpack_require__(158);
	exports.ViewModel = view_model_1.ViewModel;
	var recyclable_creator_1 = __webpack_require__(87);
	exports.RecyclableCreator = recyclable_creator_1.RecyclableCreator;
	var delegate_command_1 = __webpack_require__(332);
	exports.DelegateCommand = delegate_command_1.DelegateCommand;
	var collection_view_model_1 = __webpack_require__(333);
	exports.CollectionViewModel = collection_view_model_1.CollectionViewModel;
	var delegate_value_converter_1 = __webpack_require__(334);
	exports.DelegateValueConverter = delegate_value_converter_1.DelegateValueConverter;
	var widget_recyclable_creator_1 = __webpack_require__(86);
	exports.WidgetRecyclableCreator = widget_recyclable_creator_1.WidgetRecyclableCreator;
	var ivalidation_rule_1 = __webpack_require__(162);
	exports.ValidationResult = ivalidation_rule_1.ValidationResult;
	var delegate_validation_rule_1 = __webpack_require__(335);
	exports.DelegateValidationRule = delegate_validation_rule_1.DelegateValidationRule;
	var binding_rule_1 = __webpack_require__(83);
	exports.BindingRule = binding_rule_1.BindingRule;
	exports.BindingDataSource = binding_rule_1.BindingDataSource;
	exports.BindingCommandSource = binding_rule_1.BindingCommandSource;
	exports.BindingRuleItem = binding_rule_1.BindingRuleItem;
	var iview_model_1 = __webpack_require__(85);
	exports.BindingMode = iview_model_1.BindingMode;
	var props_desc_1 = __webpack_require__(156);
	exports.PagePropsDesc = props_desc_1.PagePropsDesc;
	exports.PropsDesc = props_desc_1.PropsDesc;
	exports.PropDesc = props_desc_1.PropDesc;
	exports.NumberPropDesc = props_desc_1.NumberPropDesc;
	exports.SliderPropDesc = props_desc_1.SliderPropDesc;
	var props_desc_2 = __webpack_require__(156);
	exports.TextPropDesc = props_desc_2.TextPropDesc;
	exports.ReadonlyTextPropDesc = props_desc_2.ReadonlyTextPropDesc;
	exports.OptionsPropDesc = props_desc_2.OptionsPropDesc;
	exports.RangePropDesc = props_desc_2.RangePropDesc;
	var props_desc_3 = __webpack_require__(156);
	exports.Vector2PropDesc = props_desc_3.Vector2PropDesc;
	exports.Vector3PropDesc = props_desc_3.Vector3PropDesc;
	exports.LinePropDesc = props_desc_3.LinePropDesc;
	/// <reference path="../typings/globals/tween.js/index.d.ts"/>
	var TWEEN = __webpack_require__(24);
	exports.TWEEN = TWEEN;
	var Events = __webpack_require__(10);
	exports.Events = Events;
	var Assets = __webpack_require__(15);
	exports.Assets = Assets;
	var inputEventAdapter = __webpack_require__(19);
	exports.inputEventAdapter = inputEventAdapter;
	var toast_info_1 = __webpack_require__(336);
	exports.ToastInfo = toast_info_1.ToastInfo;
	var input_info_1 = __webpack_require__(337);
	exports.InputInfo = input_info_1.InputInfo;
	var props_info_1 = __webpack_require__(338);
	exports.PropsInfo = props_info_1.PropsInfo;
	var choice_info_1 = __webpack_require__(339);
	exports.ChoiceInfo = choice_info_1.ChoiceInfo;
	var progress_info_1 = __webpack_require__(340);
	exports.ProgressInfo = progress_info_1.ProgressInfo;
	var confirmation_info_1 = __webpack_require__(341);
	exports.ConfirmationInfo = confirmation_info_1.ConfirmationInfo;
	var notification_info_1 = __webpack_require__(342);
	exports.NotificationInfo = notification_info_1.NotificationInfo;
	var interaction_types_1 = __webpack_require__(131);
	exports.InteractionTypes = interaction_types_1.InteractionTypes;
	var interaction_request_1 = __webpack_require__(130);
	exports.InteractionRequest = interaction_request_1.InteractionRequest;
	var interaction_service_1 = __webpack_require__(132);
	exports.InteractionService = interaction_service_1.InteractionService;
	var items_storage_1 = __webpack_require__(343);
	exports.ItemsStorage = items_storage_1.ItemsStorage;
	var table_row_1 = __webpack_require__(344);
	exports.TableRow = table_row_1.TableRow;
	var table_client_1 = __webpack_require__(345);
	exports.TableClient = table_client_1.TableClient;
	var table_index_1 = __webpack_require__(347);
	exports.TableIndex = table_index_1.TableIndex;
	var table_header_1 = __webpack_require__(349);
	exports.TableHeader = table_header_1.TableHeader;
	var table_1 = __webpack_require__(350);
	exports.Table = table_1.Table;
	exports.TableColInfo = table_1.TableColInfo;
	var table_index_item_1 = __webpack_require__(351);
	exports.TableIndexItem = table_index_item_1.TableIndexItem;
	var table_header_item_1 = __webpack_require__(352);
	exports.TableHeaderItem = table_header_item_1.TableHeaderItem;
	var delegate_filter_1 = __webpack_require__(353);
	exports.DelegateFilter = delegate_filter_1.DelegateFilter;
	var delegate_comparator_1 = __webpack_require__(354);
	exports.DelegateComparator = delegate_comparator_1.DelegateComparator;
	var comparators_1 = __webpack_require__(355);
	exports.NumberComparator = comparators_1.NumberComparator;
	exports.StringComparator = comparators_1.StringComparator;
	exports.RevertComparator = comparators_1.RevertComparator;
	exports.ObjectPropComparator = comparators_1.ObjectPropComparator;
	var range_fixer_1 = __webpack_require__(356);
	exports.RangeFixer = range_fixer_1.RangeFixer;
	var number_fixer_1 = __webpack_require__(357);
	exports.NumberFixer = number_fixer_1.NumberFixer;
	var vector2_fixer_1 = __webpack_require__(358);
	exports.Vector2Fixer = vector2_fixer_1.Vector2Fixer;
	var vector3_fixer_1 = __webpack_require__(359);
	exports.Vector3Fixer = vector3_fixer_1.Vector3Fixer;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	var Rect = (function () {
	    function Rect(x, y, w, h) {
	        this.init(x, y, w, h);
	    }
	    Rect.prototype.init = function (x, y, w, h) {
	        this.x = x;
	        this.y = y;
	        this.w = w;
	        this.h = h;
	        return this;
	    };
	    Rect.prototype.dispose = function () {
	    };
	    Rect.prototype.clone = function () {
	        return Rect.create(this.x, this.y, this.w, this.h);
	    };
	    Rect.prototype.equal = function (other) {
	        return this.x === other.x && this.y === other.y && this.w === other.w && this.h === other.h;
	    };
	    Rect.prototype.copy = function (other) {
	        return this.init(other.x, other.y, other.w, other.h);
	    };
	    Rect.prototype.merge = function (other) {
	        var x = Math.min(this.x, other.x);
	        var y = Math.min(this.y, other.y);
	        this.w = Math.max(this.x + this.w, other.x + other.w) - x;
	        this.h = Math.max(this.y + this.h, other.y + other.h) - y;
	        this.x = x;
	        this.y = y;
	        return this;
	    };
	    Rect.create = function (x, y, w, h) {
	        var r = new Rect(x || 0, y || 0, w || 0, h || 0);
	        return r;
	    };
	    Rect.rect = Rect.create(0, 0, 0, 0);
	    return Rect;
	}());
	exports.Rect = Rect;
	;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	var Point = (function () {
	    function Point(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	    Point.prototype.dispose = function () {
	    };
	    Point.prototype.init = function (x, y) {
	        this.x = x;
	        this.y = y;
	        return this;
	    };
	    Point.prototype.copy = function (p) {
	        this.x = p.x;
	        this.y = p.y;
	        return this;
	    };
	    Point.prototype.isInRect = function (r) {
	        return this.isIn(r.x, r.y, r.w, r.h);
	    };
	    Point.prototype.isIn = function (x, y, w, h) {
	        var xx = this.x;
	        var yy = this.y;
	        return xx >= x && xx <= (x + w) && yy >= y && yy <= (y + h);
	    };
	    Point.create = function (x, y) {
	        return new Point(x, y);
	    };
	    Point.point = Point.create(0, 0);
	    return Point;
	}());
	exports.Point = Point;
	;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/globals/eventemitter3/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var emitter_1 = __webpack_require__(8);
	var Events = __webpack_require__(10);
	var image_tile_1 = __webpack_require__(11);
	/**
	 * Style用来控制Widget的外观效果，如背景和字体等等。
	 */
	var Style = (function (_super) {
	    __extends(Style, _super);
	    function Style() {
	        _super.call(this);
	    }
	    Style.prototype.notifyChanged = function () {
	        this.dispatchEvent({ type: Events.CHANGE });
	    };
	    Object.defineProperty(Style.prototype, "textLineHeight", {
	        get: function () {
	            return Math.round(this.fontSize * 1.2);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Style.prototype.clone = function () {
	        var other = new Style();
	        if (this._backGroundColor) {
	            other._backGroundColor = this._backGroundColor;
	        }
	        if (this._foreGroundColor) {
	            other._foreGroundColor = this._foreGroundColor;
	        }
	        if (this._backGroundImage) {
	            other._backGroundImage = this._backGroundImage;
	        }
	        if (this._backGroundImageDrawType) {
	            other._backGroundImageDrawType = this._backGroundImageDrawType;
	        }
	        if (this._foreGroundImage) {
	            other._foreGroundImage = this._foreGroundImage;
	        }
	        if (this._foreGroundImageDrawType) {
	            other._foreGroundImageDrawType = this._foreGroundImageDrawType;
	        }
	        if (this._fontFamily) {
	            other._fontFamily = this._fontFamily;
	        }
	        if (this._fontSize) {
	            other._fontSize = this._fontSize;
	        }
	        if (this._textColor) {
	            other._textColor = this._textColor;
	        }
	        if (this._fontBold) {
	            other._fontBold = this._fontBold;
	        }
	        if (this._fontItalic) {
	            other._fontItalic = this._fontItalic;
	        }
	        if (this._fontUnderline) {
	            other._fontUnderline = this._fontUnderline;
	        }
	        if (this._lineColor) {
	            other._lineColor = this._lineColor;
	        }
	        if (this._lineWidth) {
	            other._lineWidth = this._lineWidth;
	        }
	        if (this._lineJoin) {
	            other._lineJoin = this._lineJoin;
	        }
	        if (this._lineCap) {
	            other._lineCap = this._lineCap;
	        }
	        if (this._dashLine) {
	            other._dashLine = this._dashLine;
	        }
	        if (this._roundRadius) {
	            other._roundRadius = this._roundRadius;
	        }
	        if (this._roundType) {
	            other._roundType = this._roundType;
	        }
	        return other;
	    };
	    Style.prototype.toJson = function () {
	        var json = {};
	        if (this._backGroundColor) {
	            json.backGroundColor = this._backGroundColor;
	        }
	        if (this._foreGroundColor) {
	            json.foreGroundColor = this._foreGroundColor;
	        }
	        if (this._backGroundImage) {
	            json.backGroundImage = this._backGroundImage.toJson();
	        }
	        if (this._backGroundImageDrawType) {
	            json.backGroundImageDrawType = image_tile_1.ImageDrawType[this._backGroundImageDrawType];
	        }
	        if (this._foreGroundImage) {
	            json.foreGroundImage = this._foreGroundImage.toJson();
	        }
	        if (this._foreGroundImageDrawType) {
	            json.foreGroundImageDrawType = image_tile_1.ImageDrawType[this._foreGroundImageDrawType];
	        }
	        if (this._fontFamily) {
	            json.fontFamily = this._fontFamily;
	        }
	        if (this._fontSize) {
	            json.fontSize = this._fontSize;
	        }
	        if (this._textColor) {
	            json.textColor = this._textColor;
	        }
	        if (this._fontBold) {
	            json.fontBold = this._fontBold;
	        }
	        if (this._fontItalic) {
	            json.fontItalic = this._fontItalic;
	        }
	        if (this._fontUnderline) {
	            json.fontUnderline = this._fontUnderline;
	        }
	        if (this._textBaseline) {
	            json.textBaseline = this._textBaseline;
	        }
	        if (this._textAlign) {
	            json.textAlign = this._textAlign;
	        }
	        if (this._lineWidth) {
	            json.lineWidth = this._lineWidth;
	        }
	        if (this._lineJoin) {
	            json.lineJoin = this._lineJoin;
	        }
	        if (this._lineCap) {
	            json.lineCap = this._lineCap;
	        }
	        if (this._dashLine) {
	            json.dashLine = this._dashLine;
	        }
	        if (this._lineColor) {
	            json.lineColor = this._lineColor;
	        }
	        if (this._roundRadius) {
	            json.roundRadius = this._roundRadius;
	        }
	        if (this._roundType) {
	            json.roundType = this._roundType;
	        }
	        return json;
	    };
	    Style.prototype.fromJson = function (json, baseURL) {
	        var _this = this;
	        if (json.backGroundColor) {
	            this._backGroundColor = json.backGroundColor;
	        }
	        if (json.foreGroundColor) {
	            this._foreGroundColor = json.foreGroundColor;
	        }
	        if (json.backGroundImage) {
	            var url = baseURL ? baseURL + "/" + json.backGroundImage : json.backGroundImage;
	            this._backGroundImage = image_tile_1.ImageTile.create(url, function (evt) {
	                _this.notifyChanged();
	            });
	        }
	        if (json.foreGroundImage) {
	            var url = baseURL ? baseURL + "/" + json.foreGroundImage : json.foreGroundImage;
	            this._foreGroundImage = image_tile_1.ImageTile.create(url, function (evt) {
	                _this.notifyChanged();
	            });
	        }
	        if (json.backGroundImageDrawType) {
	            this._backGroundImageDrawType = parseInt(image_tile_1.ImageDrawType[json.backGroundImageDrawType]);
	        }
	        if (json.foreGroundImageDrawType) {
	            this._foreGroundImageDrawType = parseInt(image_tile_1.ImageDrawType[json.foreGroundImageDrawType]);
	        }
	        if (json.fontFamily) {
	            this._fontFamily = json.fontFamily;
	        }
	        if (json.fontSize) {
	            this._fontSize = json.fontSize;
	        }
	        if (json.textColor) {
	            this._textColor = json.textColor;
	        }
	        if (json.fontBold) {
	            this._fontBold = json.fontBold;
	        }
	        if (json.fontItalic) {
	            this._fontItalic = json.fontItalic;
	        }
	        if (json.fontUnderline) {
	            this._fontUnderline = json.fontUnderline;
	        }
	        if (json.textBaseline) {
	            this._textBaseline = json.textBaseline;
	        }
	        if (json.textAlign) {
	            this._textAlign = json.textAlign;
	        }
	        if (json.lineWidth) {
	            this._lineWidth = json.lineWidth;
	        }
	        if (json.lineJoin) {
	            this._lineJoin = json.lineJoin;
	        }
	        if (json.lineCap) {
	            this._lineCap = json.lineCap;
	        }
	        if (json.dashLine) {
	            this._dashLine = json.dashLine;
	        }
	        if (json.lineColor) {
	            this._lineColor = json.lineColor;
	        }
	        if (json.roundRadius) {
	            this._roundRadius = json.roundRadius;
	        }
	        if (json.roundType) {
	            this._roundType = json.roundType;
	        }
	        this.notifyChanged();
	    };
	    Object.defineProperty(Style.prototype, "backGroundColor", {
	        get: function () {
	            return this._backGroundColor;
	        },
	        set: function (value) {
	            this._backGroundColor = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "foreGroundColor", {
	        get: function () {
	            return this._foreGroundColor;
	        },
	        set: function (value) {
	            this._foreGroundColor = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "backGroundImage", {
	        get: function () {
	            return this._backGroundImage;
	        },
	        set: function (value) {
	            this._backGroundImage = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "backGroundImageDrawType", {
	        get: function () {
	            return this._backGroundImageDrawType;
	        },
	        set: function (value) {
	            this._backGroundImageDrawType = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "foreGroundImage", {
	        get: function () {
	            return this._foreGroundImage;
	        },
	        set: function (value) {
	            this._foreGroundImage = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "foreGroundImageDrawType", {
	        get: function () {
	            return this._foreGroundImageDrawType;
	        },
	        set: function (value) {
	            this._foreGroundImageDrawType = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "font", {
	        get: function () {
	            var font = "";
	            if (this._fontBold) {
	                font += "bold ";
	            }
	            if (this._fontItalic) {
	                font += "italic ";
	            }
	            font += this._fontSize + "px " + (this._fontFamily || "Sans");
	            return font;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "fontFamily", {
	        get: function () {
	            return this._fontFamily || "Sans";
	        },
	        set: function (value) {
	            this._fontFamily = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "fontSize", {
	        get: function () {
	            return this._fontSize;
	        },
	        set: function (value) {
	            this._fontSize = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "textColor", {
	        get: function () {
	            return this._textColor;
	        },
	        set: function (value) {
	            this._textColor = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "fontBold", {
	        get: function () {
	            return this._fontBold;
	        },
	        set: function (value) {
	            this._fontBold = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "fontItalic", {
	        get: function () {
	            return this._fontItalic;
	        },
	        set: function (value) {
	            this._fontItalic = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "fontUnderline", {
	        get: function () {
	            return this._fontUnderline;
	        },
	        set: function (value) {
	            this._fontUnderline = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "textAlign", {
	        get: function () {
	            return this._textAlign || "center";
	        },
	        set: function (value) {
	            this._textAlign = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "textBaseline", {
	        get: function () {
	            return this._textBaseline || "middle";
	        },
	        set: function (value) {
	            this._textBaseline = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "lineWidth", {
	        get: function () {
	            return this._lineWidth;
	        },
	        set: function (value) {
	            this._lineWidth = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "lineJoin", {
	        get: function () {
	            return this._lineJoin;
	        },
	        set: function (value) {
	            this._lineJoin = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "lineCap", {
	        get: function () {
	            return this._lineCap;
	        },
	        set: function (value) {
	            this._lineCap = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "dashLine", {
	        get: function () {
	            return this._dashLine;
	        },
	        set: function (value) {
	            this._dashLine = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "lineColor", {
	        get: function () {
	            return this._lineColor;
	        },
	        set: function (value) {
	            this._lineColor = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "roundRadius", {
	        get: function () {
	            return this._roundRadius;
	        },
	        set: function (value) {
	            this._roundRadius = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Style.prototype, "roundType", {
	        get: function () {
	            return this._roundType;
	        },
	        set: function (value) {
	            this._roundType = value;
	            this.notifyChanged();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Style.create = function (json, baseURL) {
	        var style = new Style();
	        if (json) {
	            style.fromJson(json, baseURL);
	        }
	        return style;
	    };
	    Style.fill = function (ctx, fillStyle, h) {
	        if (!fillStyle || typeof fillStyle === "string") {
	            ctx.fillStyle = fillStyle;
	        }
	        else {
	            var key = fillStyle + "." + h;
	            var value = Style.fillStyles[key];
	            if (!value) {
	                var data = fillStyle;
	                var n = data.length;
	                var delta = 1 / n;
	                var value = ctx.createLinearGradient(0, 0, 0, h);
	                for (var i = 0; i < n; i++) {
	                    var color = data[i];
	                    value.addColorStop(i * delta, color);
	                }
	                Style.fillStyles[key] = value;
	            }
	            ctx.fillStyle = value;
	        }
	        ctx.fill();
	        return;
	    };
	    Style.fillStyles = {};
	    return Style;
	}(emitter_1.Emitter));
	exports.Style = Style;
	;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/globals/eventemitter3/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var EventEmitter = __webpack_require__(9);
	var EmitterImpl = (function (_super) {
	    __extends(EmitterImpl, _super);
	    function EmitterImpl() {
	        _super.call(this);
	    }
	    return EmitterImpl;
	}(EventEmitter));
	function toCaptureEventName(name) {
	    return name + ".capture";
	}
	/**
	 * 事件分发器。
	 */
	var Emitter = (function () {
	    function Emitter() {
	        this.emitter = new EmitterImpl();
	    }
	    /***
	     * 注册事件处理函数。
	     * @param type 事件的名称。
	     * @param callback 回调函数。
	     * @param useCapture 是否注册为capture阶段的处理函数。
	     */
	    Emitter.prototype.on = function (type, callback, useCapture) {
	        this.addEventListener(type, callback, useCapture);
	    };
	    /***
	     * 注册事件处理函数(只执行一次)。
	     * @param type 事件的名称。
	     * @param callback 回调函数。
	     * @param useCapture 是否注册为capture阶段的处理函数。
	     */
	    Emitter.prototype.once = function (type, callback) {
	        this.emitter.once(type, callback, this);
	    };
	    /***
	     * 注消事件处理函数。
	     * @param type 事件的名称。
	     * @param callback 回调函数。
	     * @param useCapture 是否注消capture阶段的处理函数。
	     */
	    Emitter.prototype.off = function (type, callback, useCapture) {
	        this.removeEventListener(type, callback, useCapture);
	    };
	    /***
	     * 注册事件处理函数。
	     * @param type 事件的名称。
	     * @param callback 回调函数。
	     * @param useCapture 是否注册为capture阶段的处理函数。
	     */
	    Emitter.prototype.addEventListener = function (type, callback, useCapture) {
	        if (!callback) {
	            return;
	        }
	        if (useCapture) {
	            this.emitter.addListener(toCaptureEventName(type), callback, this);
	        }
	        else {
	            this.emitter.addListener(type, callback, this);
	        }
	    };
	    /***
	     * 注消事件处理函数。
	     * @param type 事件的名称。
	     * @param callback 回调函数。
	     * @param useCapture 是否注消capture阶段的处理函数。
	     */
	    Emitter.prototype.removeEventListener = function (type, callback, useCapture) {
	        if (useCapture) {
	            this.emitter.removeListener(toCaptureEventName(type), callback, this);
	        }
	        else {
	            this.emitter.removeListener(type, callback, this);
	        }
	    };
	    /***
	     * 分发异步事件。
	     * @param evt 事件。
	     * @param useCapture 是否触发capture阶段的处理函数。
	     */
	    Emitter.prototype.dispatchEventAsync = function (evt, useCapture) {
	        var _this = this;
	        setTimeout(function (e) {
	            _this.dispatchEvent(evt, useCapture);
	        }, 0);
	    };
	    /***
	     * 分发事件。
	     * @param evt 事件。
	     * @param useCapture 是否触发capture阶段的处理函数。
	     */
	    Emitter.prototype.dispatchEvent = function (evt, useCapture) {
	        if (evt.propagationStopped) {
	            console.log("evt.propagationStopped = true;");
	            return;
	        }
	        var emitter = this.emitter;
	        if (useCapture) {
	            emitter.emit(toCaptureEventName(evt.type), evt);
	        }
	        else {
	            emitter.emit(evt.type, evt);
	        }
	    };
	    Emitter.prototype.removeAllListeners = function (event) {
	        this.emitter.removeAllListeners(event);
	    };
	    return Emitter;
	}());
	exports.Emitter = Emitter;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var has = Object.prototype.hasOwnProperty;

	//
	// We store our EE objects in a plain object whose properties are event names.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// `~` to make sure that the built-in object properties are not overridden or
	// used as an attack vector.
	// We also assume that `Object.create(null)` is available when the event name
	// is an ES6 Symbol.
	//
	var prefix = typeof Object.create !== 'function' ? '~' : false;

	/**
	 * Representation of a single EventEmitter function.
	 *
	 * @param {Function} fn Event handler to be called.
	 * @param {Mixed} context Context for function execution.
	 * @param {Boolean} [once=false] Only emit once
	 * @api private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Minimal EventEmitter interface that is molded against the Node.js
	 * EventEmitter interface.
	 *
	 * @constructor
	 * @api public
	 */
	function EventEmitter() { /* Nothing to set */ }

	/**
	 * Hold the assigned EventEmitters by name.
	 *
	 * @type {Object}
	 * @private
	 */
	EventEmitter.prototype._events = undefined;

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @api public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var events = this._events
	    , names = []
	    , name;

	  if (!events) return names;

	  for (name in events) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return a list of assigned event listeners.
	 *
	 * @param {String} event The events that should be listed.
	 * @param {Boolean} exists We only need to know if there are listeners.
	 * @returns {Array|Boolean}
	 * @api public
	 */
	EventEmitter.prototype.listeners = function listeners(event, exists) {
	  var evt = prefix ? prefix + event : event
	    , available = this._events && this._events[evt];

	  if (exists) return !!available;
	  if (!available) return [];
	  if (available.fn) return [available.fn];

	  for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	    ee[i] = available[i].fn;
	  }

	  return ee;
	};

	/**
	 * Emit an event to all registered event listeners.
	 *
	 * @param {String} event The name of the event.
	 * @returns {Boolean} Indication if we've emitted an event.
	 * @api public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events || !this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if ('function' === typeof listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Register a new EventListener for the given event.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  var listener = new EE(fn, context || this)
	    , evt = prefix ? prefix + event : event;

	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }

	  return this;
	};

	/**
	 * Add an EventListener that's only called once.
	 *
	 * @param {String} event Name of the event.
	 * @param {Function} fn Callback function.
	 * @param {Mixed} [context=this] The context of the function.
	 * @api public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  var listener = new EE(fn, context || this, true)
	    , evt = prefix ? prefix + event : event;

	  if (!this._events) this._events = prefix ? {} : Object.create(null);
	  if (!this._events[evt]) this._events[evt] = listener;
	  else {
	    if (!this._events[evt].fn) this._events[evt].push(listener);
	    else this._events[evt] = [
	      this._events[evt], listener
	    ];
	  }

	  return this;
	};

	/**
	 * Remove event listeners.
	 *
	 * @param {String} event The event we want to remove.
	 * @param {Function} fn The listener that we need to find.
	 * @param {Mixed} context Only remove listeners matching this context.
	 * @param {Boolean} once Only remove once listeners.
	 * @api public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events || !this._events[evt]) return this;

	  var listeners = this._events[evt]
	    , events = [];

	  if (fn) {
	    if (listeners.fn) {
	      if (
	           listeners.fn !== fn
	        || (once && !listeners.once)
	        || (context && listeners.context !== context)
	      ) {
	        events.push(listeners);
	      }
	    } else {
	      for (var i = 0, length = listeners.length; i < length; i++) {
	        if (
	             listeners[i].fn !== fn
	          || (once && !listeners[i].once)
	          || (context && listeners[i].context !== context)
	        ) {
	          events.push(listeners[i]);
	        }
	      }
	    }
	  }

	  //
	  // Reset the array, or remove it completely if we have no more listeners.
	  //
	  if (events.length) {
	    this._events[evt] = events.length === 1 ? events[0] : events;
	  } else {
	    delete this._events[evt];
	  }

	  return this;
	};

	/**
	 * Remove all listeners or only the listeners for the specified event.
	 *
	 * @param {String} event The event want to remove all listeners for.
	 * @api public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  if (!this._events) return this;

	  if (event) delete this._events[prefix ? prefix + event : event];
	  else this._events = prefix ? {} : Object.create(null);

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// This function doesn't apply anymore.
	//
	EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	  return this;
	};

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Expose the module.
	//
	if (true) {
	  module.exports = EventEmitter;
	}


/***/ },
/* 10 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * 常见事件名称的定义。
	 */
	exports.WHEEL = "qtk-wheel";
	exports.KEYUP = "qtk-keyup";
	exports.KEYDOWN = "qtk-keydown";
	exports.CONFIRM = "confirm";
	exports.CONTEXT_MENU = "qtk-context-menu";
	exports.POINTER_DOWN = "qtk-pointer-down";
	exports.POINTER_MOVE = "qtk-pointer-move";
	exports.POINTER_UP = "qtk-pointer-up";
	exports.POINTER_OUT = "qtk-pointer-out";
	exports.POINTER_OVER = "qtk-pointer-over";
	exports.POINTER_ENTER = "qtk-pointer-enter";
	exports.POINTER_LEAVE = "qtk-pointer-leave";
	exports.CLICK = "qtk-click";
	exports.DBLCLICK = "qtk-dblclick";
	exports.CHANGE = "change";
	exports.PROGRESS = "progress";
	exports.CHANGING = "changing";
	exports.PROP_CHANGE = "prop-change";
	exports.PROP_DELETE = "prop-delete";
	exports.ITEMS_CHANGE = "items-change";
	exports.DISPOSE = "dispose";
	exports.RUN = "run";
	exports.QUIT = "quit";
	exports.SHOW = "show";
	exports.HIDE = "hide";
	exports.MOVE = "move-end";
	exports.MOVING = "moving";
	exports.MOVE_END = "move-end";
	exports.MOVE_BEGIN = "move-begin";
	exports.MOVE_CANCEL = "move-cancel";
	exports.CHOOSE = "choose";
	exports.WINDOW_OPEN = "window-open";
	exports.WINDOW_CLOSE = "window-close";
	exports.WINDOW_CREATE = "window-create";
	exports.WINDOW_CREATED = "window-created";
	exports.INIT = "init";
	exports.FOCUS = "focus";
	exports.BLUR = "blur";
	exports.DEINIT = "deinit";
	exports.RESIZE = "resize";
	exports.RESIZING = "resizing";
	exports.RESIZE_END = "resize-end";
	exports.RESIZE_BEGIN = "resize-begin";
	exports.RESIZE_CANCEL = "resize-cancel";
	exports.READY = "ready";
	exports.TICK = "tick";
	exports.PRETICK = "pretick";
	exports.POSTTICK = "posttick";
	exports.LOAD = "load";
	exports.EXPAND = "expand";
	exports.COLLAPSE = "collapse";
	exports.BEFORE_DRAW = "before-draw";
	exports.AFTER_DRAW = "after-draw";
	exports.BEFORE_APPLY_TRANSFORM = "before-apply-transform";
	exports.AFTER_APPLY_TRANSFORM = "after-apply-transform";
	exports.SORT = "sort";
	exports.SCROLL = "scroll";
	exports.SCROLL_DONE = "scroll-done";
	exports.DRAG = "drag";
	exports.DROP = "drop";
	exports.DRAGEND = "dragend";
	exports.DRAGENTER = "dragenter";
	exports.DRAGEXIT = "dragexit";
	exports.DRAGLEAVE = "dragleave";
	exports.DRAGOVER = "dragover";
	exports.DRAGSTART = "dragstart";
	exports.SHORTCUT = "shortcut";
	exports.INTERACTION_REQUEST = "interaction-request";
	var Event = (function () {
	    function Event() {
	    }
	    Event.prototype.init = function (type, detail) {
	        this._type = type;
	        this._target = null;
	        this._preventedDefault = false;
	        this._propagationStopped = false;
	        return this;
	    };
	    Event.prototype.preventDefault = function () {
	        this._preventedDefault = true;
	    };
	    Object.defineProperty(Event.prototype, "defaultPrevented", {
	        get: function () {
	            return this._preventedDefault;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "propagationStopped", {
	        get: function () {
	            return this._propagationStopped;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Event.prototype.stopPropagation = function () {
	        this._propagationStopped = true;
	    };
	    Object.defineProperty(Event.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this._type = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Event.prototype, "target", {
	        get: function () {
	            return this._target;
	        },
	        set: function (value) {
	            this._target = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Event.prototype.dispose = function () {
	    };
	    return Event;
	}());
	exports.Event = Event;
	;
	var AnyEvent = (function (_super) {
	    __extends(AnyEvent, _super);
	    function AnyEvent() {
	        _super.apply(this, arguments);
	    }
	    AnyEvent.prototype.init = function (type, payload) {
	        _super.prototype.init.call(this, type);
	        this.payload = payload;
	        return this;
	    };
	    AnyEvent.create = function (type, payload) {
	        var e = new AnyEvent();
	        return e.init(type, payload);
	    };
	    return AnyEvent;
	}(Event));
	exports.AnyEvent = AnyEvent;
	;
	/**
	 * View Model请求显示指定的视图或跳转到指定的视图。
	 */
	var InteractionRequestEvent = (function (_super) {
	    __extends(InteractionRequestEvent, _super);
	    function InteractionRequestEvent() {
	        _super.apply(this, arguments);
	    }
	    ;
	    InteractionRequestEvent.prototype.returnResult = function () {
	        if (this._callback) {
	            this._callback(this.payload);
	        }
	    };
	    InteractionRequestEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type);
	        this.name = detail.name;
	        this.payload = detail.payload;
	        this._callback = detail.callback;
	        return this;
	    };
	    InteractionRequestEvent.create = function (type, detail) {
	        var e = new InteractionRequestEvent();
	        return e.init(type, detail);
	    };
	    return InteractionRequestEvent;
	}(Event));
	exports.InteractionRequestEvent = InteractionRequestEvent;
	;
	var InputEvent = (function (_super) {
	    __extends(InputEvent, _super);
	    function InputEvent() {
	        _super.apply(this, arguments);
	    }
	    InputEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type);
	        this.altKey = detail.altKey;
	        this.ctrlKey = detail.ctrlKey;
	        this.shiftKey = detail.shiftKey;
	        this.commandKey = detail.commandKey;
	        return this;
	    };
	    return InputEvent;
	}(Event));
	exports.InputEvent = InputEvent;
	;
	var PointerEvent = (function (_super) {
	    __extends(PointerEvent, _super);
	    function PointerEvent() {
	        _super.apply(this, arguments);
	    }
	    PointerEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type, detail);
	        this.id = detail.id;
	        this.x = detail.x;
	        this.y = detail.y;
	        this.timeStamp = detail.timeStamp;
	        this.pointerDown = detail.pointerDown;
	        this.pointerDownX = detail.pointerDownX;
	        this.pointerDownY = detail.pointerDownY;
	        this.pointerDownTime = detail.pointerDownTime;
	        this.dx = detail.x - detail.pointerDownX;
	        this.dy = detail.y - detail.pointerDownY;
	        return this;
	    };
	    PointerEvent.create = function (type, detail) {
	        var e = new PointerEvent();
	        return e.init(type, detail);
	    };
	    return PointerEvent;
	}(InputEvent));
	exports.PointerEvent = PointerEvent;
	var WheelEvent = (function (_super) {
	    __extends(WheelEvent, _super);
	    function WheelEvent() {
	        _super.apply(this, arguments);
	    }
	    WheelEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type, detail);
	        this.delta = detail.delta;
	        this.timeStamp = detail.timeStamp;
	        return this;
	    };
	    WheelEvent.create = function (detail) {
	        var e = new WheelEvent();
	        return e.init(exports.WHEEL, detail);
	    };
	    return WheelEvent;
	}(InputEvent));
	exports.WheelEvent = WheelEvent;
	var KeyEvent = (function (_super) {
	    __extends(KeyEvent, _super);
	    function KeyEvent() {
	        _super.apply(this, arguments);
	    }
	    KeyEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type, detail);
	        this.keyCode = detail.keyCode;
	        this.timeStamp = detail.timeStamp;
	        return this;
	    };
	    KeyEvent.create = function (type, detail) {
	        var e = new KeyEvent();
	        return e.init(type, detail);
	    };
	    return KeyEvent;
	}(InputEvent));
	exports.KeyEvent = KeyEvent;
	var ShortcutEvent = (function (_super) {
	    __extends(ShortcutEvent, _super);
	    function ShortcutEvent() {
	        _super.apply(this, arguments);
	    }
	    ShortcutEvent.prototype.init = function (type, keys) {
	        _super.prototype.init.call(this, type, {});
	        this.keys = keys;
	        return this;
	    };
	    ShortcutEvent.create = function (type, keys) {
	        var e = new ShortcutEvent();
	        return e.init(type, keys);
	    };
	    return ShortcutEvent;
	}(Event));
	exports.ShortcutEvent = ShortcutEvent;
	var TickEvent = (function (_super) {
	    __extends(TickEvent, _super);
	    function TickEvent() {
	        _super.apply(this, arguments);
	    }
	    TickEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type);
	        this.fps = detail.fps;
	        this.time = detail.time;
	        this.deltaTime = detail.deltaTime;
	        return this;
	    };
	    TickEvent.create = function (type) {
	        var e = new TickEvent();
	        return e.init(type, {});
	    };
	    return TickEvent;
	}(Event));
	exports.TickEvent = TickEvent;
	;
	var ChangeEvent = (function (_super) {
	    __extends(ChangeEvent, _super);
	    function ChangeEvent() {
	        _super.apply(this, arguments);
	    }
	    ChangeEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type);
	        var value = detail.newValue === undefined ? detail.value : detail.newValue;
	        this.value = value;
	        this.newValue = value;
	        this.oldValue = detail.oldValue;
	        return this;
	    };
	    ChangeEvent.create = function () {
	        var e = new ChangeEvent();
	        return e;
	    };
	    return ChangeEvent;
	}(Event));
	exports.ChangeEvent = ChangeEvent;
	;
	var PropChangeEvent = (function (_super) {
	    __extends(PropChangeEvent, _super);
	    function PropChangeEvent() {
	        _super.apply(this, arguments);
	    }
	    PropChangeEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type, detail);
	        this.prop = detail.prop;
	        this.trigger = detail.trigger;
	        return this;
	    };
	    PropChangeEvent.create = function () {
	        var e = new PropChangeEvent();
	        return e;
	    };
	    return PropChangeEvent;
	}(ChangeEvent));
	exports.PropChangeEvent = PropChangeEvent;
	;
	var DataTransfer = (function () {
	    function DataTransfer() {
	        this.data = {};
	        this.dragImage = null;
	        this.dropEffect = "move";
	    }
	    DataTransfer.prototype.clearData = function (format) {
	        if (format) {
	            delete this.data[format];
	        }
	        else {
	            this.data = {};
	        }
	    };
	    DataTransfer.prototype.getData = function (format) {
	        return this.data[format];
	    };
	    DataTransfer.prototype.setData = function (format, data) {
	        this.data[format] = data;
	    };
	    DataTransfer.prototype.setDragImage = function (dragImage) {
	        this.dragImage = dragImage;
	    };
	    return DataTransfer;
	}());
	exports.DataTransfer = DataTransfer;
	;
	var DragEvent = (function (_super) {
	    __extends(DragEvent, _super);
	    function DragEvent() {
	        _super.call(this);
	        this.dataTransfer = new DataTransfer();
	    }
	    DragEvent.prototype.init = function (type, detail) {
	        _super.prototype.init.call(this, type, detail);
	        return this;
	    };
	    Object.defineProperty(DragEvent, "isDragging", {
	        get: function () {
	            return DragEvent._isDragging;
	        },
	        set: function (isDragging) {
	            DragEvent._isDragging = isDragging;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DragEvent.get = function (type) {
	        var e = DragEvent.event;
	        return e.init(type);
	    };
	    DragEvent._isDragging = false;
	    DragEvent.event = new DragEvent();
	    return DragEvent;
	}(Event));
	exports.DragEvent = DragEvent;
	;
	var DrawEvent = (function (_super) {
	    __extends(DrawEvent, _super);
	    function DrawEvent() {
	        _super.apply(this, arguments);
	    }
	    DrawEvent.prototype.reset = function (type, ctx, widget) {
	        _super.prototype.init.call(this, type);
	        this.ctx = ctx;
	        this.widget = widget;
	        return this;
	    };
	    DrawEvent.get = function () {
	        return DrawEvent.event;
	    };
	    DrawEvent.event = new DrawEvent();
	    return DrawEvent;
	}(Event));
	exports.DrawEvent = DrawEvent;
	;
	var ApplyTransformEvent = (function (_super) {
	    __extends(ApplyTransformEvent, _super);
	    function ApplyTransformEvent() {
	        _super.apply(this, arguments);
	    }
	    ApplyTransformEvent.prototype.reset = function (type, ctx, widget) {
	        _super.prototype.init.call(this, type);
	        this.ctx = ctx;
	        this.widget = widget;
	        return this;
	    };
	    ApplyTransformEvent.get = function () {
	        return ApplyTransformEvent.event;
	    };
	    ApplyTransformEvent.event = new ApplyTransformEvent();
	    return ApplyTransformEvent;
	}(Event));
	exports.ApplyTransformEvent = ApplyTransformEvent;
	;
	var ScrollEvent = (function (_super) {
	    __extends(ScrollEvent, _super);
	    function ScrollEvent() {
	        _super.apply(this, arguments);
	    }
	    ScrollEvent.prototype.reset = function (type, widget, offsetX, offsetY) {
	        _super.prototype.init.call(this, type);
	        this.widget = widget;
	        this.offsetX = offsetX;
	        this.offsetY = offsetY;
	        return this;
	    };
	    ScrollEvent.create = function () {
	        return new ScrollEvent();
	    };
	    return ScrollEvent;
	}(Event));
	exports.ScrollEvent = ScrollEvent;
	;
	var WindowEvent = (function (_super) {
	    __extends(WindowEvent, _super);
	    function WindowEvent() {
	        _super.apply(this, arguments);
	    }
	    WindowEvent.prototype.reset = function (type, widget) {
	        _super.prototype.init.call(this, type);
	        this.widget = widget;
	        return this;
	    };
	    WindowEvent.create = function () {
	        return new WindowEvent();
	    };
	    return WindowEvent;
	}(Event));
	exports.WindowEvent = WindowEvent;
	;
	var ProgressEvent = (function (_super) {
	    __extends(ProgressEvent, _super);
	    function ProgressEvent() {
	        _super.apply(this, arguments);
	    }
	    ProgressEvent.prototype.reset = function (progress, total, done) {
	        _super.prototype.init.call(this, exports.PROGRESS);
	        this.done = done;
	        this.total = total;
	        this.progress = progress;
	        return this;
	    };
	    ProgressEvent.create = function () {
	        return new ProgressEvent();
	    };
	    return ProgressEvent;
	}(Event));
	exports.ProgressEvent = ProgressEvent;
	;
	/**
	 * 排序事件
	 */
	var SortEvent = (function (_super) {
	    __extends(SortEvent, _super);
	    function SortEvent() {
	        _super.apply(this, arguments);
	    }
	    SortEvent.prototype.init = function (key, isDec) {
	        _super.prototype.init.call(this, exports.SORT);
	        this.key = key;
	        this.isDec = isDec;
	        return this;
	    };
	    SortEvent.create = function (key, isDec) {
	        var e = new SortEvent();
	        return e.init(key, isDec);
	    };
	    return SortEvent;
	}(Event));
	exports.SortEvent = SortEvent;
	;
	function createAnyEvent(type, payload) {
	    return AnyEvent.create(type, payload);
	}
	exports.createAnyEvent = createAnyEvent;
	var eventsMapToType = {
	    click: exports.CLICK,
	    keydown: exports.KEYDOWN,
	    keyup: exports.KEYUP,
	    confirm: exports.CONFIRM,
	    change: exports.CHANGE,
	    chaning: exports.CHANGING,
	    dblclick: exports.DBLCLICK,
	    pointerup: exports.POINTER_UP,
	    pointermove: exports.POINTER_MOVE,
	    pointerdown: exports.POINTER_DOWN,
	    pointerenter: exports.POINTER_ENTER,
	    pointerleave: exports.POINTER_LEAVE
	};
	function mapToEvent(name) {
	    return eventsMapToType[name];
	}
	exports.mapToEvent = mapToEvent;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/globals/node/index.d.ts"/>
	/// <reference path="../typings/globals/eventemitter3/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	__webpack_require__(12);
	var path = __webpack_require__(13);
	var emitter_1 = __webpack_require__(8);
	var Assets = __webpack_require__(15);
	var Events = __webpack_require__(10);
	(function (ImageDrawType) {
	    /**
	     * 画在填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["DEFAULT"] = 1] = "DEFAULT";
	    /**
	     * 按1比1大小画在指定的矩形区域的中间。
	     */
	    ImageDrawType[ImageDrawType["CENTER"] = 2] = "CENTER";
	    /**
	     * 把图分成3行3列等大小的区域，按9宫格的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["PATCH9"] = 3] = "PATCH9";
	    /**
	     * 把图分成3行1列等大小的区域，按3宫格的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["PATCH3_V"] = 4] = "PATCH3_V";
	    /**
	     * 把图分成1行1列等大小的区域，按3宫格的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["PATCH3_H"] = 5] = "PATCH3_H";
	    /**
	     * 按平铺的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["TILE"] = 6] = "TILE";
	    /**
	     * 按垂直平铺的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["TILE_V"] = 7] = "TILE_V";
	    /**
	     * 按水平平铺的方式填满指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["TILE_H"] = 8] = "TILE_H";
	    /**
	     * 保持比例缩放到指定的矩形区域。
	     */
	    ImageDrawType[ImageDrawType["AUTO"] = 9] = "AUTO";
	    /**
	     * ICON
	     */
	    ImageDrawType[ImageDrawType["ICON"] = 10] = "ICON";
	})(exports.ImageDrawType || (exports.ImageDrawType = {}));
	var ImageDrawType = exports.ImageDrawType;
	/**
	 * 把多个小的图片合并成一张大图，不但可以减少网路请求和GPU的调用次数，还可以提高内存的利用率。
	 * ImageTile用来表示大图中的一张小图，QTK中支持下面几种方式：
	 *
	 * 0.普通图片。如果URL中没有#，则表示一张普通图片，它的位置为(0,0)，大小为图片的整个大小。
	 *
	 * 1.指定子图的位置和大小，#之前的部分是大图的URL，后面是子图的位置和大小信息。
	 *  字母x后紧跟x坐标，字母y后紧跟y坐标，字母w后紧跟宽度，字母h后紧跟高度。
	 *  下面的URL表示图片demo.png中位置为(100,200)，大小为(300,400)的子图。
	 *
	 * ```
	 * https://qtoolkit.github.io/demo.png#x100y200w300h400
	 * ```
	 *
	 * 2.指定图片的行列数以及小图的序数，#之前的部分是大图的URL，后面是行数、列数和序数。
	 *  字母r紧跟行数，字母c后紧跟列数，字母i后紧跟序数。
	 *
	 *  下面的URL表示图片demo.png分成3行3列，序数为0的子图。
	 *
	 * ```
	 * https://qtoolkit.github.io/demo.png#r3c3i0
	 * ```
	 *
	 * 3.用TexturePacker打包的JSON Hash格式。#之前部分是JSON的URL，后面是子图的名称。如：
	 *
	 * ```
	 * https://qtoolkit.github.io/demo.json#demo.png
	 * ```
	 *
	 *
	 */
	var ImageTile = (function (_super) {
	    __extends(ImageTile, _super);
	    function ImageTile(src) {
	        _super.call(this);
	        this.x = 0;
	        this.y = 0;
	        this.w = 0;
	        this.h = 0;
	        this._id = 0;
	        this.img = null;
	        this.src = src;
	        if (src) {
	            this.create(src);
	        }
	    }
	    ImageTile.prototype.toJson = function () {
	        return this.src;
	    };
	    ImageTile.prototype.create = function (src) {
	        var index = src.indexOf('#');
	        if (index < 0) {
	            this.createNormal(src);
	        }
	        else {
	            var base = src.substr(0, index);
	            var ext = src.substr(index + 1);
	            if (ext[0] === 'x') {
	                this.createXYWH(base, ext);
	            }
	            else if (ext[0] === 'r') {
	                this.createRowColIndex(base, ext);
	            }
	            else {
	                this.createTexturePacker(base, ext);
	            }
	        }
	    };
	    ImageTile.prototype.init = function (img, x, y, w, h) {
	        this.x = x;
	        this.y = y;
	        this.w = w;
	        this.h = h;
	        this.img = img;
	        if (ImageTile.onImageLoaded) {
	            ImageTile.onImageLoaded(this);
	        }
	        this.dispatchEventAsync({ type: Events.LOAD, detail: this });
	    };
	    Object.defineProperty(ImageTile.prototype, "complete", {
	        get: function () {
	            return this.img && this.img.width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ImageTile.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        set: function (id) {
	            this._id = id;
	            if (this.img) {
	                this.img.imgID = id;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ImageTile.prototype.createNormal = function (src) {
	        var _this = this;
	        Assets.loadImage(src).then(function (img) {
	            _this.init(img, 0, 0, img.width, img.height);
	        }).catch(function (err) {
	            _this.init(null, 0, 0, 0, 0);
	        });
	    };
	    ImageTile.prototype.createXYWH = function (base, meta) {
	        var _this = this;
	        var xywh = meta.match(/x([0-9]+)y([0-9]+)w([0-9]+)h([0-9]+)/i);
	        var x = parseInt(xywh[1]);
	        var y = parseInt(xywh[2]);
	        var w = parseInt(xywh[3]);
	        var h = parseInt(xywh[4]);
	        Assets.loadImage(base).then(function (img) {
	            _this.init(img, x, y, w, h);
	        }).catch(function (err) {
	            _this.init(null, 0, 0, 0, 0);
	        });
	    };
	    ImageTile.prototype.createRowColIndex = function (base, meta) {
	        var _this = this;
	        var rowcolIndex = meta.match(/r([0-9]+)c([0-9]+)i([0-9]+)/i);
	        var rows = parseInt(rowcolIndex[1]);
	        var cols = parseInt(rowcolIndex[2]);
	        var index = parseInt(rowcolIndex[3]);
	        Assets.loadImage(base).then(function (img) {
	            var w = img.width / cols;
	            var h = img.height / rows;
	            var r = (index / cols) >> 0;
	            var c = index % cols;
	            var x = c * w;
	            var y = r * h;
	            _this.init(img, x, y, w, h);
	        }).catch(function (err) {
	            _this.init(null, 0, 0, 0, 0);
	        });
	    };
	    ImageTile.prototype.createTexturePacker = function (jsonURL, name) {
	        var _this = this;
	        Assets.loadJSON(jsonURL).then(function (json) {
	            var info = json.frames[name];
	            var imgSRC = path.dirname(jsonURL) + "/" + (json.file || json.meta.image);
	            Assets.loadImage(imgSRC).then(function (img) {
	                var rect = info.frame || info;
	                var x = rect.x;
	                var y = rect.y;
	                var w = rect.w;
	                var h = rect.h;
	                if (!info.trimmed && !info.rotate) {
	                    _this.init(img, x, y, w, h);
	                }
	                else {
	                    console.log("Not support trimmed mode or rotated mode");
	                    _this.init(null, 0, 0, 0, 0);
	                }
	            }).catch(function (err) {
	                _this.init(null, 0, 0, 0, 0);
	            });
	        }).catch(function (err) {
	            _this.init(null, 0, 0, 0, 0);
	        });
	    };
	    ImageTile.prototype.drawDefault = function (ctx, dx, dy, dw, dh) {
	        ctx.drawImage(this.img, this.x, this.y, this.w, this.h, dx, dy, dw, dh);
	    };
	    ImageTile.prototype.drawIcon = function (ctx, dx, dy, dw, dh) {
	        var cx = dx + (dw >> 1);
	        var cy = dy + (dh >> 1);
	        var x = dx + ((dw - this.w) >> 1);
	        var y = dy + ((dh - this.h) >> 1);
	        ctx.save();
	        ctx.translate(cx, cy);
	        ctx.scale(ImageTile.scale, ImageTile.scale);
	        ctx.translate(-cx, -cy);
	        ctx.drawImage(this.img, this.x, this.y, this.w, this.h, x, y, this.w, this.h);
	        ctx.restore();
	    };
	    ImageTile.prototype.drawCenter = function (ctx, dx, dy, dw, dh) {
	        var x = dx + ((dw - this.w) >> 1);
	        var y = dy + ((dh - this.h) >> 1);
	        ctx.drawImage(this.img, this.x, this.y, this.w, this.h, x, y, this.w, this.h);
	    };
	    ImageTile.prototype.drawAuto = function (ctx, dx, dy, dw, dh) {
	        var x = dx;
	        var y = dy;
	        var w = 0;
	        var h = 0;
	        var scaleX = dw / this.w;
	        var scaleY = dh / this.h;
	        if (scaleX >= scaleY) {
	            h = dh;
	            w = scaleY * this.w;
	            x += ((dw - w) >> 1);
	        }
	        else {
	            w = dw;
	            h = scaleX * this.h;
	            y += ((dh - h) >> 1);
	        }
	        ctx.drawImage(this.img, this.x, this.y, this.w, this.h, x, y, w, h);
	    };
	    ImageTile.prototype.draw3PatchH = function (ctx, dx, dy, dw, dh) {
	        var w = Math.min(dw >> 1, (this.w / 3) >> 0);
	        ctx.drawImage(this.img, this.x, this.y, w, this.h, dx, dy, w, dh);
	        ctx.drawImage(this.img, this.x + this.w - w, this.y, w, this.h, dx + dw - w, dy, w, dh);
	        var cw = dw - w - w;
	        if (cw > 0) {
	            ctx.drawImage(this.img, this.x + w, this.y, w, this.h, dx + w, dy, cw, dh);
	        }
	    };
	    ImageTile.prototype.draw9Patch = function (ctx, dx, dy, dw, dh) {
	        var w = Math.min(dw >> 1, (this.w / 3) >> 0);
	        var h = Math.min(dh >> 1, (this.h / 3) >> 0);
	        var cw = dw - w - w;
	        var ch = dh - h - h;
	        var rightSX = this.x + this.w - w;
	        var rightDX = dx + dw - w;
	        var bottomSY = this.y + this.h - h;
	        var bottomDY = dy + dh - h;
	        ctx.drawImage(this.img, this.x, this.y, w, h, dx, dy, w, h);
	        ctx.drawImage(this.img, rightSX, this.y, w, h, rightDX, dy, w, h);
	        if (cw > 0) {
	            ctx.drawImage(this.img, this.x + w, this.y, w, h, dx + w, dy, cw, h);
	        }
	        ctx.drawImage(this.img, this.x, this.y + h, w, h, dx, dy + h, w, ch);
	        ctx.drawImage(this.img, rightSX, this.y + h, w, h, rightDX, dy + h, w, ch);
	        if (cw > 0 && ch > 0) {
	            ctx.drawImage(this.img, this.x + w, this.y + h, w, h, dx + w, dy + h, cw, ch);
	        }
	        ctx.drawImage(this.img, this.x, bottomSY, w, h, dx, bottomDY, w, h);
	        ctx.drawImage(this.img, rightSX, bottomSY, w, h, rightDX, bottomDY, w, h);
	        if (cw > 0) {
	            ctx.drawImage(this.img, this.x + w, bottomSY, w, h, dx + w, bottomDY, cw, h);
	        }
	    };
	    ImageTile.prototype.draw3PatchV = function (ctx, dx, dy, dw, dh) {
	        var h = Math.min(dh >> 1, (this.h / 3) >> 0);
	        ctx.drawImage(this.img, this.x, this.y, this.w, h, dx, dy, dw, h);
	        ctx.drawImage(this.img, this.x, this.y + this.h - h, this.w, h, dx, dy + dh - h, dw, h);
	        var ch = dh - h - h;
	        if (ch > 0) {
	            ctx.drawImage(this.img, this.x, this.y + h, this.w, h, dx, dy + h, dw, ch);
	        }
	    };
	    ImageTile.prototype.drawTileH = function (ctx, dx, dy, dw, dh) {
	        var x = dx;
	        var w = 0;
	        var remainW = dw;
	        while (remainW > 0) {
	            w = Math.min(this.w, remainW);
	            ctx.drawImage(this.img, this.x, this.y, w, this.h, x, dy, w, dh);
	            x += w;
	            remainW -= w;
	        }
	    };
	    ImageTile.prototype.drawTileV = function (ctx, dx, dy, dw, dh) {
	        var y = dy;
	        var h = 0;
	        var remainH = dh;
	        while (remainH > 0) {
	            h = Math.min(this.h, remainH);
	            ctx.drawImage(this.img, this.x, this.y, this.w, h, dx, y, dw, h);
	            y += h;
	            remainH -= h;
	        }
	    };
	    ImageTile.prototype.drawTile = function (ctx, dx, dy, dw, dh) {
	        var x = dx;
	        var y = dy;
	        var w = 0;
	        var h = 0;
	        var remainW = dw;
	        var remainH = dh;
	        while (remainH > 0) {
	            h = Math.min(this.h, remainH);
	            while (remainW > 0) {
	                w = Math.min(this.w, remainW);
	                ctx.drawImage(this.img, this.x, this.y, w, h, x, y, w, h);
	                x += w;
	                remainW -= w;
	            }
	            x = 0;
	            remainW = dw;
	            y += h;
	            remainH -= h;
	        }
	    };
	    ImageTile.prototype.draw = function (ctx, type, dx, dy, dw, dh) {
	        if (ctx && this.complete) {
	            if (type === ImageDrawType.CENTER) {
	                this.drawCenter(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.AUTO) {
	                this.drawAuto(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.PATCH3_H) {
	                this.draw3PatchH(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.PATCH3_V) {
	                this.draw3PatchV(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.PATCH9) {
	                this.draw9Patch(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.TILE_H) {
	                this.drawTileH(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.TILE_V) {
	                this.drawTileV(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.TILE) {
	                this.drawTile(ctx, dx, dy, dw, dh);
	            }
	            else if (type === ImageDrawType.ICON) {
	                this.drawIcon(ctx, dx, dy, dw, dh);
	            }
	            else {
	                this.drawDefault(ctx, dx, dy, dw, dh);
	            }
	        }
	    };
	    ImageTile.init = function (density, scale, onImageLoaded) {
	        ImageTile.scale = scale;
	        ImageTile.density = density;
	        ImageTile.onImageLoaded = onImageLoaded;
	    };
	    ImageTile.fixURL = function (src) {
	        var ret = src.replace("@density", "x" + ImageTile.density);
	        return ret;
	    };
	    ImageTile.create = function (_src, onDone) {
	        var src = ImageTile.fixURL(_src);
	        var it = ImageTile.cache[src];
	        if (!it) {
	            it = new ImageTile(src);
	            ImageTile.cache[src] = it;
	        }
	        if (onDone) {
	            if (it.complete) {
	                setTimeout(onDone, 0);
	            }
	            else {
	                it.once(Events.LOAD, onDone);
	            }
	        }
	        return it;
	    };
	    ImageTile.scale = 1;
	    ImageTile.density = 1;
	    ImageTile.cache = {};
	    return ImageTile;
	}(emitter_1.Emitter));
	exports.ImageTile = ImageTile;
	;


/***/ },
/* 12 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';

	  if (self.fetch) {
	    return
	  }

	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }

	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }

	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }

	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }

	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }

	    return iterator
	  }

	  function Headers(headers) {
	    this.map = {}

	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)

	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }

	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var list = this.map[name]
	    if (!list) {
	      list = []
	      this.map[name] = list
	    }
	    list.push(value)
	  }

	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }

	  Headers.prototype.get = function(name) {
	    var values = this.map[normalizeName(name)]
	    return values ? values[0] : null
	  }

	  Headers.prototype.getAll = function(name) {
	    return this.map[normalizeName(name)] || []
	  }

	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }

	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = [normalizeValue(value)]
	  }

	  Headers.prototype.forEach = function(callback, thisArg) {
	    Object.getOwnPropertyNames(this.map).forEach(function(name) {
	      this.map[name].forEach(function(value) {
	        callback.call(thisArg, value, name, this)
	      }, this)
	    }, this)
	  }

	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }

	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }

	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }

	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }

	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }

	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    reader.readAsArrayBuffer(blob)
	    return fileReaderReady(reader)
	  }

	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    reader.readAsText(blob)
	    return fileReaderReady(reader)
	  }

	  function Body() {
	    this.bodyUsed = false

	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (!body) {
	        this._bodyText = ''
	      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {
	        // Only support ArrayBuffers for POST method.
	        // Receiving ArrayBuffers happens via Blobs, instead.
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }

	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }

	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }

	      this.arrayBuffer = function() {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }

	      this.text = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }

	        if (this._bodyBlob) {
	          return readBlobAsText(this._bodyBlob)
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as text')
	        } else {
	          return Promise.resolve(this._bodyText)
	        }
	      }
	    } else {
	      this.text = function() {
	        var rejected = consumed(this)
	        return rejected ? rejected : Promise.resolve(this._bodyText)
	      }
	    }

	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }

	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }

	    return this
	  }

	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }

	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	    if (Request.prototype.isPrototypeOf(input)) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = input
	    }

	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null

	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }

	  Request.prototype.clone = function() {
	    return new Request(this)
	  }

	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }

	  function headers(xhr) {
	    var head = new Headers()
	    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\n')
	    pairs.forEach(function(header) {
	      var split = header.trim().split(':')
	      var key = split.shift().trim()
	      var value = split.join(':').trim()
	      head.append(key, value)
	    })
	    return head
	  }

	  Body.call(Request.prototype)

	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }

	    this.type = 'default'
	    this.status = options.status
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = options.statusText
	    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }

	  Body.call(Response.prototype)

	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }

	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }

	  var redirectStatuses = [301, 302, 303, 307, 308]

	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }

	    return new Response(null, {status: status, headers: {location: url}})
	  }

	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response

	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request
	      if (Request.prototype.isPrototypeOf(input) && !init) {
	        request = input
	      } else {
	        request = new Request(input, init)
	      }

	      var xhr = new XMLHttpRequest()

	      function responseURL() {
	        if ('responseURL' in xhr) {
	          return xhr.responseURL
	        }

	        // Avoid security warnings on getResponseHeader when not allowed by CORS
	        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
	          return xhr.getResponseHeader('X-Request-URL')
	        }

	        return
	      }

	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: headers(xhr),
	          url: responseURL()
	        }
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }

	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }

	      xhr.open(request.method, request.url, true)

	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }

	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }

	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })

	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/globals/node/index.d.ts"/>
	/// <reference path="../typings/globals/eventemitter3/index.d.ts"/>
	/// <reference path="../typings/globals/whatwg-fetch/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	__webpack_require__(12);
	var path = __webpack_require__(13);
	var Events = __webpack_require__(10);
	var emitter_1 = __webpack_require__(8);
	exports.AUDIO = "audio";
	exports.IMAGE = "image";
	exports.BLOB = "blob";
	exports.JSON = "json";
	exports.TEXT = "text";
	;
	var assetsCache = {};
	function load(url, type) {
	    var item = assetsCache[url];
	    if (!item) {
	        item = fetch(url).then(function ok(response) {
	            if (response.status !== 200) {
	                return Promise.reject(null);
	            }
	            if (type === exports.JSON) {
	                return response.json();
	            }
	            else if (type === exports.BLOB) {
	                return response.blob();
	            }
	            else {
	                return response.text();
	            }
	        }, function fail(err) {
	            return null;
	        });
	        assetsCache[url] = item;
	    }
	    return item;
	}
	/**
	 * Load JSON Data and Cache It.
	 * @param url URL Of JSON.
	 * @returns Promise
	 */
	function loadJSON(url) {
	    return load(url, exports.JSON);
	}
	exports.loadJSON = loadJSON;
	/**
	 * Load Text Data and Cache It.
	 * @param url URL Of Text.
	 * @returns Promise
	 */
	function loadText(url) {
	    return load(url, exports.TEXT);
	}
	exports.loadText = loadText;
	/**
	 * Load Blob Data and Cache It.
	 * @param url URL Of Blob.
	 * @returns Promise
	 */
	function loadBlob(url) {
	    return load(url, exports.BLOB);
	}
	exports.loadBlob = loadBlob;
	/**
	 * Load Image and Cache It.
	 * @param url URL Of Image.
	 * @returns Promise
	 */
	function loadImage(url) {
	    var item = assetsCache[url];
	    if (!item) {
	        item = new Promise(function (resolve, reject) {
	            var image = new Image();
	            image.onload = function () {
	                resolve(image);
	            };
	            image.onerror = function (err) {
	                reject(err);
	            };
	            image.src = url;
	        });
	    }
	    assetsCache[url] = item;
	    return item;
	}
	exports.loadImage = loadImage;
	/**
	 * Load Script
	 * @param url URL Of Script.
	 * @returns Promise
	 */
	function loadScript(url) {
	    var item = new Promise(function (resolve, reject) {
	        var node = document.head ? document.head : document.body;
	        var script = document.createElement("script");
	        script.onload = function () {
	            resolve(script);
	        };
	        script.onerror = function (err) {
	            reject(err);
	        };
	        script.src = url;
	        node.appendChild(script);
	    });
	    return item;
	}
	exports.loadScript = loadScript;
	/**
	 * Load Audio and Cache It.
	 * @param url URL Of Audio.
	 * @returns Promise
	 */
	function loadAudio(url) {
	    var item = assetsCache[url];
	    if (!item) {
	        item = new Promise(function (resolve, reject) {
	            var audio = new Audio();
	            audio.onload = function () {
	                resolve(audio);
	            };
	            audio.onerror = function (err) {
	                reject(err);
	            };
	            audio.src = url;
	        });
	    }
	    assetsCache[url] = item;
	    return item;
	}
	exports.loadAudio = loadAudio;
	/**
	 * Clear asset cache
	 * @param url URL Of asset.
	 */
	function clear(url) {
	    delete assetsCache[url];
	}
	exports.clear = clear;
	/**
	 * Present one asset.
	 */
	var Item = (function () {
	    function Item(src, type) {
	        if (!type) {
	            var name = path.extname(src).toLowerCase();
	            if (name === ".json") {
	                type = exports.JSON;
	            }
	            else if (name === ".jpg" || name === ".png" || name === ".svg") {
	                type = exports.IMAGE;
	            }
	            else if (type === ".txt") {
	                type = exports.TEXT;
	            }
	            else {
	                type = exports.BLOB;
	            }
	        }
	        this.src = src;
	        this.type = type;
	    }
	    Item.create = function (src, type) {
	        return new Item(src, type);
	    };
	    return Item;
	}());
	exports.Item = Item;
	;
	/**
	 * Assets group to preload
	 * Example:
	 * ```
	 *  var items = [
	 *    {type:qtk.Assets.TEXT, src:"http://localhost:9876/base/www/test.txt"},
	 *    {type:qtk.Assets.JSON, src:"http://localhost:9876/base/www/test.json"},
	 *    {type:qtk.Assets.IMAGE, src:"http://localhost:9876/base/www/test.jpg"},
	 *    {type:qtk.Assets.BLOB, src:"http://localhost:9876/base/www/test.blob"}
	 * ];
	 * var assets = new qtk.Assets.Group(items);
	 * assets.onProgress(function(info) {
	 *   console.log(info.loaded + "/" + info.total);
	 * });
	 * ```
	 */
	var Group = (function (_super) {
	    __extends(Group, _super);
	    function Group(items, onProgress) {
	        _super.call(this);
	        this.event = {
	            total: 0,
	            loaded: 0,
	            type: Events.PROGRESS
	        };
	        var i = 0;
	        var n = items.length;
	        this.loaded = 0;
	        this.total = items.length;
	        this.event.total = this.total;
	        if (onProgress) {
	            this.onProgress(onProgress);
	        }
	        items.forEach(this.loadOne.bind(this));
	    }
	    /**
	     * Register of a progress callback function
	     */
	    Group.prototype.onProgress = function (callback) {
	        this.on(Events.PROGRESS, callback);
	    };
	    Group.prototype.addLoaded = function () {
	        this.loaded++;
	        this.event.loaded = this.loaded;
	        this.dispatchEvent(this.event);
	    };
	    Group.prototype.loadOne = function (item) {
	        var src = item.src;
	        var type = item.type;
	        var addLoaded = this.addLoaded.bind(this);
	        var name = path.extname(src).toLowerCase();
	        if (type === exports.JSON || (!type && name === '.json')) {
	            loadJSON(src).then(addLoaded, addLoaded);
	        }
	        else if (type === exports.IMAGE || (!type && (name === ".jpg" || name === ".png" || name === ".svg"))) {
	            loadImage(src).then(addLoaded, addLoaded);
	        }
	        else if (type === exports.BLOB) {
	            loadBlob(src).then(addLoaded, addLoaded);
	        }
	        else {
	            loadText(src).then(addLoaded, addLoaded);
	        }
	    };
	    Group.create = function (items, onProgress) {
	        return new Group(items, onProgress);
	    };
	    Group.preload = function (assetsURLS, onProgress) {
	        var arr = assetsURLS.map(function (iter) {
	            return Item.create(iter);
	        });
	        return Group.create(arr, onProgress);
	    };
	    return Group;
	}(emitter_1.Emitter));
	exports.Group = Group;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var point_1 = __webpack_require__(6);
	/**
	 * 2维矩阵变换
	 */
	var Matrix = (function () {
	    function Matrix() {
	        this.data = new Float32Array(6);
	        this.identity();
	    }
	    Matrix.prototype.identity = function () {
	        var data = this.data;
	        data[0] = 1;
	        data[1] = 0;
	        data[2] = 0;
	        data[3] = 1;
	        data[4] = 0;
	        data[5] = 0;
	        return this;
	    };
	    Matrix.prototype.clone = function () {
	        var other = new Matrix();
	        var data = other.data;
	        var src = this.data;
	        data[0] = src[0];
	        data[1] = src[1];
	        data[2] = src[2];
	        data[3] = src[3];
	        data[4] = src[4];
	        data[5] = src[5];
	        return other;
	    };
	    Matrix.prototype.set = function (a, b, c, d, tx, ty) {
	        var data = this.data;
	        data[0] = a;
	        data[1] = b;
	        data[2] = c;
	        data[3] = d;
	        data[4] = tx;
	        data[5] = ty;
	        return this;
	    };
	    Matrix.prototype.rotate = function (rad) {
	        var a = this.data;
	        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
	        a[0] = a0 * c + a2 * s;
	        a[1] = a1 * c + a3 * s;
	        a[2] = a0 * -s + a2 * c;
	        a[3] = a1 * -s + a3 * c;
	        return this;
	    };
	    Matrix.prototype.scale = function (sx, sy) {
	        var a = this.data;
	        a[0] *= sx;
	        a[1] *= sx;
	        a[2] *= sy;
	        a[3] *= sy;
	        return this;
	    };
	    Matrix.prototype.translate = function (dx, dy) {
	        var a = this.data;
	        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
	        a[4] = a0 * dx + a2 * dy + a4;
	        a[5] = a1 * dx + a3 * dy + a5;
	        return this;
	    };
	    ;
	    Matrix.prototype.transformPoint = function (x, y, out) {
	        var p = out || point_1.Point.create();
	        var a = this.data;
	        p.x = a[0] * x + a[2] * y + a[4];
	        p.y = a[1] * x + a[3] * y + a[5];
	        return p;
	    };
	    ;
	    Matrix.prototype.equal = function (other) {
	        var a = this.data;
	        var b = other.data;
	        return a[0] === b[0]
	            && a[1] === b[1]
	            && a[2] === b[2]
	            && a[3] === b[3]
	            && a[4] === b[4]
	            && a[5] === b[5];
	    };
	    Matrix.prototype.invert = function () {
	        var a = this.data;
	        var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5];
	        var det = aa * ad - ab * ac;
	        if (!det) {
	            return null;
	        }
	        det = 1.0 / det;
	        var newMatrix = Matrix.create();
	        var out = newMatrix.data;
	        out[0] = ad * det;
	        out[1] = -ab * det;
	        out[2] = -ac * det;
	        out[3] = aa * det;
	        out[4] = (ac * aty - ad * atx) * det;
	        out[5] = (ab * atx - aa * aty) * det;
	        return newMatrix;
	    };
	    ;
	    Matrix.prototype.toString = function () {
	        var ret = Array.prototype.map.call(this.data, function (iter) {
	            return iter.toFixed(2);
	        });
	        return JSON.stringify(ret);
	    };
	    Matrix.prototype.dispose = function () {
	        this.identity();
	        Matrix.cache.push(this);
	    };
	    Matrix.create = function () {
	        if (Matrix.cache.length) {
	            return Matrix.cache.pop();
	        }
	        return new Matrix();
	    };
	    Matrix.cache = [];
	    return Matrix;
	}());
	exports.Matrix = Matrix;
	;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var emitter_1 = __webpack_require__(8);
	var Events = __webpack_require__(10);
	var event_detail_1 = __webpack_require__(18);
	var inputEventAdapter = __webpack_require__(19);
	/**
	 * Canvas是对HTMLCanvasElement的包装，主要解决两个问题：
	 *
	 * 1.对指针事件坐标的转换，让绝对坐标变成相对与Canvas左上角的坐标。
	 *
	 * 2.支持高清屏。为了避免在高清屏上图片模糊，让Canvas的宽高乘以devicePixelRatio, Canvas的style.width/style.height仍然用实际的宽高，getContext时预先将矩阵乘以devicePixelRatio，从而让使用者无需关心当前屏幕的类型。
	 *
	 */
	var Canvas = (function (_super) {
	    __extends(Canvas, _super);
	    function Canvas(x, y, w, h, devicePixelRatio, offline) {
	        _super.call(this);
	        this._id = "canvas";
	        this._x = x || 0;
	        this._y = y || 0;
	        this._w = w || 0;
	        this._h = h || 0;
	        this._offline = offline || false;
	        this._devicePixelRatio = devicePixelRatio || 1;
	        var me = this;
	        this.onPointerEvent = function (evt) {
	            me.transformXY(evt.detail);
	            var e = Events.PointerEvent.create(evt.type, evt.detail);
	            me.dispatchEvent(e);
	            e.dispose();
	        };
	        this.onKeyEvent = function (evt) {
	            var e = Events.KeyEvent.create(evt.type, evt.detail);
	            me.dispatchEvent(e);
	            e.dispose();
	        };
	        this.onWheelEvent = function (evt) {
	            var e = Events.WheelEvent.create(evt.detail);
	            me.dispatchEvent(e);
	            e.dispose();
	        };
	    }
	    Canvas.prototype.transformXY = function (detail) {
	        detail.x -= this.x;
	        detail.y -= this.y;
	        detail.pointerDownX -= this.x;
	        detail.pointerDownY -= this.y;
	    };
	    Object.defineProperty(Canvas.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        set: function (value) {
	            this._id = value;
	            if (this.canvas) {
	                this.canvas.id = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "x", {
	        get: function () {
	            return this._x;
	        },
	        set: function (value) {
	            this._x = value;
	            this.moveCanvas(this.canvas);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "y", {
	        get: function () {
	            return this._y;
	        },
	        set: function (value) {
	            this._y = value;
	            this.moveCanvas(this.canvas);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "w", {
	        get: function () {
	            return this._w;
	        },
	        set: function (value) {
	            this._w = value;
	            this.resizeCanvas(this.canvas);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "h", {
	        get: function () {
	            return this._h;
	        },
	        set: function (value) {
	            this._h = value;
	            this.resizeCanvas(this.canvas);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "width", {
	        get: function () {
	            return this._w;
	        },
	        set: function (value) {
	            this.w = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Canvas.prototype, "height", {
	        get: function () {
	            return this._h;
	        },
	        set: function (value) {
	            this.h = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Canvas.prototype.grabKey = function () {
	        inputEventAdapter.grabKey(this.canvas);
	    };
	    Canvas.prototype.ungrabKey = function () {
	        inputEventAdapter.ungrabKey(this.canvas);
	    };
	    Canvas.prototype.grab = function () {
	        inputEventAdapter.grab(this.canvas);
	    };
	    Canvas.prototype.ungrab = function () {
	        inputEventAdapter.ungrab(this.canvas);
	    };
	    Canvas.prototype.moveCanvas = function (canvas) {
	        if (canvas) {
	            var x = this._x;
	            var y = this._y;
	            canvas.style.position = "absolute";
	            canvas.style.left = x + "px";
	            canvas.style.top = y + "px";
	        }
	    };
	    Canvas.prototype.resizeCanvas = function (canvas) {
	        if (canvas) {
	            var w = this._w;
	            var h = this._h;
	            canvas.width = w * this._devicePixelRatio;
	            canvas.style.width = w + "px";
	            canvas.height = h * this._devicePixelRatio;
	            canvas.style.height = h + "px";
	        }
	    };
	    Object.defineProperty(Canvas.prototype, "z", {
	        set: function (value) {
	            this._z = value;
	            this.canvas.style.zIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Canvas.prototype.dispose = function () {
	        var canvas = this.canvas;
	        if (!this._offline) {
	            document.body.removeChild(canvas);
	        }
	        canvas.removeEventListener(Events.POINTER_DOWN, this.onPointerEvent);
	        canvas.removeEventListener(Events.POINTER_MOVE, this.onPointerEvent);
	        canvas.removeEventListener(Events.POINTER_UP, this.onPointerEvent);
	        canvas.removeEventListener(Events.CLICK, this.onPointerEvent);
	        canvas.removeEventListener(Events.WHEEL, this.onWheelEvent);
	        canvas.removeEventListener(Events.KEYDOWN, this.onKeyEvent);
	        canvas.removeEventListener(Events.KEYUP, this.onKeyEvent);
	    };
	    Canvas.prototype.createCanvas = function () {
	        var canvas = document.createElement("canvas");
	        canvas.id = this._id;
	        this.moveCanvas(canvas);
	        this.resizeCanvas(canvas);
	        if (!this._offline) {
	            document.body.appendChild(canvas);
	        }
	        var me = this;
	        canvas.addEventListener(Events.POINTER_DOWN, this.onPointerEvent);
	        canvas.addEventListener(Events.POINTER_MOVE, this.onPointerEvent);
	        canvas.addEventListener(Events.POINTER_UP, this.onPointerEvent);
	        canvas.addEventListener(Events.CLICK, this.onPointerEvent);
	        canvas.addEventListener(Events.DBLCLICK, this.onPointerEvent);
	        canvas.addEventListener(Events.WHEEL, this.onWheelEvent);
	        canvas.addEventListener(Events.KEYDOWN, this.onKeyEvent);
	        canvas.addEventListener(Events.KEYUP, this.onKeyEvent);
	        canvas.oncontextmenu = function (evt) {
	            evt.preventDefault();
	            var detail = event_detail_1.PointerEventDetail.create(evt.which, evt.pageX, evt.pageY, evt.altKey, evt.ctrlKey, evt.shiftKey, false);
	            me.onPointerEvent({ type: Events.CONTEXT_MENU, detail: detail });
	            detail.dispose();
	        };
	        return canvas;
	    };
	    Canvas.prototype.ensureCanvas = function () {
	        if (!this.canvas) {
	            this.canvas = this.createCanvas();
	        }
	    };
	    Canvas.prototype.getContext = function (type) {
	        if (!this.canvas) {
	            this.canvas = this.createCanvas();
	        }
	        var ctx = this.canvas.getContext("2d");
	        ctx.setTransform(1, 0, 0, 1, 0, 0);
	        ctx.scale(this._devicePixelRatio, this._devicePixelRatio);
	        return ctx;
	    };
	    Canvas.create = function (x, y, w, h, devicePixelRatio, offline) {
	        return new Canvas(x, y, w, h, devicePixelRatio, offline);
	    };
	    return Canvas;
	}(emitter_1.Emitter));
	exports.Canvas = Canvas;


/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * 输入事件的详细信息。
	 */
	var InputEventDetail = (function () {
	    function InputEventDetail(altKey, ctrlKey, shiftKey, commandKey) {
	        this.altKey = altKey;
	        this.ctrlKey = ctrlKey;
	        this.shiftKey = shiftKey;
	        this.commandKey = commandKey;
	    }
	    return InputEventDetail;
	}());
	exports.InputEventDetail = InputEventDetail;
	;
	/**
	 * 指针事件的详细信息。
	 */
	var PointerEventDetail = (function (_super) {
	    __extends(PointerEventDetail, _super);
	    function PointerEventDetail(id, x, y, altKey, ctrlKey, shiftKey, commandKey) {
	        _super.call(this, altKey, ctrlKey, shiftKey, commandKey);
	        this.id = id;
	        this.x = x;
	        this.y = y;
	        this.pointerDown = false;
	        this.pointerDownX = 0;
	        this.pointerDownY = 0;
	        this.pointerDownTime = 0;
	    }
	    /**
	     * 设置指针按下的状态。
	     */
	    PointerEventDetail.prototype.setPointerDown = function (pointerDown, x, y, t) {
	        this.pointerDownX = x;
	        this.pointerDownY = y;
	        this.pointerDownTime = t;
	        this.pointerDown = pointerDown;
	    };
	    PointerEventDetail.prototype.dispose = function () {
	    };
	    PointerEventDetail.create = function (id, x, y, altKey, ctrlKey, shiftKey, commandKey) {
	        var detail = new PointerEventDetail(id, x, y, altKey, ctrlKey, shiftKey, commandKey);
	        return detail;
	    };
	    return PointerEventDetail;
	}(InputEventDetail));
	exports.PointerEventDetail = PointerEventDetail;
	;
	/**
	 * 按键事件的详细信息。
	 */
	var KeyEventDetail = (function (_super) {
	    __extends(KeyEventDetail, _super);
	    function KeyEventDetail(keyCode, altKey, ctrlKey, shiftKey, commandKey) {
	        _super.call(this, altKey, ctrlKey, shiftKey, commandKey);
	        this.keyCode = keyCode;
	    }
	    KeyEventDetail.prototype.dispose = function () {
	    };
	    KeyEventDetail.create = function (keyCode, altKey, ctrlKey, shiftKey, commandKey) {
	        var detail = new KeyEventDetail(keyCode, altKey, ctrlKey, shiftKey, commandKey);
	        return detail;
	    };
	    return KeyEventDetail;
	}(InputEventDetail));
	exports.KeyEventDetail = KeyEventDetail;
	;
	/**
	 * 滚轮事件的详细信息。
	 */
	var WheelEventDetail = (function (_super) {
	    __extends(WheelEventDetail, _super);
	    function WheelEventDetail(delta, altKey, ctrlKey, shiftKey, commandKey) {
	        _super.call(this, altKey, ctrlKey, shiftKey, commandKey);
	        this.delta = delta;
	    }
	    WheelEventDetail.prototype.dispose = function () {
	    };
	    WheelEventDetail.create = function (delta, altKey, ctrlKey, shiftKey, commandKey) {
	        var detail = new WheelEventDetail(delta, altKey, ctrlKey, shiftKey, commandKey);
	        return detail;
	    };
	    return WheelEventDetail;
	}(InputEventDetail));
	exports.WheelEventDetail = WheelEventDetail;
	;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Events = __webpack_require__(10);
	var key_event_1 = __webpack_require__(20);
	var emitter_1 = __webpack_require__(8);
	var event_detail_1 = __webpack_require__(18);
	var grabs = [];
	var keyGrabs = [];
	var lastDetail;
	var ctrlKey = false;
	var altKey = false;
	var shiftKey = false;
	var commandKey = false;
	var pointerDeviceType;
	var pointerDown = false;
	var pointerDownX = 0;
	var pointerDownY = 0;
	var pointerDownTime = 0;
	var pointerMoved = false;
	var globalInputEmitter = new emitter_1.Emitter();
	function dispatchEvent(target, type, detail) {
	    var realTarget = target;
	    if (grabs.length) {
	        realTarget = grabs[grabs.length - 1];
	    }
	    else if (keyGrabs.length) {
	        if ((type === Events.KEYDOWN || type === Events.KEYUP) && target.tagName === "BODY") {
	            realTarget = keyGrabs[keyGrabs.length - 1];
	        }
	    }
	    var event = new CustomEvent(type, { detail: detail });
	    globalInputEmitter.dispatchEvent(event);
	    realTarget.dispatchEvent(event);
	}
	function getPointerDetail(e, timeStamp) {
	    if (e) {
	        var id = e.identifier || 0;
	        var x = Math.max(e.pageX || 0, e.x || e.clientX);
	        var y = Math.max(e.pageY || 0, e.y || e.clientY);
	        lastDetail = event_detail_1.PointerEventDetail.create(id, x, y, altKey, ctrlKey, shiftKey, commandKey);
	        lastDetail.timeStamp = e.timeStamp || timeStamp;
	    }
	    return lastDetail;
	}
	function dispatchPointerEvent(type, target, detail) {
	    if (type === Events.POINTER_DOWN) {
	        pointerDown = true;
	        pointerDownX = detail.x;
	        pointerDownY = detail.y;
	        pointerDownTime = Date.now();
	        pointerMoved = false;
	    }
	    else if (type === Events.POINTER_UP) {
	        detail.setPointerDown(pointerDown, pointerDownX, pointerDownY, pointerDownTime);
	        pointerDown = false;
	        pointerMoved = false;
	        if (!pointerMoved) {
	            dispatchEvent(target, Events.CLICK, detail);
	        }
	    }
	    else {
	        pointerMoved = true;
	        detail.setPointerDown(pointerDown, pointerDownX, pointerDownY, pointerDownTime);
	    }
	    dispatchEvent(target, type, detail);
	    detail.dispose();
	}
	function onMouseDown(evt) {
	    dispatchPointerEvent(Events.POINTER_DOWN, evt.target, getPointerDetail(evt));
	}
	function onMouseMove(evt) {
	    dispatchPointerEvent(Events.POINTER_MOVE, evt.target, getPointerDetail(evt));
	}
	function onMouseUp(evt) {
	    dispatchPointerEvent(Events.POINTER_UP, evt.target, getPointerDetail(evt));
	}
	function onDblClick(evt) {
	    dispatchPointerEvent(Events.DBLCLICK, evt.target, getPointerDetail(evt));
	}
	function onMouseOut(evt) {
	    dispatchPointerEvent(Events.POINTER_OUT, evt.target, getPointerDetail(evt));
	}
	function onMouseOver(evt) {
	    dispatchPointerEvent(Events.POINTER_OVER, evt.target, getPointerDetail(evt));
	}
	function getTouchPoints(evt) {
	    var touches = evt.touches || evt.changedTouches || evt.touchList || evt.targetTouches;
	    var n = touches.length;
	    var ret = [];
	    for (var i = 0; i < n; i++) {
	        ret.push(getPointerDetail(touches[i]));
	    }
	    if (ret.length < 1) {
	        ret.push(getPointerDetail(null));
	    }
	    return ret;
	}
	function onTouchStart(evt) {
	    var detail = getPointerDetail(getTouchPoints(evt)[0], evt.timeStamp);
	    dispatchPointerEvent(Events.POINTER_DOWN, evt.target, detail);
	    evt.preventDefault();
	}
	function onTouchMove(evt) {
	    var detail = getPointerDetail(getTouchPoints(evt)[0], evt.timeStamp);
	    dispatchPointerEvent(Events.POINTER_MOVE, evt.target, detail);
	    evt.preventDefault();
	}
	function onTouchEnd(evt) {
	    var detail = getPointerDetail(getTouchPoints(evt)[0], evt.timeStamp);
	    dispatchPointerEvent(Events.POINTER_UP, evt.target, detail);
	    evt.preventDefault();
	}
	function onPointerDown(evt) {
	    dispatchPointerEvent(Events.POINTER_DOWN, evt.target, getPointerDetail(evt));
	}
	function onPointerMove(evt) {
	    dispatchPointerEvent(Events.POINTER_MOVE, evt.target, getPointerDetail(evt));
	}
	function onPointerUp(evt) {
	    dispatchPointerEvent(Events.POINTER_UP, evt.target, getPointerDetail(evt));
	}
	function onWheel(evt) {
	    var delta = evt.wheelDelta || evt.detail * -8;
	    var detail = event_detail_1.WheelEventDetail.create(delta, altKey, ctrlKey, shiftKey, commandKey);
	    detail.timeStamp = evt.timeStamp;
	    dispatchEvent(evt.target, Events.WHEEL, detail);
	    detail.dispose();
	}
	function updateKeysStatus(keyCode, value) {
	    switch (keyCode) {
	        case key_event_1.KeyEvent.VK_CONTROL: {
	            ctrlKey = value;
	            break;
	        }
	        case key_event_1.KeyEvent.VK_ALT: {
	            altKey = value;
	            break;
	        }
	        case key_event_1.KeyEvent.VK_SHIFT: {
	            shiftKey = value;
	            break;
	        }
	        case key_event_1.KeyEvent.VK_COMMAND: {
	            commandKey = value;
	            break;
	        }
	    }
	}
	function onKeyDown(evt) {
	    updateKeysStatus(evt.keyCode, true);
	    var detail = event_detail_1.KeyEventDetail.create(evt.keyCode, altKey, ctrlKey, shiftKey, commandKey);
	    detail.timeStamp = evt.timeStamp;
	    dispatchEvent(evt.target, Events.KEYDOWN, detail);
	    detail.dispose();
	}
	function onKeyUp(evt) {
	    updateKeysStatus(evt.keyCode, false);
	    var detail = event_detail_1.KeyEventDetail.create(evt.keyCode, altKey, ctrlKey, shiftKey, commandKey);
	    detail.timeStamp = evt.timeStamp;
	    dispatchEvent(evt.target, Events.KEYUP, detail);
	    detail.dispose();
	}
	function dispatchKeyEvent(target, keyCode) {
	    var detail = event_detail_1.KeyEventDetail.create(keyCode, altKey, ctrlKey, shiftKey, commandKey);
	    dispatchEvent(target, Events.KEYDOWN, detail);
	    dispatchEvent(target, Events.KEYUP, detail);
	    detail.dispose();
	}
	/**
	 * 初始化。
	 *
	 * InputEventAdapter如其名所示，是对输入事件的适配，为上层提供统一的接口。主要功能有：
	 *
	 * 1.把鼠标事件、触屏事件和指针事件统一成qtk-pointer事件。
	 *
	 * 2.把DOMMouseScroll和mousewheel事件统一成qtk-wheel事件。
	 *
	 * 3.把keydown/keyup事件转换成qtk-keydown/qtk-keyup事件。
	 *
	 * 4.把tizen和phonegap的按键事件转换成标准的key事件。
	 *
	 * 5.实现grab/ungrab功能。事件优先发给最后grab的target。
	 *
	 * @param doc document对象。
	 * @param win window对象。
	 * @param pointerSupported 当前系统是否支持pointer事件。
	 * @param msPointerSupported 当前系统是否支持ms pointer事件。
	 * @param touchSupported 当前系统是否支持触屏事件。
	 *
	 */
	function init(doc, win, pointerSupported, msPointerSupported, touchSupported) {
	    doc.addEventListener('tizenhwkey', function (evt) {
	        dispatchKeyEvent(evt.target, key_event_1.KeyEvent.VK_TIZEN_HW);
	    });
	    doc.addEventListener("backbutton", function (evt) {
	        dispatchKeyEvent(evt.target, key_event_1.KeyEvent.VK_BACK);
	    });
	    doc.addEventListener("menubutton", function (evt) {
	        dispatchKeyEvent(evt.target, key_event_1.KeyEvent.VK_MENU);
	    });
	    doc.addEventListener("searchbutton", function (evt) {
	        dispatchKeyEvent(evt.target, key_event_1.KeyEvent.VK_SEARCH);
	    });
	    if (pointerSupported) {
	        pointerDeviceType = "pointer";
	        doc.addEventListener('pointerdown', onPointerDown);
	        doc.addEventListener('pointermove', onPointerMove);
	        doc.addEventListener('pointerup', onPointerUp);
	        doc.addEventListener('mousewheel', onWheel);
	    }
	    else if (msPointerSupported) {
	        pointerDeviceType = "pointer";
	        doc.addEventListener('MSPointerDown', onPointerDown);
	        doc.addEventListener('MSPointerMove', onPointerMove);
	        doc.addEventListener('MSPointerUp', onPointerUp);
	        doc.addEventListener('mousewheel', onWheel);
	    }
	    else if (touchSupported) {
	        pointerDeviceType = "touch";
	        doc.addEventListener('touchstart', onTouchStart);
	        doc.addEventListener('touchmove', onTouchMove);
	        doc.addEventListener('touchend', onTouchEnd);
	    }
	    else {
	        pointerDeviceType = "mouse";
	        doc.addEventListener('mousedown', onMouseDown);
	        doc.addEventListener('mousemove', onMouseMove);
	        doc.addEventListener('mouseup', onMouseUp);
	        doc.addEventListener('mouseout', onMouseOut);
	        doc.addEventListener('mouseover', onMouseOver);
	        doc.addEventListener('dblclick', onDblClick);
	    }
	    doc.addEventListener('mousewheel', onWheel);
	    doc.addEventListener('DOMMouseScroll', onWheel);
	    doc.addEventListener('keyup', onKeyUp);
	    doc.addEventListener('keydown', onKeyDown);
	}
	exports.init = init;
	/**
	 * grab输入事件。输入事件后发送给最后grab的target。
	 */
	function grab(target) {
	    grabs.push(target);
	}
	exports.grab = grab;
	/**
	 * ungrab移出最后grab的target。
	 */
	function ungrab(target) {
	    return grabs.remove(target);
	}
	exports.ungrab = ungrab;
	/**
	 * grab输入事件。输入事件后发送给最后grab的target。
	 */
	function grabKey(target) {
	    keyGrabs.push(target);
	}
	exports.grabKey = grabKey;
	/**
	 * ungrab移出最后grab的target。
	 */
	function ungrabKey(target) {
	    return keyGrabs.pop();
	}
	exports.ungrabKey = ungrabKey;
	/**
	 * 注册全局的Input事件。
	 */
	function on(type, callback) {
	    globalInputEmitter.on(type, callback);
	}
	exports.on = on;
	/**
	 * 注销全局的Input事件。
	 */
	function off(type, callback) {
	    globalInputEmitter.off(type, callback);
	}
	exports.off = off;


/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	exports.KeyEvent = {
	    VK_CANCEL: 3,
	    VK_HELP: 6,
	    VK_BACK_SPACE: 8,
	    VK_TAB: 9,
	    VK_CLEAR: 12,
	    VK_RETURN: 13,
	    VK_ENTER: 14,
	    VK_SHIFT: 16,
	    VK_CONTROL: 17,
	    VK_ALT: 18,
	    VK_PAUSE: 19,
	    VK_CAPS_LOCK: 20,
	    VK_ESCAPE: 27,
	    VK_SPACE: 32,
	    VK_PAGE_UP: 33,
	    VK_PAGE_DOWN: 34,
	    VK_END: 35,
	    VK_HOME: 36,
	    VK_LEFT: 37,
	    VK_UP: 38,
	    VK_RIGHT: 39,
	    VK_DOWN: 40,
	    VK_PRINTSCREEN: 44,
	    VK_INSERT: 45,
	    VK_DELETE: 46,
	    VK_0: 48,
	    VK_1: 49,
	    VK_2: 50,
	    VK_3: 51,
	    VK_4: 52,
	    VK_5: 53,
	    VK_6: 54,
	    VK_7: 55,
	    VK_8: 56,
	    VK_9: 57,
	    VK_SEMICOLON: 59,
	    VK_EQUALS: 61,
	    VK_A: 65,
	    VK_B: 66,
	    VK_C: 67,
	    VK_D: 68,
	    VK_E: 69,
	    VK_F: 70,
	    VK_G: 71,
	    VK_H: 72,
	    VK_I: 73,
	    VK_J: 74,
	    VK_K: 75,
	    VK_L: 76,
	    VK_M: 77,
	    VK_N: 78,
	    VK_O: 79,
	    VK_P: 80,
	    VK_Q: 81,
	    VK_R: 82,
	    VK_S: 83,
	    VK_T: 84,
	    VK_U: 85,
	    VK_V: 86,
	    VK_W: 87,
	    VK_X: 88,
	    VK_Y: 89,
	    VK_Z: 90,
	    VK_COMMAND: 91,
	    VK_CONTEXT_MENU: 93,
	    VK_NUMPAD0: 96,
	    VK_NUMPAD1: 97,
	    VK_NUMPAD2: 98,
	    VK_NUMPAD3: 99,
	    VK_NUMPAD4: 100,
	    VK_NUMPAD5: 101,
	    VK_NUMPAD6: 102,
	    VK_NUMPAD7: 103,
	    VK_NUMPAD8: 104,
	    VK_NUMPAD9: 105,
	    VK_MULTIPLY: 106,
	    VK_ADD: 107,
	    VK_SEPARATOR: 108,
	    VK_SUBTRACT: 109,
	    VK_DECIMAL: 110,
	    VK_DIVIDE: 111,
	    VK_F1: 112,
	    VK_F2: 113,
	    VK_F3: 114,
	    VK_F4: 115,
	    VK_F5: 116,
	    VK_F6: 117,
	    VK_F7: 118,
	    VK_F8: 119,
	    VK_F9: 120,
	    VK_F10: 121,
	    VK_F11: 122,
	    VK_F12: 123,
	    VK_F13: 124,
	    VK_F14: 125,
	    VK_F15: 126,
	    VK_F16: 127,
	    VK_F17: 128,
	    VK_F18: 129,
	    VK_F19: 130,
	    VK_F20: 131,
	    VK_F21: 132,
	    VK_F22: 133,
	    VK_F23: 134,
	    VK_F24: 135,
	    VK_BACK: 136,
	    VK_MENU: 137,
	    VK_SEARCH: 138,
	    VK_TIZEN_HW: 139,
	    VK_NUM_LOCK: 144,
	    VK_SCROLL_LOCK: 145,
	    VK_COMMA: 188,
	    VK_PERIOD: 190,
	    VK_SLASH: 191,
	    VK_BACK_QUOTE: 192,
	    VK_OPEN_BRACKET: 219,
	    VK_BACK_SLASH: 220,
	    VK_CLOSE_BRACKET: 221,
	    VK_QUOTE: 222,
	    VK_META: 224
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var label_1 = __webpack_require__(22);
	var Events = __webpack_require__(10);
	var key_event_1 = __webpack_require__(20);
	var html_edit_1 = __webpack_require__(88);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var graphics_1 = __webpack_require__(29);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 编辑器。multiLineMode决定是多行编辑器还是单行编辑器。
	 */
	var Edit = (function (_super) {
	    __extends(Edit, _super);
	    function Edit() {
	        _super.call(this, Edit.TYPE);
	        this.onWheel = function () {
	            var input = this._input;
	            if (input) {
	                input.hide();
	                this.hideEditor();
	            }
	        }.bind(this);
	        this.drawInvalidInputTips = function (evt) {
	            var win = this.win;
	            var tm = this._themeManager;
	            var text = this._validationTips;
	            var style = tm.get("edit.invalid.tips", this.stateToString(widget_1.WidgetState.NORMAL));
	            if (!this._isEditing || !text || !style) {
	                return;
	            }
	            var maxH = win.h;
	            var maxW = win.w;
	            var ctx = evt.ctx;
	            var p = this.toGlobalPoint(point_1.Point.point.init(0, 0));
	            var width = graphics_1.Graphics.measureText(text, style.font) + 20;
	            var x = p.x - win.x;
	            var y = p.y - win.y + 5;
	            if ((x + width) >= maxW) {
	                x = maxW - width;
	            }
	            var r = null;
	            if ((y + this.h) < maxH) {
	                r = rect_1.Rect.rect.init(x, y + this.h, width, 30);
	            }
	            else {
	                r = rect_1.Rect.rect.init(x, y, width, 30);
	            }
	            graphics_1.Graphics.drawRoundRect(ctx, style.backGroundColor, style.lineColor, style.lineWidth, r.x, r.y, r.w, r.h, style.roundRadius);
	            graphics_1.Graphics.drawTextSL(ctx, text, style, r);
	        }.bind(this);
	    }
	    Object.defineProperty(Edit.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Edit.prototype, "inputFilter", {
	        /**
	         * 输入过滤器，对输入的文本进行转换。
	         */
	        set: function (value) {
	            this._inputFilter = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Edit.prototype, "inputTips", {
	        get: function () {
	            return this._it;
	        },
	        /**
	         * 输入提示。
	         */
	        set: function (value) {
	            this._it = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Edit.prototype, "inputType", {
	        get: function () {
	            return this._itp;
	        },
	        /**
	         * 输入类型。
	         */
	        set: function (value) {
	            this._itp = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Edit.prototype.draw = function (ctx) {
	        if (!this._isEditing) {
	            _super.prototype.draw.call(this, ctx);
	        }
	        else {
	        }
	    };
	    Edit.prototype.relayoutText = function () {
	        if (!this._isEditing) {
	            _super.prototype.relayoutText.call(this);
	        }
	        return this;
	    };
	    Edit.prototype.drawText = function (ctx, style) {
	        if (this._textLines && this._textLines.length) {
	            _super.prototype.drawText.call(this, ctx, style);
	        }
	        else if (this._it) {
	            this.drawTextSL(ctx, this._it, style);
	        }
	        return this;
	    };
	    Edit.prototype.getStyleType = function () {
	        if (this._styleType) {
	            return this._styleType;
	        }
	        else {
	            if (this._text || this._isEditing) {
	                return this.multiLineMode ? "edit.ml" : "edit.sl";
	            }
	            else {
	                return this.multiLineMode ? "edit.ml.tips" : "edit.sl.tips";
	            }
	        }
	    };
	    Edit.prototype.filterText = function (value) {
	        return this._inputFilter ? this._inputFilter(value) : value;
	    };
	    Edit.prototype.hideEditor = function () {
	        if (this._isEditing) {
	            this._isEditing = false;
	            this.relayoutText();
	            this._input = null;
	            this.dispatchEvent({ type: Events.BLUR });
	            this.win.off(Events.WHEEL, this.onWheel);
	        }
	        this.requestRedraw();
	    };
	    Edit.prototype.showEditor = function () {
	        var _this = this;
	        var style = this.getStyle();
	        this._input = this.multiLineMode ? html_edit_1.HtmlEdit.textArea : html_edit_1.HtmlEdit.input;
	        var input = this._input;
	        var vp = this.app.getViewPort();
	        var p = this.toViewPoint(point_1.Point.point.init(0, 0));
	        var borderWidth = input.borderWidth * 2;
	        var x = Math.max(0, p.x);
	        var y = Math.max(0, p.y);
	        var w = Math.min(this.w, vp.w - x - borderWidth);
	        var h = Math.min(this.h, vp.h - y - borderWidth);
	        input.move(x, y);
	        input.resize(w, h);
	        input.fontSize = style.fontSize;
	        input.inputType = this.inputType;
	        input.textColor = style.textColor;
	        input.fontFamily = style.fontFamily;
	        input.text = this.text || "";
	        input.show();
	        input.z = this.win.z + 1;
	        var oldValue = this.value;
	        this.dispatchEvent({ type: Events.FOCUS });
	        this.win.on(Events.WHEEL, this.onWheel);
	        input.on(Events.HIDE, function (evt) {
	            _this.hideEditor();
	        });
	        input.on(Events.CHANGING, function (evt) {
	            var e = _this.eChangeEvent;
	            _this.text = _this.filterText(evt.value);
	            var value = _this.inputType === "number" ? +_this.text : _this.text;
	            e.init(Events.CHANGING, { value: value });
	            ;
	            _this.dispatchEvent(e);
	        });
	        input.on(Events.CHANGE, function (evt) {
	            var e = _this.eChangeEvent;
	            _this.text = _this.filterText(evt.value);
	            var value = _this.inputType === "number" ? +_this.text : _this.text;
	            e.init(Events.CHANGE, { value: value, oldValue: oldValue });
	            ;
	            _this.dispatchEvent(e);
	        });
	        input.on(Events.KEYDOWN, function (evt) {
	            _this.dispatchEvent(evt);
	        });
	        input.on(Events.KEYUP, function (evt) {
	            if (!_this.multiLineMode && evt.keyCode === key_event_1.KeyEvent.VK_RETURN) {
	                _this.dispatchEvent({ type: Events.CONFIRM });
	            }
	            _this.dispatchEvent(evt);
	        });
	    };
	    Object.defineProperty(Edit.prototype, "validationTips", {
	        set: function (value) {
	            this._validationTips = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Edit.prototype.onInvalidInput = function (message) {
	        var win = this.win;
	        if (this._validationTips === message) {
	            return;
	        }
	        this._validationTips = message;
	        win.off(Events.AFTER_DRAW, this.drawInvalidInputTips);
	        if (message) {
	            win.on(Events.AFTER_DRAW, this.drawInvalidInputTips);
	        }
	        win.requestRedraw();
	    };
	    Edit.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._input = null;
	        this._inputFilter = null;
	    };
	    Edit.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (!this._isEditing) {
	            this._isEditing = true;
	            this.showEditor();
	        }
	    };
	    Edit.prototype.getDefProps = function () {
	        return Edit.defProps;
	    };
	    Edit.create = function (options) {
	        return Edit.r.create(options);
	    };
	    Edit.defProps = Object.assign({}, label_1.Label.defProps, { _mlm: false, _it: null, _itp: null });
	    Edit.TYPE = "edit";
	    Edit.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Edit);
	    return Edit;
	}(label_1.Label));
	exports.Edit = Edit;
	;
	widget_factory_1.WidgetFactory.register(Edit.TYPE, Edit.create);


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var graphics_1 = __webpack_require__(29);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 文本控件。
	 */
	var Label = (function (_super) {
	    __extends(Label, _super);
	    function Label(type) {
	        _super.call(this, type || Label.TYPE);
	    }
	    /**
	     * 对文本进行重新排版。
	     */
	    Label.prototype.relayoutText = function () {
	        if (this._inited) {
	            var style = this.getStyle();
	            var text = this.getLocaleText();
	            if (text && style) {
	                this._textLines = graphics_1.Graphics.layoutText(text, this.w, style.font);
	            }
	            else {
	                this._textLines = [];
	            }
	        }
	        return this;
	    };
	    ;
	    Object.defineProperty(Label.prototype, "multiLineMode", {
	        /**
	         * 是否启用多行模式。
	         */
	        get: function () {
	            return this._mlm;
	        },
	        set: function (value) {
	            this.setProp("mlm", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Label.prototype, "value", {
	        /**
	         * Label的值即它的文本。
	         */
	        get: function () {
	            return this.text;
	        },
	        set: function (value) {
	            this.text = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Label.prototype.setStyle = function (state, style) {
	        _super.prototype.setStyle.call(this, state, style);
	        this.relayoutText();
	        return this;
	    };
	    Label.prototype.drawTextSL = function (ctx, text, style) {
	        if (text && style.textColor) {
	            graphics_1.Graphics.drawTextSL(ctx, text, style, this.getTextRect(style));
	        }
	        return this;
	    };
	    Label.prototype.drawTextML = function (ctx, style) {
	        if (style.textColor) {
	            graphics_1.Graphics.drawTextML(ctx, this._textLines, style, this.getTextRect(style));
	        }
	        return this;
	    };
	    Label.prototype.drawText = function (ctx, style) {
	        if (this._textLines && this._textLines.length) {
	            if (this._mlm) {
	                this.drawTextML(ctx, style);
	            }
	            else {
	                var text = this._textLines[0].text;
	                this.drawTextSL(ctx, text, style);
	            }
	        }
	        return this;
	    };
	    Label.prototype.setProp = function (prop, newValue, notify) {
	        _super.prototype.setProp.call(this, prop, newValue, notify);
	        if (prop === "w" || prop === "h" || prop === "value" || prop === "text") {
	            this.relayoutText();
	        }
	        return this;
	    };
	    Label.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        this.relayoutText();
	    };
	    Label.prototype.getDefProps = function () {
	        return Label.defProps;
	    };
	    Label.create = function (options) {
	        return Label.recycleBin.create(options);
	    };
	    Label.defProps = Object.assign({}, widget_1.Widget.defProps, { _mlm: true, _lp: 5, _tp: 5, _rp: 5, _bp: 5 });
	    Label.TYPE = "label";
	    Label.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Label);
	    return Label;
	}(widget_1.Widget));
	exports.Label = Label;
	;
	widget_factory_1.WidgetFactory.register(Label.TYPE, Label.create);


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/globals/tween.js/index.d.ts"/>
	/// <reference path="../../typings/globals/eventemitter3/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var style_1 = __webpack_require__(7);
	var canvas_1 = __webpack_require__(17);
	var TWEEN = __webpack_require__(24);
	var emitter_1 = __webpack_require__(8);
	var utils_1 = __webpack_require__(25);
	var Events = __webpack_require__(10);
	var matrix_stack_1 = __webpack_require__(26);
	var widget_factory_1 = __webpack_require__(27);
	var graphics_1 = __webpack_require__(29);
	var dirty_rect_context_1 = __webpack_require__(80);
	var image_tile_1 = __webpack_require__(11);
	var behavior_1 = __webpack_require__(81);
	var layouter_1 = __webpack_require__(82);
	var binding_rule_1 = __webpack_require__(83);
	var iview_model_1 = __webpack_require__(85);
	(function (WidgetMode) {
	    WidgetMode[WidgetMode["RUNTIME"] = 0] = "RUNTIME";
	    WidgetMode[WidgetMode["DESIGN"] = 1] = "DESIGN";
	})(exports.WidgetMode || (exports.WidgetMode = {}));
	var WidgetMode = exports.WidgetMode;
	;
	(function (WidgetState) {
	    WidgetState[WidgetState["NORMAL"] = 0] = "NORMAL";
	    WidgetState[WidgetState["OVER"] = 1] = "OVER";
	    WidgetState[WidgetState["ACTIVE"] = 2] = "ACTIVE";
	    WidgetState[WidgetState["DISABLE"] = 3] = "DISABLE";
	    WidgetState[WidgetState["SELECTED"] = 4] = "SELECTED";
	})(exports.WidgetState || (exports.WidgetState = {}));
	var WidgetState = exports.WidgetState;
	;
	(function (HitTestResult) {
	    HitTestResult[HitTestResult["NONE"] = 0] = "NONE";
	    HitTestResult[HitTestResult["TL"] = 1] = "TL";
	    HitTestResult[HitTestResult["TM"] = 2] = "TM";
	    HitTestResult[HitTestResult["TR"] = 3] = "TR";
	    HitTestResult[HitTestResult["ML"] = 4] = "ML";
	    HitTestResult[HitTestResult["MM"] = 5] = "MM";
	    HitTestResult[HitTestResult["MR"] = 6] = "MR";
	    HitTestResult[HitTestResult["RL"] = 7] = "RL";
	    HitTestResult[HitTestResult["RM"] = 8] = "RM";
	    HitTestResult[HitTestResult["RR"] = 9] = "RR";
	})(exports.HitTestResult || (exports.HitTestResult = {}));
	var HitTestResult = exports.HitTestResult;
	;
	var states = ["normal", "over", "active", "disable", "selected"];
	/**
	 * Widget是所有控件的基类。
	 */
	var Widget = (function (_super) {
	    __extends(Widget, _super);
	    function Widget(type) {
	        _super.call(this);
	        ///////////////////////////////////////////
	        this.layoutRect = rect_1.Rect.create(0, 0, 0, 0);
	        this.eChangeEvent = Events.ChangeEvent.create();
	        this.ePropChangeEvent = Events.PropChangeEvent.create();
	        this.viewModelChangeFunc = function (evt) {
	            var viewModel = this._viewModel;
	            var dataBindingRule = this._dataBindingRule;
	            if (dataBindingRule && viewModel) {
	                this.onBindData(viewModel, dataBindingRule);
	            }
	        }.bind(this);
	        this.type = type;
	    }
	    /**
	     * 同时设置多个属性。
	     */
	    Widget.prototype.set = function (props) {
	        if (props) {
	            for (var key in props) {
	                var value = props[key];
	                if (value !== undefined) {
	                    this[key] = value;
	                }
	            }
	        }
	        return this;
	    };
	    /**
	     * 同时获取多个属性。
	     */
	    Widget.prototype.get = function (props) {
	        if (props) {
	            for (var key in props) {
	                props[key] = this[key];
	            }
	        }
	        return props;
	    };
	    /**
	     * 把全局的坐标转换成相对于当前控件左上角的坐标。
	     * @param p 全局坐标。
	     * @returns 相对于当前控件左上角的坐标。
	     */
	    Widget.prototype.toLocalPoint = function (p) {
	        p.x -= this.x;
	        p.y -= this.y;
	        var iter = this.parent;
	        while (iter) {
	            p.x -= iter.x;
	            p.y -= iter.y;
	            iter = iter.parent;
	        }
	        return p;
	    };
	    /**
	     * 把Pointer事件的坐标转换成相对于当前控件左上角的坐标。
	     * @param p Pointer事件的坐标。
	     * @returns 相对于当前控件左上角的坐标。
	     */
	    Widget.prototype.eventPointToLocal = function (p) {
	        if (this._canvas) {
	            return p;
	        }
	        p.x -= this.x;
	        p.y -= this.y;
	        var iter = this.parent;
	        while (iter) {
	            if (iter._canvas) {
	                break;
	            }
	            p.x -= iter.x;
	            p.y -= iter.y;
	            iter = iter.parent;
	        }
	        return p;
	    };
	    /**
	     * 把相对于当前控件左上角的坐标转换成全局坐标。
	     * @param p 相对于当前控件左上角的坐标。
	     * @returns 全局坐标。
	     */
	    Widget.prototype.toGlobalPoint = function (p) {
	        p.x += this.x;
	        p.y += this.y;
	        var iter = this.parent;
	        while (iter) {
	            p.x += iter.x;
	            p.y += iter.y;
	            iter = iter.parent;
	        }
	        return p;
	    };
	    /**
	     * 把相对于当前控件左上角的坐标转换成屏幕上的坐标。
	     * @param p 相对于当前控件左上角的坐标。
	     * @returns 屏幕上的坐标。
	     */
	    Widget.prototype.toViewPoint = function (p) {
	        p.x += this.x;
	        p.y += this.y;
	        var iter = this.parent;
	        while (iter) {
	            p.x += iter.x;
	            p.y += iter.y;
	            if (iter.offsetX) {
	                p.x -= iter.offsetX;
	            }
	            if (iter.offsetY) {
	                p.y -= iter.offsetY;
	            }
	            iter = iter.parent;
	        }
	        return p;
	    };
	    Widget.prototype.onInit = function () {
	        this._inited = true;
	        if (!this.app && this.parent) {
	            this.app = this.parent.app;
	        }
	    };
	    /**
	     * 初始化。在窗口打开后，对窗口上所有控件调用，或者在窗口打开后，对新创建的控件调用。
	     */
	    Widget.prototype.init = function () {
	        this.onInit();
	        this.children.forEach(function (child) {
	            child.init();
	        });
	        return this;
	    };
	    Widget.prototype.onDeinit = function () {
	        this._inited = false;
	    };
	    /**
	     * ~初始化。在窗口关闭后，对窗口上所有控件调用，或者对被移出的控件调用。
	     */
	    Widget.prototype.deinit = function () {
	        this.children.forEach(function (child) {
	            child.deinit();
	        });
	        this.onDeinit();
	    };
	    /**
	     * 分发一个事件到当前控件及其子控件。
	     */
	    Widget.prototype.dispatchEventToAll = function (evt) {
	        this.dispatchEvent(evt);
	        this.children.forEach(function (child) {
	            child.dispatchEvent(evt);
	        });
	    };
	    /**
	     * 测试点是否落在当前控件中。
	     * @param x X坐标，相对于全局原点的坐标。
	     * @param y Y坐标，相对于全局原点的坐标。
	     * @param ctx 矩阵变换上下文。ctx包含了从顶级父控件到当前控件的变化。
	     * @returns 测试结果HitTestResult。
	     */
	    Widget.prototype.hitTest = function (x, y, ctx) {
	        return this.doHitTest(x, y, rect_1.Rect.rect.init(0, 0, this.w, this.h), ctx);
	    };
	    Widget.prototype.doHitTest = function (x, y, r, ctx) {
	        var m = ctx.invert();
	        if (m) {
	            var p = m.transformPoint(x, y);
	            if (p.x >= r.x && p.x <= (r.x + r.w) && p.y >= r.y && p.y <= (r.y + r.h)) {
	                return HitTestResult.MM;
	            }
	        }
	        return HitTestResult.NONE;
	    };
	    Widget.prototype.selfHitTest = function (x, y, ctx) {
	        return this.hitTest(x, y, ctx);
	    };
	    Widget.prototype.dispatchPointerDown = function (evt, ctx) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        ctx.save();
	        this.applyTransform(ctx);
	        var hitTestResult = this.selfHitTest(evt.x, evt.y, ctx);
	        if (hitTestResult) {
	            this.dispatchEvent(evt, true);
	            this.target = this.findEventTargetChild(evt.x, evt.y, ctx);
	            if (this.target) {
	                this.target.dispatchPointerDown(evt, ctx);
	            }
	            if (this.onpointerdown) {
	                this.onpointerdown(evt);
	            }
	            this.dispatchEvent(evt, false);
	            this.state = WidgetState.ACTIVE;
	        }
	        else {
	            if (this.onpointerdown) {
	                this.onpointerdown(evt);
	            }
	            this.state = WidgetState.NORMAL;
	        }
	        ctx.restore();
	        this.hitTestResult = hitTestResult;
	    };
	    Widget.prototype.dispatchPointerMoveToTarget = function (evt, ctx) {
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchPointerMove(evt, ctx);
	        }
	        if (this.onpointermove) {
	            this.onpointermove(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchPointerLeave = function (evt) {
	        if (this.state === WidgetState.OVER || this.state === WidgetState.ACTIVE) {
	            var e = Events.PointerEvent.create(Events.POINTER_LEAVE, evt);
	            this.dispatchEvent(e, false);
	            this.state = WidgetState.NORMAL;
	            e.dispose();
	        }
	        if (this.target) {
	            this.target.dispatchPointerLeave(evt);
	        }
	        if (this._lastOverWidget) {
	            this._lastOverWidget.dispatchPointerLeave(evt);
	            this._lastOverWidget = null;
	        }
	    };
	    Widget.prototype.dispatchPointerEnter = function (evt) {
	        var e = Events.PointerEvent.create(Events.POINTER_ENTER, evt);
	        this.dispatchEvent(e, false);
	        e.dispose();
	    };
	    Widget.prototype.dispatchPointerMoveToUnder = function (evt, ctx) {
	        ctx.save();
	        this.applyTransform(ctx);
	        var hitTestResult = this.selfHitTest(evt.x, evt.y, ctx);
	        if (hitTestResult) {
	            this.dispatchEvent(evt, true);
	            var _lastOverWidget = this._lastOverWidget;
	            var overWidget = this.findEventTargetChild(evt.x, evt.y, ctx);
	            if (_lastOverWidget !== overWidget) {
	                var e = null;
	                if (_lastOverWidget) {
	                    _lastOverWidget.dispatchPointerMove(evt, ctx);
	                    _lastOverWidget.dispatchPointerLeave(evt);
	                }
	                if (overWidget) {
	                    overWidget.dispatchPointerEnter(evt);
	                }
	                this._lastOverWidget = overWidget;
	            }
	            if (overWidget) {
	                overWidget.dispatchPointerMove(evt, ctx);
	            }
	            if (this.onpointermove) {
	                this.onpointermove(evt);
	            }
	            this.dispatchEvent(evt, false);
	            if (evt.pointerDown) {
	                this.state = WidgetState.ACTIVE;
	            }
	            else {
	                this.state = WidgetState.OVER;
	            }
	        }
	        else {
	            this.dispatchEvent(evt, true);
	            if (this.onpointermove) {
	                this.onpointermove(evt);
	            }
	            this.dispatchEvent(evt, false);
	            this.state = WidgetState.NORMAL;
	        }
	        ctx.restore();
	    };
	    Widget.prototype.dispatchPointerMove = function (evt, ctx) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        if (evt.pointerDown) {
	            this.dispatchPointerMoveToTarget(evt, ctx);
	        }
	        this.dispatchPointerMoveToUnder(evt, ctx);
	    };
	    Widget.prototype.dispatchPointerUp = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this._lastOverWidget && this.target !== this._lastOverWidget) {
	            this._lastOverWidget.dispatchPointerUp(evt);
	        }
	        if (this.target) {
	            this.target.dispatchPointerUp(evt);
	        }
	        if (this.onpointerup) {
	            this.onpointerup(evt);
	        }
	        this.dispatchEvent(evt, false);
	        this.state = WidgetState.NORMAL;
	    };
	    Widget.prototype.dispatchClick = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchClick(evt);
	        }
	        if (this.onclick) {
	            this.onclick(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchContextMenu = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchContextMenu(evt);
	        }
	        if (this.oncontextmenu) {
	            this.oncontextmenu(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchDblClick = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchDblClick(evt);
	        }
	        if (this.ondblclick) {
	            this.ondblclick(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchKeyDown = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchKeyDown(evt);
	        }
	        if (this.onkeydown) {
	            this.onkeydown(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchKeyUp = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchKeyUp(evt);
	        }
	        if (this.onkeyup) {
	            this.onkeyup(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.dispatchWheel = function (evt) {
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.dispatchEvent(evt, true);
	        if (this.target) {
	            this.target.dispatchWheel(evt);
	        }
	        if (this.onwheel) {
	            this.onwheel(evt);
	        }
	        this.dispatchEvent(evt, false);
	    };
	    Widget.prototype.applyTransform = function (ctx) {
	        var e = Events.ApplyTransformEvent.get();
	        this.dispatchEvent(e.reset(Events.BEFORE_APPLY_TRANSFORM, ctx, this));
	        if (!this._canvas) {
	            ctx.translate(this._x, this._y);
	        }
	        var px = this._pivotX * this._w;
	        var py = this._pivotY * this._h;
	        if (this._rotation || this._scaleX !== 1 || this._scaleY !== 1) {
	            ctx.translate(px, py);
	            ctx.rotate(this._rotation);
	            ctx.scale(this._scaleX, this._scaleY);
	            ctx.translate(-px, -py);
	        }
	        this.dispatchEvent(e.reset(Events.AFTER_APPLY_TRANSFORM, ctx, this));
	        return this;
	    };
	    Widget.prototype.findEventTargetChild = function (x, y, ctx) {
	        var arr = this._children;
	        var n = arr.length;
	        for (var i = n - 1; i >= 0; i--) {
	            var iter = arr[i];
	            if (iter._enable && iter._sensitive) {
	                ctx.save();
	                iter.applyTransform(ctx);
	                var hitTestResult = iter.hitTest(x, y, ctx);
	                if (hitTestResult) {
	                    ctx.restore();
	                    return iter;
	                }
	                ctx.restore();
	            }
	        }
	        return null;
	    };
	    ///////////////////////////////////////////
	    Widget.prototype.animate = function () {
	        var tween = new TWEEN.Tween(this);
	        this.requestRedraw();
	        return tween;
	    };
	    Widget.prototype.scaleTo = function (sx, sy, duration) {
	        this.requestRedraw();
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ scaleX: sx, scaleY: sy }, duration).start();
	            return tween;
	        }
	        else {
	            this.scaleX = sx;
	            this.scaleY = sy;
	            return null;
	        }
	    };
	    Widget.prototype.opacityTo = function (opacity, duration) {
	        this.requestRedraw();
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ opacity: opacity }, duration).start();
	            return tween;
	        }
	        else {
	            this.opacity = opacity;
	            ;
	            return null;
	        }
	    };
	    Widget.prototype.rotateTo = function (rotation, duration) {
	        this.requestRedraw();
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ rotation: rotation }, duration).start();
	            return tween;
	        }
	        else {
	            this.rotation = rotation;
	            return null;
	        }
	    };
	    Widget.prototype.moveTo = function (x, y, duration) {
	        this.requestRedraw();
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ x: x, y: y }, duration).start();
	            return tween;
	        }
	        else {
	            this.x = x;
	            this.y = y;
	            return null;
	        }
	    };
	    Widget.prototype.moveResizeTo = function (x, y, w, h, duration) {
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ x: x, y: y, w: w, h: h }, duration).start();
	            return tween;
	        }
	        else {
	            this.x = x;
	            this.y = y;
	            this.w = w;
	            this.h = h;
	            return null;
	        }
	    };
	    Widget.prototype.resizeTo = function (w, h, duration) {
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ w: w, h: h }, duration).start();
	            return tween;
	        }
	        else {
	            this.w = w;
	            this.h = h;
	            return null;
	        }
	    };
	    Widget.prototype.getLayoutRect = function () {
	        return this.layoutRect.init(this.leftPadding, this.topPadding, this.w - this.leftPadding - this.rightPadding, this.h - this.topPadding - this.bottomPadding);
	    };
	    /**
	     * 根据当前的childrenLayouter重新布局子控件。
	     */
	    Widget.prototype.relayoutChildren = function () {
	        this.requestRedraw();
	        if (this.children.length > 0 && this.childrenLayouter && ((this.w > 0 && this.h > 0) || this._inited)) {
	            var ret = this.childrenLayouter.layoutChildren(this, this.children, this.getLayoutRect());
	            return this.layoutRect.copy(ret);
	        }
	        return this.getLayoutRect();
	    };
	    /**
	     * 请求重新布局当前控件。
	     */
	    Widget.prototype.requestRelayout = function () {
	        if (this.parent) {
	            this.parent.relayoutChildren();
	        }
	        return this;
	    };
	    /**
	     * 根据当前的childrenLayouter创建子控件的布局参数。
	     */
	    Widget.prototype.createChildLayoutParam = function (options) {
	        var layouter = this.childrenLayouter;
	        return layouter ? layouter.createParam(options) : null;
	    };
	    /**
	     * 启用指定的childrenLayouter。
	     */
	    Widget.prototype.useChildrenLayouter = function (type, options) {
	        this.childrenLayouter = layouter_1.LayouterFactory.create(type, options);
	        return this;
	    };
	    Object.defineProperty(Widget.prototype, "childrenLayouter", {
	        get: function () {
	            return this._childrenLayouter;
	        },
	        /**
	         * 设置childrenLayouter。
	         */
	        set: function (layouter) {
	            if (typeof layouter === "string") {
	                this._childrenLayouter = layouter_1.LayouterFactory.create(layouter, null);
	            }
	            else {
	                this._childrenLayouter = layouter;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "layoutParam", {
	        get: function () {
	            return this._layoutParam;
	        },
	        /**
	         * 布局参数是父控件在布局当前控件时使用的。
	         */
	        set: function (param) {
	            this._layoutParam = param;
	            if (param) {
	                param.widget = this;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ///////////////////////////////////////////
	    Widget.prototype.indexOfChild = function (child) {
	        return this.children.indexOf(child);
	    };
	    Widget.prototype.findChild = function (func) {
	        var i = 0;
	        var arr = this._children;
	        var n = arr.length;
	        for (var i = 0; i < n; i++) {
	            var iter = arr[i];
	            if (func(iter)) {
	                return iter;
	            }
	        }
	        return null;
	    };
	    Widget.prototype.findChildByName = function (name) {
	        var ret = this.findChild(function (child) {
	            return child.name === name;
	        });
	        return ret;
	    };
	    Widget.prototype.findChildByID = function (id) {
	        var ret = this.findChild(function (child) {
	            return child.id === id;
	        });
	        return ret;
	    };
	    Widget.prototype.find = function (path) {
	        var items = path.split("/");
	        var n = items.length;
	        var ret = this;
	        for (var i = 0; i < n; i++) {
	            var name = items[i];
	            ret = ret.findChildByName(name);
	        }
	        return ret;
	    };
	    Widget.prototype.drawColorBackground = function (ctx, style) {
	        var roundType = 0;
	        var roundTypeName = style.roundType;
	        if (roundTypeName) {
	            if (roundTypeName === "top") {
	                roundType = graphics_1.RoundType.TL | graphics_1.RoundType.TR;
	            }
	            else if (roundTypeName === "bottom") {
	                roundType = graphics_1.RoundType.BL | graphics_1.RoundType.BR;
	            }
	            else if (roundTypeName === "left") {
	                roundType = graphics_1.RoundType.BL | graphics_1.RoundType.TL;
	            }
	            else if (roundTypeName === "right") {
	                roundType = graphics_1.RoundType.TR | graphics_1.RoundType.BR;
	            }
	        }
	        graphics_1.Graphics.drawRoundRect(ctx, style.backGroundColor, style.lineColor, style.lineWidth, 0, 0, this.w, this.h, style.roundRadius, roundType);
	        return this;
	    };
	    Widget.prototype.drawBackground = function (ctx, style) {
	        if (style.backGroundImage) {
	            style.backGroundImage.draw(ctx, style.backGroundImageDrawType, 0, 0, this.w, this.h);
	        }
	        else if (style.backGroundColor || (style.lineColor && style.lineWidth)) {
	            this.drawColorBackground(ctx, style);
	        }
	        return this;
	    };
	    /**
	     * 获取本地化后的文本。
	     */
	    Widget.prototype.getLocaleText = function () {
	        return this.text;
	    };
	    /**
	     * 获取前景图片区域。
	     */
	    Widget.prototype.getFgImageRect = function (style) {
	        return rect_1.Rect.rect.init(this.leftPadding, this.topPadding, this.clientW, this.clientH);
	    };
	    /**
	     * 绘制前景图片，子控件根据需要重载。
	     */
	    Widget.prototype.drawImage = function (ctx, style) {
	        if (style.foreGroundImage) {
	            var r = this.getFgImageRect(style);
	            style.foreGroundImage.draw(ctx, image_tile_1.ImageDrawType.ICON, r.x, r.y, r.w, r.h);
	        }
	        return this;
	    };
	    /**
	     * 获取文本显示区域。
	     */
	    Widget.prototype.getTextRect = function (style) {
	        return rect_1.Rect.rect.init(this.leftPadding, this.topPadding, this.clientW, this.clientH);
	    };
	    Widget.prototype.drawText = function (ctx, style) {
	        var text = this.getLocaleText();
	        if (text && style.textColor) {
	            graphics_1.Graphics.drawTextSL(ctx, text, style, this.getTextRect(style));
	        }
	        return this;
	    };
	    Widget.prototype.drawChildren = function (ctx) {
	        this._children.forEach(function (child) {
	            if (child.visible) {
	                child.draw(ctx);
	            }
	        });
	        return this;
	    };
	    Widget.prototype.drawTips = function (ctx, style) {
	        return this;
	    };
	    Widget.prototype.computeDirtyRectSelf = function (ctx) {
	        if (this._dirty) {
	            ctx.addRect(-5, -5, this.w + 10, this.h + 10);
	        }
	    };
	    /**
	     * 计算脏矩形。
	     */
	    Widget.prototype.computeDirtyRect = function (ctx) {
	        ctx.save();
	        this.applyTransform(ctx);
	        this.computeDirtyRectSelf(ctx);
	        this.children.forEach(function (child) {
	            child.computeDirtyRect(ctx);
	        });
	        ctx.restore();
	    };
	    Widget.prototype.doDraw = function (ctx, style) {
	        if (style) {
	            this.drawBackground(ctx, style)
	                .drawImage(ctx, style)
	                .drawChildren(ctx)
	                .drawText(ctx, style)
	                .drawTips(ctx, style);
	        }
	        else {
	            this.drawChildren(ctx);
	        }
	    };
	    Widget.prototype.draw = function (ctx) {
	        this._dirty = false;
	        var style = this.getStyle();
	        ctx.save();
	        var opacity = this._opacity;
	        if (opacity !== 1) {
	            ctx.globalAlpha *= opacity;
	        }
	        this.applyTransform(ctx);
	        var drawEvent = Events.DrawEvent.get();
	        this.dispatchEvent(drawEvent.reset(Events.BEFORE_DRAW, ctx, this));
	        this.doDraw(ctx, style);
	        this.dispatchEvent(drawEvent.reset(Events.AFTER_DRAW, ctx, this));
	        ctx.restore();
	        return;
	    };
	    Widget.prototype.stateToString = function (state) {
	        return states[state];
	    };
	    ;
	    Object.defineProperty(Widget.prototype, "styleType", {
	        get: function () {
	            return this._styleType;
	        },
	        set: function (styleType) {
	            this._styleType = styleType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Widget.prototype.setStyle = function (state, style) {
	        if (!this._styles) {
	            this._styles = {};
	        }
	        var stateName = this.stateToString(state);
	        this._styles[stateName] = style;
	        return this;
	    };
	    Widget.prototype.getStyleType = function () {
	        return this._styleType || this.type;
	    };
	    Widget.prototype.getStyleOfState = function (state) {
	        var style = null;
	        var tm = this._themeManager;
	        var stateName = this.stateToString(state);
	        if (this._styles) {
	            style = this._styles[stateName];
	        }
	        else if (tm) {
	            var styleType = this.getStyleType();
	            style = tm.get(styleType, stateName);
	        }
	        return style;
	    };
	    Widget.prototype.getStateForStyle = function () {
	        return this.enable ? this._state : WidgetState.DISABLE;
	    };
	    Widget.prototype.getStyle = function () {
	        var state = this.getStateForStyle();
	        var style = this.getStyleOfState(state);
	        if (!style) {
	            style = this.getStyleOfState(WidgetState.NORMAL);
	        }
	        return style;
	    };
	    Widget.prototype.sortChildren = function () {
	        var arr = this._children;
	        utils_1.stableSort(arr, function (a, b) {
	            return a.z - b.z;
	        });
	        return this;
	    };
	    Widget.prototype.removeAllChildren = function () {
	        this.children.forEach(function (child) {
	            child.deinit();
	            child.dispose();
	        });
	        this.target = null;
	        this.children.length = 0;
	        this._lastOverWidget = null;
	        return this;
	    };
	    Widget.prototype.onRemoveChild = function (child) {
	    };
	    Widget.prototype.removeChild = function (child, fastMode, destroy) {
	        var arr = this._children;
	        var index = arr.indexOf(child);
	        if (index >= 0) {
	            arr.splice(index, 1);
	            if (!fastMode) {
	                this.relayoutChildren();
	            }
	        }
	        this.onRemoveChild(child);
	        if (destroy) {
	            child.deinit();
	            child.dispose();
	        }
	        return this;
	    };
	    Widget.prototype.onAddChild = function (child) {
	    };
	    Widget.prototype.addChild = function (child, fastMode) {
	        var arr = this._children;
	        arr.push(child);
	        child.parent = this;
	        child.app = this.app;
	        if (this._inited) {
	            child.init();
	        }
	        if (!fastMode) {
	            this.sortChildren();
	            this.relayoutChildren();
	        }
	        this.onAddChild(child);
	        return this;
	    };
	    Widget.prototype.dispose = function () {
	        this.dispatchEvent({ type: Events.DISPOSE });
	        if (this._canvas) {
	            this._canvas.dispose();
	            this._canvas = null;
	        }
	        this.removeAllListeners();
	        this._children.forEach(function (child) {
	            child.dispose();
	        });
	        this._app = null;
	        this._parent = null;
	        this._children = [];
	        this._layoutParam = null;
	        this._childrenLayouter = null;
	        this._viewModel = null;
	        this._dataBindingRule = null;
	        this.removeBinding();
	        if (this.recycle) {
	            this.recycle();
	        }
	    };
	    Widget.prototype.requestRedraw = function () {
	        var app = this._app;
	        this._dirty = true;
	        if (app) {
	            app.getMainLoop().requestRedraw();
	        }
	        return this;
	    };
	    //////////////////////////////////////////////////
	    Widget.prototype.createCanvas = function () {
	        var _this = this;
	        var app = this.app;
	        var density = app.getViewPort().density;
	        var canvas = canvas_1.Canvas.create(this.x, this.y, this.w, this.h, density);
	        var matrixStack = matrix_stack_1.MatrixStack.create();
	        canvas.ensureCanvas();
	        canvas.on(Events.POINTER_DOWN, function (evt) {
	            matrixStack.identity();
	            _this.dispatchPointerDown(evt, matrixStack);
	        });
	        canvas.on(Events.POINTER_MOVE, function (evt) {
	            matrixStack.identity();
	            _this.dispatchPointerMove(evt, matrixStack);
	        });
	        canvas.on(Events.POINTER_UP, function (evt) {
	            _this.dispatchPointerUp(evt);
	        });
	        canvas.on(Events.CLICK, function (evt) {
	            _this.dispatchClick(evt);
	        });
	        canvas.on(Events.DBLCLICK, function (evt) {
	            _this.dispatchDblClick(evt);
	        });
	        canvas.on(Events.CONTEXT_MENU, function (evt) {
	            _this.dispatchContextMenu(evt);
	        });
	        canvas.on(Events.WHEEL, function (evt) {
	            _this.dispatchWheel(evt);
	        });
	        canvas.on(Events.KEYDOWN, function (evt) {
	            _this.dispatchKeyDown(evt);
	        });
	        canvas.on(Events.KEYUP, function (evt) {
	            _this.dispatchKeyUp(evt);
	        });
	        this._canvas = canvas;
	        var mainLoop = this.app.getMainLoop();
	        var dirtyRectContext = dirty_rect_context_1.DirtyRectContext.create();
	        var lastDirtyRect = rect_1.Rect.create(0, 0, this.w, this.h);
	        var debugDirtyRect = app.options.debugDirtyRect;
	        function drawWithDirtyRect(evt) {
	            var ctx = canvas.getContext("2d");
	            dirtyRectContext.reset();
	            this.computeDirtyRect(dirtyRectContext);
	            var dirtyRect = dirtyRectContext.getRect();
	            var r = lastDirtyRect.merge(dirtyRect);
	            if (r.w > 0 && r.h > 0) {
	                ctx.save();
	                ctx.beginPath();
	                ctx.clearRect(r.x, r.y, r.w, r.h);
	                ctx.rect(r.x, r.y, r.w, r.h);
	                ctx.clip();
	                ctx.globalAlpha = 1;
	                this.draw(ctx);
	                if (debugDirtyRect) {
	                    ctx.lineWidth = 1;
	                    ctx.strokeStyle = "gold";
	                    ctx.strokeRect(dirtyRect.x + 1, dirtyRect.y + 1, dirtyRect.w - 2, dirtyRect.h - 2);
	                }
	                ctx.restore();
	            }
	            lastDirtyRect.copy(dirtyRect);
	        }
	        function drawWithoutDirtyRect(evt) {
	            var ctx = canvas.getContext("2d");
	            ctx.globalAlpha = 1;
	            this.draw(ctx);
	        }
	        var withoutDirtyRect = app.options.withoutDirtyRect;
	        var draw = withoutDirtyRect ? drawWithoutDirtyRect.bind(this) : drawWithDirtyRect.bind(this);
	        mainLoop.on(Events.TICK, draw);
	        this.on(Events.DISPOSE, function (evt) {
	            mainLoop.off(Events.TICK, draw);
	        });
	        this.on(Events.PROP_CHANGE, function (evt) {
	            var prop = evt.prop;
	            var value = evt.newValue;
	            switch (prop) {
	                case "x": {
	                    canvas.x = value;
	                    break;
	                }
	                case "y": {
	                    canvas.y = value;
	                    break;
	                }
	                case "w": {
	                    canvas.w = value;
	                    break;
	                }
	                case "h": {
	                    canvas.h = value;
	                    break;
	                }
	                case "z": {
	                    canvas.z = value;
	                    break;
	                }
	            }
	        });
	        return this;
	    };
	    Object.defineProperty(Widget.prototype, "dirty", {
	        //////////////////////////////////////////////////
	        get: function () {
	            return this._dirty;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "x", {
	        get: function () {
	            return this._x;
	        },
	        set: function (value) {
	            this.setProp("x", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "y", {
	        get: function () {
	            return this._y;
	        },
	        set: function (value) {
	            this.setProp("y", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "z", {
	        get: function () {
	            return this._z;
	        },
	        set: function (value) {
	            this.setProp("z", value, true);
	            if (this._parent) {
	                this._parent.sortChildren();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "desireWidth", {
	        get: function () {
	            return this._w;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "w", {
	        get: function () {
	            return this._w;
	        },
	        set: function (value) {
	            this.setProp("w", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "width", {
	        get: function () {
	            return this._w;
	        },
	        set: function (value) {
	            this.setProp("w", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "clientW", {
	        get: function () {
	            return this._w - this.leftPadding - this.rightPadding;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "clientH", {
	        get: function () {
	            return this._h - this.topPadding - this.bottomPadding;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "height", {
	        get: function () {
	            return this._h;
	        },
	        set: function (value) {
	            this.setProp("h", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "h", {
	        get: function () {
	            return this._h;
	        },
	        set: function (value) {
	            this.setProp("h", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "state", {
	        get: function () {
	            return this._state;
	        },
	        set: function (value) {
	            if (this._state !== value) {
	                this.setProp("state", value, true);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            this.setValue(value, false, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this.setProp("selected", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "isEnableFunc", {
	        get: function () {
	            return this._isEnableFunc;
	        },
	        set: function (value) {
	            this._isEnableFunc = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "enable", {
	        get: function () {
	            if (this.isEnableFunc) {
	                return this.isEnableFunc();
	            }
	            return this._enable;
	        },
	        set: function (value) {
	            this.setProp("enable", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "visible", {
	        get: function () {
	            return this._visible;
	        },
	        set: function (value) {
	            var oldValue = this._visible;
	            if (this.value !== oldValue) {
	                this.setVisible(value);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "inputable", {
	        /**
	         * 用户是否可以通过本控件输入/选择数据。
	         */
	        get: function () {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Widget.prototype.setVisible = function (value) {
	        this.setProp("visible", value, true);
	        this.dispatchEvent({ type: value ? Events.SHOW : Events.HIDE });
	        this.requestRedraw();
	    };
	    Object.defineProperty(Widget.prototype, "opacity", {
	        get: function () {
	            return this._opacity;
	        },
	        set: function (value) {
	            this.setProp("opacity", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "scaleX", {
	        get: function () {
	            return this._scaleX;
	        },
	        set: function (value) {
	            this.setProp("scaleX", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "scaleY", {
	        get: function () {
	            return this._scaleY;
	        },
	        set: function (value) {
	            this.setProp("scaleY", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "rotation", {
	        get: function () {
	            return this._rotation;
	        },
	        set: function (value) {
	            this.setProp("rotation", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "focusable", {
	        get: function () {
	            return this._focusable;
	        },
	        set: function (value) {
	            this.setProp("focusable", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "sensitive", {
	        get: function () {
	            return this._sensitive;
	        },
	        set: function (value) {
	            this.setProp("sensitive", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "pivotX", {
	        get: function () {
	            return this._pivotX;
	        },
	        set: function (value) {
	            this.setProp("pivotX", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "pivotY", {
	        get: function () {
	            return this._pivotY;
	        },
	        set: function (value) {
	            this.setProp("pivotY", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "tips", {
	        get: function () {
	            return this._tips;
	        },
	        set: function (value) {
	            this.setProp("tips", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "text", {
	        get: function () {
	            return this._text;
	        },
	        set: function (value) {
	            this.setProp("text", (value || value === 0) ? value.toString() : "", true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "name", {
	        get: function () {
	            return this._name;
	        },
	        set: function (value) {
	            this.setProp("name", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "type", {
	        get: function () {
	            return this._type;
	        },
	        set: function (value) {
	            this.setProp("type", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "id", {
	        get: function () {
	            return this._id;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "tag", {
	        get: function () {
	            return this._tag;
	        },
	        set: function (value) {
	            this.setProp("tag", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "userData", {
	        get: function () {
	            return this._userData;
	        },
	        set: function (value) {
	            this._userData = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "target", {
	        get: function () {
	            return this._target;
	        },
	        set: function (value) {
	            this._target = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "hitTestResult", {
	        get: function () {
	            return this._hitTestResult;
	        },
	        set: function (value) {
	            this._hitTestResult = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "parent", {
	        get: function () {
	            return this._parent;
	        },
	        set: function (value) {
	            this._parent = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "app", {
	        get: function () {
	            return this._app;
	        },
	        set: function (app) {
	            this._app = app;
	            if (app) {
	                this._mainLoop = app.getMainLoop();
	                this._themeManager = app.getThemeManager();
	            }
	            this.children.forEach(function (child) {
	                child.app = app;
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "win", {
	        get: function () {
	            for (var iter = this; iter !== null; iter = iter._parent) {
	                if (iter._isWindow) {
	                    return iter;
	                }
	            }
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "children", {
	        get: function () {
	            return this._children;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "canvas", {
	        get: function () {
	            return this._canvas;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Widget.prototype.isWindow = function () {
	        return this._isWindow;
	    };
	    Object.defineProperty(Widget.prototype, "leftPadding", {
	        get: function () {
	            return this._lp;
	        },
	        set: function (value) {
	            this.setProp("lp", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "rightPadding", {
	        get: function () {
	            return this._rp;
	        },
	        set: function (value) {
	            this.setProp("rp", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "topPadding", {
	        get: function () {
	            return this._tp;
	        },
	        set: function (value) {
	            this.setProp("tp", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "bottomPadding", {
	        get: function () {
	            return this._bp;
	        },
	        set: function (value) {
	            this.setProp("bp", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Widget.prototype, "padding", {
	        get: function () {
	            return this._tp;
	        },
	        set: function (value) {
	            this.setProp("lp", value, true);
	            this.setProp("tp", value, true);
	            this.setProp("rp", value, true);
	            this.setProp("bp", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Widget.prototype.setProp = function (prop, newValue, notify) {
	        var propName = "_" + prop;
	        var oldValue = this[propName];
	        if (oldValue !== newValue) {
	            this[propName] = newValue;
	            this.requestRedraw();
	            if (notify) {
	                var evt = this.ePropChangeEvent;
	                evt.init(Events.PROP_CHANGE, { prop: prop, oldValue: oldValue, newValue: newValue });
	                this.dispatchEvent(evt);
	            }
	        }
	        return this;
	    };
	    Widget.prototype.setText = function (text, notify) {
	        return this.setProp("text", text, notify);
	    };
	    Widget.prototype.useBehavior = function (type, options) {
	        var behavior;
	        if (!this._behaviors[type]) {
	            behavior = behavior_1.BehaviorFactory.create(type, this, options);
	            this._behaviors[type] = behavior;
	        }
	        else {
	            behavior = this._behaviors[type];
	            behavior.setOptions(options);
	        }
	        return behavior;
	    };
	    Widget.prototype.notifyChange = function () {
	        this.dispatchEvent(this.eChangeEvent.init(Events.CHANGE, { newValue: this.value, oldValue: !this.value }));
	    };
	    Widget.prototype.setValue = function (value, notify, exclude) {
	        var _this = this;
	        if (exclude) {
	            var type = this.type;
	            if (this.parent && value) {
	                var arr = this.parent.children;
	                arr.forEach(function (child) {
	                    if (child !== _this && child.type === type) {
	                        if (child.value) {
	                            child.setProp("value", false, true);
	                        }
	                    }
	                });
	            }
	            this.setProp("value", true, notify);
	        }
	        else {
	            this.setProp("value", value, notify);
	        }
	        if (notify) {
	            this.notifyChange();
	        }
	    };
	    Widget.prototype.onReset = function () {
	    };
	    Widget.prototype.onCreated = function () {
	    };
	    Widget.prototype.getDefProps = function () {
	        return Widget.defProps;
	    };
	    Widget.prototype.reset = function (type, options) {
	        var defProps = this.getDefProps();
	        for (var key in defProps) {
	            this[key] = defProps[key];
	        }
	        this._dirty = true;
	        this._type = type;
	        this._app = null;
	        this._children = [];
	        this._parent = null;
	        this._canvas = null;
	        this._styles = null;
	        this._target = null;
	        this._mainLoop = null;
	        this._userData = null;
	        this._themeManager = null;
	        this._lastOverWidget = null;
	        this._id = Date.now() + "." + Widget.ID++;
	        ;
	        this.onclick = null;
	        this.oncontextmenu = null;
	        this.onpointerdown = null;
	        this.onpointermove = null;
	        this.onpointerup = null;
	        this.onwheel = null;
	        this.onkeydown = null;
	        this.onkeyup = null;
	        this._behaviors = {};
	        this._viewModel = null;
	        this._dataBindingRule = null;
	        this.onReset();
	        this.set(options);
	        this.onCreated();
	        return this;
	    };
	    Widget.prototype.onFromJson = function (json) {
	    };
	    Widget.prototype.fromJson = function (json) {
	        var _this = this;
	        var defProps = this.getDefProps();
	        for (var key in defProps) {
	            var value = json[key];
	            if (value === undefined) {
	                value = defProps[key];
	            }
	            this[key] = value;
	        }
	        var styles = json.styles;
	        if (styles) {
	            this._styles = {};
	            for (var key in styles) {
	                var style = styles[key];
	                json._styles[key] = style_1.Style.create(style);
	            }
	        }
	        var childrenLayouter = json.childrenLayouter;
	        if (childrenLayouter) {
	            this.childrenLayouter = layouter_1.LayouterFactory.create(childrenLayouter.type, childrenLayouter);
	        }
	        var layoutParam = json.layoutParam;
	        if (layoutParam) {
	            this.layoutParam = layouter_1.LayouterParamFactory.create(layoutParam.type, layoutParam);
	        }
	        this._children.length = 0;
	        if (json.children) {
	            json.children.forEach(function (childJson) {
	                var child = widget_factory_1.WidgetFactory.create(childJson.type, { parent: _this, app: _this.app });
	                child.fromJson(childJson);
	                _this._children.push(child);
	            });
	        }
	        if (json._dataBindingRule) {
	            this._dataBindingRule = json._dataBindingRule;
	        }
	        this.onFromJson(json);
	        return this;
	    };
	    Widget.prototype.clone = function () {
	        var json = this.toJson();
	        var widget = widget_factory_1.WidgetFactory.createWithJson(json);
	        return widget;
	    };
	    Widget.prototype.onToJson = function (json) {
	    };
	    Widget.prototype.toJson = function () {
	        var json = {};
	        json.type = this._type;
	        var defProps = this.getDefProps();
	        for (var key in defProps) {
	            var value = this[key];
	            if (value !== defProps[key]) {
	                json[key] = value;
	            }
	        }
	        var styles = this._styles;
	        if (styles) {
	            json.styles = {};
	            for (var key in styles) {
	                var style = styles[key];
	                json.styles[key] = style.toJson();
	            }
	        }
	        if (this.childrenLayouter) {
	            json.childrenLayouter = this.childrenLayouter.toJson();
	        }
	        if (this.layoutParam) {
	            json.layoutParam = this.layoutParam.toJson();
	        }
	        if (this.children.length) {
	            json.children = [];
	            this.children.forEach(function (child) {
	                json.children.push(child.toJson());
	            });
	        }
	        if (this._dataBindingRule) {
	            json._dataBindingRule = this._dataBindingRule;
	        }
	        this.onToJson(json);
	        return json;
	    };
	    Object.defineProperty(Widget.prototype, "templateItem", {
	        get: function () {
	            return this._templateItem;
	        },
	        set: function (value) {
	            this._templateItem = value;
	            this._templateItemJson = value ? value.toJson() : null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Widget.prototype.addChildWithTemplate = function (fastMode) {
	        var child = null;
	        var json = this._templateItemJson;
	        if (json) {
	            child = widget_factory_1.WidgetFactory.createWithJson(json);
	            this.addChild(child, fastMode);
	        }
	        return child;
	    };
	    ////////////////////////////////////////////	
	    //绑定单个属性，子控件可以重载本函数去支持其它属性。
	    Widget.prototype.onBindProp = function (prop, value) {
	        if (prop === "text") {
	            this.text = value;
	        }
	        else if (prop === "value") {
	            this.value = value;
	        }
	    };
	    Object.defineProperty(Widget.prototype, "dataBindingRule", {
	        get: function () {
	            return this._dataBindingRule;
	        },
	        /**
	         * 数据绑定规则。
	         */
	        set: function (dataBindingRule) {
	            this._dataBindingRule = binding_rule_1.BindingRule.create(dataBindingRule);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 显式的更新ViewModel。
	     */
	    Widget.prototype.updateExplicit = function () {
	        if (this._dataBindingRule) {
	            this.onUpdateToDataSource();
	        }
	        this.children.forEach(function (child) {
	            child.updateExplicit();
	        });
	    };
	    Widget.prototype.removeBinding = function () {
	        var viewModel = this._viewModel;
	        var dataBindingRule = this._dataBindingRule;
	        if (dataBindingRule && viewModel) {
	            viewModel.offChange(this.viewModelChangeFunc);
	        }
	        this._viewModel = null;
	        this._dataBindingRule = null;
	    };
	    Widget.prototype.onBeforeBindData = function () {
	    };
	    Widget.prototype.onAfterBindData = function () {
	    };
	    /**
	     * 绑定数据。
	     */
	    Widget.prototype.bindData = function (viewModel) {
	        var _this = this;
	        var dataBindingRule = this._dataBindingRule;
	        this._viewModel = viewModel;
	        this.onBeforeBindData();
	        if (dataBindingRule && viewModel) {
	            var bindingMode = viewModel.bindingMode;
	            this.onBindCommand(viewModel, dataBindingRule);
	            if (bindingMode !== iview_model_1.BindingMode.ONE_WAY_TO_SOURCE) {
	                this.onBindData(viewModel, dataBindingRule);
	            }
	            if (bindingMode === iview_model_1.BindingMode.TWO_WAY || bindingMode === iview_model_1.BindingMode.ONE_WAY_TO_SOURCE) {
	                this.watchTargetChange(dataBindingRule);
	            }
	            if (bindingMode !== iview_model_1.BindingMode.ONE_TIME && bindingMode !== iview_model_1.BindingMode.ONE_WAY_TO_SOURCE) {
	                viewModel.onChange(this.viewModelChangeFunc);
	            }
	            this._isEnableFunc = function () {
	                var enable = true;
	                var vm = this._viewModel;
	                if (vm) {
	                    dataBindingRule.forEach(function (prop, item) {
	                        var source = item.source;
	                        if (source.type === binding_rule_1.BindingCommandSource.TYPE) {
	                            var commandSource = source;
	                            enable = enable && vm.canExecute(commandSource.command);
	                        }
	                    });
	                }
	                return enable;
	            };
	        }
	        this.bindChildren(viewModel);
	        if (viewModel.isCollection && this._templateItemJson) {
	            var collectionViewModel = viewModel;
	            collectionViewModel.onItemsChange(function (evt) {
	                _this.bindChildren(viewModel);
	            });
	        }
	        this.onAfterBindData();
	        return this;
	    };
	    Widget.prototype.bindChildren = function (viewModel) {
	        if (viewModel.isCollection) {
	            if (this._templateItemJson) {
	                //对于集合viewModel，如果有模板项存在，则动态生成子控件。
	                var json = this._templateItemJson;
	                var collectionViewModel = viewModel;
	                var n = collectionViewModel.total;
	                this.removeAllChildren();
	                for (var i = 0; i < n; i++) {
	                    var itemViewModel = collectionViewModel.getItemViewModel(i);
	                    var child = this.addChildWithTemplate(true);
	                    child.bindData(itemViewModel);
	                }
	                this.relayoutChildren();
	            }
	            else {
	                //对于集合viewModel，如果没有模板项存在，则绑定集合viewModel当前项到子控件。
	                this._children.forEach(function (child) {
	                    child.bindData(viewModel);
	                });
	            }
	        }
	        else {
	            //对于非集合viewModel，按正常绑定子控件。
	            this._children.forEach(function (child) {
	                child.bindData(viewModel);
	            });
	        }
	    };
	    Widget.prototype.onBindCommand = function (viewModel, dataBindingRule) {
	        var _this = this;
	        dataBindingRule.forEach(function (prop, item) {
	            var source = item.source;
	            if (source.type === binding_rule_1.BindingCommandSource.TYPE) {
	                var commandSource = source;
	                var type = Events.mapToEvent(prop);
	                if (type) {
	                    if (commandSource.eventHandler) {
	                        _this.off(type, commandSource.eventHandler);
	                    }
	                    commandSource.eventHandler = function (evt) {
	                        var args = commandSource.commandArgs || evt;
	                        viewModel.execCommand(commandSource.command, args);
	                    };
	                    _this.on(type, commandSource.eventHandler);
	                }
	                else {
	                    console.log(prop + " is not supported yet.");
	                }
	            }
	        });
	    };
	    /*
	     * 把数据显示到界面上。
	     */
	    Widget.prototype.onBindData = function (viewModel, dataBindingRule) {
	        var _this = this;
	        dataBindingRule.forEach(function (prop, item) {
	            var source = item.source;
	            if (source.type === binding_rule_1.BindingDataSource.TYPE) {
	                var dataSource = source;
	                var value = dataSource.value;
	                var bindingMode = dataSource.mode || iview_model_1.BindingMode.TWO_WAY;
	                if (value === undefined && dataSource.path) {
	                    value = viewModel.getProp(dataSource.path, dataSource.converter);
	                }
	                if (bindingMode !== iview_model_1.BindingMode.ONE_WAY_TO_SOURCE) {
	                    _this.onBindProp(prop, value);
	                }
	            }
	        });
	    };
	    Widget.prototype.getPropDefaultBindMode = function (prop) {
	        return (prop === "value" && this.inputable) ? iview_model_1.BindingMode.TWO_WAY : iview_model_1.BindingMode.ONE_WAY;
	    };
	    /*
	     * 子控件重载此函数向用户提示数据无效。
	     */
	    Widget.prototype.onInvalidInput = function (message) {
	        if (message) {
	            console.log("invalid value:" + message);
	        }
	    };
	    Widget.prototype.onUpdateToDataSource = function () {
	        var _this = this;
	        var dataBindingRule = this._dataBindingRule;
	        dataBindingRule.forEach(function (prop, item) {
	            if (item.source.type === binding_rule_1.BindingDataSource.TYPE) {
	                var dataSource = item.source;
	                if (dataSource.updateTiming === iview_model_1.UpdateTiming.EXPLICIT) {
	                    _this.updateValueToSource(_this.value, dataSource);
	                }
	            }
	        });
	    };
	    Widget.prototype.updateValueToSource = function (value, dataSource, oldValue) {
	        var result = this._viewModel.setPropEx(dataSource, value, oldValue);
	        if (result.code) {
	            this.onInvalidInput(result.message);
	        }
	        else {
	            this.onInvalidInput(null);
	        }
	    };
	    /*
	     * 监控控件单个属性的变化。
	     */
	    Widget.prototype.watchTargetValueChange = function (dataSource) {
	        var _this = this;
	        var updateTiming = dataSource.updateTiming;
	        var bindingMode = dataSource.mode || iview_model_1.BindingMode.TWO_WAY;
	        if (updateTiming === iview_model_1.UpdateTiming.EXPLICIT) {
	            return;
	        }
	        if (bindingMode === iview_model_1.BindingMode.TWO_WAY || bindingMode === iview_model_1.BindingMode.ONE_WAY_TO_SOURCE) {
	            this.on(Events.CHANGE, function (evt) {
	                _this.updateValueToSource(evt.value, dataSource, evt.oldValue);
	            });
	            if (updateTiming === iview_model_1.UpdateTiming.CHANGING) {
	                this.on(Events.CHANGING, function (evt) {
	                    _this.updateValueToSource(evt.value, dataSource);
	                });
	            }
	        }
	    };
	    /*
	     * 监控控件属性的变化。
	     */
	    Widget.prototype.watchTargetChange = function (dataBindingRule) {
	        var _this = this;
	        dataBindingRule.forEach(function (prop, item) {
	            var source = item.source;
	            if (source.type === binding_rule_1.BindingDataSource.TYPE) {
	                var dataSource = source;
	                var bindingMode = _this.getPropDefaultBindMode(prop);
	                if (bindingMode === iview_model_1.BindingMode.TWO_WAY) {
	                    _this.watchTargetValueChange(dataSource);
	                }
	            }
	        });
	    };
	    Widget.defProps = {
	        _x: 0,
	        _y: 0,
	        _z: 0,
	        _w: 0,
	        _h: 0,
	        _state: 0,
	        _value: 0,
	        _enable: true,
	        _visible: true,
	        _selected: false,
	        _opacity: 1,
	        _scaleX: 1,
	        _scaleY: 1,
	        _pivotX: 0.5,
	        _pivotY: 0.5,
	        _rotation: 0,
	        _focusable: false,
	        _sensitive: true,
	        _tips: null,
	        _text: null,
	        _name: null,
	        _tag: null,
	        _hitTestResult: 0,
	        _isWindow: false,
	        _mode: 0,
	        _styleType: null,
	        _lp: 0,
	        _tp: 0,
	        _rp: 0,
	        _bp: 0
	    };
	    Widget.ID = 10000;
	    return Widget;
	}(emitter_1.Emitter));
	exports.Widget = Widget;
	;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Tween.js - Licensed under the MIT license
	 * https://github.com/tweenjs/tween.js
	 * ----------------------------------------------
	 *
	 * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
	 * Thank you all, you're awesome!
	 */

	var TWEEN = TWEEN || (function () {

		var _tweens = [];

		return {

			getAll: function () {

				return _tweens;

			},

			removeAll: function () {

				_tweens = [];

			},

			add: function (tween) {

				_tweens.push(tween);

			},

			remove: function (tween) {

				var i = _tweens.indexOf(tween);

				if (i !== -1) {
					_tweens.splice(i, 1);
				}

			},

			update: function (time, preserve) {

				if (_tweens.length === 0) {
					return false;
				}

				var i = 0;

				time = time !== undefined ? time : TWEEN.now();

				while (i < _tweens.length) {

					if (_tweens[i].update(time) || preserve) {
						i++;
					} else {
						_tweens.splice(i, 1);
					}

				}

				return true;

			}
		};

	})();


	// Include a performance.now polyfill
	(function () {
		// In node.js, use process.hrtime.
		if (this.window === undefined && this.process !== undefined) {
			TWEEN.now = function () {
				var time = process.hrtime();

				// Convert [seconds, microseconds] to milliseconds.
				return time[0] * 1000 + time[1] / 1000;
			};
		}
		// In a browser, use window.performance.now if it is available.
		else if (this.window !== undefined &&
		         window.performance !== undefined &&
			 window.performance.now !== undefined) {

			// This must be bound, because directly assigning this function
			// leads to an invocation exception in Chrome.
			TWEEN.now = window.performance.now.bind(window.performance);
		}
		// Use Date.now if it is available.
		else if (Date.now !== undefined) {
			TWEEN.now = Date.now;
		}
		// Otherwise, use 'new Date().getTime()'.
		else {
			TWEEN.now = function () {
				return new Date().getTime();
			};
		}
	})();


	TWEEN.Tween = function (object) {

		var _object = object;
		var _valuesStart = {};
		var _valuesEnd = {};
		var _valuesStartRepeat = {};
		var _duration = 1000;
		var _repeat = 0;
		var _yoyo = false;
		var _isPlaying = false;
		var _reversed = false;
		var _delayTime = 0;
		var _startTime = null;
		var _easingFunction = TWEEN.Easing.Linear.None;
		var _interpolationFunction = TWEEN.Interpolation.Linear;
		var _chainedTweens = [];
		var _onStartCallback = null;
		var _onStartCallbackFired = false;
		var _onUpdateCallback = null;
		var _onCompleteCallback = null;
		var _onStopCallback = null;

		// Set all starting values present on the target object
		for (var field in object) {
			_valuesStart[field] = parseFloat(object[field], 10);
		}

		this.to = function (properties, duration) {

			if (duration !== undefined) {
				_duration = duration;
			}

			_valuesEnd = properties;

			return this;

		};

		this.start = function (time) {

			TWEEN.add(this);

			_isPlaying = true;

			_onStartCallbackFired = false;

			_startTime = time !== undefined ? time : TWEEN.now();
			_startTime += _delayTime;

			for (var property in _valuesEnd) {

				// Check if an Array was provided as property value
				if (_valuesEnd[property] instanceof Array) {

					if (_valuesEnd[property].length === 0) {
						continue;
					}

					// Create a local copy of the Array with the start value at the front
					_valuesEnd[property] = [_object[property]].concat(_valuesEnd[property]);

				}

				// If `to()` specifies a property that doesn't exist in the source object,
				// we should not set that property in the object
				if (_valuesStart[property] === undefined) {
					continue;
				}

				_valuesStart[property] = _object[property];

				if ((_valuesStart[property] instanceof Array) === false) {
					_valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings
				}

				_valuesStartRepeat[property] = _valuesStart[property] || 0;

			}

			return this;

		};

		this.stop = function () {

			if (!_isPlaying) {
				return this;
			}

			TWEEN.remove(this);
			_isPlaying = false;

			if (_onStopCallback !== null) {
				_onStopCallback.call(_object);
			}

			this.stopChainedTweens();
			return this;

		};

		this.stopChainedTweens = function () {

			for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
				_chainedTweens[i].stop();
			}

		};

		this.delay = function (amount) {

			_delayTime = amount;
			return this;

		};

		this.repeat = function (times) {

			_repeat = times;
			return this;

		};

		this.yoyo = function (yoyo) {

			_yoyo = yoyo;
			return this;

		};


		this.easing = function (easing) {

			_easingFunction = easing;
			return this;

		};

		this.interpolation = function (interpolation) {

			_interpolationFunction = interpolation;
			return this;

		};

		this.chain = function () {

			_chainedTweens = arguments;
			return this;

		};

		this.onStart = function (callback) {

			_onStartCallback = callback;
			return this;

		};

		this.onUpdate = function (callback) {

			_onUpdateCallback = callback;
			return this;

		};

		this.onComplete = function (callback) {

			_onCompleteCallback = callback;
			return this;

		};

		this.onStop = function (callback) {

			_onStopCallback = callback;
			return this;

		};

		this.update = function (time) {

			var property;
			var elapsed;
			var value;

			if (time < _startTime) {
				return true;
			}

			if (_onStartCallbackFired === false) {

				if (_onStartCallback !== null) {
					_onStartCallback.call(_object);
				}

				_onStartCallbackFired = true;

			}

			elapsed = (time - _startTime) / _duration;
			elapsed = elapsed > 1 ? 1 : elapsed;

			value = _easingFunction(elapsed);

			for (property in _valuesEnd) {

				// Don't update properties that do not exist in the source object
				if (_valuesStart[property] === undefined) {
					continue;
				}

				var start = _valuesStart[property] || 0;
				var end = _valuesEnd[property];

				if (end instanceof Array) {

					_object[property] = _interpolationFunction(end, value);

				} else {

					// Parses relative end values with start as base (e.g.: +10, -3)
					if (typeof (end) === 'string') {

						if (end.charAt(0) === '+' || end.charAt(0) === '-') {
							end = start + parseFloat(end, 10);
						} else {
							end = parseFloat(end, 10);
						}
					}

					// Protect against non numeric properties.
					if (typeof (end) === 'number') {
						_object[property] = start + (end - start) * value;
					}

				}

			}

			if (_onUpdateCallback !== null) {
				_onUpdateCallback.call(_object, value);
			}

			if (elapsed === 1) {

				if (_repeat > 0) {

					if (isFinite(_repeat)) {
						_repeat--;
					}

					// Reassign starting values, restart by making startTime = now
					for (property in _valuesStartRepeat) {

						if (typeof (_valuesEnd[property]) === 'string') {
							_valuesStartRepeat[property] = _valuesStartRepeat[property] + parseFloat(_valuesEnd[property], 10);
						}

						if (_yoyo) {
							var tmp = _valuesStartRepeat[property];

							_valuesStartRepeat[property] = _valuesEnd[property];
							_valuesEnd[property] = tmp;
						}

						_valuesStart[property] = _valuesStartRepeat[property];

					}

					if (_yoyo) {
						_reversed = !_reversed;
					}

					_startTime = time + _delayTime;

					return true;

				} else {

					if (_onCompleteCallback !== null) {
						_onCompleteCallback.call(_object);
					}

					for (var i = 0, numChainedTweens = _chainedTweens.length; i < numChainedTweens; i++) {
						// Make the chained tweens start exactly at the time they should,
						// even if the `update()` method was called way past the duration of the tween
						_chainedTweens[i].start(_startTime + _duration);
					}

					return false;

				}

			}

			return true;

		};

	};


	TWEEN.Easing = {

		Linear: {

			None: function (k) {

				return k;

			}

		},

		Quadratic: {

			In: function (k) {

				return k * k;

			},

			Out: function (k) {

				return k * (2 - k);

			},

			InOut: function (k) {

				if ((k *= 2) < 1) {
					return 0.5 * k * k;
				}

				return - 0.5 * (--k * (k - 2) - 1);

			}

		},

		Cubic: {

			In: function (k) {

				return k * k * k;

			},

			Out: function (k) {

				return --k * k * k + 1;

			},

			InOut: function (k) {

				if ((k *= 2) < 1) {
					return 0.5 * k * k * k;
				}

				return 0.5 * ((k -= 2) * k * k + 2);

			}

		},

		Quartic: {

			In: function (k) {

				return k * k * k * k;

			},

			Out: function (k) {

				return 1 - (--k * k * k * k);

			},

			InOut: function (k) {

				if ((k *= 2) < 1) {
					return 0.5 * k * k * k * k;
				}

				return - 0.5 * ((k -= 2) * k * k * k - 2);

			}

		},

		Quintic: {

			In: function (k) {

				return k * k * k * k * k;

			},

			Out: function (k) {

				return --k * k * k * k * k + 1;

			},

			InOut: function (k) {

				if ((k *= 2) < 1) {
					return 0.5 * k * k * k * k * k;
				}

				return 0.5 * ((k -= 2) * k * k * k * k + 2);

			}

		},

		Sinusoidal: {

			In: function (k) {

				return 1 - Math.cos(k * Math.PI / 2);

			},

			Out: function (k) {

				return Math.sin(k * Math.PI / 2);

			},

			InOut: function (k) {

				return 0.5 * (1 - Math.cos(Math.PI * k));

			}

		},

		Exponential: {

			In: function (k) {

				return k === 0 ? 0 : Math.pow(1024, k - 1);

			},

			Out: function (k) {

				return k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);

			},

			InOut: function (k) {

				if (k === 0) {
					return 0;
				}

				if (k === 1) {
					return 1;
				}

				if ((k *= 2) < 1) {
					return 0.5 * Math.pow(1024, k - 1);
				}

				return 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);

			}

		},

		Circular: {

			In: function (k) {

				return 1 - Math.sqrt(1 - k * k);

			},

			Out: function (k) {

				return Math.sqrt(1 - (--k * k));

			},

			InOut: function (k) {

				if ((k *= 2) < 1) {
					return - 0.5 * (Math.sqrt(1 - k * k) - 1);
				}

				return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);

			}

		},

		Elastic: {

			In: function (k) {

				if (k === 0) {
					return 0;
				}

				if (k === 1) {
					return 1;
				}

				return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);

			},

			Out: function (k) {

				if (k === 0) {
					return 0;
				}

				if (k === 1) {
					return 1;
				}

				return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;

			},

			InOut: function (k) {

				if (k === 0) {
					return 0;
				}

				if (k === 1) {
					return 1;
				}

				k *= 2;

				if (k < 1) {
					return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
				}

				return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;

			}

		},

		Back: {

			In: function (k) {

				var s = 1.70158;

				return k * k * ((s + 1) * k - s);

			},

			Out: function (k) {

				var s = 1.70158;

				return --k * k * ((s + 1) * k + s) + 1;

			},

			InOut: function (k) {

				var s = 1.70158 * 1.525;

				if ((k *= 2) < 1) {
					return 0.5 * (k * k * ((s + 1) * k - s));
				}

				return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);

			}

		},

		Bounce: {

			In: function (k) {

				return 1 - TWEEN.Easing.Bounce.Out(1 - k);

			},

			Out: function (k) {

				if (k < (1 / 2.75)) {
					return 7.5625 * k * k;
				} else if (k < (2 / 2.75)) {
					return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
				} else if (k < (2.5 / 2.75)) {
					return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
				} else {
					return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
				}

			},

			InOut: function (k) {

				if (k < 0.5) {
					return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
				}

				return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;

			}

		}

	};

	TWEEN.Interpolation = {

		Linear: function (v, k) {

			var m = v.length - 1;
			var f = m * k;
			var i = Math.floor(f);
			var fn = TWEEN.Interpolation.Utils.Linear;

			if (k < 0) {
				return fn(v[0], v[1], f);
			}

			if (k > 1) {
				return fn(v[m], v[m - 1], m - f);
			}

			return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);

		},

		Bezier: function (v, k) {

			var b = 0;
			var n = v.length - 1;
			var pw = Math.pow;
			var bn = TWEEN.Interpolation.Utils.Bernstein;

			for (var i = 0; i <= n; i++) {
				b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
			}

			return b;

		},

		CatmullRom: function (v, k) {

			var m = v.length - 1;
			var f = m * k;
			var i = Math.floor(f);
			var fn = TWEEN.Interpolation.Utils.CatmullRom;

			if (v[0] === v[m]) {

				if (k < 0) {
					i = Math.floor(f = m * (1 + k));
				}

				return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);

			} else {

				if (k < 0) {
					return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
				}

				if (k > 1) {
					return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
				}

				return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);

			}

		},

		Utils: {

			Linear: function (p0, p1, t) {

				return (p1 - p0) * t + p0;

			},

			Bernstein: function (n, i) {

				var fc = TWEEN.Interpolation.Utils.Factorial;

				return fc(n) / fc(i) / fc(n - i);

			},

			Factorial: (function () {

				var a = [1];

				return function (n) {

					var s = 1;

					if (a[n]) {
						return a[n];
					}

					for (var i = n; i > 1; i--) {
						s *= i;
					}

					a[n] = s;
					return s;

				};

			})(),

			CatmullRom: function (p0, p1, p2, p3, t) {

				var v0 = (p2 - p0) * 0.5;
				var v1 = (p3 - p1) * 0.5;
				var t2 = t * t;
				var t3 = t * t2;

				return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (- 3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;

			}

		}

	};

	// UMD (Universal Module Definition)
	(function (root) {

		if (true) {

			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return TWEEN;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

		} else if (typeof module !== 'undefined' && typeof exports === 'object') {

			// Node.js
			module.exports = TWEEN;

		} else if (root !== undefined) {

			// Global variable
			root.TWEEN = TWEEN;

		}

	})(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	//! stable.js 0.1.5, https://github.com/Two-Screen/stable
	//! © 2014 Angry Bytes and contributors. MIT licensed.
	"use strict";
	// A stable array sort, because `Array#sort()` is not guaranteed stable.
	// This is an implementation of merge sort, without recursion.
	function stableSort(arr, comp) {
	    var result = exec(arr, comp);
	    // This simply copies back if the result isn't in the original array,
	    // which happens on an odd number of passes.
	    if (result !== arr) {
	        pass(result, null, arr.length, arr);
	    }
	    return arr;
	}
	exports.stableSort = stableSort;
	;
	// Execute the sort using the input array and a second buffer as work space.
	// Returns one of those two, containing the final result.
	function exec(arr, comp) {
	    if (typeof (comp) !== 'function') {
	        comp = function (a, b) {
	            return String(a).localeCompare(b);
	        };
	    }
	    // Short-circuit when there's nothing to sort.
	    var len = arr.length;
	    if (len <= 1) {
	        return arr;
	    }
	    // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.
	    // Chunks are the size of the left or right hand in merge sort.
	    // Stop when the left-hand covers all of the array.
	    var buffer = new Array(len);
	    for (var chk = 1; chk < len; chk *= 2) {
	        pass(arr, comp, chk, buffer);
	        var tmp = arr;
	        arr = buffer;
	        buffer = tmp;
	    }
	    return arr;
	}
	// Run a single pass with the given chunk size.
	var pass = function (arr, comp, chk, result) {
	    var len = arr.length;
	    var i = 0;
	    // Step size / double chunk size.
	    var dbl = chk * 2;
	    // Bounds of the left and right chunks.
	    var l, r, e;
	    // Iterators over the left and right chunk.
	    var li, ri;
	    // Iterate over pairs of chunks.
	    for (l = 0; l < len; l += dbl) {
	        r = l + chk;
	        e = r + chk;
	        if (r > len)
	            r = len;
	        if (e > len)
	            e = len;
	        // Iterate both chunks in parallel.
	        li = l;
	        ri = r;
	        while (true) {
	            // Compare the chunks.
	            if (li < r && ri < e) {
	                // This works for a regular `sort()` compatible comparator,
	                // but also for a simple comparator like: `a > b`
	                if (comp(arr[li], arr[ri]) <= 0) {
	                    result[i++] = arr[li++];
	                }
	                else {
	                    result[i++] = arr[ri++];
	                }
	            }
	            else if (li < r) {
	                result[i++] = arr[li++];
	            }
	            else if (ri < e) {
	                result[i++] = arr[ri++];
	            }
	            else {
	                break;
	            }
	        }
	    }
	};
	function assign(target, other) {
	    if (target === undefined || target === null) {
	        throw new TypeError('Cannot convert first argument to object');
	    }
	    var to = Object(target);
	    for (var i = 1; i < arguments.length; i++) {
	        var nextSource = arguments[i];
	        if (nextSource === undefined || nextSource === null) {
	            continue;
	        }
	        nextSource = Object(nextSource);
	        var keysArray = Object.keys(Object(nextSource));
	        for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
	            var nextKey = keysArray[nextIndex];
	            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
	            if (desc !== undefined && desc.enumerable) {
	                to[nextKey] = nextSource[nextKey];
	            }
	        }
	    }
	    return to;
	}
	exports.assign = assign;
	function aRemove(arr, obj) {
	    var i = arr.indexOf(obj);
	    if (i >= 0) {
	        arr.splice(i, 1);
	        return true;
	    }
	    return false;
	}
	exports.aRemove = aRemove;
	Array.prototype.forEachR = function (func) {
	    var n = this.length - 1;
	    for (var i = this.length - 1; i >= 0; i--) {
	        var iter = this[i];
	        func(this[i], i);
	    }
	};
	Array.prototype.stableSort = function (comp) {
	    stableSort(this, comp);
	};
	Array.prototype.remove = function (obj) {
	    return aRemove(this, obj);
	};


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var matrix_1 = __webpack_require__(16);
	var MatrixStack = (function () {
	    function MatrixStack() {
	        this.stack = [];
	        this.matrix = new matrix_1.Matrix();
	    }
	    MatrixStack.prototype.save = function () {
	        this.stack.push(this.matrix.clone());
	        return this;
	    };
	    MatrixStack.prototype.restore = function () {
	        if (this.stack.length) {
	            this.matrix = this.stack.pop();
	        }
	        return this;
	    };
	    MatrixStack.prototype.identity = function () {
	        this.matrix.identity();
	        return this;
	    };
	    MatrixStack.prototype.set = function (a, b, c, d, tx, ty) {
	        this.matrix.set(a, b, c, d, tx, ty);
	        return this;
	    };
	    MatrixStack.prototype.rotate = function (rad) {
	        this.matrix.rotate(rad);
	        return this;
	    };
	    MatrixStack.prototype.scale = function (sx, sy) {
	        this.matrix.scale(sx, sy);
	        return this;
	    };
	    MatrixStack.prototype.translate = function (dx, dy) {
	        this.matrix.translate(dx, dy);
	    };
	    MatrixStack.prototype.transformPoint = function (x, y, out) {
	        return this.matrix.transformPoint(x, y, out);
	    };
	    MatrixStack.prototype.invert = function () {
	        return this.matrix.invert();
	    };
	    MatrixStack.prototype.matrixToString = function () {
	        return this.matrix.toString();
	    };
	    MatrixStack.create = function () {
	        return new MatrixStack();
	    };
	    return MatrixStack;
	}());
	exports.MatrixStack = MatrixStack;
	;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var factory_1 = __webpack_require__(28);
	/**
	 * Widget工厂，注册控件的创建函数和根据控件的类型创建控件。
	 * 主要用于根据UI编辑器生成的UI数据创建UI，每个控件都要向WidgetFactory注册。
	 *
	 * 示例：
	 * ```
	 * WidgetFactory.register(Button.TYPE, Button.create);
	 * ```
	 *
	 */
	var WidgetFactory = (function () {
	    function WidgetFactory() {
	    }
	    WidgetFactory.register = function (type, creator) {
	        return WidgetFactory.factory.register(type, creator);
	    };
	    WidgetFactory.create = function (type, options) {
	        return WidgetFactory.factory.create(type, options);
	    };
	    WidgetFactory.createWithJson = function (json) {
	        var widget = WidgetFactory.create(json.type);
	        widget.fromJson(json);
	        return widget;
	    };
	    WidgetFactory.factory = new factory_1.Factory();
	    return WidgetFactory;
	}());
	exports.WidgetFactory = WidgetFactory;


/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 一个通用的工厂类。
	 */
	var Factory = (function () {
	    function Factory() {
	        this.creators = {};
	    }
	    Factory.prototype.register = function (type, creator) {
	        this.creators[type] = creator;
	    };
	    Factory.prototype.create = function (type, options) {
	        var obj = null;
	        var creator = this.creators[type];
	        if (creator) {
	            obj = creator(options);
	        }
	        return obj;
	    };
	    return Factory;
	}());
	exports.Factory = Factory;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var style_1 = __webpack_require__(7);
	var carota = __webpack_require__(30);
	var ut = __webpack_require__(51);
	var tokenizer = ut.createTokenizerStream();
	var Token = ut.Token;
	var Break = ut.Break;
	(function (RoundType) {
	    RoundType[RoundType["TL"] = 1] = "TL";
	    RoundType[RoundType["TR"] = 2] = "TR";
	    RoundType[RoundType["BL"] = 4] = "BL";
	    RoundType[RoundType["BR"] = 8] = "BR";
	})(exports.RoundType || (exports.RoundType = {}));
	var RoundType = exports.RoundType;
	;
	var TextLine = (function () {
	    function TextLine() {
	        this.text = "";
	        this.width = 0;
	    }
	    return TextLine;
	}());
	exports.TextLine = TextLine;
	;
	var Graphics = (function () {
	    function Graphics() {
	    }
	    Graphics.measureText = function (text, font) {
	        var ctx = Graphics.canvas.getContext("2d");
	        ctx.font = font;
	        var width = ctx.measureText(text).width;
	        return width;
	    };
	    Graphics.layoutText = function (text, maxWidth, font, _ctx) {
	        var ret = [];
	        if (!text || maxWidth < 5) {
	            return ret;
	        }
	        var line = new TextLine();
	        var tokenizer = ut.createTokenizerStream();
	        var ctx = _ctx ? _ctx : Graphics.canvas.getContext("2d");
	        ctx.font = font;
	        tokenizer.on('token', function (token, type, action) {
	            var width = ctx.measureText(token).width;
	            switch (type) {
	                case Token.LF:
	                case Token.CR: {
	                    ret.push(line);
	                    line = new TextLine();
	                    line.text = "\n";
	                    ret.push(line);
	                    line = new TextLine();
	                    return;
	                }
	                case Token.CL:
	                case Token.EX: {
	                    line.text += token;
	                    line.width += width;
	                    return;
	                }
	                default: break;
	            }
	            if (line.width >= maxWidth) {
	                ret.push(line);
	                line = new TextLine();
	            }
	            var n = token.length;
	            if ((line.width + width) <= maxWidth || n < 2) {
	                line.text += token;
	                line.width += width;
	            }
	            else if (type === Token.AL && action === Break.PROHIBITED && width < maxWidth) {
	                ret.push(line);
	                line = new TextLine();
	                line.text = token;
	                line.width = width;
	            }
	            else {
	                for (var i = 0; i < n; i++) {
	                    var c = token[i];
	                    width = ctx.measureText(c).width;
	                    if (line.width >= maxWidth) {
	                        ret.push(line);
	                        line = new TextLine();
	                    }
	                    line.text += c;
	                    line.width += width;
	                }
	            }
	        });
	        tokenizer.write(text);
	        tokenizer.end();
	        ret.push(line);
	        return ret;
	    };
	    Graphics.drawTextML = function (ctx, lines, style, r) {
	        var x = 0;
	        var y = 0;
	        var n = lines.length;
	        var lineHeight = style.textLineHeight;
	        var height = n * lineHeight;
	        switch (style.textAlign) {
	            case "right": {
	                x = r.x + r.w;
	                break;
	            }
	            case "center": {
	                x = r.x + (r.w >> 1);
	                break;
	            }
	            default: {
	                x = r.x;
	                break;
	            }
	        }
	        switch (style.textBaseline) {
	            case "top": {
	                y = r.y;
	                break;
	            }
	            case "bottom": {
	                y = r.y + r.h - height;
	                break;
	            }
	            default: {
	                y = r.y + ((r.h - height) >> 1);
	                break;
	            }
	        }
	        y = Math.max(y, 0);
	        x = Math.max(x, 0);
	        var maxY = r.y + r.h;
	        ctx.font = style.font;
	        ctx.fillStyle = style.textColor;
	        ctx.textAlign = style.textAlign;
	        ctx.textBaseline = "top";
	        for (var i = 0; i < n; i++) {
	            var text = lines[i].text;
	            ctx.fillText(text, x, y, r.w);
	            y += lineHeight;
	            if ((y + lineHeight) > maxY) {
	                break;
	            }
	        }
	        return;
	    };
	    Graphics.drawTextSL = function (ctx, text, style, r) {
	        var x = 0;
	        var y = 0;
	        switch (style.textAlign) {
	            case "right": {
	                x = r.x + r.w;
	                break;
	            }
	            case "center": {
	                x = r.x + (r.w >> 1);
	                break;
	            }
	            default: {
	                x = r.x;
	                break;
	            }
	        }
	        switch (style.textBaseline) {
	            case "top": {
	                y = r.y;
	                break;
	            }
	            case "bottom": {
	                y = r.y + r.h;
	                break;
	            }
	            default: {
	                y = r.y + (r.h >> 1);
	                break;
	            }
	        }
	        if (text && style.textColor) {
	            ctx.font = style.font;
	            ctx.fillStyle = style.textColor;
	            ctx.textAlign = style.textAlign;
	            ctx.textBaseline = style.textBaseline;
	            ctx.fillText(text, x, y);
	        }
	    };
	    Graphics.drawLine = function (ctx, strokeStyle, lineWidth, x1, y1, x2, y2) {
	        if (strokeStyle && lineWidth > 0) {
	            ctx.beginPath();
	            ctx.lineWidth = lineWidth;
	            ctx.strokeStyle = strokeStyle;
	            ctx.moveTo(x1, y1);
	            ctx.lineTo(x2, y2);
	            ctx.stroke();
	        }
	    };
	    Graphics.drawCircle = function (ctx, fillStyle, strokeStyle, lineWidth, x, y, r) {
	        if (fillStyle || (strokeStyle && lineWidth > 0)) {
	            ctx.beginPath();
	            ctx.arc(x, y, r, 0, Math.PI * 2);
	            if (fillStyle) {
	                ctx.fillStyle = fillStyle;
	                ctx.fill();
	            }
	            if (strokeStyle && lineWidth > 0) {
	                ctx.strokeStyle = strokeStyle;
	                ctx.lineWidth = 1;
	                ctx.stroke();
	            }
	        }
	    };
	    Graphics.drawRect = function (ctx, fillStyle, strokeStyle, lineWidth, x, y, w, h) {
	        if (fillStyle || (strokeStyle && lineWidth > 0)) {
	            ctx.beginPath();
	            ctx.rect(x, y, w, h);
	            if (fillStyle) {
	                style_1.Style.fill(ctx, fillStyle, h);
	            }
	            if (strokeStyle && lineWidth > 0) {
	                ctx.lineWidth = lineWidth;
	                ctx.strokeStyle = strokeStyle;
	                ctx.stroke();
	            }
	        }
	    };
	    Graphics.drawRoundRect = function (ctx, fillStyle, strokeStyle, lineWidth, x, y, w, h, r, type) {
	        if (fillStyle || (strokeStyle && lineWidth > 0)) {
	            Graphics.roundRect(ctx, x, y, w, h, r, type);
	            if (fillStyle) {
	                style_1.Style.fill(ctx, fillStyle, h);
	            }
	            if (strokeStyle && lineWidth > 0) {
	                ctx.lineWidth = lineWidth;
	                ctx.strokeStyle = strokeStyle;
	                ctx.stroke();
	            }
	        }
	    };
	    Graphics.roundRect = function (ctx, x, y, w, h, r, type) {
	        if (!type) {
	            type = RoundType.TL | RoundType.TR | RoundType.BL | RoundType.BR;
	        }
	        var d = r << 1;
	        ctx.beginPath();
	        if (d > w || d > h) {
	            var cx = x + (w >> 1);
	            var cy = y + (h >> 1);
	            r = Math.min(w >> 1, h >> 1);
	            ctx.arc(cx, cy, r, 0, Math.PI * 2);
	            return;
	        }
	        if (!r) {
	            ctx.rect(x, y, w, h);
	            return;
	        }
	        ctx.translate(x, y);
	        if (type & RoundType.TL) {
	            ctx.moveTo(0, r);
	            ctx.quadraticCurveTo(0, 0, r, 0);
	        }
	        else {
	            ctx.moveTo(0, 0);
	        }
	        if (type & RoundType.TR) {
	            ctx.lineTo(w - r, 0);
	            ctx.quadraticCurveTo(w, 0, w, r);
	        }
	        else {
	            ctx.lineTo(w, 0);
	        }
	        if (type & RoundType.BR) {
	            ctx.lineTo(w, h - r);
	            ctx.quadraticCurveTo(w, h, w - r, h);
	        }
	        else {
	            ctx.lineTo(w, h);
	        }
	        if (type & RoundType.BL) {
	            ctx.lineTo(r, h);
	            ctx.quadraticCurveTo(0, h, 0, h - r);
	        }
	        else {
	            ctx.lineTo(0, h);
	        }
	        ctx.closePath();
	        ctx.translate(-x, -y);
	    };
	    Graphics.canvas = document.createElement("canvas");
	    return Graphics;
	}());
	exports.Graphics = Graphics;
	;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var node = __webpack_require__(31);
	var editor = __webpack_require__(36);
	var doc = __webpack_require__(37);
	var dom = __webpack_require__(49);
	var runs = __webpack_require__(33);
	var html = __webpack_require__(50);
	var frame = __webpack_require__(44);
	var text = __webpack_require__(42);
	var rect = __webpack_require__(34);

	var bundle = {
	    node: node,
	    editor: editor,
	    document: doc,
	    dom: dom,
	    runs: runs,
	    html: html,
	    frame: frame,
	    text: text,
	    rect: rect
	};

	module.exports = bundle;

	if (typeof window !== 'undefined' && window.document) {
	    if (window.carota) {
	        throw new Error('Something else is called carota!');
	    }
	    window.carota = bundle;
	}


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var per = __webpack_require__(32);
	var runs = __webpack_require__(33);
	var rect = __webpack_require__(34);
	var util = __webpack_require__(35);

	exports.prototype = {
	    children: function() {
	        return [];
	    },
	    parent: function() {
	        return null;
	    },
	    first: function() {
	        return this.children()[0];
	    },
	    last: function() {
	        return this.children()[this.children().length - 1];
	    },
	    next: function() {
	        var self = this;
	        for (;;) {
	            var parent = self.parent();
	            if (!parent) {
	                return null;
	            }
	            var siblings = parent.children();
	            var next = siblings[siblings.indexOf(self) + 1];
	            if (next) {
	                for (;;)  {
	                    var first = next.first();
	                    if (!first) {
	                        break;
	                    }
	                    next = first;
	                }
	                return next;
	            }
	            self = parent;
	        }
	    },
	    previous: function() {
	        var parent = this.parent();
	        if (!parent) {
	            return null;
	        }
	        var siblings = parent.children();
	        var prev = siblings[siblings.indexOf(this) - 1];
	        if (prev) {
	            return prev;
	        }
	        var prevParent = parent.previous();
	        return !prevParent ? null : prevParent.last();
	    },
	    byOrdinal: function(index) {
	        var found = null;
	        if (this.children().some(function(child) {
	            if (index >= child.ordinal && index < child.ordinal + child.length) {
	                found = child.byOrdinal(index);
	                if (found) {
	                    return true;
	                }
	            }
	        })) {
	            return found;
	        }
	        return this;
	    },
	    byCoordinate: function(x, y) {
	        var found;
	        this.children().some(function(child) {
	            var b = child.bounds();
	            if (b.contains(x, y)) {
	                found = child.byCoordinate(x, y);
	                if (found) {
	                    return true;
	                }
	            }
	        });
	        if (!found) {
	            found = this.last();
	            while (found) {
	                var next = found.last();
	                if (!next) {
	                    break;
	                }
	                found = next;
	            }
	            var foundNext = found.next();
	            if (foundNext && foundNext.block) {
	                found = foundNext;
	            }
	        }
	        return found;
	    },
	    draw: function(ctx, viewPort) {
	        this.children().forEach(function(child) {
	            child.draw(ctx, viewPort);
	        });
	    },
	    parentOfType: function(type) {
	        var p = this.parent();
	        return p && (p.type === type ? p : p.parentOfType(type));
	    },
	    bounds: function() {
	        var l = this._left, t = this._top, r = 0, b = 0;
	        this.children().forEach(function(child) {
	            var cb = child.bounds();
	            l = Math.min(l, cb.l);
	            t = Math.min(t, cb.t);
	            r = Math.max(r, cb.l + cb.w);
	            b = Math.max(b, cb.t + cb.h);
	        });
	        return rect(l, t, r - l, b - t);
	    }
	};

	exports.derive = function(methods) {
	    return util.derive(exports.prototype, methods);
	};

	var generic = exports.derive({
	    children: function() {
	        return this._children;
	    },
	    parent: function() {
	        return this._parent;
	    },
	    finalize: function(startDecrement, lengthIncrement) {
	        var start = Number.MAX_VALUE, end = 0;
	        this._children.forEach(function(child) {
	            start = Math.min(start, child.ordinal);
	            end = Math.max(end, child.ordinal + child.length);
	        });
	        Object.defineProperty(this, 'ordinal', { value: start - (startDecrement || 0) });
	        Object.defineProperty(this, 'length', { value: (lengthIncrement || 0) + end - start });
	    }
	});

	exports.generic = function(type, parent, left, top) {
	    return Object.create(generic, {
	        type: { value: type },
	        _children: { value: [] },
	        _parent: { value: parent },
	        _left: { value: typeof left === 'number' ? left : Number.MAX_VALUE },
	        _top: { value: typeof top === 'number' ? top : Number.MAX_VALUE }
	    });
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	
	(function(exportFunction) {

	    function toFunc(valOrFunc, bindThis) {
	        if (typeof valOrFunc !== 'function') {
	            return Array.isArray(valOrFunc)
	                ? function(emit) {
	                    return valOrFunc.some(emit);
	                } : function(emit) {
	                    return emit(valOrFunc);
	                };
	        }
	        if (bindThis) {
	            return function(emit, value) {
	                valOrFunc.call(bindThis, emit, value);
	            }
	        }
	        return valOrFunc;
	    }

	    function Per(valOrFunc, bindThis) {
	        this.forEach = toFunc(valOrFunc, bindThis);
	    }

	    function blank(emit, value) {
	        emit(value);
	    }

	    function create(valOrFunc, bindThis) {
	        if (arguments.length === 0) {
	            return new Per(blank);
	        }
	        if (valOrFunc && valOrFunc instanceof Per) {
	            return valOrFunc;
	        }
	        return new Per(valOrFunc, bindThis)
	    }

	    Per.prototype.per = function(valOrFunc, bindThis) {
	        var first = this.forEach;
	        var second = toFunc(valOrFunc && valOrFunc.forEach || valOrFunc, bindThis);
	        return create(function(emit, value) {
	            return first(function(firstVal) {
	                return second(emit, firstVal);
	            }, value);
	        });
	    };

	    function lambda(expression) {
	        return typeof expression === 'string'
	            ? new Function('x', 'return ' + expression)
	            : expression;
	    }

	    Per.prototype.map = function(mapFunc) {
	        mapFunc = lambda(mapFunc);
	        return this.per(function(emit, value) {
	            return emit(mapFunc(value));
	        });
	    };

	    Per.prototype.filter = function(predicate) {
	        predicate = lambda(predicate);
	        return this.per(function(emit, value) {
	            if (predicate(value)) {
	                return emit(value);
	            }
	        });
	    };

	    Per.prototype.concat = function(second, secondThis) {        
	        if (second instanceof Per) {
	            second = second.forEach;
	        } else {
	            second = toFunc(second, secondThis);
	        }
	        var first = this.forEach;
	        return create(function(emit, value) {
	            first(emit, value);
	            second(emit, value);			
	        });
	    };

	    Per.prototype.skip = function(count) {
	        return this.per(function(emit, value) {
	            if (count > 0) {
	                count--;
	                return false;
	            }
	            return emit(value);
	        });
	    };

	    Per.prototype.take = function(count) {
	        return this.per(function(emit, value) {
	            if (count <= 0) {
	                return true;
	            }
	            count--;
	            return emit(value);
	        });
	    };

	    Per.prototype.listen = function(untilFunc) {
	        return this.per(function(emit, value) {
	            if (untilFunc(value)) {
	                return true;
	            }
	            return emit(value);
	        });
	    };

	    Per.prototype.flatten = function() {
	        return this.per(function(emit, array) {
	            return !Array.isArray(array)
	                ? emit(array)
	                : array.some(function(value) {
	                    return emit(value);
	                });
	        });
	    };

	    Per.prototype.reduce = function(reducer, seed) {
	        var result = seed, started = arguments.length == 2;
	        return this.per(function(emit, value) {
	            result = started ? reducer(result, value) : value;
	            emit(result);
	            started = true;
	        });
	    };

	    Per.prototype.multicast = function(destinations) {
	        if (arguments.length !== 1) {
	            destinations = Array.prototype.slice.call(arguments, 0);
	        }
	        destinations = destinations.map(function(destination) {
	            return typeof destination === 'function' ? destination :
	                   destination instanceof Per ? destination.forEach :
	                   ignore;
	        });
	        return this.listen(function(value) {
	            var quit = true;
	            destinations.forEach(function(destination) {
	                if (!destination(ignore, value)) {
	                    quit = false;
	                }
	            });
	            return quit;
	        });
	    };

	    function optionalLimit(limit) {
	        return typeof limit != 'number' ? Number.MAX_VALUE : limit;
	    }

	    /*  A passive observer - gathers results into the specified array, but
	        otherwise has no effect on the stream of values
	     */
	    Per.prototype.into = function(ar, limit) {
	        if (!Array.isArray(ar)) {
	            throw new Error("into expects an array");
	        }
	        limit = optionalLimit(limit);
	        return this.listen(function(value) {
	            if (limit <= 0) {
	                return true;
	            }
	            ar.push(value);
	            limit--;
	        });
	    };

	    function setOrCall(obj, name) {
	        var prop = obj[name];
	        if (typeof prop === 'function') {
	            return prop;
	        }
	        return function(val) {
	            obj[name] = val;
	        }
	    }

	    /*  Tracks first, last and count for the values as they go past,
	        up to an optional limit (see 'first' and 'last' methods).
	     */
	    Per.prototype.monitor = function(data) {
	        var n = 0;
	        var count = setOrCall(data, 'count'),
	            first = setOrCall(data, 'first'),
	            last = setOrCall(data, 'last'),
	            limit = data.limit;
	        if (typeof limit != 'number') {
	            limit = Number.MAX_VALUE;
	        }
	        if (limit < 1) {
	            return this;
	        }
	        return this.listen(function(value) {
	            if (n === 0) {
	                first(value);
	            }
	            n++;
	            count(n);
	            last(value);
	            if (n >= limit) {
	                return true;
	            }
	        });
	    };

	    /*  Send a value into the pipeline without caring what emerges
	        (only useful if you set up monitors and/or intos, or
	        similar stateful observers).
	     */
	    function ignore() { }
	    Per.prototype.submit = function(value) {
	        return this.forEach(ignore, value);
	    };

	    Per.prototype.all = function() {
	        var results = [];
	        this.into(results).submit();
	        return results;
	    };

	    Per.prototype.first = function() {
	        var results = { limit: 1 };
	        this.monitor(results).submit();
	        return results.count > 0 ? results.first : (void 0);
	    };

	    Per.prototype.last = function() {
	        var results = {};
	        this.monitor(results).submit();
	        return results.count > 0 ? results.last : (void 0);
	    };

	    function truthy(value) { return !!value; }
	    Per.prototype.truthy = function() { return this.filter(truthy); };

	    function min(l, r) { return Math.min(l, r); }
	    Per.prototype.min = function() { return this.reduce(min, Number.MAX_VALUE); };

	    function max(l, r) { return Math.max(l, r); }
	    Per.prototype.max = function() { return this.reduce(max, Number.MIN_VALUE); };

	    function sum(l, r) { return l + r }
	    Per.prototype.sum = function() { return this.reduce(sum, 0); };

	    function and(l, r) { return !!(l && r) }
	    Per.prototype.and = function() { return this.reduce(and, true); };

	    function or(l, r) { return !!(l || r) }
	    Per.prototype.or = function() { return this.reduce(or, false); };

	    function not(v) { return !v }
	    Per.prototype.not = function() { return this.map(not); };

	    create.pulse = function(ms) {
	        var counter = 0;
	        return create(function(emit) {
	            function step() {
	                if (emit(counter++) !== true) {
	                    setTimeout(step, ms);
	                }
	            }
	            step();
	        });
	    };

	    exportFunction(create);

	})(function(per) {
	    if (false) {
	        this['per'] = per;
	    } else {
	        module.exports = per;
	    }
	});


/***/ },
/* 33 */
/***/ function(module, exports) {

	exports.formattingKeys = [ 'bold', 'italic', 'underline', 'strikeout', 'color', 'font', 'size', 'align', 'script' ];

	exports.defaultFormatting = {
	    size: 10,
	    font: 'sans-serif',
	    color: 'black',
	    bold: false,
	    italic: false,
	    underline: false,
	    strikeout: false,
	    align: 'left',
	    script: 'normal'
	};

	exports.sameFormatting = function(run1, run2) {
	    return exports.formattingKeys.every(function(key) {
	        return run1[key] === run2[key];
	    })
	};

	exports.clone = function(run) {
	    var result = { text: run.text };
	    exports.formattingKeys.forEach(function(key) {
	        var val = run[key];
	        if (val && val != exports.defaultFormatting[key]) {
	            result[key] = val;
	        }
	    });
	    return result;
	};

	exports.multipleValues = {};

	exports.merge = function(run1, run2) {
	    if (arguments.length === 1) {
	        return Array.isArray(run1) ? run1.reduce(exports.merge) : run1;
	    }
	    if (arguments.length > 2) {
	        return exports.merge(Array.prototype.slice.call(arguments, 0));
	    }
	    var merged = {};
	    exports.formattingKeys.forEach(function(key) {
	        if (key in run1 || key in run2) {
	            if (run1[key] === run2[key]) {
	                merged[key] = run1[key];
	            } else {
	                merged[key] = exports.multipleValues;
	            }
	        }
	    });
	    return merged;
	};

	exports.format = function(run, template) {
	    if (Array.isArray(run)) {
	        run.forEach(function(r) {
	            exports.format(r, template);
	        });
	    } else {
	        Object.keys(template).forEach(function(key) {
	            if (template[key] !== exports.multipleValues) {
	                run[key] = template[key];
	            }
	        });
	    }
	};

	exports.consolidate = function() {
	    var current;
	    return function (emit, run) {
	        if (!current || !exports.sameFormatting(current, run) ||
	            (typeof current.text != 'string') ||
	            (typeof run.text != 'string')) {
	            current = exports.clone(run);
	            emit(current);
	        } else {
	            current.text += run.text;
	        }
	    };
	};

	exports.getPlainText = function(run) {
	    if (typeof run.text === 'string') {
	        return run.text;
	    }
	    if (Array.isArray(run.text)) {
	        var str = [];
	        run.text.forEach(function(piece) {
	            str.push(exports.getPiecePlainText(piece));
	        });
	        return str.join('');
	    }
	    return '_';
	};

	/*  The text property of a run can be an ordinary string, or a "character object",
	 or it can be an array containing strings and "character objects".

	 A character object is not a string, but is treated as a single character.

	 We abstract over this to provide the same string-like operations regardless.
	 */
	exports.getPieceLength = function(piece) {
	    return piece.length || 1; // either a string or something like a character
	};

	exports.getPiecePlainText = function(piece) {
	    return piece.length ? piece : '_';
	};

	exports.getTextLength = function(text) {
	    if (typeof text === 'string') {
	        return text.length;
	    }
	    if (Array.isArray(text)) {
	        var length = 0;
	        text.forEach(function(piece) {
	            length += exports.getPieceLength(piece);
	        });
	        return length;
	    }
	    return 1;
	};

	exports.getSubText = function(emit, text, start, count) {
	    if (count === 0) {
	        return;
	    }
	    if (typeof text === 'string') {
	        emit(text.substr(start, count));
	        return;
	    }
	    if (Array.isArray(text)) {
	        var pos = 0;
	        text.some(function(piece) {
	            if (count <= 0) {
	                return true;
	            }
	            var pieceLength = exports.getPieceLength(piece);
	            if (pos + pieceLength > start) {
	                if (pieceLength === 1) {
	                    emit(piece);
	                    count -= 1;
	                } else {
	                    var str = piece.substr(Math.max(0, start - pos), count);
	                    emit(str);
	                    count -= str.length;
	                }
	            }
	            pos += pieceLength;
	        });
	        return;
	    }
	    emit(text);
	};

	exports.getTextChar = function(text, offset) {
	    var result;
	    exports.getSubText(function(c) { result = c }, text, offset, 1);
	    return result;
	};

	exports.pieceCharacters = function(each, piece) {
	    if (typeof piece === 'string') {
	        for (var c = 0; c < piece.length; c++) {
	            each(piece[c]);
	        }
	    } else {
	        each(piece);
	    }
	};


/***/ },
/* 34 */
/***/ function(module, exports) {

	
	var prototype = {
	    contains: function(x, y) {
	        return x >= this.l && x < (this.l + this.w) &&
	            y >= this.t && y < (this.t + this.h);

	    },
	    stroke: function(ctx) {
	        ctx.strokeRect(this.l, this.t, this.w, this.h);
	    },
	    fill: function(ctx) {
	        ctx.fillRect(this.l, this.t, this.w, this.h);
	    },
	    offset: function(x, y) {
	        return rect(this.l + x, this.t + y, this.w, this.h);
	    },
	    equals: function(other) {
	        return this.l === other.l && this.t === other.t &&
	               this.w === other.w && this.h === other.h;
	    },
	    center: function() {
	        return { x: this.l + this.w/2, y: this.t + this.h/2 };
	    }
	};

	var rect = module.exports = function(l, t, w, h) {
	    return Object.create(prototype, {
	        l: { value: l },
	        t: { value: t },
	        w: { value: w },
	        h: { value: h },
	        r: { value: l + w },
	        b: { value: t + h }
	    });
	};


/***/ },
/* 35 */
/***/ function(module, exports) {

	exports.event = function() {
	    var handlers = [];

	    var subscribe = function(handler) {
	        handlers.push(handler);
	    };

	    subscribe.fire = function() {
	        var args = Array.prototype.slice.call(arguments, 0);
	        handlers.forEach(function(handler) {
	            handler.apply(null, args);
	        });
	    };

	    return subscribe;
	};

	exports.derive = function(prototype, methods) {
	    var properties = {};
	    Object.keys(methods).forEach(function(name) {
	        properties[name] = { value: methods[name] };
	    });
	    return Object.create(prototype, properties);
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var per = __webpack_require__(32);
	var carotaDoc = __webpack_require__(37);
	var dom = __webpack_require__(49);
	var rect = __webpack_require__(34);

	setInterval(function() {
	    var editors = document.querySelectorAll('.carotaEditorCanvas');

	    var ev = document.createEvent('Event');
	    ev.initEvent('carotaEditorSharedTimer', true, true);

	    // not in IE, apparently:
	    // var ev = new CustomEvent('carotaEditorSharedTimer');

	    for (var n = 0; n < editors.length; n++) {
	        editors[n].dispatchEvent(ev);
	    }
	}, 200);

	exports.create = function(element) {

	    // We need the host element to be a container:
	    if (dom.effectiveStyle(element, 'position') !== 'absolute') {
	        element.style.position = 'relative';
	    }

	    element.innerHTML =
	        '<div class="carotaSpacer">' +
	            '<canvas width="100" height="100" class="carotaEditorCanvas" style="position: absolute;"></canvas>' +
	        '</div>' +
	        '<div class="carotaTextArea" style="overflow: hidden; position: absolute; height: 0;">' +
	            '<textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" ' +
	            'style="position: absolute; padding: 0px; width: 1000px; height: 1em; ' +
	            'outline: none; font-size: 4px;"></textarea>'
	        '</div>';

	    var canvas = element.querySelector('canvas'),
	        spacer = element.querySelector('.carotaSpacer'),
	        textAreaDiv = element.querySelector('.carotaTextArea'),
	        textArea = element.querySelector('textarea'),
	        doc = carotaDoc(),
	        keyboardSelect = 0,
	        keyboardX = null, nextKeyboardX = null,
	        selectDragStart = null,
	        focusChar = null,
	        textAreaContent = '',
	        richClipboard = null,
	        plainClipboard = null;
	    
	    var toggles = {
	        66: 'bold',
	        73: 'italic',
	        85: 'underline',
	        83: 'strikeout'
	    };

	    var exhausted = function(ordinal, direction) {
	        return direction < 0 ? ordinal <= 0 : ordinal >= doc.frame.length - 1;
	    };

	    var differentLine = function(caret1, caret2) {
	        return (caret1.b <= caret2.t) ||
	               (caret2.b <= caret1.t);
	    };

	    var changeLine = function(ordinal, direction) {

	        var originalCaret = doc.getCaretCoords(ordinal), newCaret;
	        nextKeyboardX = (keyboardX !== null) ? keyboardX : originalCaret.l;

	        while (!exhausted(ordinal, direction)) {
	            ordinal += direction;
	            newCaret = doc.getCaretCoords(ordinal);
	            if (differentLine(newCaret, originalCaret)) {
	                break;
	            }
	        }

	        originalCaret = newCaret;
	        while (!exhausted(ordinal, direction)) {
	            if ((direction > 0 && newCaret.l >= nextKeyboardX) ||
	                (direction < 0 && newCaret.l <= nextKeyboardX)) {
	                break;
	            }

	            ordinal += direction;
	            newCaret = doc.getCaretCoords(ordinal);
	            if (differentLine(newCaret, originalCaret)) {
	                ordinal -= direction;
	                break;
	            }
	        }

	        return ordinal;
	    };

	    var endOfline = function(ordinal, direction) {
	        var originalCaret = doc.getCaretCoords(ordinal), newCaret;
	        while (!exhausted(ordinal, direction)) {
	            ordinal += direction;
	            newCaret = doc.getCaretCoords(ordinal);
	            if (differentLine(newCaret, originalCaret)) {
	                ordinal -= direction;
	                break;
	            }
	        }
	        return ordinal;
	    };

	    var handleKey = function(key, selecting, ctrlKey) {
	        var start = doc.selection.start,
	            end = doc.selection.end,
	            length = doc.frame.length - 1,
	            handled = false;

	        nextKeyboardX = null;

	        if (!selecting) {
	            keyboardSelect = 0;
	        } else if (!keyboardSelect) {
	            switch (key) {
	                case 37: // left arrow
	                case 38: // up - find character above
	                case 36: // start of line
	                case 33: // page up
	                    keyboardSelect = -1;
	                    break;
	                case 39: // right arrow
	                case 40: // down arrow - find character below
	                case 35: // end of line
	                case 34: // page down
	                    keyboardSelect = 1;
	                    break;
	            }
	        }

	        var ordinal = keyboardSelect === 1 ? end : start;

	        var changingCaret = false;
	        switch (key) {
	            case 37: // left arrow
	                if (!selecting && start != end) {
	                    ordinal = start;
	                } else {
	                    if (ordinal > 0) {
	                        if (ctrlKey) {
	                            var wordInfo = doc.wordContainingOrdinal(ordinal);
	                            if (wordInfo.ordinal === ordinal) {
	                                ordinal = wordInfo.index > 0 ? doc.wordOrdinal(wordInfo.index - 1) : 0;
	                            } else {
	                                ordinal = wordInfo.ordinal;
	                            }
	                        } else {
	                            ordinal--;
	                        }
	                    }
	                }
	                changingCaret = true;
	                break;
	            case 39: // right arrow
	                if (!selecting && start != end) {
	                    ordinal = end;
	                } else {
	                    if (ordinal < length) {
	                        if (ctrlKey) {
	                            var wordInfo = doc.wordContainingOrdinal(ordinal);
	                            ordinal = wordInfo.ordinal + wordInfo.word.length;
	                        } else {
	                            ordinal++;
	                        }
	                    }
	                }
	                changingCaret = true;
	                break;
	            case 40: // down arrow - find character below
	                ordinal = changeLine(ordinal, 1);
	                changingCaret = true;
	                break;
	            case 38: // up - find character above
	                ordinal = changeLine(ordinal, -1);
	                changingCaret = true;
	                break;
	            case 36: // start of line
	                ordinal = endOfline(ordinal, -1);
	                changingCaret = true;
	                break;
	            case 35: // end of line
	                ordinal = endOfline(ordinal, 1);
	                changingCaret = true;
	                break;
	            case 33: // page up
	                ordinal = 0;
	                changingCaret = true;
	                break;
	            case 34: // page down
	                ordinal = length;
	                changingCaret = true;
	                break;
	            case 8: // backspace
	                if (start === end && start > 0) {
	                    doc.range(start - 1, start).clear();
	                    focusChar = start - 1;
	                    doc.select(focusChar, focusChar);
	                    handled = true;
	                }
	                break;
	            case 46: // del
	                if (start === end && start < length) {
	                    doc.range(start, start + 1).clear();
	                    handled = true;
	                }
	                break;
	            case 90: // Z undo
	                if (ctrlKey) {
	                    handled = true;
	                    doc.performUndo();
	                }
	                break;
	            case 89: // Y undo
	                if (ctrlKey) {
	                    handled = true;
	                    doc.performUndo(true);
	                }
	                break;
	            case 65: // A select all
	                if (ctrlKey) {
	                    handled = true;
	                    doc.select(0, length);
	                }
	                break;
	            case 67: // C - copy to clipboard
	            case 88: // X - cut to clipboard
	                if (ctrlKey) {
	                    // Allow standard handling to take place as well
	                    richClipboard = doc.selectedRange().save();
	                    plainClipboard = doc.selectedRange().plainText();
	                }
	                break;
	        }

	        var toggle = toggles[key];
	        if (ctrlKey && toggle) {
	            var selRange = doc.selectedRange();
	            selRange.setFormatting(toggle, selRange.getFormatting()[toggle] !== true);
	            paint();
	            handled = true;
	        }

	        if (changingCaret) {
	            switch (keyboardSelect) {
	                case 0:
	                    start = end = ordinal;
	                    break;
	                case -1:
	                    start = ordinal;
	                    break;
	                case 1:
	                    end = ordinal;
	                    break;
	            }

	            if (start === end) {
	                keyboardSelect = 0;
	            } else {
	                if (start > end) {
	                    keyboardSelect = -keyboardSelect;
	                    var t = end;
	                    end = start;
	                    start = t;
	                }
	            }
	            focusChar = ordinal;
	            doc.select(start, end);
	            handled = true;
	        }

	        keyboardX = nextKeyboardX;
	        return handled;
	    };

	    dom.handleEvent(textArea, 'keydown', function(ev) {
	        if (handleKey(ev.keyCode, ev.shiftKey, ev.ctrlKey)) {
	            return false;
	        }
	        console.log(ev.which);
	    });

	    var verticalAlignment = 'top';
	    
	    doc.setVerticalAlignment = function(va) {
	        verticalAlignment = va;
	        paint();
	    }

	    function getVerticalOffset() {
	        var docHeight = doc.frame.bounds().h;
	        if (docHeight < element.clientHeight) { 
	            switch (verticalAlignment) {
	                case 'middle':
	                    return (element.clientHeight - docHeight) / 2;
	                case 'bottom':
	                    return element.clientHeight - docHeight;
	            }
	        }
	        return 0;
	    }

	    var paint = function() {

	        var availableWidth = element.clientWidth * 1; // adjust to 0.5 to see if we draw in the wrong places!
	        if (doc.width() !== availableWidth) {
	            doc.width(availableWidth);
	        }

	        var docHeight = doc.frame.bounds().h;

	        var dpr = Math.max(1, window.devicePixelRatio || 1);
	        
	        var logicalWidth = Math.max(doc.frame.actualWidth(), element.clientWidth),
	            logicalHeight = element.clientHeight;
	        
	        canvas.width = dpr * logicalWidth;
	        canvas.height = dpr * logicalHeight;
	        canvas.style.width = logicalWidth + 'px';
	        canvas.style.height = logicalHeight + 'px';
	        
	        canvas.style.top = element.scrollTop + 'px';
	        spacer.style.width = logicalWidth + 'px';
	        spacer.style.height = Math.max(docHeight, element.clientHeight) + 'px';

	        if (docHeight < (element.clientHeight - 50) &&
	            doc.frame.actualWidth() <= availableWidth) {
	            element.style.overflow = 'hidden';
	        } else {
	            element.style.overflow = 'auto';
	        }

	        var ctx = canvas.getContext('2d');
	        ctx.scale(dpr, dpr);

	        ctx.clearRect(0, 0, logicalWidth, logicalHeight);
	        ctx.translate(0, getVerticalOffset() - element.scrollTop);
	        
	        doc.draw(ctx, rect(0, element.scrollTop, logicalWidth, logicalHeight));
	        doc.drawSelection(ctx, selectDragStart || (document.activeElement === textArea));
	    };

	    dom.handleEvent(element, 'scroll', paint);

	    dom.handleEvent(textArea, 'input', function() {
	        var newText = textArea.value;
	        if (textAreaContent != newText) {
	            textAreaContent = '';
	            textArea.value = '';
	            if (newText === plainClipboard) {
	                newText = richClipboard;
	            }
	            doc.insert(newText);
	        }
	    });

	    var updateTextArea = function() {
	        focusChar = focusChar === null ? doc.selection.end : focusChar;
	        var endChar = doc.byOrdinal(focusChar);
	        focusChar = null;
	        if (endChar) {
	            var bounds = endChar.bounds();
	            textAreaDiv.style.left = bounds.l + 'px';
	            textAreaDiv.style.top = bounds.t + 'px';
	            textArea.focus();
	            var scrollDownBy = Math.max(0, bounds.t + bounds.h -
	                    (element.scrollTop + element.clientHeight));
	            if (scrollDownBy) {
	                element.scrollTop += scrollDownBy;
	            }
	            var scrollUpBy = Math.max(0, element.scrollTop - bounds.t);
	            if (scrollUpBy) {
	                element.scrollTop -= scrollUpBy;
	            }
	            var scrollRightBy = Math.max(0, bounds.l -
	                (element.scrollLeft + element.clientWidth));
	            if (scrollRightBy) {
	                element.scrollLeft += scrollRightBy;
	            }
	            var scrollLeftBy = Math.max(0, element.scrollLeft - bounds.l);
	            if (scrollLeftBy) {
	                element.scrollLeft -= scrollLeftBy;
	            }
	        }
	        textAreaContent = doc.selectedRange().plainText();
	        textArea.value = textAreaContent;
	        textArea.select();

	        setTimeout(function() {
	            textArea.focus();
	        }, 10);
	    };

	    doc.selectionChanged(function(getformatting, takeFocus) {
	        paint();
	        if (!selectDragStart) {
	            if (takeFocus !== false) {
	                updateTextArea();
	            }
	        }
	    });

	    function registerMouseEvent(name, handler) {
	        dom.handleMouseEvent(spacer, name, function(ev, x, y) {
	            handler(doc.byCoordinate(x, y - getVerticalOffset()));
	        });
	    }

	    registerMouseEvent('mousedown', function(node) {
	        selectDragStart = node.ordinal;
	        doc.select(node.ordinal, node.ordinal);
	        keyboardX = null;
	    });

	    registerMouseEvent('dblclick', function(node) {
	        node = node.parent();
	        if (node) {
	            doc.select(node.ordinal, node.ordinal +
	                (node.word ? node.word.text.length : node.length));
	        }
	    });

	    registerMouseEvent('mousemove', function(node) {
	        if (selectDragStart !== null) {
	            if (node) {
	                focusChar = node.ordinal;
	                if (selectDragStart > node.ordinal) {
	                    doc.select(node.ordinal, selectDragStart);
	                } else {
	                    doc.select(selectDragStart, node.ordinal);
	                }
	            }
	        }
	    });

	    registerMouseEvent('mouseup', function(node) {
	        selectDragStart = null;
	        keyboardX = null;
	        updateTextArea();
	        textArea.focus();
	    });

	    var nextCaretToggle = new Date().getTime(),
	        focused = false,
	        cachedWidth = element.clientWidth,
	        cachedHeight = element.clientHeight;

	    var update = function() {
	        var requirePaint = false;
	        var newFocused = document.activeElement === textArea;
	        if (focused !== newFocused) {
	            focused = newFocused;
	            requirePaint = true;
	        }

	        var now = new Date().getTime();
	        if (now > nextCaretToggle) {
	            nextCaretToggle = now + 500;
	            if (doc.toggleCaret()) {
	                requirePaint = true;
	            }
	        }

	        if (element.clientWidth !== cachedWidth ||
	            element.clientHeight !== cachedHeight) {
	            requirePaint = true;
	            cachedWidth =element.clientWidth;
	            cachedHeight = element.clientHeight;
	        }

	        if (requirePaint) {
	            paint();
	        }
	    };

	    dom.handleEvent(canvas, 'carotaEditorSharedTimer', update);
	    update();

	    doc.sendKey = handleKey;
	    return doc;
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var per = __webpack_require__(32);
	var characters = __webpack_require__(38);
	var split = __webpack_require__(39);
	var word = __webpack_require__(40);
	var node = __webpack_require__(31);
	var runs = __webpack_require__(33);
	var range = __webpack_require__(43);
	var util = __webpack_require__(35);
	var frame = __webpack_require__(44);
	var codes = __webpack_require__(48);
	var rect = __webpack_require__(34);

	var makeEditCommand = function(doc, start, count, words) {
	    var selStart = doc.selection.start, selEnd = doc.selection.end;
	    return function(log) {
	        doc._wordOrdinals = [];
	        var oldWords = Array.prototype.splice.apply(doc.words, [start, count].concat(words));
	        log(makeEditCommand(doc, start, words.length, oldWords));
	        doc._nextSelection = { start: selStart, end: selEnd };
	    };
	};

	var makeTransaction = function(perform) {
	    var commands = [];
	    var log = function(command) {
	        commands.push(command);
	        log.length = commands.length;
	    };
	    perform(log);

	    return function(outerLog) {
	        outerLog(makeTransaction(function(innerLog) {
	            while (commands.length) {
	                commands.pop()(innerLog);
	            }
	        }));
	    };
	};

	var isBreaker = function(word) {
	    if (word.isNewLine()) {
	        return true;
	    }
	    var code = word.code();
	    return !!(code && (code.block || code.eof));
	};

	var prototype = node.derive({
	    load: function(runs, takeFocus) {
	        var self = this;
	        this.undo = [];
	        this.redo = [];
	        this._wordOrdinals = [];
	        this.words = per(characters(runs)).per(split(self.codes)).map(function(w) {
	            return word(w, self.codes);
	        }).all();
	        this.layout();
	        this.contentChanged.fire();
	        this.select(0, 0, takeFocus);
	    },
	    layout: function() {
	        this.frame = null;
	        try {
	            this.frame = per(this.words).per(frame(0, 0, this._width, 0, this)).first();
	        } catch (x) {
	            console.error(x);
	        }
	        if (!this.frame) {
	            console.error('A bug somewhere has produced an invalid state - rolling back');
	            this.performUndo();
	        } else if (this._nextSelection) {
	            var next = this._nextSelection;
	            delete this._nextSelection;
	            this.select(next.start, next.end);
	        }
	    },
	    range: function(start, end) {
	        return range(this, start, end);
	    },
	    documentRange: function() {
	        return this.range(0, this.frame.length - 1);
	    },
	    selectedRange: function() {
	        return this.range(this.selection.start, this.selection.end);
	    },
	    save: function() {
	        return this.documentRange().save();
	    },
	    paragraphRange: function(start, end) {
	        var i;

	        // find the character after the nearest breaker before start
	        var startInfo = this.wordContainingOrdinal(start);
	        start = 0;
	        if (startInfo && !isBreaker(startInfo.word)) {
	            for (i = startInfo.index; i > 0; i--) {
	                if (isBreaker(this.words[i - 1])) {
	                    start = this.wordOrdinal(i);
	                    break;
	                }
	            }
	        }

	        // find the nearest breaker after end
	        var endInfo = this.wordContainingOrdinal(end);
	        end = this.frame.length - 1;
	        if (endInfo && !isBreaker(endInfo.word)) {
	            for (i = endInfo.index; i < this.words.length; i++) {
	                if (isBreaker(this.words[i])) {
	                    end = this.wordOrdinal(i);
	                    break;
	                }
	            }
	        }

	        return this.range(start, end);
	    },
	    insert: function(text, takeFocus) {
	        this.select(this.selection.end + this.selectedRange().setText(text), null, takeFocus);
	    },
	    modifyInsertFormatting: function(attribute, value) {
	        this.nextInsertFormatting[attribute] = value;
	        this.notifySelectionChanged();
	    },
	    applyInsertFormatting: function(text) {
	        var formatting = this.nextInsertFormatting;
	        var insertFormattingProperties = Object.keys(formatting);
	        if (insertFormattingProperties.length) {
	            text.forEach(function(run) {
	                insertFormattingProperties.forEach(function(property) {
	                    run[property] = formatting[property];
	                });
	            });
	        }
	    },
	    wordOrdinal: function(index) {
	        if (index < this.words.length) {
	            var cached = this._wordOrdinals.length;
	            if (cached < (index + 1)) {
	                var o = cached > 0 ? this._wordOrdinals[cached - 1] : 0;
	                for (var n = cached; n <= index; n++) {
	                    this._wordOrdinals[n] = o;
	                    o += this.words[n].length;
	                }
	            }
	            return this._wordOrdinals[index];
	        }
	    },
	    wordContainingOrdinal: function(ordinal) {
	        // could rewrite to be faster using binary search over this.wordOrdinal
	        var result;
	        var pos = 0;
	        this.words.some(function(word, i) {
	            if (ordinal >= pos && ordinal < (pos + word.length)) {
	                result = {
	                    word: word,
	                    ordinal: pos,
	                    index: i,
	                    offset: ordinal - pos
	                };
	                return true;
	            }
	            pos += word.length;
	        });
	        return result;
	    },
	    runs: function(emit, range) {
	        var startDetails = this.wordContainingOrdinal(Math.max(0, range.start)),
	            endDetails = this.wordContainingOrdinal(Math.min(range.end, this.frame.length - 1));
	        if (startDetails.index === endDetails.index) {
	            startDetails.word.runs(emit, {
	                start: startDetails.offset,
	                end: endDetails.offset
	            });
	        } else {
	            startDetails.word.runs(emit, { start: startDetails.offset });
	            for (var n = startDetails.index + 1; n < endDetails.index; n++) {
	                this.words[n].runs(emit);
	            }
	            endDetails.word.runs(emit, { end: endDetails.offset });
	        }
	    },
	    spliceWordsWithRuns: function(wordIndex, count, runs) {
	        var self = this;

	        var newWords = per(characters(runs))
	            .per(split(self.codes))
	            .truthy()
	            .map(function(w) {
	                return word(w, self.codes);
	            })
	            .all();

	        // Check if old or new content contains any fancy control codes:
	        var runFilters = false;

	        if ('_filtersRunning' in self) {
	            self._filtersRunning++;
	        } else {
	            for (var n = 0; n < count; n++) {
	                if (this.words[wordIndex + n].code()) {
	                    runFilters = true;
	                }
	            }
	            if (!runFilters) {
	                runFilters = newWords.some(function(word) {
	                    return !!word.code();
	                });
	            }
	        }

	        this.transaction(function(log) {
	            makeEditCommand(self, wordIndex, count, newWords)(log);
	            if (runFilters) {
	                self._filtersRunning = 0;
	                try {
	                    for (;;) {
	                        var spliceCount = self._filtersRunning;
	                        if (!self.editFilters.some(function(filter) {
	                            filter(self);
	                            return spliceCount !== self._filtersRunning;
	                        })) {
	                            break; // No further changes were made
	                        }
	                    }
	                } finally {
	                    delete self._filtersRunning;
	                }
	            }
	        });
	    },
	    splice: function(start, end, text) {
	        if (typeof text === 'string') {
	            var sample = Math.max(0, start - 1);
	            var sampleRun = per({ start: sample, end: sample + 1 })
	                .per(this.runs, this)
	                .first();
	            text = [
	                sampleRun ? Object.create(sampleRun, { text: { value: text } }) : { text: text }
	            ];
	        } else if (!Array.isArray(text)) {
	            text = [{ text: text }];
	        }

	        this.applyInsertFormatting(text);

	        var startWord = this.wordContainingOrdinal(start),
	            endWord = this.wordContainingOrdinal(end);

	        var prefix;
	        if (start === startWord.ordinal) {
	            if (startWord.index > 0 && !isBreaker(this.words[startWord.index - 1])) {
	                startWord.index--;
	                var previousWord = this.words[startWord.index];
	                prefix = per({}).per(previousWord.runs, previousWord).all();
	            } else {
	                prefix = [];
	            }
	        } else {
	            prefix = per({ end: startWord.offset })
	                    .per(startWord.word.runs, startWord.word)
	                    .all();
	        }

	        var suffix;
	        if (end === endWord.ordinal) {
	            if ((end === this.frame.length - 1) || isBreaker(endWord.word)) {
	                suffix = [];
	                endWord.index--;
	            } else {
	                suffix = per({}).per(endWord.word.runs, endWord.word).all();
	            }
	        } else {
	            suffix = per({ start: endWord.offset })
	                    .per(endWord.word.runs, endWord.word)
	                    .all();
	        }

	        var oldLength = this.frame.length;

	        this.spliceWordsWithRuns(startWord.index, (endWord.index - startWord.index) + 1,
	            per(prefix).concat(text).concat(suffix).per(runs.consolidate()).all());

	        return this.frame ? (this.frame.length - oldLength) : 0;
	    },
	    registerEditFilter: function(filter) {
	        this.editFilters.push(filter);
	    },
	    width: function(width) {
	        if (arguments.length === 0) {
	            return this._width;
	        }
	        this._width = width;
	        this.layout();
	    },
	    children: function() {
	        return [this.frame];
	    },
	    toggleCaret: function() {
	        var old = this.caretVisible;
	        if (this.selection.start === this.selection.end) {
	            if (this.selectionJustChanged) {
	                this.selectionJustChanged = false;
	            } else {
	                this.caretVisible = !this.caretVisible;
	            }
	        }
	        return this.caretVisible !== old;
	    },
	    getCaretCoords: function(ordinal) {
	        var node = this.byOrdinal(ordinal), b;
	        if (node) {
	            if (node.block && ordinal > 0) {
	                var nodeBefore = this.byOrdinal(ordinal - 1);
	                if (nodeBefore.newLine) {
	                    var newLineBounds = nodeBefore.bounds();
	                    var lineBounds = nodeBefore.parent().parent().bounds();
	                    b = rect(lineBounds.l, lineBounds.b, 1, newLineBounds.h);
	                } else {
	                    b = nodeBefore.bounds();
	                    b = rect(b.r, b.t, 1, b.h);
	                }
	            } else {
	                b = node.bounds();
	                if (b.h) {
	                    b = rect(b.l, b.t, 1, b.h);
	                } else {
	                    b = rect(b.l, b.t, b.w, 1);
	                }
	            }
	            return b;
	        }
	    },
	    byCoordinate: function(x, y) {
	        var ordinal = this.frame.byCoordinate(x, y).ordinal;
	        var caret = this.getCaretCoords(ordinal);
	        while (caret.b <= y && ordinal < (this.frame.length - 1)) {
	            ordinal++;
	            caret = this.getCaretCoords(ordinal);
	        }
	        while (caret.t >= y && ordinal > 0) {
	            ordinal--;
	            caret = this.getCaretCoords(ordinal);
	        }
	        return this.byOrdinal(ordinal);
	    },
	    drawSelection: function(ctx, hasFocus) {
	        if (this.selection.end === this.selection.start) {
	            if (this.selectionJustChanged || hasFocus && this.caretVisible) {
	                var caret = this.getCaretCoords(this.selection.start);
	                if (caret) {
	                    ctx.save();
	                    ctx.fillStyle = 'black';
	                    caret.fill(ctx);
	                    ctx.restore();
	                }
	            }
	        } else {
	            ctx.save();
	            ctx.fillStyle = hasFocus ? 'rgba(0, 100, 200, 0.3)' : 'rgba(160, 160, 160, 0.3)';
	            this.selectedRange().parts(function(part) {
	                part.bounds(true).fill(ctx);
	            });
	            ctx.restore();
	        }
	    },
	    notifySelectionChanged: function(takeFocus) {
	        // When firing selectionChanged, we pass a function can be used
	        // to obtain the formatting, as this highly likely to be needed
	        var cachedFormatting = null;
	        var self = this;
	        var getFormatting = function() {
	            if (!cachedFormatting) {
	                cachedFormatting = self.selectedRange().getFormatting();
	            }
	            return cachedFormatting;
	        };
	        this.selectionChanged.fire(getFormatting, takeFocus);
	    },
	    select: function(ordinal, ordinalEnd, takeFocus) {
	        if (!this.frame) {
	            // Something has gone terribly wrong - doc.transaction will rollback soon
	            return;
	        }
	        this.selection.start = Math.max(0, ordinal);
	        this.selection.end = Math.min(
	            typeof ordinalEnd === 'number' ? ordinalEnd : this.selection.start,
	            this.frame.length - 1
	        );
	        this.selectionJustChanged = true;
	        this.caretVisible = true;
	        this.nextInsertFormatting = {};

	        /*  NB. always fire this even if the positions stayed the same. The
	            event means that the formatting of the selection has changed
	            (which can happen either by moving the selection range or by
	            altering the formatting)
	        */
	        this.notifySelectionChanged(takeFocus);
	    },
	    performUndo: function(redo) {
	        var fromStack = redo ? this.redo : this.undo,
	            toStack = redo ? this.undo : this.redo,
	            oldCommand = fromStack.pop();

	        if (oldCommand) {
	            oldCommand(function(newCommand) {
	                toStack.push(newCommand);
	            });
	            this.layout();
	            this.contentChanged.fire();
	        }
	    },
	    canUndo: function(redo) {
	        return redo ? !!this.redo.length : !!this.undo.length;
	    },
	    transaction: function(perform) {
	        if (this._currentTransaction) {
	            perform(this._currentTransaction);
	        } else {
	            var self = this;
	            while (this.undo.length > 50) {
	                self.undo.shift();
	            }
	            this.redo.length = 0;
	            var changed = false;
	            this.undo.push(makeTransaction(function(log) {
	                self._currentTransaction = log;
	                try {
	                    perform(log);
	                } finally {
	                    changed = log.length > 0;
	                    self._currentTransaction = null;
	                }
	            }));
	            if (changed) {
	                self.layout();
	                self.contentChanged.fire();
	            }
	        }
	    },
	    type: 'document'
	});

	exports = module.exports = function() {
	    var doc = Object.create(prototype);
	    doc._width = 0;
	    doc.selection = { start: 0, end: 0 };
	    doc.caretVisible = true;
	    doc.customCodes = function(code, data, allCodes) {};
	    doc.codes = function(code, data) {
	        var instance = codes(code, data, doc.codes);
	        return instance || doc.customCodes(code, data, doc.codes);
	    };
	    doc.selectionChanged = util.event();
	    doc.contentChanged = util.event();
	    doc.editFilters = [codes.editFilter];
	    doc.load([]);
	    return doc;
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var runs = __webpack_require__(33);

	var compatible = function(a, b) {
	    if (a._runs !== b._runs) {
	        throw new Error('Characters for different documents');
	    }
	};

	var prototype = {
	    equals: function(other) {
	        compatible(this, other);
	        return this._run === other._run && this._offset === other._offset;
	    },
	    cut: function(upTo) {
	        compatible(this, upTo);
	        var self = this;
	        return function(eachRun) {
	            for (var runIndex = self._run; runIndex <= upTo._run; runIndex++) {
	                var run = self._runs[runIndex];
	                if (run) {
	                    var start = (runIndex === self._run) ? self._offset : 0;
	                    var stop = (runIndex === upTo._run) ? upTo._offset : runs.getTextLength(run.text);
	                    if (start < stop) {
	                        runs.getSubText(function(piece) {
	                            var pieceRun = Object.create(run);
	                            pieceRun.text = piece;
	                            eachRun(pieceRun);
	                        }, run.text, start, stop - start);
	                    }
	                }
	            }
	        };
	    }
	};

	function character(runArray, run, offset) {
	    return Object.create(prototype, {
	        _runs: { value: runArray },
	        _run: { value: run },
	        _offset: { value: offset },
	        char: {
	            value: run >= runArray.length ? null :
	                runs.getTextChar(runArray[run].text, offset)
	        }
	    });
	}

	function firstNonEmpty(runArray, n) {
	    for (; n < runArray.length; n++) {
	        if (runs.getTextLength(runArray[n].text) != 0) {
	            return character(runArray, n, 0);
	        }
	    }
	    return character(runArray, runArray.length, 0);
	}

	module.exports = function(runArray) {
	    return function(emit) {
	        var c = firstNonEmpty(runArray, 0);
	        while (!emit(c) && (c.char !== null)) {
	            c = (c._offset + 1 < runs.getTextLength(runArray[c._run].text))
	                ? character(runArray, c._run, c._offset + 1)
	                : firstNonEmpty(runArray, c._run + 1);
	        }
	    };
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/*  Creates a stateful transformer function that consumes Characters and produces "word coordinate"
	    objects, which are triplets of Characters representing the first characters of:

	         start   - the word itself
	         end     - any trailing whitespace
	         next    - the subsequent word, or end of document.

	     Newline characters are NOT whitespace. They are always emitted as separate single-character
	     words.

	    If start.equals(end) then the "word" only contains whitespace and so must represent spaces
	    at the start of a line. So even in this case, whitespace is always treated as "trailing
	    after" a word - even if that word happens to be zero characters long!
	 */

	module.exports = function(codes) {

	    var word = null, trailingSpaces = null, newLine = true;

	    return function(emit, inputChar) {

	        var endOfWord;
	        if (inputChar.char === null) {
	            endOfWord = true;
	        } else {
	            if (newLine) {
	                endOfWord = true;
	                newLine = false;
	            }
	            if (typeof inputChar.char === 'string') {
		            switch (inputChar.char) {
		                case ' ':
		                    if (!trailingSpaces) {
		                        trailingSpaces = inputChar;
		                    }
		                    break;
		                case '\n':
		                    endOfWord = true;
		                    newLine = true;
		                    break;
		                default:
		                    if (trailingSpaces) {
		                        endOfWord = true;
		                    }
	                }
	            } else {
	                var code = codes(inputChar.char);
	                if (code.block || code.eof) {
	                    endOfWord = true;
	                    newLine = true;
	                } 
	            }
	        }
	        if (endOfWord) {
	            if (word && !word.equals(inputChar)) {
	                if (emit({
	                    text: word,
	                    spaces: trailingSpaces || inputChar,
	                    end: inputChar
	                }) === false) {
	                    return false;
	                }
	                trailingSpaces = null;
	            }
	            if (inputChar.char === null) {
	                emit(null); // Indicate end of stream
	            }

	            word = inputChar;
	        }
	    };
	};


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var per = __webpack_require__(32);
	var part = __webpack_require__(41);
	var runs = __webpack_require__(33);

	/*  A Word has the following properties:

	        text      - Section (see below) for non-space portion of word.
	        space     - Section for trailing space portion of word.
	        ascent    - Ascent (distance from baseline to top) for whole word
	        descent   - Descent (distance from baseline to bottom) for whole word
	        width     - Width of the whole word (including trailing space)

	    It has methods:

	        isNewLine()
	                  - Returns true if the Word represents a newline. Newlines are
	                    always represented by separate words.

	        draw(ctx, x, y)
	                  - Draws the Word at x, y on the canvas context ctx.

	    Note: a section (i.e. text and space) is an object containing:

	        parts     - array of Parts
	        ascent    - Ascent (distance from baseline to top) for whole section
	        descent   - Descent (distance from baseline to bottom) for whole section
	        width     - Width of the whole section
	 */

	var prototype = {
	    isNewLine: function() {
	        return this.text.parts.length == 1 && this.text.parts[0].isNewLine;
	    },
	    code: function() {
	        return this.text.parts.length == 1 && this.text.parts[0].code;
	    },
	    codeFormatting: function() {
	        return this.text.parts.length == 1 && this.text.parts[0].run;
	    },
	    draw: function(ctx, x, y) {
	        per(this.text.parts).concat(this.space.parts).forEach(function(part) {
	            part.draw(ctx, x, y);
	            x += part.width;
	        });
	    },
	    plainText: function() {
	        return this.text.plainText + this.space.plainText;
	    },
	    align: function() {
	        var first = this.text.parts[0];
	        return first ? first.run.align : 'left';
	    },
	    runs: function(emit, range) {
	        var start = range && range.start || 0,
	            end = range && range.end;
	        if (typeof end !== 'number') {
	            end = Number.MAX_VALUE;
	        }
	        [this.text, this.space].forEach(function(section) {
	            section.parts.some(function(part) {
	                if (start >= end || end <= 0) {
	                    return true;
	                }
	                var run = part.run, text = run.text;
	                if (typeof text === 'string') {
	                    if (start <= 0 && end >= text.length) {
	                        emit(run);
	                    } else if (start < text.length) {
	                        var pieceRun = Object.create(run);
	                        var firstChar = Math.max(0, start);
	                        pieceRun.text = text.substr(
	                            firstChar,
	                            Math.min(text.length, end - firstChar)
	                        );
	                        emit(pieceRun);
	                    }
	                    start -= text.length;
	                    end -= text.length;
	                } else {
	                    if (start <= 0 && end >= 1) {
	                        emit(run);
	                    }
	                    start--;
	                    end--;
	                }
	            });
	        });
	    }
	};

	var section = function(runEmitter, codes) {
	    var s = {
	        parts: per(runEmitter).map(function(p) {
	            return part(p, codes);
	        }).all(),
	        ascent: 0,
	        descent: 0,
	        width: 0,
	        length: 0,
	        plainText: ''
	    };
	    s.parts.forEach(function(p) {
	        s.ascent = Math.max(s.ascent, p.ascent);
	        s.descent = Math.max(s.descent, p.descent);
	        s.width += p.width;
	        s.length += runs.getPieceLength(p.run.text);
	        s.plainText += runs.getPiecePlainText(p.run.text);
	    });
	    return s;
	};

	module.exports = function(coords, codes) {
	    var text, space;
	    if (!coords) {
	        // special end-of-document marker, mostly like a newline with no formatting
	        text = [{ text: '\n' }];
	        space = [];
	    } else {
	        text = coords.text.cut(coords.spaces);
	        space = coords.spaces.cut(coords.end);
	    }
	    text = section(text, codes);
	    space = section(space, codes);
	    var word = Object.create(prototype, {
	        text: { value: text },
	        space: { value: space },
	        ascent: { value: Math.max(text.ascent, space.ascent) },
	        descent: { value: Math.max(text.descent, space.descent) },
	        width: { value: text.width + space.width, configurable: true },
	        length: { value: text.length + space.length }
	    });
	    if (!coords) {
	        Object.defineProperty(word, 'eof', { value: true });
	    }
	    return word;
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var text = __webpack_require__(42);

	var defaultInline = {
	    measure: function(formatting) {
	        var text = text.measure('?', formatting);
	        return {
	            width: text.width + 4,
	            ascent: text.width + 2,
	            descent: text.width + 2
	        };
	    },
	    draw: function(ctx, x, y, width, ascent, descent) {
	        ctx.fillStyle = 'silver';
	        ctx.fillRect(x, y - ascent, width, ascent + descent);
	        ctx.strokeRect(x, y - ascent, width, ascent + descent);
	        ctx.fillStyle = 'black';
	        ctx.fillText('?', x + 2, y);
	    }
	};

	/*  A Part is a section of a word with its own run, because a Word can span the
	    boundaries between runs, so it may have several parts in its text or space
	    arrays.

	        run           - Run being measured.
	        isNewLine     - True if this part only contain a newline (\n). This will be
	                        the only Part in the Word, and this is the only way newlines
	                        ever occur.
	        width         - Width of the run
	        ascent        - Distance from baseline to top
	        descent       - Distance from baseline to bottom

	    And methods:

	        draw(ctx, x, y)
	                      - Draws the Word at x, y on the canvas context ctx. The y
	                        coordinate is assumed to be the baseline. The call
	                        prepareContext(ctx) will set the canvas up appropriately.
	 */
	var prototype = {
	    draw: function(ctx, x, y) {
	        if (typeof this.run.text === 'string') {
	            text.draw(ctx, this.run.text, this.run, x, y, this.width, this.ascent, this.descent);
	        } else if (this.code && this.code.draw) {
	            ctx.save();
	            this.code.draw(ctx, x, y, this.width, this.ascent, this.descent, this.run);
	            ctx.restore();
	        }
	    }
	};

	module.exports = function(run, codes) {

	    var m, isNewLine, code;
	    if (typeof run.text === 'string') {
	        isNewLine = (run.text.length === 1) && (run.text[0] === '\n');
	        m = text.measure(isNewLine ? text.nbsp : run.text, run);
	    } else {
	        code = codes(run.text) || defaultInline;
	        m = code.measure ? code.measure(run) : {
	            width: 0, ascent: 0, descent: 0
	        };
	    }

	    var part = Object.create(prototype, {
	        run: { value: run },
	        isNewLine: { value: isNewLine },
	        width: { value: isNewLine ? 0 : m.width },
	        ascent: { value: m.ascent },
	        descent: { value: m.descent }
	    });
	    if (code) {
	        Object.defineProperty(part, 'code', { value: code });
	    }
	    return part;
	};


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var runs = __webpack_require__(33);

	/*  Returns a font CSS/Canvas string based on the settings in a run
	 */
	var getFontString = exports.getFontString = function(run) {

	    var size = (run && run.size) || runs.defaultFormatting.size;

	    if (run) {
	        switch (run.script) {
	            case 'super':
	            case 'sub':
	                size *= 0.8;
	                break;
	        }
	    }

	    return (run && run.italic ? 'italic ' : '') +
	           (run && run.bold ? 'bold ' : '') + ' ' +
	            size + 'pt ' +
	          ((run && run.font) || runs.defaultFormatting.font);
	};

	/*  Applies the style of a run to the canvas context
	 */
	exports.applyRunStyle = function(ctx, run) {
	    ctx.fillStyle = (run && run.color) || runs.defaultFormatting.color;
	    ctx.font = getFontString(run);
	};

	exports.prepareContext = function(ctx) {
	    ctx.textAlign = 'left';
	    ctx.textBaseline = 'alphabetic';
	};

	/* Generates the value for a CSS style attribute
	 */
	exports.getRunStyle = function(run) {
	    var parts = [
	        'font: ', getFontString(run),
	      '; color: ', ((run && run.color) || runs.defaultFormatting.color)
	    ];

	    if (run) {
	        switch (run.script) {
	            case 'super':
	                parts.push('; vertical-align: super');
	                break;
	            case 'sub':
	                parts.push('; vertical-align: sub');
	                break;
	        }
	    }

	    return parts.join('');
	};

	var nbsp = exports.nbsp = String.fromCharCode(160);
	var enter = exports.enter = nbsp; // String.fromCharCode(9166);

	/*  Returns width, height, ascent, descent in pixels for the specified text and font.
	    The ascent and descent are measured from the baseline. Note that we add/remove
	    all the DOM elements used for a measurement each time - this is not a significant
	    part of the cost, and if we left the hidden measuring node in the DOM then it
	    would affect the dimensions of the whole page.
	 */
	var measureText = exports.measureText = function(text, style) {
	    var span, block, div;

	    span = document.createElement('span');
	    block = document.createElement('div');
	    div = document.createElement('div');

	    block.style.display = 'inline-block';
	    block.style.width = '1px';
	    block.style.height = '0';

	    div.style.visibility = 'hidden';
	    div.style.position = 'absolute';
	    div.style.top = '0';
	    div.style.left = '0';
	    div.style.width = '500px';
	    div.style.height = '200px';

	    div.appendChild(span);
	    div.appendChild(block);
	    document.body.appendChild(div);
	    try {
	        span.setAttribute('style', style);

	        span.innerHTML = '';
	        span.appendChild(document.createTextNode(text.replace(/\s/g, nbsp)));

	        var result = {};
	        block.style.verticalAlign = 'baseline';
	        result.ascent = (block.offsetTop - span.offsetTop);
	        block.style.verticalAlign = 'bottom';
	        result.height = (block.offsetTop - span.offsetTop);
	        result.descent = result.height - result.ascent;
	        result.width = span.offsetWidth;
	    } finally {
	        div.parentNode.removeChild(div);
	        div = null;
	    }
	    return result;
	};

	/*  Create a function that works like measureText except it caches every result for every
	    unique combination of (text, style) - that is, it memoizes measureText.

	    So for example:

	        var measure = cachedMeasureText();

	    Then you can repeatedly do lots of separate calls to measure, e.g.:

	        var m = measure('Hello, world', 'font: 12pt Arial');
	        console.log(m.ascent, m.descent, m.width);

	    A cache may grow without limit if the text varies a lot. However, during normal interactive
	    editing the growth rate will be slow. If memory consumption becomes a problem, the cache
	    can be occasionally discarded, although of course this will cause a slow down as the cache
	    has to build up again (text measuring is by far the most costly operation we have to do).
	*/
	var createCachedMeasureText = exports.createCachedMeasureText = function() {
	    var cache = {};
	    return function(text, style) {
	        var key = style + '<>!&%' + text;
	        var result = cache[key];
	        if (!result) {
	            cache[key] = result = measureText(text, style);
	        }
	        return result;
	    };
	};

	exports.cachedMeasureText = createCachedMeasureText();

	exports.measure = function(str, formatting) {
	    return exports.cachedMeasureText(str, exports.getRunStyle(formatting));
	};

	exports.draw = function(ctx, str, formatting, left, baseline, width, ascent, descent) {
	    exports.prepareContext(ctx);
	    exports.applyRunStyle(ctx, formatting);
	    switch (formatting.script) {
	        case 'super':
	            baseline -= (ascent * (1/3));
	            break;
	        case 'sub':
	            baseline += (descent / 2);
	            break;
	    }
	    ctx.fillText(str === '\n' ? exports.enter : str, left, baseline);
	    if (formatting.underline) {
	        ctx.fillRect(left, 1 + baseline, width, 1);
	    }
	    if (formatting.strikeout) {
	        ctx.fillRect(left, 1 + baseline - (ascent/2), width, 1);
	    }
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var per = __webpack_require__(32);
	var runs = __webpack_require__(33);

	function Range(doc, start, end) {
	    this.doc = doc;
	    this.start = start;
	    this.end = end;
	    if (start > end) {
	        this.start = end;
	        this.end = start;
	    }
	}

	Range.prototype.parts = function(emit, list) {
	    list = list || this.doc.children();
	    var self = this;

	    list.some(function(item) {
	        if (item.ordinal + item.length <= self.start) {
	            return false;
	        }
	        if (item.ordinal >= self.end) {
	            return true;
	        }
	        if (item.ordinal >= self.start &&
	            item.ordinal + item.length <= self.end) {
	            emit(item);
	        } else {
	            self.parts(emit, item.children());
	        }
	    });
	};

	Range.prototype.clear = function() {
	    return this.setText([]);
	};

	Range.prototype.setText = function(text) {
	    return this.doc.splice(this.start, this.end, text);
	};

	Range.prototype.runs = function(emit) {
	    this.doc.runs(emit, this);
	};

	Range.prototype.plainText = function() {
	    return per(this.runs, this).map(runs.getPlainText).all().join('');
	};

	Range.prototype.save = function() {
	    return per(this.runs, this).per(runs.consolidate()).all();
	};

	Range.prototype.getFormatting = function() {
	    var range = this;
	    if (range.start === range.end) {
	        var pos = range.start;
	        // take formatting of character before, if any, because that's
	        // where plain text picks up formatting when inserted
	        if (pos > 0) {
	            pos--;
	        }
	        range.start = pos;
	        range.end = pos + 1;
	    }
	    return per(range.runs, range).reduce(runs.merge).last() || runs.defaultFormatting;
	};

	Range.prototype.setFormatting = function(attribute, value) {
	    var range = this;
	    if (attribute === 'align') {
	        // Special case: expand selection to surrounding paragraphs
	        range = range.doc.paragraphRange(range.start, range.end);
	    }
	    if (range.start === range.end) {
	        range.doc.modifyInsertFormatting(attribute, value);
	    } else {
	        var saved = range.save();
	        var template = {};
	        template[attribute] = value;
	        runs.format(saved, template);
	        range.setText(saved);
	    }
	};

	module.exports = function(doc, start, end) {
	    return new Range(doc, start, end);
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var node = __webpack_require__(31);
	var wrap = __webpack_require__(45);
	var rect = __webpack_require__(34);

	var prototype = node.derive({
	    bounds: function() {
	        if (!this._bounds) {
	            var left = 0, top = 0, right = 0, bottom = 0;
	            if (this.lines.length) {
	                var first = this.lines[0].bounds();
	                left = first.l;
	                top = first.t;
	                this.lines.forEach(function(line) {
	                    var b = line.bounds();
	                    right = Math.max(right, b.l + b.w);
	                    bottom = Math.max(bottom, b.t + b.h);
	                });
	            }
	            this._bounds = rect(left, top, right - left, this.height || bottom - top);
	        }
	        return this._bounds;
	    },
	    actualWidth: function() {
	        if (!this._actualWidth) {
	            var result = 0;
	            this.lines.forEach(function(line) {
	                if (typeof line.actualWidth === 'number') {
	                    result = Math.max(result, line.actualWidth);
	                }
	            });
	            this._actualWidth = result;
	        }
	        return this._actualWidth;
	    },
	    children: function() {
	        return this.lines;
	    },
	    parent: function() {
	        return this._parent;
	    },
	    draw: function(ctx, viewPort) {
	        var top = viewPort ? viewPort.t : 0;
	        var bottom = viewPort ? (viewPort.t + viewPort.h) : Number.MAX_VALUE;
	        this.lines.some(function(line) {
	            var b = line.bounds();
	            if (b.t + b.h < top) {
	                return false;
	            }
	            if (b.t > bottom) {
	                return true;
	            }
	            line.draw(ctx, viewPort);
	        });
	    },
	    type: 'frame'
	});

	exports = module.exports = function(left, top, width, ordinal, parent,
	                                    includeTerminator, initialAscent, initialDescent) {
	    var lines = [];
	    var frame = Object.create(prototype, {
	        lines: { value: lines },
	        _parent: { value: parent },
	        ordinal: { value: ordinal }
	    });
	    var wrapper = wrap(left, top, width, ordinal, frame, includeTerminator, initialAscent, initialDescent);
	    var length = 0, height = 0;
	    return function(emit, word) {
	        if (wrapper(function(line) {
	            if (typeof line === 'number') {
	                height = line;
	            } else {
	                length = (line.ordinal + line.length) - ordinal;
	                lines.push(line);
	            }
	        }, word)) {
	            Object.defineProperty(frame, 'length', { value: length });
	            Object.defineProperty(frame, 'height', { value: height });
	            emit(frame);
	            return true;
	        }
	    };
	};


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var line = __webpack_require__(46);

	/*  A stateful transformer function that accepts words and emits lines. If the first word
	    is too wide, it will overhang; if width is zero or negative, there will be one word on
	    each line.

	    The y-coordinate is the top of the first line, not the baseline.

	    Returns a stream of line objects, each containing an array of positionedWord objects.
	 */

	module.exports = function(left, top, width, ordinal, parent,
	                          includeTerminator, initialAscent, initialDescent) {

	    var lineBuffer = [],
	        lineWidth = 0,
	        maxAscent = initialAscent || 0,
	        maxDescent = initialDescent || 0,
	        quit,
	        lastNewLineHeight = 0,
	        y = top;

	    var store = function(word, emit) {
	        lineBuffer.push(word);
	        lineWidth += word.width;
	        maxAscent = Math.max(maxAscent, word.ascent);
	        maxDescent = Math.max(maxDescent, word.descent);
	        if (word.isNewLine()) {
	            send(emit);
	            lastNewLineHeight = word.ascent + word.descent;
	        }
	    };

	    var send = function(emit) {
	        if (quit || lineBuffer.length === 0) {
	            return;
	        }
	        var l = line(parent, left, width, y + maxAscent, maxAscent, maxDescent, lineBuffer, ordinal);
	        ordinal += l.length;
	        quit = emit(l);
	        y += (maxAscent + maxDescent);
	        lineBuffer.length = 0;
	        lineWidth = maxAscent = maxDescent = 0;
	    };

	    var consumer = null;

	    return function(emit, inputWord) {
	        if (consumer) {
	            lastNewLineHeight = 0;
	            var node = consumer(inputWord);
	            if (node) {
	                consumer = null;
	                ordinal += node.length;
	                y += node.bounds().h;
	                Object.defineProperty(node, 'block', { value: true });
	                emit(node);
	            }
	        } else {
	            var code = inputWord.code();
	            if (code && code.block) {
	                if (lineBuffer.length) {
	                    send(emit);
	                } else {
	                    y += lastNewLineHeight;
	                }
	                consumer = code.block(left, y, width, ordinal, parent, inputWord.codeFormatting());
	                lastNewLineHeight = 0;
	            }
	            else if (code && code.eof || inputWord.eof) {
	                if (!code || (includeTerminator && includeTerminator(code))) {
	                    store(inputWord, emit);
	                }
	                if (!lineBuffer.length) {
	                    emit(y + lastNewLineHeight - top);
	                } else {
	                    send(emit);
	                    emit(y - top);
	                }
	                quit = true;
	            } else {
	                lastNewLineHeight = 0;
	                if (!lineBuffer.length) {
	                    store(inputWord, emit);
	                } else {
	                    if (lineWidth + inputWord.text.width > width) {
	                        send(emit);
	                    }
	                    store(inputWord, emit);
	                }
	            }
	        }
	        return quit;
	    };
	};


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var positionedWord = __webpack_require__(47);
	var rect = __webpack_require__(34);
	var node = __webpack_require__(31);
	var runs = __webpack_require__(33);

	/*  A Line is returned by the wrap function. It contains an array of PositionedWord objects that are
	    all on the same physical line in the wrapped text.

	     It has a width (which is actually the same for all lines returned by the same wrap). It also has
	     coordinates for baseline, ascent and descent. The ascent and descent have the maximum values of
	     the individual words' ascent and descent coordinates.

	    It has methods:

	        draw(ctx, x, y)
	                  - Draw all the words in the line applying the specified (x, y) offset.
	        bounds()
	                  - Returns a Rect for the bounding box.
	 */

	var prototype = node.derive({
	    bounds: function(minimal) {
	        if (minimal) {
	            var firstWord = this.first().bounds(),
	                lastWord = this.last().bounds();
	            return rect(
	                firstWord.l,
	                this.baseline - this.ascent,
	                (lastWord.l + lastWord.w) - firstWord.l,
	                this.ascent + this.descent);
	        }
	        return rect(this.left, this.baseline - this.ascent,
	            this.width, this.ascent + this.descent);
	    },
	    parent: function() {
	        return this.doc;
	    },
	    children: function() {
	        return this.positionedWords;
	    },
	    type: 'line'
	});

	module.exports = function(doc, left, width, baseline, ascent, descent, words, ordinal) {

	    var align = words[0].align();

	    var line = Object.create(prototype, {
	        doc: { value: doc }, // should be called frame, or else switch to using parent on all nodes
	        left: { value: left },
	        width: { value: width },
	        baseline: { value: baseline },
	        ascent: { value: ascent },
	        descent: { value: descent },
	        ordinal: { value: ordinal },
	        align: { value: align }
	    });

	    var actualWidth = 0;
	    words.forEach(function(word) {
	        actualWidth += word.width;
	    });
	    actualWidth -= words[words.length - 1].space.width;

	    var x = 0, spacing = 0;
	    if (actualWidth < width) {
	        switch (align) {
	            case 'right':
	                x = width - actualWidth;
	                break;
	            case 'center':
	                x = (width - actualWidth) / 2;
	                break;
	            case 'justify':
	                if (words.length > 1 && !words[words.length - 1].isNewLine()) {
	                    spacing = (width - actualWidth) / (words.length - 1);
	                }
	                break;
	        }
	    }

	    Object.defineProperty(line, 'positionedWords', {
	        value: words.map(function(word) {
	            var wordLeft = x;
	            x += (word.width + spacing);
	            var wordOrdinal = ordinal;
	            ordinal += (word.text.length + word.space.length);
	            return positionedWord(word, line, wordLeft, wordOrdinal, word.width + spacing);
	        })
	    });

	    Object.defineProperty(line, 'actualWidth', { value: actualWidth });
	    Object.defineProperty(line, 'length', { value: ordinal - line.ordinal });
	    return line;
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var rect = __webpack_require__(34);
	var part = __webpack_require__(41);
	var text = __webpack_require__(42);
	var node = __webpack_require__(31);
	var word = __webpack_require__(40);
	var runs = __webpack_require__(33);

	var newLineWidth = function(run) {
	    return text.measure(text.enter, run).width;
	};

	var positionedChar = node.derive({
	    bounds: function() {
	        var wb = this.word.bounds();
	        var width = this.word.word.isNewLine()
	            ? newLineWidth(this.word.word.run)
	            : this.width || this.part.width;
	        return rect(wb.l + this.left, wb.t, width, wb.h);
	    },
	    parent: function() {
	        return this.word;
	    },
	    byOrdinal: function() {
	        return this;
	    },
	    byCoordinate: function(x, y) {
	        if (x <= this.bounds().center().x) {
	            return this;
	        }
	        return this.next();
	    },
	    type: 'character'
	});

	/*  A positionedWord is just a realised Word plus a reference back to the containing Line and
	    the left coordinate (x coordinate of the left edge of the word).

	    It has methods:

	        draw(ctx, x, y)
	                  - Draw the word within its containing line, applying the specified (x, y)
	                    offset.
	        bounds()
	                  - Returns a rect for the bounding box.
	 */
	var prototype = node.derive({
	    draw: function(ctx) {
	        this.word.draw(ctx, this.line.left + this.left, this.line.baseline);

	        // Handy for showing how word boundaries work
	        // var b = this.bounds();
	        // ctx.strokeRect(b.l, b.t, b.w, b.h);
	    },
	    bounds: function() {
	        return rect(
	            this.line.left + this.left,
	            this.line.baseline - this.line.ascent,
	            this.word.isNewLine() ? newLineWidth(this.word.run) : this.width,
	            this.line.ascent + this.line.descent);
	    },
	    parts: function(eachPart) {
	        this.word.text.parts.some(eachPart) ||
	        this.word.space.parts.some(eachPart);
	    },
	    realiseCharacters: function() {
	        if (!this._characters) {
	            var cache = [];
	            var x = 0, self = this, ordinal = this.ordinal,
	                codes = this.parentOfType('document').codes;
	            this.parts(function(wordPart) {
	                runs.pieceCharacters(function(char) {
	                    var charRun = Object.create(wordPart.run);
	                    charRun.text = char;
	                    var p = part(charRun, codes);
	                    cache.push(Object.create(positionedChar, {
	                        left: { value: x },
	                        part: { value: p },
	                        word: { value: self },
	                        ordinal: { value: ordinal },
	                        length: { value: 1 }
	                    }));
	                    x += p.width;
	                    ordinal++;
	                }, wordPart.run.text);
	            });
	            // Last character is artificially widened to match the length of the
	            // word taking into account (align === 'justify')
	            var lastChar = cache[cache.length - 1];
	            if (lastChar) {
	                Object.defineProperty(lastChar, 'width',
	                    { value: this.width - lastChar.left });
	                if (this.word.isNewLine() || (this.word.code() && this.word.code().eof)) {
	                    Object.defineProperty(lastChar, 'newLine', { value: true });
	                }
	            }
	            this._characters = cache;
	        }
	    },
	    children: function() {
	        this.realiseCharacters();
	        return this._characters;
	    },
	    parent: function() {
	        return this.line;
	    },
	    type: 'word'
	});

	module.exports = function(word, line, left, ordinal, width) {
	    var pword = Object.create(prototype, {
	        word: { value: word },
	        line: { value: line },
	        left: { value: left },
	        width: { value: width }, // can be different to word.width if (align == 'justify')
	        ordinal: { value: ordinal },
	        length: { value: word.text.length + word.space.length }
	    });
	    return pword;
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var text = __webpack_require__(42);
	var frame = __webpack_require__(44);
	var node = __webpack_require__(31);
	var rect = __webpack_require__(34);
	var util = __webpack_require__(35);

	var inlineNodePrototype = node.derive({
	    parent: function() {
	        return this._parent;
	    },
	    draw: function(ctx) {
	        this.inline.draw(ctx,
	            this.left,
	            this.baseline,
	            this.measured.width,
	            this.measured.ascent,
	            this.measured.descent,
	            this.formatting);
	    },
	    position: function(left, baseline, bounds) {
	        this.left = left;
	        this.baseline = baseline;
	        if (bounds) {
	            this._bounds = bounds;
	        }
	    },
	    bounds: function() {
	        return this._bounds || rect(this.left, this.baseline - this.measured.ascent,
	            this.measured.width, this.measured.ascent + this.measured.descent);
	    },
	    byCoordinate: function(x, y) {
	        if (x <= this.bounds().center().x) {
	            return this;
	        }
	        return this.next();
	    }
	});

	var inlineNode = function(inline, parent, ordinal, length, formatting) {
	    if (!inline.draw || !inline.measure) {
	        throw new Error();
	    }
	    return Object.create(inlineNodePrototype, {
	        inline: { value: inline },
	        _parent: { value: parent },
	        ordinal: { value: ordinal },
	        length: { value: length },
	        formatting: { value: formatting },
	        measured: {
	            value: inline.measure(formatting)
	        }
	    });
	};

	var codes = {};

	codes.number = function(obj, number) {
	    var formattedNumber = (number + 1) + '.';
	    return {
	        measure: function(formatting) {
	            return text.measure(formattedNumber, formatting);
	        },
	        draw: function(ctx, x, y, width, ascent, descent, formatting) {
	            text.draw(ctx, formattedNumber, formatting, x, y, width, ascent, descent);
	        }
	    };
	};

	var listTerminator = function(obj) {
	    return util.derive(obj, {
	        eof: true,
	        measure: function(formatting) {
	            return { width: 18, ascent: 0, descent: 0 }; // text.measure(text.enter, formatting);
	        },
	        draw: function(ctx, x, y) {
	            // ctx.fillText(text.enter, x, y);
	        }
	    });
	};

	codes.listNext = codes.listEnd = listTerminator;

	codes.listStart = function(obj, data, allCodes) {
	    return util.derive(obj, {
	        block: function(left, top, width, ordinal, parent, formatting) {
	            var list = node.generic('list', parent, left, top),
	                itemNode,
	                itemFrame,
	                itemMarker;

	            var indent = 50, spacing = 10;

	            var startItem = function(code, formatting) {
	                itemNode = node.generic('item', list);
	                var marker = allCodes(code.marker || { $: 'number' }, list.children().length);
	                itemMarker = inlineNode(marker, itemNode, ordinal, 1, formatting);
	                itemMarker.block = true;
	                itemFrame = frame(
	                    left + indent, top, width - indent, ordinal + 1, itemNode,
	                    function(terminatorCode) {
	                        return terminatorCode.$ === 'listEnd';
	                    },
	                    itemMarker.measured.ascent
	                );
	            };

	            startItem(obj, formatting);

	            return function(inputWord) {
	                if (itemFrame) {
	                    itemFrame(function(finishedFrame) {
	                        ordinal = finishedFrame.ordinal + finishedFrame.length;
	                        var frameBounds = finishedFrame.bounds();

	                        // get first line and position marker
	                        var firstLine = finishedFrame.first();
	                        var markerLeft = left + indent - spacing - itemMarker.measured.width;
	                        var markerBounds = rect(left, top, indent, frameBounds.h);
	                        if ('baseline' in firstLine) {
	                            itemMarker.position(markerLeft, firstLine.baseline, markerBounds);
	                        } else {
	                            itemMarker.position(markerLeft, top + itemMarker.measured.ascent, markerBounds);
	                        }

	                        top = frameBounds.t + frameBounds.h;

	                        itemNode.children().push(itemMarker);
	                        itemNode.children().push(finishedFrame);
	                        itemNode.finalize();

	                        list.children().push(itemNode);
	                        itemNode = itemFrame = itemMarker = null;
	                    }, inputWord);
	                } else {
	                    ordinal++;
	                }

	                if (!itemFrame) {
	                    var i = inputWord.code();
	                    if (i) {
	                        if (i.$ == 'listEnd') {
	                            list.finalize();
	                            return list;
	                        }
	                        if (i.$ == 'listNext') {
	                            startItem(i, inputWord.codeFormatting());
	                        }
	                    }
	                }
	            };
	        }
	    });
	};

	module.exports = exports = function(obj, number, allCodes) {
	    var impl = codes[obj.$];
	    return impl && impl(obj, number, allCodes);
	};

	exports.editFilter = function(doc) {
	    var balance = 0;

	    if (!doc.words.some(function(word, i) {
	        var code = word.code();
	        if (code) {
	            switch (code.$) {
	                case 'listStart':
	                    balance++;
	                    break;
	                case 'listNext':
	                    if (balance === 0) {
	                        doc.spliceWordsWithRuns(i, 1, [util.derive(word.codeFormatting(), {
	                            text: {
	                                $: 'listStart',
	                                marker: code.marker
	                            }
	                        })]);
	                        return true;
	                    }
	                    break;
	                case 'listEnd':
	                    if (balance === 0) {
	                        doc.spliceWordsWithRuns(i, 1, []);
	                    }
	                    balance--;
	                    break;
	            }
	        }
	    })) {
	        if (balance > 0) {
	            var ending = [];
	            while (balance > 0) {
	                balance--;
	                ending.push({
	                    text: { $: 'listEnd' }
	                });
	            }
	            doc.spliceWordsWithRuns(doc.words.length - 1, 0, ending);
	        }
	    }
	};


/***/ },
/* 49 */
/***/ function(module, exports) {

	
	exports.isAttached = function(element) {
	    var ancestor = element;
	    while(ancestor.parentNode) {
	        ancestor = ancestor.parentNode;
	    }
	    return !!ancestor.body;
	};

	exports.clear = function(element) {
	    while (element.firstChild) {
	        element.removeChild(element.firstChild);
	    }
	};

	exports.setText = function(element, text) {
	    exports.clear(element);
	    element.appendChild(document.createTextNode(text));
	};

	exports.handleEvent = function(element, name, handler) {
	    element.addEventListener(name, function(ev) {
	        if (handler(ev) === false) {
	            ev.preventDefault();
	        }
	    });
	};

	exports.handleMouseEvent = function(element, name, handler) {
	    exports.handleEvent(element, name, function(ev) {
	        var rect = element.getBoundingClientRect();
	        return handler(ev, ev.clientX - rect.left, ev.clientY - rect.top);
	    });
	};

	exports.effectiveStyle = function(element, name) {
	    return document.defaultView.getComputedStyle(element).getPropertyValue(name);
	};

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var runs = __webpack_require__(33);
	var per = __webpack_require__(32);

	var tag = function(name, formattingProperty) {
	    return function(node, formatting) {
	        if (node.nodeName === name) {
	            formatting[formattingProperty] = true;
	        }
	    };
	};

	var value = function(type, styleProperty, formattingProperty, transformValue) {
	    return function(node, formatting) {
	        var val = node[type] && node[type][styleProperty];
	        if (val) {
	            if (transformValue) {
	                val = transformValue(val);
	            }
	            formatting[formattingProperty] = val;
	        }
	    };
	};

	var attrValue = function(styleProperty, formattingProperty, transformValue) {
	    return value('attributes', styleProperty, formattingProperty, transformValue);
	};

	var styleValue = function(styleProperty, formattingProperty, transformValue) {
	    return value('style', styleProperty, formattingProperty, transformValue);
	};

	var styleFlag = function(styleProperty, styleValue, formattingProperty) {
	    return function(node, formatting) {
	        if (node.style && node.style[styleProperty] === styleValue) {
	            formatting[formattingProperty] = true;
	        }
	    };
	};

	var obsoleteFontSizes = [ 6, 7, 9, 10, 12, 16, 20, 30 ];

	var aligns = { left: true, center: true, right: true, justify: true };

	var checkAlign = function(value) {
	    return aligns[value] ? value : 'left';
	};

	var fontName = function(name) {
	    var s = name.split(/\s*,\s*/g);
	    if (s.length == 0) {
	        return name;
	    }
	    name = s[0]
	    var raw = name.match(/^"(.*)"$/);
	    if (raw) {
	        return raw[1].trim();
	    }
	    raw = name.match(/^'(.*)'$/);
	    if (raw) {
	        return raw[1].trim();
	    }
	    return name;
	};

	var headings = {
	    H1: 30,
	    H2: 20,
	    H3: 16,
	    H4: 14,
	    H5: 12
	};

	var handlers = [
	    tag('B', 'bold'),
	    tag('STRONG', 'bold'),
	    tag('I', 'italic'),
	    tag('EM', 'italic'),
	    tag('U', 'underline'),
	    tag('S', 'strikeout'),
	    tag('STRIKE', 'strikeout'),
	    tag('DEL', 'strikeout'),
	    styleFlag('fontWeight', 'bold', 'bold'),
	    styleFlag('fontStyle', 'italic', 'italic'),
	    styleFlag('textDecoration', 'underline', 'underline'),
	    styleFlag('textDecoration', 'line-through', 'strikeout'),
	    styleValue('color', 'color'),
	    styleValue('fontFamily', 'font', fontName),
	    styleValue('fontSize', 'size', function(size) {
	        var m = size.match(/^([\d\.]+)pt$/);
	        return m ? parseFloat(m[1]) : 10
	    }),
	    styleValue('textAlign', 'align', checkAlign),
	    function(node, formatting) {
	        if (node.nodeName === 'SUB') {
	            formatting.script = 'sub';
	        }
	    },
	    function(node, formatting) {
	        if (node.nodeName === 'SUPER') {
	            formatting.script = 'super';
	        }
	    },
	    function(node, formatting) {
	        if (node.nodeName === 'CODE') {
	            formatting.font = 'monospace';
	        }
	    },
	    function(node, formatting) {
	        var size = headings[node.nodeName];
	        if (size) {
	            formatting.size = size;
	        }
	    },
	    attrValue('color', 'color'),
	    attrValue('face', 'font', fontName),
	    attrValue('align', 'align', checkAlign),
	    attrValue('size', 'size', function(size) {
	        return obsoleteFontSizes[size] || 10;
	    })
	];

	var newLines = [ 'BR', 'P', 'H1', 'H2', 'H3', 'H4', 'H5' ];
	var isNewLine = {};
	newLines.forEach(function(name) {
	    isNewLine[name] = true;
	});

	exports.parse = function(html, classes) {
	    var root = html;
	    if (typeof root === 'string') {
	        root = document.createElement('div');
	        root.innerHTML = html;
	    }

	    var result = [], inSpace = true;
	    var cons = per(runs.consolidate()).into(result);
	    var emit = function(text, formatting) {
	        cons.submit(Object.create(formatting, {
	            text: { value: text }
	        }));
	    };
	    var dealWithSpaces = function(text, formatting) {
	        text = text.replace(/\n+\s*/g, ' ');
	        var fullLength = text.length;
	        text = text.replace(/^\s+/, '');
	        if (inSpace) {
	            inSpace = false;
	        } else if (fullLength !== text.length) {
	            text = ' ' + text;
	        }
	        fullLength = text.length;
	        text = text.replace(/\s+$/, '');
	        if (fullLength !== text.length) {
	            inSpace = true;
	            text += ' ';
	        }
	        emit(text, formatting);
	    };

	    function recurse(node, formatting) {
	        if (node.nodeType == 3) {
	            dealWithSpaces(node.nodeValue, formatting);
	        } else {
	            formatting = Object.create(formatting);

	            var classNames = node.attributes['class'];
	            if (classNames) {
	                classNames.value.split(' ').forEach(function(cls) {
	                    cls = classes[cls];
	                    if (cls) {
	                        Object.keys(cls).forEach(function(key) {
	                            formatting[key] = cls[key];
	                        });
	                    }
	                })
	            }

	            handlers.forEach(function(handler) {
	                handler(node, formatting);
	            });
	            if (node.childNodes) {
	                for (var n = 0; n < node.childNodes.length; n++) {
	                    recurse(node.childNodes[n], formatting);
	                }
	            }
	            if (isNewLine[node.nodeName]) {
	                emit('\n', formatting);
	                inSpace = true;
	            }
	        }
	    }
	    recurse(root, {});
	    return result;
	};



/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(52).Stream,
	    util = __webpack_require__(73),
	    TokenType = __webpack_require__(75),
	    BreakType = __webpack_require__(76),
	    tokenizer = __webpack_require__(77),
	    LineBreak = __webpack_require__(79);

	function TokenizerStream() {
	    Stream.call(this);

	    var that = this;

	    this.readable = true;
	    this.writable = true;

	    this.tokenizer = tokenizer.createTokenizer();
	    this.linebreak = new LineBreak();

	    this.tokenizer.on('token', function(token, type) {
	        that.linebreak.process(token, type);
	    });

	    this.linebreak.on('action', function(token, type, action) {
	        that.emit('data', token);
	        that.emit('token', token, type, action);
	    });

	    this.tokenizer.on('end', function() {
	        that.linebreak.end();
	    });
	}

	util.inherits(TokenizerStream, Stream);

	TokenizerStream.prototype.write = function(chunk) {
	    this.tokenizer.write(chunk);
	};

	TokenizerStream.prototype.end = function(data) {
	    if (data) {
	        this.write(data);
	    }
	    this.tokenizer.end();
	    this.emit('end');
	};

	module.exports = {
	    Break: BreakType,
	    Token: TokenType,

	    Tokenizer: tokenizer.Tokenizer,
	    tokenize: tokenizer.tokenize,
	    tokenizeSync: tokenizer.tokenizeSync,

	    createTokenizerStream: function() {
	        return new TokenizerStream();
	    }
	};


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(53).EventEmitter;
	var inherits = __webpack_require__(54);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(55);
	Stream.Writable = __webpack_require__(69);
	Stream.Duplex = __webpack_require__(70);
	Stream.Transform = __webpack_require__(71);
	Stream.PassThrough = __webpack_require__(72);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 53 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 54 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(56);
	exports.Stream = __webpack_require__(52);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(65);
	exports.Duplex = __webpack_require__(64);
	exports.Transform = __webpack_require__(67);
	exports.PassThrough = __webpack_require__(68);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(52);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(57);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(58).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(53).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(52);

	/*<replacement>*/
	var util = __webpack_require__(62);
	util.inherits = __webpack_require__(54);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(63);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(64);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(66).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(64);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(66).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 57 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(59)
	var ieee754 = __webpack_require__(60)
	var isArray = __webpack_require__(61)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(58).Buffer, (function() { return this; }())))

/***/ },
/* 59 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 60 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 61 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(58).Buffer))

/***/ },
/* 63 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(62);
	util.inherits = __webpack_require__(54);
	/*</replacement>*/

	var Readable = __webpack_require__(56);
	var Writable = __webpack_require__(65);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(58).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(62);
	util.inherits = __webpack_require__(54);
	/*</replacement>*/

	var Stream = __webpack_require__(52);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(64);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(64);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(58).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(64);

	/*<replacement>*/
	var util = __webpack_require__(62);
	util.inherits = __webpack_require__(54);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(67);

	/*<replacement>*/
	var util = __webpack_require__(62);
	util.inherits = __webpack_require__(54);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(65)


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(64)


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(67)


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(68)


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(74);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(54);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)))

/***/ },
/* 74 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 75 */
/***/ function(module, exports) {

	module.exports = {
	    OP: 0,
	    CL: 1,
	    CP: 2,
	    QU: 3,
	    GL: 4,
	    NS: 5,
	    EX: 6,
	    SY: 7,
	    IS: 8,
	    PR: 9,
	    PO: 10,
	    NU: 11,
	    AL: 12,
	    HL: 13,
	    ID: 14,
	    IN: 15,
	    HY: 16,
	    BA: 17,
	    BB: 18,
	    B2: 19,
	    ZW: 20,
	    CM: 21,
	    WJ: 22,
	    H2: 23,
	    H3: 24,
	    JL: 25,
	    JV: 26,
	    JT: 27,

	    // Non-standard
	    SP: 28,
	    LF: 29,
	    NL: 30,
	    BK: 31,
	    CR: 32,
	    XX: 33
	};



/***/ },
/* 76 */
/***/ function(module, exports) {

	module.exports = {
	   // A line break opportunity exists between two adjacent
	   // characters of the given line breaking classes.
	   // Example: break before an em-dash
	   DIRECT: 0,

	   // A line break opportunity exists between two characters
	   // of the given line breaking classes only if they are
	   // separated by one or more spaces.
	   // Example: two words separated by a space
	   INDIRECT: 1,

	   COMBINING_INDIRECT: 2,

	   COMBINING_PROHIBITED: 3,

	   // No line break opportunity exists between two characters
	   // of the given line breaking classes, even if they are
	   // separated by one or more space characters.
	   // Example: non-breaking space
	   PROHIBITED: 4,

	   // A line must break following a character that has the
	   // mandatory break property.
	   EXPLICIT: 5
	};


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(73),
	    Stream = __webpack_require__(52).Stream,
	    types = __webpack_require__(75),
	    tokens = __webpack_require__(78),
	    tokenClasses = Object.keys(tokens),
	    tokenRegExp = {};

	tokenClasses.forEach(function(tokenClass) {
	     tokenRegExp[tokenClass] = new RegExp('^(' + tokens[tokenClass] + ')+');
	});

	function tokenizeSync(str) {
	    var result = [];

	    while (str) {
	        var found = false;

	        for (var i = 0; i < tokenClasses.length; i += 1) {
	            var type = tokenClasses[i],
	                m = tokenRegExp[type].exec(str);

	            if (m) {
	                var token = m[0];
	                result.push({
	                    token: token,
	                    type: types[type]
	                });
	                str = str.substring(token.length);
	                found = true;
	            }
	        }

	        if (!found) {
	            result.push({
	                token: str,
	                type: types.XX
	            });
	            break;
	        }
	    }
	    return result;
	};

	function tokenize(str, callback) {
	    var result = [];

	    while (str) {
	        var found = false;

	        for (var i = 0; i < tokenClasses.length; i += 1) {
	            var type = tokenClasses[i],
	                m = tokenRegExp[type].exec(str);

	            if (m) {
	                var token = m[0];
	                callback(token, types[type]);
	                str = str.substring(token.length);
	                found = true;
	            }
	        }

	        if (!found) {
	            callback(str, types['XX']);
	            break;
	        }
	    }
	}

	function Tokenizer() {
	    Stream.call(this);
	    this.readable = true;
	    this.writable = true;
	}

	util.inherits(Tokenizer, Stream);

	Tokenizer.prototype.write = function(chunk) {
	    var that = this;

	    tokenize(chunk.toString('utf8'), function(token, type) {
	        that.emit('data', token);
	        that.emit('token', token, type);
	    });
	};

	Tokenizer.prototype.end = function(data) {
	    if (data) {
	        this.write(data);
	    }
	    this.emit('end');
	};

	module.exports = {
	    Tokenizer: Tokenizer,
	    createTokenizer: function() {
	        return new Tokenizer();
	    },
	    tokenize: tokenize,
	    tokenizeSync: tokenizeSync
	};


/***/ },
/* 78 */
/***/ function(module, exports) {

	// This file is auto-generated. Do not modify.
	module.exports = {
	  "CM": "[\\u0000-\\u0008\\u000E-\\u001F\\u007F-\\u0084\\u0086-\\u009F\\u0300-\\u034E\\u0350-\\u035B\\u0363-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C01-\\u0C03\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C82\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D02\\u0D03\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u180B-\\u180D\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A7F\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u200C-\\u200F\\u202A-\\u202E\\u206A-\\u206F\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFFF9-\\uFFFB]|[\\u5536][\\uDDFD]|[\\u5536][\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]|[\\u5536][\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC80-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD80-\\uDD82\\uDDB3-\\uDDC0]|[\\u5536][\\uDEAB-\\uDEB7]|[\\u5536][\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|[\\u5536][\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|[\\u5536][\\uDC01\\uDC20-\\uDC7F\\uDD00-\\uDDEF]",
	  "BA": "[\\u0009\\u007C\\u00AD\\u058A\\u05BE\\u0964\\u0965\\u0E5A\\u0E5B\\u0F0B\\u0F34\\u0F7F\\u0F85\\u0FBE\\u0FBF\\u0FD2\\u104A\\u104B\\u1361\\u1400\\u1680\\u16EB-\\u16ED\\u1735\\u1736\\u17D4\\u17D5\\u17D8\\u17DA\\u1804\\u1805\\u1B5A\\u1B5B\\u1B5D-\\u1B60\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u2000-\\u2006\\u2008-\\u200A\\u2010\\u2012\\u2013\\u2027\\u2056\\u2058-\\u205B\\u205D-\\u205F\\u2CFA-\\u2CFC\\u2CFF\\u2D70\\u2E0E-\\u2E15\\u2E17\\u2E19\\u2E2A-\\u2E2D\\u2E30\\u2E31\\u2E33\\u2E34\\uA4FE\\uA4FF\\uA60D\\uA60F\\uA6F3-\\uA6F7\\uA8CE\\uA8CF\\uA92E\\uA92F\\uA9C7-\\uA9C9\\uAA5D-\\uAA5F\\uAAF0\\uAAF1\\uABEB]|[\\u5536][\\uDD00-\\uDD02\\uDF9F\\uDFD0]|[\\u5536][\\uDC57\\uDD1F\\uDE50-\\uDE57\\uDF39-\\uDF3F]|[\\u5536][\\uDC47\\uDC48\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDDC5\\uDDC6\\uDDC8]|[\\u5536][\\uDC70-\\uDC73]",
	  "LF": "[\\u000A]",
	  "BK": "[\\u000B\\u000C\\u2028\\u2029]",
	  "CR": "[\\u000D]",
	  "SP": "[\\u0020]",
	  "EX": "[\\u0021\\u003F\\u05C6\\u061B\\u061E\\u061F\\u06D4\\u07F9\\u0F0D-\\u0F11\\u0F14\\u1802\\u1803\\u1808\\u1809\\u1944\\u1945\\u2762\\u2763\\u2CF9\\u2CFE\\u2E2E\\uA60E\\uA876\\uA877\\uFE15\\uFE16\\uFE56\\uFE57\\uFF01\\uFF1F]",
	  "QU": "[\\u0022\\u0027\\u00AB\\u00BB\\u2018\\u2019\\u201B-\\u201D\\u201F\\u2039\\u203A\\u275B-\\u275E\\u2E00-\\u2E0D\\u2E1C\\u2E1D\\u2E20\\u2E21]",
	  "AL": "[\\u0023\\u0026\\u002A\\u003C-\\u003E\\u0040-Z\\u005E-z\\u007E\\u00A6\\u00A9\\u00AC\\u00AE\\u00AF\\u00B5\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C6\\u02CE\\u02CF\\u02D1-\\u02D7\\u02DC\\u02DE\\u02E0-\\u02FF\\u0370-\\u0377\\u037A-\\u037D\\u0384-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u0482\\u048A-\\u0527\\u0531-\\u0556\\u0559-\\u055F\\u0561-\\u0587\\u05C0\\u05C3\\u05F3\\u05F4\\u0600-\\u0604\\u0606-\\u0608\\u060E\\u060F\\u0620-\\u064A\\u066D-\\u066F\\u0671-\\u06D3\\u06D5\\u06DD\\u06DE\\u06E5\\u06E6\\u06E9\\u06EE\\u06EF\\u06FA-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F7\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0970-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09F4-\\u09F8\\u09FA\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF0\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B70-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BF0-\\u0BF8\\u0BFA\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C78-\\u0C7F\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D70-\\u0D75\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DF4\\u0E4F\\u0F00\\u0F05\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F2A-\\u0F33\\u0F36\\u0F38\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u0FC0-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD4-\\u0FD8\\u104C-\\u104F\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FF\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1360\\u1362-\\u137C\\u1380-\\u1399\\u13A0-\\u13F4\\u1401-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u17D9\\u17F0-\\u17F9\\u1800\\u1801\\u1807\\u180A\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1940\\u19E0-\\u1A16\\u1A1E\\u1A1F\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B5C\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1BFC-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CC0-\\u1CC7\\u1CD3\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u1FFE\\u2017\\u2022\\u2023\\u2038\\u203E-\\u2043\\u204A-\\u2055\\u2057\\u205C\\u2061-\\u2064\\u2070\\u2071\\u2075-\\u207C\\u2080\\u2085-\\u208C\\u2090-\\u209C\\u2100-\\u2102\\u2104\\u2106-\\u2108\\u210A-\\u2112\\u2114\\u2115\\u2117-\\u2120\\u2123-\\u212A\\u212C-\\u2153\\u2156-\\u215A\\u215C\\u215D\\u215F\\u216C-\\u216F\\u217A-\\u2188\\u219A-\\u21D1\\u21D3\\u21D5-\\u21FF\\u2201\\u2204-\\u2206\\u2209\\u220A\\u220C-\\u220E\\u2210\\u2214\\u2216-\\u2219\\u221B\\u221C\\u2221\\u2222\\u2224\\u2226\\u222D\\u222F-\\u2233\\u2238-\\u223B\\u223E-\\u2247\\u2249-\\u224B\\u224D-\\u2251\\u2253-\\u225F\\u2262\\u2263\\u2268\\u2269\\u226C\\u226D\\u2270-\\u2281\\u2284\\u2285\\u2288-\\u2294\\u2296-\\u2298\\u229A-\\u22A4\\u22A6-\\u22BE\\u22C0-\\u2311\\u2313-\\u2328\\u232B-\\u23F3\\u2400-\\u2426\\u2440-\\u244A\\u24FF\\u254C-\\u254F\\u2575-\\u257F\\u2590\\u2591\\u2596-\\u259F\\u25A2\\u25AA-\\u25B1\\u25B4\\u25B5\\u25B8-\\u25BB\\u25BE\\u25BF\\u25C2-\\u25C5\\u25C9\\u25CA\\u25CC\\u25CD\\u25D2-\\u25E1\\u25E6-\\u25EE\\u25F0-\\u2604\\u2607\\u2608\\u260A-\\u260D\\u2610-\\u2613\\u2618-\\u261B\\u261D\\u261F-\\u263F\\u2641\\u2643-\\u265F\\u2662\\u2666\\u266B\\u266E\\u2670-\\u269D\\u26A0-\\u26BD\\u26C0-\\u26C3\\u26CE\\u26E2\\u26E4-\\u26E7\\u2701-\\u2756\\u2758-\\u275A\\u275F-\\u2761\\u2764-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B4C\\u2B50-\\u2B54\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E16\\u2E1A\\u2E1B\\u2E1E\\u2E1F\\u2E2F\\u2E32\\u2E35-\\u2E39\\u4DC0-\\u4DFF\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA673\\uA67E-\\uA697\\uA6A0-\\uA6EF\\uA6F2\\uA700-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA828-\\uA82B\\uA830-\\uA837\\uA839\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA95F\\uA984-\\uA9B2\\uA9C1-\\uA9C6\\uA9CA-\\uA9CD\\uA9CF\\uA9DE\\uA9DF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA5C\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB29\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\uFFE8-\\uFFEE]|[\\u5536][\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD37-\\uDD8A\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF20-\\uDF23\\uDF30-\\uDF4A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|[\\u5536][\\uDC00-\\uDC9D]|[\\u5536][\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC5F\\uDD00-\\uDD1B\\uDD20-\\uDD39\\uDD3F\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE40-\\uDE47\\uDE58\\uDE60-\\uDE7F\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF7F]|[\\u5536][\\uDC00-\\uDC48\\uDE60-\\uDE7E]|[\\u5536][\\uDC03-\\uDC37\\uDC49-\\uDC4D\\uDC52-\\uDC65\\uDC83-\\uDCAF\\uDCBB-\\uDCBD\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDC7]|[\\u5536][\\uDE80-\\uDEAA]|[\\u5536][\\uDC00-\\uDF6E]|[\\u5536][\\uDC00-\\uDC62]|[\\u5536][\\uDC00-\\uDE57\\uDE5E-\\uDE81\\uDE83-\\uDE85\\uDE8A-\\uDF78\\uDF7C-\\uDFFF]|[\\u5536][\\uDC00-\\uDC2E]|[\\u5536][\\uDC00-\\uDE38]|[\\u5536][\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|[\\u5536][\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDDD\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56\\uDF60-\\uDF71]|[\\u5536][\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB]|[\\u5536][\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]|[\\u5536][\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBE\\uDCC1-\\uDCCF\\uDCD1-\\uDCDF\\uDD2E\\uDD6A\\uDD6B\\uDDE6-\\uDDFF\\uDF00-\\uDF20\\uDF30-\\uDF35\\uDF37-\\uDF7C\\uDF80-\\uDF93\\uDFA0-\\uDFC4\\uDFC6-\\uDFCA\\uDFE0-\\uDFF0]|[\\u5536][\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCF7\\uDCF9-\\uDCFC\\uDD00-\\uDD3D\\uDD40-\\uDD43\\uDD50-\\uDD67\\uDDFB-\\uDE40\\uDE45-\\uDE4F\\uDE80-\\uDEC5\\uDF00-\\uDF73]",
	  "PR": "[\\u0024\\u002B\\u005C\\u00A3-\\u00A5\\u00B1\\u058F\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20A6\\u20A8-\\u20B5\\u20B7-\\u20B9\\u2116\\u2212\\u2213\\uFE69\\uFF04\\uFFE1\\uFFE5\\uFFE6]",
	  "PO": "[\\u0025\\u00A2\\u00B0\\u0609-\\u060B\\u066A\\u09F2\\u09F3\\u09F9\\u0D79\\u2030-\\u2037\\u20A7\\u20B6\\u2103\\u2109\\uA838\\uFDFC\\uFE6A\\uFF05\\uFFE0]",
	  "OP": "[\\u0028\\u005B\\u007B\\u00A1\\u00BF\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E18\\u2E22\\u2E24\\u2E26\\u2E28\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3E\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62]|[\\u5536][\\uDE58-\\uDE5A\\uDE86\\uDE88\\uDF79]",
	  "CP": "[\\u0029\\u005D]",
	  "IS": "[\\u002C\\u002E\\u003A\\u003B\\u037E\\u0589\\u060C\\u060D\\u07F8\\u2044\\uFE10\\uFE13\\uFE14]",
	  "HY": "[\\u002D]",
	  "SY": "[\\u002F]",
	  "NU": "[0-9\\u0660-\\u0669\\u066B\\u066C\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9]|[\\u5536][\\uDCA0-\\uDCA9]|[\\u5536][\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9]|[\\u5536][\\uDEC0-\\uDEC9]|[\\u5536][\\uDFCE-\\uDFFF]",
	  "CL": "[\\u007D\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3001\\u3002\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3F\\uFE11\\uFE12\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE50\\uFE52\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF0C\\uFF0E\\uFF3D\\uFF5D\\uFF60\\uFF61\\uFF63\\uFF64]|[\\u5536][\\uDE5B-\\uDE5D\\uDE82\\uDE87\\uDE89\\uDF7A\\uDF7B]",
	  "NL": "[\\u0085]",
	  "GL": "[\\u00A0\\u034F\\u035C-\\u0362\\u0F08\\u0F0C\\u0F12\\u0FD9\\u0FDA\\u180E\\u2007\\u2011\\u202F]",
	  "AI": "[\\u00A7\\u00A8\\u00AA\\u00B2\\u00B3\\u00B6-\\u00BA\\u00BC-\\u00BE\\u00D7\\u00F7\\u02C7\\u02C9-\\u02CB\\u02CD\\u02D0\\u02D8-\\u02DB\\u02DD\\u2015\\u2016\\u2020\\u2021\\u203B\\u2074\\u207F\\u2081-\\u2084\\u2105\\u2113\\u2121\\u2122\\u212B\\u2154\\u2155\\u215B\\u215E\\u2160-\\u216B\\u2170-\\u2179\\u2189\\u2190-\\u2199\\u21D2\\u21D4\\u2200\\u2202\\u2203\\u2207\\u2208\\u220B\\u220F\\u2211\\u2215\\u221A\\u221D-\\u2220\\u2223\\u2225\\u2227-\\u222C\\u222E\\u2234-\\u2237\\u223C\\u223D\\u2248\\u224C\\u2252\\u2260\\u2261\\u2264-\\u2267\\u226A\\u226B\\u226E\\u226F\\u2282\\u2283\\u2286\\u2287\\u2295\\u2299\\u22A5\\u22BF\\u2312\\u2460-\\u24FE\\u2500-\\u254B\\u2550-\\u2574\\u2580-\\u258F\\u2592-\\u2595\\u25A0\\u25A1\\u25A3-\\u25A9\\u25B2\\u25B3\\u25B6\\u25B7\\u25BC\\u25BD\\u25C0\\u25C1\\u25C6-\\u25C8\\u25CB\\u25CE-\\u25D1\\u25E2-\\u25E5\\u25EF\\u2605\\u2606\\u2609\\u260E\\u260F\\u2614-\\u2617\\u261C\\u261E\\u2640\\u2642\\u2660\\u2661\\u2663-\\u2665\\u2667-\\u266A\\u266C\\u266D\\u266F\\u269E\\u269F\\u26BE\\u26BF\\u26C4-\\u26CD\\u26CF-\\u26E1\\u26E3\\u26E8-\\u26FF\\u2757\\u2776-\\u2793\\u2B55-\\u2B59\\u3248-\\u324F\\uFFFD]|[\\u5536][\\uDD00-\\uDD0A\\uDD10-\\uDD2D\\uDD30-\\uDD69\\uDD70-\\uDD9A]",
	  "BB": "[\\u00B4\\u02C8\\u02CC\\u02DF\\u0F01-\\u0F04\\u0F06\\u0F07\\u0F09\\u0F0A\\u0FD0\\u0FD1\\u0FD3\\u1806\\u1FFD\\uA874\\uA875]",
	  "HL": "[\\u05D0-\\u05EA\\u05F0-\\u05F2\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F]",
	  "SA": "[\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0EDC-\\u0EDF\\u1000-\\u103F\\u1050-\\u108F\\u109A-\\u109F\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19DA\\u19DE\\u19DF\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1AA0-\\u1AAD\\uAA60-\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADF]",
	  "JL": "[\\u1100-\\u115F\\uA960-\\uA97C]",
	  "JV": "[\\u1160-\\u11A7\\uD7B0-\\uD7C6]",
	  "JT": "[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]",
	  "NS": "[\\u17D6\\u203C\\u203D\\u2047-\\u2049\\u3005\\u301C\\u303B\\u303C\\u309B-\\u309E\\u30A0\\u30FB\\u30FD\\u30FE\\uA015\\uFE54\\uFE55\\uFF1A\\uFF1B\\uFF65\\uFF9E\\uFF9F]",
	  "ZW": "[\\u200B]",
	  "B2": "[\\u2014\\u2E3A\\u2E3B]",
	  "IN": "[\\u2024-\\u2026\\uFE19]",
	  "WJ": "[\\u2060\\uFEFF]",
	  "ID": "[\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3000\\u3003\\u3004\\u3006\\u3007\\u3012\\u3013\\u3020-\\u3029\\u3030-\\u303A\\u303D-\\u303F\\u3042\\u3044\\u3046\\u3048\\u304A-\\u3062\\u3064-\\u3082\\u3084\\u3086\\u3088-\\u308D\\u308F-\\u3094\\u309F\\u30A2\\u30A4\\u30A6\\u30A8\\u30AA-\\u30C2\\u30C4-\\u30E2\\u30E4\\u30E6\\u30E8-\\u30ED\\u30EF-\\u30F4\\u30F7-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3190-\\u31BA\\u31C0-\\u31E3\\u3200-\\u321E\\u3220-\\u3247\\u3250-\\u32FE\\u3300-\\u4DBF\\u4E00-\\uA014\\uA016-\\uA48C\\uA490-\\uA4C6\\uF900-\\uFAFF\\uFE30-\\uFE34\\uFE45\\uFE46\\uFE49-\\uFE4F\\uFE51\\uFE58\\uFE5F-\\uFE66\\uFE68\\uFE6B\\uFF02\\uFF03\\uFF06\\uFF07\\uFF0A\\uFF0B\\uFF0D\\uFF0F-\\uFF19\\uFF1C-\\uFF1E\\uFF20-\\uFF3A\\uFF3C\\uFF3E-\\uFF5A\\uFF5C\\uFF5E\\uFFE2-\\uFFE4]|[\\u5536][\\uDC00\\uDC01]|[\\u5536][\\uDE00-\\uDE02\\uDE10-\\uDE3A\\uDE40-\\uDE48\\uDE50\\uDE51]|[\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536\\u5536][\\uDC00-\\uDFFF]|[\\u5536\\u5536][\\uDC00-\\uDFFD]",
	  "CJ": "[\\u3041\\u3043\\u3045\\u3047\\u3049\\u3063\\u3083\\u3085\\u3087\\u308E\\u3095\\u3096\\u30A1\\u30A3\\u30A5\\u30A7\\u30A9\\u30C3\\u30E3\\u30E5\\u30E7\\u30EE\\u30F5\\u30F6\\u30FC\\u31F0-\\u31FF\\uFF67-\\uFF70]",
	  "H2": "[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]",
	  "H3": "[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]",
	  "SG": "[\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF]",
	  "CB": "[\\uFFFC]"
	};


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var EventEmitter = __webpack_require__(53).EventEmitter,
	    TokenType = __webpack_require__(75),
	    BreakType = __webpack_require__(76),
	    util = __webpack_require__(73);

	function LineBreak() {
	    EventEmitter.call(this);
	    this.tokenClass = null;
	    this.previousToken = null;
	    this.previousTokenClass = null;
	}

	util.inherits(LineBreak, EventEmitter);

	var DI = BreakType.DIRECT,
	    IN = BreakType.INDIRECT,
	    CI = BreakType.COMBINING_INDIRECT,
	    CP = BreakType.COMBINING_PROHIBITED,
	    PR = BreakType.PROHIBITED,
	    EX = BreakType.EXPLICIT,
	    pairTable = [
	        [PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, PR, CP, PR, PR, PR, PR, PR, PR],
	        [DI, PR, PR, IN, IN, PR, PR, PR, PR, IN, IN, DI, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, PR, PR, PR, PR, IN, IN, IN, IN, IN, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [PR, PR, PR, IN, IN, IN, PR, PR, PR, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, PR, CI, PR, IN, IN, IN, IN, IN],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, PR, CI, PR, IN, IN, IN, IN, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, DI, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, DI, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, IN, DI, IN, IN, DI, DI, PR, CI, PR, IN, IN, IN, IN, IN],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, IN, IN, IN, IN, IN, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, DI, IN, PR, PR, PR, DI, DI, IN, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, PR, PR, IN, DI, IN, PR, PR, PR, DI, DI, DI, DI, DI, DI, DI, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, PR, CI, PR, IN, IN, IN, IN, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, DI, DI, DI, DI, DI, IN, IN, DI, PR, PR, CI, PR, DI, DI, DI, DI, DI],
	        [DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, DI, PR, DI, DI, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, DI, DI, IN, IN, IN, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, DI],
	        [IN, PR, PR, IN, IN, IN, PR, PR, PR, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, IN, PR, CI, PR, IN, IN, IN, IN, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, IN, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, IN, IN, IN, IN, DI],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, IN, IN],
	        [DI, PR, PR, IN, IN, IN, PR, PR, PR, DI, IN, DI, DI, DI, DI, IN, IN, IN, DI, DI, PR, CI, PR, DI, DI, DI, DI, IN]
	    ];

	LineBreak.prototype.end = function() {
	    if (this.previousToken) {
	        this.emit('action', this.previousToken, this.previousTokenClass, BreakType.EXPLICIT);
	    }
	    this.emit('end');
	};

	LineBreak.prototype.process = function(token, tokenClass) {
	    var breakAction = null;

	    if (this.tokenClass !== null) {
	        if (this.tokenClass !== TokenType.BK && (this.tokenClass !== TokenType.CR || tokenClass === TokenType.LF)) {
	            if (tokenClass === TokenType.SP) {
	                breakAction = BreakType.PROHIBITED;
	            } else if (tokenClass === TokenType.BK ||
	                       tokenClass === TokenType.NL ||
	                       tokenClass === TokenType.LF) {
	                breakAction = BreakType.PROHIBITED;
	                this.tokenClass = TokenType.BK;
	            } else if (tokenClass === TokenType.CR) {
	                breakAction = BreakType.PROHIBITED;
	                this.tokenClass = TokenType.BK;
	            } else {
	                breakAction = pairTable[this.tokenClass][tokenClass];

	                if (breakAction === BreakType.INDIRECT) {
	                    if (this.previousTokenClass === TokenType.SP) {
	                        breakAction = BreakType.INDIRECT;
	                    } else {
	                        breakAction = BreakType.PROHIBITED;
	                    }
	                    this.tokenClass = tokenClass;
	                } else if (breakAction === BreakType.COMBINING_PROHIBITED) {
	                    breakAction = BreakType.COMBINING_PROHIBITED;
	                    if (this.previousTokenClass === TokenType.SP) {
	                        this.tokenClass = tokenClass;
	                    }
	                } else if (breakAction === BreakType.COMBINING_INDIRECT) {
	                    breakAction = BreakType.PROHIBITED;
	                    if (this.previousTokenClass === TokenType.SP) {
	                        breakAction = BreakType.COMBINING_INDIRECT;
	                        this.tokenClass = tokenClass;
	                    }
	                } else {
	                    this.tokenClass = tokenClass;
	                }
	            }
	            this.emit('action', this.previousToken, this.previousTokenClass, breakAction);
	        } else {
	            this.emit('action', this.previousToken, this.previousTokenClass, BreakType.EXPLICIT);
	            if (tokenClass === TokenType.SP) {
	                this.tokenClass = TokenType.WJ;
	            } else if (tokenClass === TokenType.LF || tokenClass === TokenType.NL) {
	                this.tokenClass = TokenType.BK;
	            } else {
	                this.tokenClass = tokenClass;
	            }
	        }
	    } else {
	        if (tokenClass === TokenType.SP) {
	            this.tokenClass = TokenType.WJ;
	        } else if (tokenClass === TokenType.LF || tokenClass === TokenType.NL) {
	            this.tokenClass = TokenType.BK;
	        } else {
	            this.tokenClass = tokenClass;
	        }
	    }
	    this.previousToken = token;
	    this.previousTokenClass = tokenClass;
	};

	module.exports = LineBreak;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var matrix_stack_1 = __webpack_require__(26);
	var DirtyRectContext = (function (_super) {
	    __extends(DirtyRectContext, _super);
	    function DirtyRectContext() {
	        _super.call(this);
	        this._rect = rect_1.Rect.create(0, 0, 0, 0);
	        this.reset();
	    }
	    DirtyRectContext.prototype.addRect = function (x, y, w, h) {
	        var p = point_1.Point.point;
	        this.addPoint(this.transformPoint(x, y, p));
	        this.addPoint(this.transformPoint(x + w, y, p));
	        this.addPoint(this.transformPoint(x + w, y + h, p));
	        this.addPoint(this.transformPoint(x, y + h, p));
	    };
	    DirtyRectContext.prototype.addPoint = function (p) {
	        var x = p.x;
	        var y = p.y;
	        if (!this._pointsNr) {
	            this._minX = this._maxX = x;
	            this._minY = this._maxY = y;
	        }
	        else {
	            if (this._minX > x) {
	                this._minX = x;
	            }
	            if (this._maxX < x) {
	                this._maxX = x;
	            }
	            if (this._minY > y) {
	                this._minY = y;
	            }
	            if (this._maxY < y) {
	                this._maxY = y;
	            }
	        }
	        this._pointsNr++;
	    };
	    DirtyRectContext.prototype.getRect = function () {
	        var r = this._rect;
	        r.x = this._minX;
	        r.y = this._minY;
	        r.w = this._maxX - this._minX;
	        r.h = this._maxY - this._minY;
	        return r;
	    };
	    DirtyRectContext.prototype.reset = function () {
	        this._pointsNr = 0;
	        this.identity();
	        this._minX = -1;
	        this._minY = -1;
	        this._maxX = -1;
	        this._maxY = -1;
	    };
	    DirtyRectContext.create = function () {
	        return new DirtyRectContext();
	    };
	    return DirtyRectContext;
	}(matrix_stack_1.MatrixStack));
	exports.DirtyRectContext = DirtyRectContext;
	;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Events = __webpack_require__(10);
	var inputEventAdapter = __webpack_require__(19);
	/**
	 * Behavior代表控件的一种行为特性，比如Resizable/Movable/Draggable/Droppable等。
	 * 把这些行为特性抽象出来单独实现，一方面可以避免让Widget变得太复杂，另一方面可以最大限度的重用这些行为特性。
	 *
	 * 任何一个Widget，都可以使用useBehavior来启用某种Behavior。比如下面的代码让image具有Resizable的特性:
	 *
	 * ```
	 * image.useBehavior("resizable", {all:true});
	 * ```
	 */
	var Behavior = (function () {
	    /**
	     * 构造函数。主要是注册一些事件，把这些事件映射在成员函数上，子类只需要重载这些成员函数即可。
	     * @param type 类型名。
	     * @param widget Behavior作用的Widget。
	     * @param options 初始化参数，与具体的Behavior有关。
	     */
	    function Behavior(type, widget, options) {
	        this.type = type;
	        this.widget = widget;
	        this.keyDownGlobalFunc = this.onKeyDownGlobal.bind(this);
	        this.keyUpGlobalFunc = this.onKeyUpGlobal.bind(this);
	        this.pointerEnterFunc = this.onPointerEnter.bind(this);
	        this.pointerLeaveFunc = this.onPointerLeave.bind(this);
	        this.pointerDownFunc = this.onPointerDown.bind(this);
	        this.pointerMoveFunc = this.onPointerMove.bind(this);
	        this.pointerUpFunc = this.onPointerUp.bind(this);
	        this.keyDownFunc = this.onKeyDown.bind(this);
	        this.keyUpFunc = this.onKeyUp.bind(this);
	        inputEventAdapter.on(Events.KEYDOWN, this.keyDownGlobalFunc);
	        inputEventAdapter.on(Events.KEYUP, this.keyUpGlobalFunc);
	        widget.on(Events.POINTER_ENTER, this.pointerEnterFunc);
	        widget.on(Events.POINTER_LEAVE, this.pointerLeaveFunc);
	        widget.on(Events.POINTER_DOWN, this.pointerDownFunc);
	        widget.on(Events.POINTER_MOVE, this.pointerMoveFunc);
	        widget.on(Events.DISPOSE, this.dispose.bind(this));
	        widget.on(Events.POINTER_UP, this.pointerUpFunc);
	        widget.on(Events.KEYDOWN, this.keyDownFunc);
	        widget.on(Events.KEYUP, this.keyUpFunc);
	        this.init(options || {});
	    }
	    /**
	     * 初始化。在具体的Behavior的实现中，可以重载此函数做些初始化的工作。
	     * @param options 初始化参数，与具体的Behavior有关。
	     */
	    Behavior.prototype.init = function (options) {
	        return this;
	    };
	    Behavior.prototype.setOptions = function (options) {
	        this.init(options);
	    };
	    /**
	     * 析构函数。 主要是注销事件的处理函数。
	     */
	    Behavior.prototype.dispose = function () {
	        var widget = this.widget;
	        inputEventAdapter.off(Events.KEYDOWN, this.keyDownGlobalFunc);
	        inputEventAdapter.off(Events.KEYUP, this.keyUpGlobalFunc);
	        widget.off(Events.POINTER_ENTER, this.pointerEnterFunc);
	        widget.off(Events.POINTER_LEAVE, this.pointerLeaveFunc);
	        widget.off(Events.POINTER_DOWN, this.pointerDownFunc);
	        widget.off(Events.POINTER_MOVE, this.pointerMoveFunc);
	        widget.off(Events.POINTER_UP, this.pointerUpFunc);
	        widget.off(Events.KEYDOWN, this.keyDownFunc);
	        widget.off(Events.KEYUP, this.keyUpFunc);
	        this.widget = null;
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的按键按下事件。
	     */
	    Behavior.prototype.onKeyDown = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的按键抬起事件。
	     */
	    Behavior.prototype.onKeyUp = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理全局的按键按下事件。
	     */
	    Behavior.prototype.onKeyDownGlobal = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理全局的按键抬起事件。
	     */
	    Behavior.prototype.onKeyUpGlobal = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的PointerEnter事件。
	     */
	    Behavior.prototype.onPointerEnter = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的PointerLeave事件。
	     */
	    Behavior.prototype.onPointerLeave = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的PointerDown事件。
	     */
	    Behavior.prototype.onPointerDown = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的PointerMove事件。
	     */
	    Behavior.prototype.onPointerMove = function (evt) {
	    };
	    /**
	     * 子类重载此函数，可以处理Widget的PointerUp事件。
	     */
	    Behavior.prototype.onPointerUp = function (evt) {
	    };
	    return Behavior;
	}());
	exports.Behavior = Behavior;
	/**
	 * Behavior工厂类。
	 *
	 * 具体的Behavior需要调用BehaviorFactory.register注册自己，useBehavior才能找到对应的Behavior。
	 */
	var BehaviorFactory = (function () {
	    function BehaviorFactory() {
	    }
	    /**
	     * 注册Behavior
	     * @param type Behavior的类型名。
	     * @param creator Behavior创建函数。
	     */
	    BehaviorFactory.register = function (type, creator) {
	        BehaviorFactory.creators[type] = creator;
	    };
	    /**
	     * 创建Behavior。目前只在useBehavior中会用到。
	     * @param type Behavior的类型名。
	     * @param widget Behavior作用的Widget。
	     * @param options Behavior的初始化参数。
	     */
	    BehaviorFactory.create = function (type, widget, options) {
	        var create = BehaviorFactory.creators[type];
	        return create ? create(widget, options) : null;
	    };
	    BehaviorFactory.creators = {};
	    return BehaviorFactory;
	}());
	exports.BehaviorFactory = BehaviorFactory;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var factory_1 = __webpack_require__(28);
	/**
	 * 子控件布局算法。
	 */
	var Layouter = (function () {
	    function Layouter() {
	    }
	    Object.defineProperty(Layouter.prototype, "type", {
	        /**
	         * 布局算法的名称。
	         */
	        get: function () {
	            return "dummy";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 设置参数。
	     */
	    Layouter.prototype.setOptions = function (options) {
	        return this;
	    };
	    /**
	     * 对子控件进行布局。
	     * @param widget 父控件
	     * @param children 只控件
	     * @returns 全部子控件需要的区域。
	     */
	    Layouter.prototype.layoutChildren = function (widget, children, rect) {
	        return null;
	    };
	    Layouter.prototype.createParam = function (options) {
	        return null;
	    };
	    /**
	     * 从JSON数据创建。
	     */
	    Layouter.prototype.fromJson = function (json) {
	        for (var key in json) {
	            var value = json[key];
	            var type = typeof value;
	            if (type === "number" || type === "string") {
	                this[key] = value;
	            }
	        }
	        return this;
	    };
	    /**
	     * 转换成JSON数据。
	     */
	    Layouter.prototype.toJson = function () {
	        var json = {};
	        for (var key in this) {
	            var value = this[key];
	            var type = typeof value;
	            if (type === "number" || type === "string") {
	                json[key] = value;
	            }
	        }
	        return json;
	    };
	    Layouter.evalValue = function (value, total) {
	        var v = parseFloat(value);
	        if (typeof value === "number") {
	            return v;
	        }
	        if (value.indexOf("%") > 0) {
	            v = total * v / 100;
	        }
	        if (v < 0) {
	            v = total + v;
	        }
	        return v;
	    };
	    return Layouter;
	}());
	exports.Layouter = Layouter;
	/**
	 * Layouter的工厂。
	 */
	var LayouterFactory = (function (_super) {
	    __extends(LayouterFactory, _super);
	    function LayouterFactory() {
	        _super.apply(this, arguments);
	    }
	    LayouterFactory.register = function (type, creator) {
	        return LayouterFactory.factory.register(type, creator);
	    };
	    LayouterFactory.create = function (type, options) {
	        return LayouterFactory.factory.create(type, options);
	    };
	    LayouterFactory.createWithJson = function (json) {
	        var layouter = LayouterFactory.create(json.type, null);
	        layouter.fromJson(json);
	        return layouter;
	    };
	    LayouterFactory.factory = new factory_1.Factory();
	    return LayouterFactory;
	}(factory_1.Factory));
	exports.LayouterFactory = LayouterFactory;
	/**
	 * 布局参数。
	 * 如果父控件有指定childrenLayouter，那么其中的子控件需要有与之对应的LayouterParam。
	 */
	var LayouterParam = (function () {
	    function LayouterParam(type) {
	        this.type = type;
	    }
	    Object.defineProperty(LayouterParam.prototype, "widget", {
	        get: function () {
	            return this._widget;
	        },
	        /**
	         * 与之关联的Widget。
	         */
	        set: function (value) {
	            this._widget = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 从JSON数据创建。
	     */
	    LayouterParam.prototype.fromJson = function (json) {
	        for (var key in json) {
	            var value = json[key];
	            var type = typeof value;
	            if (type === "number" || type === "string") {
	                this[key] = value;
	            }
	        }
	        return this;
	    };
	    /**
	     * 转换成JSON数据。
	     */
	    LayouterParam.prototype.toJson = function () {
	        var json = {};
	        for (var key in this) {
	            var value = this[key];
	            var type = typeof value;
	            if (type === "number" || type === "string") {
	                json[key] = value;
	            }
	        }
	        return json;
	    };
	    return LayouterParam;
	}());
	exports.LayouterParam = LayouterParam;
	;
	/**
	 * LayouterParam的工厂。
	 */
	var LayouterParamFactory = (function (_super) {
	    __extends(LayouterParamFactory, _super);
	    function LayouterParamFactory() {
	        _super.apply(this, arguments);
	    }
	    LayouterParamFactory.register = function (type, creator) {
	        return LayouterParamFactory.factory.register(type, creator);
	    };
	    LayouterParamFactory.create = function (type, options) {
	        return LayouterParamFactory.factory.create(type, options);
	    };
	    LayouterParamFactory.createWithJson = function (json) {
	        var layouter = LayouterParamFactory.create(json.type, null);
	        layouter.fromJson(json);
	        return layouter;
	    };
	    LayouterParamFactory.factory = new factory_1.Factory();
	    return LayouterParamFactory;
	}(factory_1.Factory));
	exports.LayouterParamFactory = LayouterParamFactory;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var json_serializer_1 = __webpack_require__(84);
	var iview_model_1 = __webpack_require__(85);
	var iview_model_2 = __webpack_require__(85);
	;
	/**
	 * 数据源。如果指定了value，直接从value获取数据。否则通过path从ViewModel中获取数据。
	 */
	var BindingDataSource = (function (_super) {
	    __extends(BindingDataSource, _super);
	    function BindingDataSource(path, value, mode, updateTiming, validationRule, converter) {
	        _super.call(this);
	        this.converter = converter;
	        this.type = BindingDataSource.TYPE;
	        this.validationRule = validationRule;
	        this.mode = mode || iview_model_2.BindingMode.TWO_WAY;
	        this.updateTiming = updateTiming !== undefined ? updateTiming : iview_model_2.UpdateTiming.CHANGING;
	        if (path !== undefined) {
	            this.path = path;
	        }
	        if (value !== undefined) {
	            this.value = value;
	        }
	    }
	    BindingDataSource.create = function (path, value, mode, updateTiming, validationRule, converter) {
	        return new BindingDataSource(path, value, mode, updateTiming, validationRule, converter);
	    };
	    BindingDataSource.TYPE = "data";
	    return BindingDataSource;
	}(json_serializer_1.JsonSerializer));
	exports.BindingDataSource = BindingDataSource;
	;
	/**
	 * 命令源。
	 */
	var BindingCommandSource = (function (_super) {
	    __extends(BindingCommandSource, _super);
	    function BindingCommandSource(command, commandArgs) {
	        _super.call(this);
	        this.command = command;
	        this.eventHandler = null;
	        this.commandArgs = commandArgs;
	        this.type = BindingCommandSource.TYPE;
	    }
	    BindingCommandSource.create = function (command, commandArgs) {
	        return new BindingCommandSource(command, commandArgs);
	    };
	    BindingCommandSource.TYPE = "command";
	    return BindingCommandSource;
	}(json_serializer_1.JsonSerializer));
	exports.BindingCommandSource = BindingCommandSource;
	/**
	 * 单项数据绑定规则。
	 */
	var BindingRuleItem = (function () {
	    function BindingRuleItem(prop, source) {
	        this.prop = prop;
	        this.source = source;
	    }
	    BindingRuleItem.prototype.toJson = function () {
	        return { prop: this.prop, source: this.source.toJson() };
	    };
	    BindingRuleItem.prototype.fromJson = function (json) {
	        this.prop = json.prop;
	        var source = json.source;
	        if (source.command) {
	            this.source = BindingCommandSource.create(source.command, source.commandArgs);
	        }
	        else {
	            this.source = BindingDataSource.create(source.path, source.value, source.mode, source.updateTiming, source.validationRule, source.converter);
	        }
	        return this;
	    };
	    BindingRuleItem.create = function (prop, source) {
	        return new BindingRuleItem(prop, source);
	    };
	    return BindingRuleItem;
	}());
	exports.BindingRuleItem = BindingRuleItem;
	;
	/**
	 * 数据绑定规则。
	 */
	var BindingRule = (function () {
	    function BindingRule(json) {
	        this.fromJson(json);
	    }
	    BindingRule.prototype.getSource = function (prop) {
	        return this._items[prop];
	    };
	    BindingRule.prototype.forEach = function (func) {
	        var items = this._items;
	        for (var prop in items) {
	            var item = items[prop];
	            func(prop, item);
	        }
	    };
	    BindingRule.prototype.fromJson = function (json) {
	        this._items = {};
	        for (var prop in json) {
	            var source = null;
	            var sJson = json[prop];
	            if (sJson.command) {
	                source = BindingCommandSource.create(sJson.command, sJson.commandArgs);
	            }
	            else {
	                source = BindingDataSource.create(sJson.path, sJson.value, sJson.mode, sJson.updateTiming, sJson.validationRule, sJson.converter);
	            }
	            this._items[prop] = BindingRuleItem.create(prop, source);
	        }
	        return this;
	    };
	    BindingRule.prototype.toJson = function () {
	        var json = {};
	        var items = this._items;
	        for (var prop in items) {
	            var item = items[prop];
	            json[prop] = item.toJson();
	        }
	        return json;
	    };
	    BindingRule.parse = function (rule) {
	        if (typeof rule === "string") {
	            rule = { value: { path: rule } };
	        }
	        for (var key in rule) {
	            var dataSource = rule[key];
	            if (typeof dataSource === "string") {
	                rule[key] = { path: dataSource };
	                dataSource = rule[key];
	            }
	            var path = dataSource.path;
	            if (path && path.charAt(0) !== '/') {
	                dataSource.path = '/' + dataSource.path;
	            }
	            var mode = dataSource.mode;
	            if (mode && typeof mode === "string") {
	                dataSource.mode = iview_model_1.toBindingMode(mode);
	            }
	            var updateTiming = dataSource.updateTiming;
	            if (updateTiming && typeof updateTiming === "string") {
	                dataSource.updateTiming = iview_model_1.toUpdateTiming(updateTiming);
	            }
	        }
	        return rule;
	    };
	    BindingRule.create = function (rule) {
	        var json = BindingRule.parse(rule);
	        return new BindingRule(json);
	    };
	    return BindingRule;
	}());
	exports.BindingRule = BindingRule;


/***/ },
/* 84 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 把当前对象转换成JSON对象或从JSON对象来初始化当前对象。
	 */
	var JsonSerializer = (function () {
	    function JsonSerializer() {
	    }
	    JsonSerializer.prototype.toJson = function () {
	        var json = {};
	        for (var key in this) {
	            var value = this[key];
	            if (this.hasOwnProperty(key) && typeof value !== "function") {
	                json[key] = value;
	            }
	        }
	        return json;
	    };
	    JsonSerializer.prototype.fromJson = function (json) {
	        for (var key in json) {
	            this[key] = json[key];
	        }
	    };
	    return JsonSerializer;
	}());
	exports.JsonSerializer = JsonSerializer;


/***/ },
/* 85 */
/***/ function(module, exports) {

	"use strict";
	;
	;
	/**
	 * 数据绑定模式。
	 */
	(function (BindingMode) {
	    /**
	     * 双向数据绑定。
	     * 界面数据变化时自动更新ViewModel，ViewModel数据有变化时自动更新界面。
	     */
	    BindingMode[BindingMode["TWO_WAY"] = 0] = "TWO_WAY";
	    /**
	     * 单向数据绑定。
	     * 界面数据变化时不更新ViewModel，ViewModel数据有变化时自动更新界面。
	     */
	    BindingMode[BindingMode["ONE_WAY"] = 1] = "ONE_WAY";
	    /**
	     * 只在初始化时绑定。
	     * 界面数据变化时不更新ViewModel，ViewModel数据有变化时不更新界面。
	     */
	    BindingMode[BindingMode["ONE_TIME"] = 2] = "ONE_TIME";
	    /**
	     * 单向数据绑定。
	     * 界面数据变化时自动更新ViewModel，ViewModel数据有变化时不更新界面。
	     */
	    BindingMode[BindingMode["ONE_WAY_TO_SOURCE"] = 3] = "ONE_WAY_TO_SOURCE";
	})(exports.BindingMode || (exports.BindingMode = {}));
	var BindingMode = exports.BindingMode;
	;
	var BindingModeNames = ["two-way", "one-way", "one-time", "one-way-to-source"];
	function toBindingMode(name) {
	    return Math.max(0, BindingModeNames.indexOf(name));
	}
	exports.toBindingMode = toBindingMode;
	/**
	 * 更新ViewModel的时机。
	 */
	(function (UpdateTiming) {
	    /**
	     * 有变化时立即更新(如编辑器正在输入)。
	     */
	    UpdateTiming[UpdateTiming["CHANGING"] = 0] = "CHANGING";
	    /**
	     * 变化完成时才更新(如编辑器失去焦点时)。
	     */
	    UpdateTiming[UpdateTiming["CHANGED"] = 1] = "CHANGED";
	    /**
	     * 手动更新。
	     */
	    UpdateTiming[UpdateTiming["EXPLICIT"] = 2] = "EXPLICIT";
	})(exports.UpdateTiming || (exports.UpdateTiming = {}));
	var UpdateTiming = exports.UpdateTiming;
	;
	var UpdateTimingNames = ["changing", "changed", "explicit"];
	function toUpdateTiming(name) {
	    return Math.max(0, UpdateTimingNames.indexOf(name));
	}
	exports.toUpdateTiming = toUpdateTiming;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var recyclable_creator_1 = __webpack_require__(87);
	/**
	 * 可循环的创建器。
	 */
	var WidgetRecyclableCreator = (function (_super) {
	    __extends(WidgetRecyclableCreator, _super);
	    function WidgetRecyclableCreator(ctor) {
	        _super.call(this, function () {
	            return new ctor;
	        });
	        this._type = ctor.TYPE;
	    }
	    WidgetRecyclableCreator.prototype.create = function (options) {
	        var obj = _super.prototype.create.call(this);
	        obj.reset(this._type, options);
	        return obj;
	    };
	    WidgetRecyclableCreator.create = function (ctor) {
	        return new WidgetRecyclableCreator(ctor);
	    };
	    return WidgetRecyclableCreator;
	}(recyclable_creator_1.RecyclableCreator));
	exports.WidgetRecyclableCreator = WidgetRecyclableCreator;
	;


/***/ },
/* 87 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 可循环的创建器。
	 */
	var RecyclableCreator = (function () {
	    function RecyclableCreator(ctor) {
	        this.cache = [];
	        this.ctor = ctor;
	    }
	    /**
	     * 回收对象。
	     */
	    RecyclableCreator.prototype.recycle = function (obj) {
	        if (obj) {
	            this.cache.push(obj);
	        }
	    };
	    /**
	     * 创建对象。优先从缓存中取对象，如果缓存中没有对象，则创建新对象。
	     */
	    RecyclableCreator.prototype.create = function (options) {
	        var me = this;
	        if (this.cache.length) {
	            return this.cache.pop();
	        }
	        else {
	            var obj = (this.ctor());
	            obj.recycle = function () {
	                me.recycle(this);
	            };
	            return obj;
	        }
	    };
	    return RecyclableCreator;
	}());
	exports.RecyclableCreator = RecyclableCreator;
	;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var html_element_1 = __webpack_require__(89);
	var event_detail_1 = __webpack_require__(18);
	var HtmlEdit = (function (_super) {
	    __extends(HtmlEdit, _super);
	    function HtmlEdit() {
	        _super.apply(this, arguments);
	        this.changeEvent = Events.ChangeEvent.create();
	        this.keyEvent = Events.KeyEvent.create(null, event_detail_1.KeyEventDetail.create(0));
	    }
	    Object.defineProperty(HtmlEdit.prototype, "inputType", {
	        set: function (value) {
	            if (this.tag === "input") {
	                this.element.type = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlEdit.prototype, "text", {
	        get: function () {
	            return this.element.value;
	        },
	        set: function (value) {
	            this.element.value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HtmlEdit.prototype.show = function () {
	        _super.prototype.show.call(this);
	        this.element.focus();
	        this._visible = true;
	        this.dispatchEvent({ type: Events.SHOW });
	        return this;
	    };
	    HtmlEdit.prototype.hide = function () {
	        if (this._visible) {
	            this._visible = false;
	            this.element.blur();
	            this.dispatchEvent({ type: Events.HIDE });
	        }
	        this.removeAllListeners();
	        return _super.prototype.hide.call(this);
	    };
	    HtmlEdit.prototype.create = function (tag) {
	        _super.prototype.create.call(this, tag);
	        var me = this;
	        var element = this.element;
	        element.onkeyup = function (e) {
	            var evt = me.changeEvent;
	            var detail = { oldValue: this.value, newValue: this.value };
	            me.dispatchEvent(me.keyEvent.init(Events.KEYUP, event_detail_1.KeyEventDetail.create(e.keyCode)));
	            if (e.keyCode === 13 && tag === "input") {
	                me.dispatchEvent(evt.init(Events.CHANGE, detail));
	                this.blur();
	            }
	            else {
	                me.dispatchEvent(evt.init(Events.CHANGING, detail));
	            }
	        };
	        element.onkeydown = function (e) {
	            me.dispatchEvent(me.keyEvent.init(Events.KEYDOWN, event_detail_1.KeyEventDetail.create(e.keyCode)));
	        };
	        element.oninput = function (evt) {
	            var detail = { oldValue: this.value, newValue: this.value };
	            me.dispatchEvent(me.changeEvent.init(Events.CHANGING, detail));
	        };
	        element.onchange = function (evt) {
	            var detail = { oldValue: this.value, newValue: this.value };
	            me.changeEvent.init(Events.CHANGE, detail);
	            me.dispatchEvent(me.changeEvent);
	        };
	        element.onblur = function (evt) {
	            me.hide();
	        };
	        return this;
	    };
	    Object.defineProperty(HtmlEdit, "input", {
	        get: function () {
	            if (!HtmlEdit._input) {
	                HtmlEdit._input = new HtmlEdit();
	                HtmlEdit._input.create("input");
	                HtmlEdit._input.element.type = "text";
	            }
	            return HtmlEdit._input;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlEdit, "textArea", {
	        get: function () {
	            if (!HtmlEdit._textArea) {
	                HtmlEdit._textArea = new HtmlEdit();
	                HtmlEdit._textArea.create("textarea");
	            }
	            return HtmlEdit._textArea;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return HtmlEdit;
	}(html_element_1.HtmlElement));
	exports.HtmlEdit = HtmlEdit;
	;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var emitter_1 = __webpack_require__(8);
	var HtmlElement = (function (_super) {
	    __extends(HtmlElement, _super);
	    function HtmlElement() {
	        _super.call(this);
	    }
	    Object.defineProperty(HtmlElement.prototype, "x", {
	        get: function () {
	            return parseInt(this.element.style.left);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "y", {
	        get: function () {
	            return parseInt(this.element.style.top);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "z", {
	        get: function () {
	            return parseInt(this.element.style.zIndex);
	        },
	        set: function (value) {
	            this.element.style.zIndex = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "tag", {
	        get: function () {
	            return this._tag;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "textColor", {
	        set: function (color) {
	            this.element.style.color = color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "backgroundColor", {
	        set: function (color) {
	            this.element.style.background = color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "fontSize", {
	        set: function (fontSize) {
	            this.element.style.fontSize = fontSize + "px";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HtmlElement.prototype, "fontFamily", {
	        set: function (fontFamily) {
	            this.element.style.fontFamily = fontFamily;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HtmlElement.prototype.show = function () {
	        this.element.style.visibility = 'visible';
	        this.element.style.opacity = 1;
	        this.element.style.display = 'block';
	        return this;
	    };
	    HtmlElement.prototype.hide = function () {
	        this.element.style.opacity = 0;
	        this.element.style.zIndex = -1;
	        this.element.style.visibility = 'hidden';
	        this.element.style.display = 'none';
	        return this;
	    };
	    HtmlElement.prototype.move = function (x, y) {
	        this.element.style.position = "absolute";
	        this.element.style.left = x + "px";
	        this.element.style.top = y + "px";
	        return this;
	    };
	    Object.defineProperty(HtmlElement.prototype, "borderWidth", {
	        get: function () {
	            var borderWidth = 0;
	            if (window.getComputedStyle) {
	                borderWidth = parseInt(window.getComputedStyle(this.element).borderWidth);
	            }
	            return borderWidth;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HtmlElement.prototype.resize = function (w, h) {
	        var borderWidth = this.borderWidth * 2;
	        var ww = w - borderWidth;
	        var hh = h - borderWidth;
	        this.element.style.width = ww + "px";
	        this.element.style.height = hh + "px";
	        return this;
	    };
	    HtmlElement.prototype.destroy = function () {
	        if (this.element) {
	            document.body.removeChild(this.element);
	            this.element = null;
	        }
	    };
	    HtmlElement.prototype.create = function (tag) {
	        this.element = document.createElement(tag);
	        document.body.appendChild(this.element);
	        this._tag = tag;
	        return this;
	    };
	    return HtmlElement;
	}(emitter_1.Emitter));
	exports.HtmlElement = HtmlElement;
	;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var Page = (function (_super) {
	    __extends(Page, _super);
	    function Page(type) {
	        _super.call(this, type || Page.TYPE);
	    }
	    Page.create = function (options) {
	        return Page.recycleBin.create(options);
	    };
	    Page.TYPE = "page";
	    Page.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Page);
	    return Page;
	}(widget_1.Widget));
	exports.Page = Page;
	;
	widget_factory_1.WidgetFactory.register(Page.TYPE, Page.create);


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../typings/globals/eventemitter3/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var emitter_1 = __webpack_require__(8);
	var Events = __webpack_require__(10);
	/**
	 * 表示屏幕大小和密度。
	 */
	var ViewPort = (function (_super) {
	    __extends(ViewPort, _super);
	    function ViewPort() {
	        _super.call(this);
	    }
	    ViewPort.prototype.getScaleValues = function () {
	        var scale = (1 / (this.density)).toString();
	        var str = "initial-scale=SS, minimum-scale=SS, maximum-scale=SS, user-scalable=0";
	        return "target-densitydpi=device-dpi, width=device-width, " + str.replace(/SS/g, scale);
	    };
	    ViewPort.prototype.updateHeadViewportMeta = function (value) {
	        var meta = null;
	        var head = document.getElementsByTagName('head')[0];
	        var arr = document.getElementsByTagName('meta');
	        for (var i = 0; i < arr.length; i++) {
	            var iter = arr[i];
	            if (iter.name === "viewport") {
	                meta = iter;
	                break;
	            }
	        }
	        if (!meta) {
	            meta = document.createElement('meta');
	            head.appendChild(meta);
	        }
	        meta.name = 'viewport';
	        meta.content = value;
	    };
	    ViewPort.prototype.init = function (width, height, density) {
	        var _this = this;
	        this._density = density || window.devicePixelRatio;
	        this.updateHeadViewportMeta(this.getScaleValues());
	        this._width = width || window.innerWidth;
	        this._height = height || window.innerHeight;
	        window.addEventListener(Events.RESIZE, function (evt) {
	            _this._width = window.innerWidth;
	            _this._height = window.innerHeight;
	            _this.dispatchEvent({ type: "resize" });
	        });
	    };
	    Object.defineProperty(ViewPort.prototype, "width", {
	        get: function () {
	            return this._width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewPort.prototype, "height", {
	        get: function () {
	            return this._height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewPort.prototype, "w", {
	        get: function () {
	            return this._width;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewPort.prototype, "h", {
	        get: function () {
	            return this._height;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ViewPort.prototype, "density", {
	        get: function () {
	            return this._density;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewPort.create = function (width, height, density) {
	        var vp = new ViewPort();
	        vp.init(width, height, density);
	        return vp;
	    };
	    return ViewPort;
	}(emitter_1.Emitter));
	exports.ViewPort = ViewPort;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 页面管理器。管理多个页面，只有一个页面处于活跃状态，仅该页面可见，可以处理事件。
	 * value表示该活跃页面的索引。
	 */
	var Pages = (function (_super) {
	    __extends(Pages, _super);
	    function Pages() {
	        _super.call(this, Pages.TYPE);
	    }
	    Object.defineProperty(Pages.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            var n = this.children.length - 1;
	            this._value = Math.max(0, Math.min(value, n));
	            this.requestRedraw();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Pages.prototype.setValueByPage = function (page) {
	        this.value = this.indexOfChild(page);
	        return this;
	    };
	    Object.defineProperty(Pages.prototype, "target", {
	        get: function () {
	            if (this.children.length) {
	                return this.children[this.value];
	            }
	            else {
	                return null;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Pages.prototype.relayoutChildren = function () {
	        var r = this.getLayoutRect();
	        this.children.forEach(function (child) {
	            child.moveResizeTo(r.x, r.y, r.w, r.h);
	        });
	        return r;
	    };
	    Pages.prototype.drawChildren = function (ctx) {
	        var target = this.target;
	        if (target) {
	            target.draw(ctx);
	        }
	        return this;
	    };
	    Pages.prototype.findEventTargetChild = function (x, y, ctx) {
	        return this.target;
	    };
	    Pages.prototype.onReset = function () {
	        this.value = 0;
	    };
	    Pages.create = function (options) {
	        return Pages.recycleBin.create(options);
	    };
	    Pages.TYPE = "pages";
	    Pages.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Pages);
	    return Pages;
	}(widget_1.Widget));
	exports.Pages = Pages;
	;
	widget_factory_1.WidgetFactory.register(Pages.TYPE, Pages.create);


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var emitter_1 = __webpack_require__(8);
	/**
	 * 负责渲染UI的主循环。为了省电，只有在调用requestRedraw之后，才会触发下一次渲染循环。
	 * 每个渲染循环分为三个阶段：
	 *
	 * *.predraw 绘制前做一些工作，通常用于动画改变对象的属性。
	 *
	 * *.draw 绘制阶段。
	 *
	 * *.postdraw 绘制后一些收尾工作，如果绘制阶段只是生成命令队列，可以在此阶段提交。
	 *
	 */
	var MainLoop = (function (_super) {
	    __extends(MainLoop, _super);
	    function MainLoop() {
	        _super.call(this);
	        this.pendingRedraw = 0;
	        this.predrawEvent = Events.TickEvent.create(Events.PRETICK);
	        this.drawEvent = Events.TickEvent.create(Events.TICK);
	        this.postdrawEvent = Events.TickEvent.create(Events.POSTTICK);
	    }
	    MainLoop.prototype.requestRedraw = function () {
	        var _this = this;
	        if (!this.pendingRedraw++) {
	            requestAnimationFrame(function (evt) {
	                _this.exec();
	            });
	        }
	    };
	    MainLoop.prototype.exec = function () {
	        var fps = 0;
	        var time = Date.now();
	        var deltaTime = performance.now();
	        var detail = { fps: fps, time: time, deltaTime: deltaTime };
	        this.drawEvent.init(Events.PRETICK, detail);
	        this.predrawEvent.init(Events.TICK, detail);
	        this.postdrawEvent.init(Events.POSTTICK, detail);
	        this.pendingRedraw = 0;
	        this.dispatchEvent(this.predrawEvent);
	        this.dispatchEvent(this.drawEvent);
	        this.dispatchEvent(this.postdrawEvent);
	    };
	    MainLoop.create = function () {
	        return new MainLoop();
	    };
	    return MainLoop;
	}(emitter_1.Emitter));
	exports.MainLoop = MainLoop;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var style_1 = __webpack_require__(7);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 图片控件。
	 */
	var Image = (function (_super) {
	    __extends(Image, _super);
	    function Image() {
	        _super.call(this, Image.TYPE);
	    }
	    Object.defineProperty(Image.prototype, "image", {
	        get: function () {
	            return this._style.backGroundImage;
	        },
	        set: function (image) {
	            this._style.backGroundImage = image;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Image.prototype, "drawType", {
	        get: function () {
	            return this._style.backGroundImageDrawType;
	        },
	        set: function (drawType) {
	            this._style.backGroundImageDrawType = drawType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Image.prototype, "value", {
	        get: function () {
	            var image = this._style.backGroundImage;
	            return image ? image.src : null;
	        },
	        set: function (url) {
	            var _this = this;
	            this._style.backGroundImage = image_tile_1.ImageTile.create(url, function (evt) {
	                _this.requestRedraw();
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Image.prototype.onToJson = function (json) {
	        if (this._style) {
	            json.style = this._style.toJson();
	        }
	    };
	    Image.prototype.onFromJson = function (json) {
	        if (json.style) {
	            this._style = style_1.Style.create(json.style);
	        }
	    };
	    Image.prototype.setStyle = function (state, style) {
	        this._style = style;
	        return this;
	    };
	    Image.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        var style = style_1.Style.create();
	        style.fontSize = 12;
	        style.textColor = "Black";
	        style.backGroundImageDrawType = image_tile_1.ImageDrawType.DEFAULT;
	        this._style = style;
	    };
	    Image.prototype.getStyle = function () {
	        return this._style;
	    };
	    Image.create = function (options) {
	        return Image.recycleBin.create(options);
	    };
	    Image.TYPE = "image";
	    Image.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Image);
	    return Image;
	}(widget_1.Widget));
	exports.Image = Image;
	;
	widget_factory_1.WidgetFactory.register(Image.TYPE, Image.create);


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var Group = (function (_super) {
	    __extends(Group, _super);
	    function Group() {
	        _super.call(this, Group.TYPE);
	    }
	    Group.create = function (options) {
	        return Group.recycleBin.create(options);
	    };
	    Group.TYPE = "group";
	    Group.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Group);
	    return Group;
	}(widget_1.Widget));
	exports.Group = Group;
	;
	widget_factory_1.WidgetFactory.register(Group.TYPE, Group.create);


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var window_1 = __webpack_require__(97);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 对话框。
	 */
	var Dialog = (function (_super) {
	    __extends(Dialog, _super);
	    function Dialog(type) {
	        _super.call(this, type || Dialog.TYPE);
	    }
	    Dialog.create = function (options) {
	        return Dialog.recycleBin.create(options);
	    };
	    Dialog.TYPE = "dialog";
	    Dialog.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Dialog);
	    return Dialog;
	}(window_1.Window));
	exports.Dialog = Dialog;
	;
	widget_factory_1.WidgetFactory.register(Dialog.TYPE, Dialog.create);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var point_1 = __webpack_require__(6);
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	/**
	 * 窗口的基类。
	 */
	var Window = (function (_super) {
	    __extends(Window, _super);
	    function Window(type) {
	        _super.call(this, type);
	        this._windowEvent = Events.WindowEvent.create();
	    }
	    Object.defineProperty(Window.prototype, "grabbed", {
	        get: function () {
	            return this._grabbed;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Window.prototype, "hasOwnCanvas", {
	        get: function () {
	            return this._hasOwnCanvas;
	        },
	        /**
	         * 是否有自己的Canvas元素(此属性需要在窗口打开之前赋值)。
	         * PC上运行时，每个窗口都有自己的Canvas元素。
	         * Mobile上运行是，每个窗口共享一个Canvas。
	         */
	        set: function (value) {
	            if (this._inited) {
	                console.log("too late to set hasOwnCanvas");
	                return;
	            }
	            this._hasOwnCanvas = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Window.prototype, "pointerPosition", {
	        /**
	         * 获取鼠标在当前窗口上的位置。
	         */
	        get: function () {
	            return this._pointerPosition;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Window.prototype.dispatchPointerDown = function (evt, ctx) {
	        this._pointerPosition.init(evt.x, evt.y);
	        _super.prototype.dispatchPointerDown.call(this, evt, ctx);
	    };
	    Window.prototype.dispatchPointerMove = function (evt, ctx) {
	        this._pointerPosition.init(evt.x, evt.y);
	        _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	    };
	    /**
	     * 抓住事件，让输入事件始终发到当前窗口，直到ungrab为止。
	     */
	    Window.prototype.grab = function () {
	        if (!this._grabbed && this.canvas) {
	            this._grabbed = true;
	            var canvas = this.canvas;
	            setTimeout(function (evt) {
	                canvas.grab();
	            }, 0);
	        }
	        return this;
	    };
	    /**
	     * 取消抓住事件。
	     */
	    Window.prototype.ungrab = function () {
	        if (this._grabbed && this.canvas) {
	            this._grabbed = false;
	            this.canvas.ungrab();
	        }
	        return this;
	    };
	    /**
	     * 窗口隐藏或显示时，需要grab/ungrab事件。
	     */
	    Window.prototype.setVisible = function (value) {
	        _super.prototype.setVisible.call(this, value);
	        if (!value) {
	            if (this._grabbed) {
	                this.ungrab();
	                this._shouldGrabWhenVisible = true;
	            }
	        }
	        else {
	            if (this._shouldGrabWhenVisible) {
	                this.grab();
	            }
	        }
	    };
	    /**
	     * 打开窗口。创建窗口的Canvas元素，初始化窗口内的控件，布局窗口内的控件。
	     */
	    Window.prototype.open = function () {
	        if (this._hasOwnCanvas) {
	            this.createCanvas();
	            this._canvas.grabKey();
	        }
	        this.init();
	        this.relayoutChildren();
	        this.dispatchWindowEvent(Events.WINDOW_OPEN);
	        return this;
	    };
	    Window.prototype.dispatchWindowEvent = function (type) {
	        var e = this._windowEvent.reset(type, this);
	        this.dispatchEvent(e);
	        if (this.app) {
	            this.app.dispatchEvent(e);
	        }
	    };
	    /**
	     * 关闭窗口。
	     */
	    Window.prototype.close = function () {
	        if (this._hasOwnCanvas) {
	            this._canvas.ungrabKey();
	        }
	        this.dispatchWindowEvent(Events.WINDOW_CLOSE);
	        this.ungrab();
	        this.deinit();
	        this.dispose();
	    };
	    /**
	     * 让窗口最大化，即填满父控件(窗口管理器)或整个可见区域。
	     */
	    Window.prototype.maximize = function () {
	        var containor = this.parent || this.app.getViewPort();
	        var w = containor.w;
	        var h = containor.h;
	        if (w !== this.w) {
	            this.w = w;
	        }
	        if (h !== this.h) {
	            this.h = h;
	        }
	        if (this._inited) {
	            this.relayoutChildren();
	        }
	        return this;
	    };
	    /**
	     * 将对话框移动到屏幕中间。
	     */
	    Window.prototype.moveToCenter = function () {
	        var containor = this.parent || this.app.getViewPort();
	        var w = containor.w;
	        var h = containor.h;
	        this.x = (w - this.w) >> 1;
	        this.y = (h - this.h) >> 1;
	        return this;
	    };
	    Window.prototype.dispatchKeyDown = function (evt) {
	        _super.prototype.dispatchKeyDown.call(this, evt);
	        var keys = "";
	        if (evt.ctrlKey) {
	            keys = "ctrl";
	        }
	        if (evt.commandKey) {
	            keys += keys ? "+cmd" : "cmd";
	        }
	        if (evt.altKey) {
	            keys += keys ? "+alt" : "alt";
	        }
	        if (evt.shiftKey) {
	            keys += keys ? "+shift" : "shift";
	        }
	        var key = String.fromCharCode(evt.keyCode).toLowerCase();
	        if (key) {
	            keys += (keys ? ("+" + key) : key);
	            var e = this._shortcutEvent;
	            e.init(Events.SHORTCUT, keys);
	            this.dispatchShortcut(e);
	        }
	    };
	    Window.prototype.dispatchShortcut = function (e) {
	        this.dispatchEvent(e);
	    };
	    Window.prototype.registerShortcut = function (keys, func) {
	        var lowerKeys = keys.toLowerCase();
	        this.on(Events.SHORTCUT, function (evt) {
	            if (lowerKeys === evt.keys) {
	                func(evt);
	            }
	        });
	    };
	    Window.prototype.onCreated = function () {
	        _super.prototype.onCreated.call(this);
	        this.dispatchWindowEvent(Events.WINDOW_CREATED);
	    };
	    Window.prototype.onReset = function () {
	        this._isWindow = true;
	        this._grabbed = false;
	        this.hasOwnCanvas = true;
	        this._pointerPosition = point_1.Point.create(0, 0);
	        this._shortcutEvent = Events.ShortcutEvent.create(null, null);
	    };
	    Window.prototype.reset = function (type, options) {
	        this._app = options ? options.app : null;
	        this.dispatchWindowEvent(Events.WINDOW_CREATE);
	        return _super.prototype.reset.call(this, type, options);
	    };
	    return Window;
	}(widget_1.Widget));
	exports.Window = Window;
	;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var Button = (function (_super) {
	    __extends(Button, _super);
	    function Button() {
	        _super.call(this, Button.TYPE);
	    }
	    Button.create = function (options) {
	        return Button.recycleBin.create(options);
	    };
	    Button.TYPE = "button";
	    Button.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Button);
	    return Button;
	}(widget_1.Widget));
	exports.Button = Button;
	;
	widget_factory_1.WidgetFactory.register(Button.TYPE, Button.create);


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var button_1 = __webpack_require__(98);
	var graphics_1 = __webpack_require__(29);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var progress_bar_1 = __webpack_require__(100);
	/**
	 * 滑块控件。拖动滑块可以改变它的值。
	 */
	var Slider = (function (_super) {
	    __extends(Slider, _super);
	    function Slider(type) {
	        _super.call(this, type || Slider.TYPE);
	    }
	    Object.defineProperty(Slider.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Slider.prototype.onDraggerMoved = function (dragEnd) {
	        var oldValue = this.dragger.userData;
	        if (this.barType === progress_bar_1.ProgressBarType.V) {
	            var h = this.dragger.h;
	            var y = this.h - this.dragger.y;
	            if (y < 2 * h) {
	                y -= h;
	            }
	            else if (y < (this.h - h)) {
	                y -= h >> 1;
	            }
	            else {
	            }
	            this._value = y / this.h;
	        }
	        else {
	            var w = this.dragger.w;
	            var x = this.dragger.x;
	            if (x < w) {
	            }
	            else if (x < (this.w - 2 * w)) {
	                x += w >> 1;
	            }
	            else {
	                x += w;
	            }
	            this._value = x / this.w;
	        }
	        if (dragEnd) {
	            this.eChangeEvent.init(Events.CHANGE, { newValue: this.value, oldValue: oldValue });
	        }
	        else {
	            this.eChangeEvent.init(Events.CHANGING, { newValue: this.value, oldValue: null });
	        }
	        this.dispatchEvent(this.eChangeEvent);
	        this.requestRedraw();
	    };
	    Slider.prototype.relayoutChildren = function () {
	        var dragger = this.dragger;
	        if (dragger) {
	            if (this.barType === progress_bar_1.ProgressBarType.V) {
	                dragger.w = this.w;
	                dragger.h = this.w;
	                dragger.x = 0;
	                dragger.y = (1 - this.value) * this.h;
	                dragger.useBehavior("movable", { xMovable: false, yLimit: true, yMin: 0, yMax: this.h - this.w });
	            }
	            else {
	                dragger.w = this.h;
	                dragger.h = this.h;
	                dragger.y = 0;
	                dragger.x = this.value * this.w;
	                dragger.useBehavior("movable", { yMovable: false, xLimit: true, xMin: 0, xMax: this.w - this.h });
	            }
	        }
	        return null;
	    };
	    Slider.prototype.onInit = function () {
	        var _this = this;
	        _super.prototype.onInit.call(this);
	        var dragger = button_1.Button.create();
	        this.addChild(dragger);
	        dragger.styleType = "slider-dragger";
	        dragger.on(Events.MOVING, function (evt) {
	            _this.onDraggerMoved(false);
	        });
	        dragger.on(Events.MOVE_END, function (evt) {
	            _this.onDraggerMoved(true);
	        });
	        dragger.on(Events.MOVE_BEGIN, function (evt) {
	            dragger.userData = _this.value;
	        });
	        this.dragger = dragger;
	    };
	    Slider.prototype.setProp = function (prop, newValue, notify) {
	        _super.prototype.setProp.call(this, prop, newValue, notify);
	        if (prop === "w" || prop === "h" || prop === "value") {
	            this.relayoutChildren();
	        }
	        return this;
	    };
	    Slider.prototype.drawColorBackground = function (ctx, style) {
	        var x1 = 0;
	        var y1 = 0;
	        var x2 = 0;
	        var y2 = 0;
	        if (this.barType === progress_bar_1.ProgressBarType.V) {
	            x1 = x2 = this.w >> 1;
	            y1 = 0;
	            y2 = this.h;
	        }
	        else {
	            y1 = y2 = this.h >> 1;
	            x1 = 0;
	            x2 = this.w;
	        }
	        graphics_1.Graphics.drawLine(ctx, style.backGroundColor, style.lineWidth, x1, y1, x2, y2);
	        return this;
	    };
	    Slider.prototype.drawColorForeGround = function (ctx, style) {
	        var x1 = 0;
	        var y1 = 0;
	        var x2 = 0;
	        var y2 = 0;
	        if (this.barType === progress_bar_1.ProgressBarType.V) {
	            x1 = x2 = this.w >> 1;
	            y1 = this.h;
	            y2 = this.h * (1 - this.value);
	        }
	        else {
	            y1 = y2 = this.h >> 1;
	            x1 = 0;
	            x2 = this.w * this.value;
	        }
	        graphics_1.Graphics.drawLine(ctx, style.foreGroundColor, style.lineWidth, x1, y1, x2, y2);
	        return this;
	    };
	    Slider.create = function (options) {
	        return Slider.r.create(options);
	    };
	    Slider.TYPE = "slider";
	    Slider.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Slider);
	    return Slider;
	}(progress_bar_1.ProgressBar));
	exports.Slider = Slider;
	;
	widget_factory_1.WidgetFactory.register(Slider.TYPE, Slider.create);


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var graphics_1 = __webpack_require__(29);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 进度条的类型有三种：水平，垂直和圆形。
	 */
	(function (ProgressBarType) {
	    ProgressBarType[ProgressBarType["H"] = 1] = "H";
	    ProgressBarType[ProgressBarType["HORIZONTAL"] = 1] = "HORIZONTAL";
	    ProgressBarType[ProgressBarType["V"] = 2] = "V";
	    ProgressBarType[ProgressBarType["VERTICAL"] = 2] = "VERTICAL";
	    ProgressBarType[ProgressBarType["C"] = 3] = "C";
	    ProgressBarType[ProgressBarType["CIRCLE"] = 3] = "CIRCLE";
	})(exports.ProgressBarType || (exports.ProgressBarType = {}));
	var ProgressBarType = exports.ProgressBarType;
	;
	/**
	 * 进度条。value表示进度，取值在0到1之间。
	 */
	var ProgressBar = (function (_super) {
	    __extends(ProgressBar, _super);
	    function ProgressBar(type) {
	        _super.call(this, type || ProgressBar.TYPE);
	        this.textFormater = function (value) {
	            return Math.round((value * 100)) + "%";
	        };
	        this.barType = ProgressBarType.H;
	    }
	    Object.defineProperty(ProgressBar.prototype, "text", {
	        get: function () {
	            return this.textFormater(this._value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProgressBar.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            var v = Math.min(1, Math.max(0, value));
	            this.setProp("value", v, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProgressBar.prototype.drawColorForeGround = function (ctx, style) {
	        graphics_1.Graphics.drawRoundRect(ctx, style.foreGroundColor, null, 0, 0, 0, this.w, this.h, style.roundRadius);
	        return this;
	    };
	    ProgressBar.prototype.drawImage = function (ctx, style) {
	        var img = style.foreGroundImage;
	        var value = this.value;
	        ctx.save();
	        ctx.beginPath();
	        switch (this.barType) {
	            case ProgressBarType.V: {
	                var h = this.h * value;
	                var y = this.h - h;
	                ctx.rect(0, y, this.w, h);
	                break;
	            }
	            case ProgressBarType.C: {
	                var cx = this.w >> 1;
	                var cy = this.h >> 1;
	                var angle = this.value * Math.PI * 2 - Math.PI / 2;
	                ctx.moveTo(cx, cy);
	                ctx.lineTo(cx, 0);
	                ctx.arc(cx, cy, cy, -Math.PI / 2, angle, false);
	                ctx.closePath();
	                break;
	            }
	            default: {
	                var w = this.w * value;
	                ctx.rect(0, 0, w, this.h);
	                break;
	            }
	        }
	        ctx.clip();
	        if (img) {
	            img.draw(ctx, style.foreGroundImageDrawType, 0, 0, this.w, this.h);
	        }
	        else if (style.foreGroundColor) {
	            this.drawColorForeGround(ctx, style);
	        }
	        ctx.restore();
	        return this;
	    };
	    ProgressBar.prototype.getDefProps = function () {
	        return ProgressBar.defProps;
	    };
	    ProgressBar.create = function (options) {
	        return ProgressBar.recycleBin.create(options);
	    };
	    ProgressBar.defProps = Object.assign({}, widget_1.Widget.defProps, { barType: ProgressBarType.H });
	    ProgressBar.TYPE = "progress-bar";
	    ProgressBar.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ProgressBar);
	    return ProgressBar;
	}(widget_1.Widget));
	exports.ProgressBar = ProgressBar;
	;
	widget_factory_1.WidgetFactory.register(ProgressBar.TYPE, ProgressBar.create);


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var TWEEN = __webpack_require__(24);
	var graphics_1 = __webpack_require__(29);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 开关控件。
	 */
	var Switch = (function (_super) {
	    __extends(Switch, _super);
	    function Switch() {
	        _super.call(this, Switch.TYPE);
	    }
	    Object.defineProperty(Switch.prototype, "offset", {
	        get: function () {
	            if (this._switching) {
	                return this._offset;
	            }
	            return this.value ? this.maxOffset : this.minOffset;
	        },
	        set: function (value) {
	            this.requestRedraw();
	            this._offset = Math.min(this.maxOffset, Math.max(value, this.minOffset));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Switch.prototype, "minOffset", {
	        get: function () {
	            return this.h >> 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Switch.prototype, "maxOffset", {
	        get: function () {
	            return this.w - (this.h >> 1);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Switch.prototype.drawColorBackground = function (ctx, style) {
	        var w = this.w;
	        var h = this.h;
	        var r = h >> 1;
	        var offset = this.offset;
	        var fillColor = null;
	        var strokeColor = null;
	        if (!this._switching) {
	            fillColor = this.value ? style.backGroundColor : style.foreGroundColor;
	            strokeColor = style.lineColor;
	            graphics_1.Graphics.drawRoundRect(ctx, fillColor, strokeColor, 1, 0, 0, w, h, r);
	        }
	        else {
	            strokeColor = style.lineColor;
	            fillColor = style.backGroundColor;
	            graphics_1.Graphics.drawRoundRect(ctx, fillColor, strokeColor, 1, 0, 0, w, h, r);
	            w = this.w - (offset - r);
	            fillColor = style.foreGroundColor;
	            graphics_1.Graphics.drawRoundRect(ctx, fillColor, strokeColor, 1, offset - r, 0, w, h, r);
	        }
	        var y = r;
	        var x = this.offset;
	        graphics_1.Graphics.drawCircle(ctx, style.foreGroundColor, style.lineColor, style.lineWidth, x, y, r);
	        return this;
	    };
	    Switch.prototype.dispatchPointerUp = function (evt) {
	        var _this = this;
	        var dx = evt.x - evt.pointerDownX;
	        if (dx > 5 && this.value || dx < -5 && !this.value) {
	            _super.prototype.dispatchPointerUp.call(this, evt);
	            return;
	        }
	        var duration = 200;
	        var tween = new TWEEN.Tween(this);
	        var offset = this.value ? this.minOffset : this.maxOffset;
	        this._switching = true;
	        this.offset = this.value ? this.maxOffset : this.minOffset;
	        tween.to({ offset: offset }, duration).start();
	        tween.onComplete(function (evt) {
	            _this.value = !_this.value;
	            _this._switching = false;
	        });
	        _super.prototype.dispatchPointerUp.call(this, evt);
	    };
	    Switch.create = function (options) {
	        return Switch.recycleBin.create(options);
	    };
	    Switch.TYPE = "switch";
	    Switch.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Switch);
	    return Switch;
	}(widget_1.Widget));
	exports.Switch = Switch;
	;
	widget_factory_1.WidgetFactory.register(Switch.TYPE, Switch.create);


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var page_1 = __webpack_require__(90);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TabPage = (function (_super) {
	    __extends(TabPage, _super);
	    function TabPage() {
	        _super.call(this, TabPage.TYPE);
	    }
	    Object.defineProperty(TabPage.prototype, "tabButton", {
	        get: function () {
	            return this._tabButton;
	        },
	        set: function (value) {
	            this._tabButton = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabPage.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._tabButton = null;
	    };
	    TabPage.create = function (options) {
	        return TabPage.r.create(options);
	    };
	    TabPage.TYPE = "page";
	    TabPage.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TabPage);
	    return TabPage;
	}(page_1.Page));
	exports.TabPage = TabPage;
	;
	widget_factory_1.WidgetFactory.register(TabPage.TYPE, TabPage.create);


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var scroll_view_1 = __webpack_require__(104);
	var carota = __webpack_require__(30);
	var rect = carota.rect;
	var createDoc = carota.document;
	/**
	 * 富文本显示控件。
	 */
	var RichText = (function (_super) {
	    __extends(RichText, _super);
	    function RichText(type) {
	        _super.call(this, type || RichText.TYPE);
	        this._verticalAlignment = 'top';
	    }
	    RichText.prototype.hasFocus = function () {
	        return false;
	    };
	    Object.defineProperty(RichText.prototype, "data", {
	        set: function (data) {
	            this._data = data;
	            if (this._doc) {
	                this._doc.load(data);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RichText.prototype.getVerticalOffset = function () {
	        var h = this.h;
	        var doc = this._doc;
	        var docHeight = doc.frame.bounds().h;
	        if (docHeight < h) {
	            switch (this._verticalAlignment) {
	                case 'middle':
	                    return (h - docHeight) / 2;
	                case 'bottom':
	                    return h - docHeight;
	            }
	        }
	        return 0;
	    };
	    RichText.prototype.doDrawChildren = function (ctx) {
	        var doc = this._doc;
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var w = this.w - this.leftPadding - this.rightPadding;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        if (this.isVScrollBarVisible()) {
	            w -= this.scrollBarStyle.size;
	        }
	        if (doc.width() !== w) {
	            doc.width(w);
	        }
	        ctx.save();
	        ctx.translate(x, y);
	        doc.draw(ctx, rect(0, this._oy, w, h));
	        doc.drawSelection(ctx, this.hasFocus());
	        ctx.restore();
	        return this;
	    };
	    ;
	    RichText.prototype.adjustSize = function () {
	        var doc = this._doc;
	        var w = this.w - this.leftPadding - this.rightPadding;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        doc.width(w);
	        var r = doc.frame.bounds();
	        if (r.h > h) {
	            w -= this.scrollBarStyle.size;
	            doc.width(w);
	        }
	        var r = doc.frame.bounds();
	        this.contentW = r.w;
	        this.contentH = r.h;
	    };
	    RichText.prototype.onInit = function () {
	        this.dragToScroll = true;
	        this.scrollerOptions.scrollingX = false;
	        _super.prototype.onInit.call(this);
	        var doc = createDoc();
	        doc.load(this._data);
	        doc.toggleCaret();
	        this._doc = doc;
	        this.adjustSize();
	    };
	    RichText.prototype.dispose = function () {
	        this._doc = null;
	        _super.prototype.dispose.call(this);
	    };
	    RichText.create = function (options) {
	        return RichText.reBin.create(options);
	    };
	    RichText.TYPE = "rich-text";
	    RichText.reBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(RichText);
	    return RichText;
	}(scroll_view_1.ScrollView));
	exports.RichText = RichText;
	;
	widget_factory_1.WidgetFactory.register(RichText.TYPE, RichText.create);


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/globals/scroller/index.d.ts"/>
	/// <reference path="../../typings/globals/tween.js/index.d.ts"/>
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var scroller_1 = __webpack_require__(105);
	var TWEEN = __webpack_require__(24);
	var Events = __webpack_require__(10);
	var graphics_1 = __webpack_require__(29);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var widget_1 = __webpack_require__(23);
	/**
	 * 滚动视图，同时支持PC和Mobile风格，通过dragToScroll和slideToScroll参数控制。
	 */
	var ScrollView = (function (_super) {
	    __extends(ScrollView, _super);
	    function ScrollView(type) {
	        _super.call(this, type ? type : ScrollView.TYPE);
	        this.isScrollView = true;
	    }
	    Object.defineProperty(ScrollView.prototype, "scrollBarOpacity", {
	        get: function () {
	            return this._scrollBarOpacity;
	        },
	        /*
	         * 滚动条的透明度。Mobile风格的滚动条，滚动完成时，以动画方式隐藏。
	         */
	        set: function (value) {
	            this._scrollBarOpacity = value;
	            this.requestRedraw();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "dragToScroll", {
	        get: function () {
	            return this._dragToScroll;
	        },
	        /**
	         * 启用滚动条拖动来实现滚动。
	         */
	        set: function (value) {
	            this._dragToScroll = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "slideToScroll", {
	        get: function () {
	            return this._slideToScroll;
	        },
	        /**
	         * 启用手势滑动来实现滚动。
	         */
	        set: function (value) {
	            this._slideToScroll = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "scrollBarStyle", {
	        get: function () {
	            return this._scrollBarStyle;
	        },
	        /**
	         * 滚动条的样式。
	         */
	        set: function (value) {
	            this._scrollBarStyle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 垂直滚动条是否可见。
	     */
	    ScrollView.prototype.isVScrollBarVisible = function () {
	        var visibility = this.scrollBarStyle.vBarVisibility;
	        switch (visibility) {
	            case ScrollerBarVisibility.INVISIBLE: {
	                return false;
	            }
	            case ScrollerBarVisibility.ALWAYS: {
	                return true;
	            }
	            default: {
	                return (this.h < this.contentH);
	            }
	        }
	    };
	    /**
	     * 水平滚动条是否可见。
	     */
	    ScrollView.prototype.isHScrollBarVisible = function () {
	        var visibility = this.scrollBarStyle.hBarVisibility;
	        switch (visibility) {
	            case ScrollerBarVisibility.INVISIBLE: {
	                return false;
	            }
	            case ScrollerBarVisibility.ALWAYS: {
	                return true;
	            }
	            default: {
	                return (this.w < this.contentW);
	            }
	        }
	    };
	    Object.defineProperty(ScrollView.prototype, "validOffsetX", {
	        /**
	         * 设置水平方向上的偏移，并确保其值的有些性。
	         */
	        set: function (value) {
	            this.setProp("ox", this.toValidOffsetX(value), true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "validOffsetY", {
	        /**
	         * 设置垂直方向上的偏移，并确保其值的有些性。
	         */
	        set: function (value) {
	            this.setProp("oy", this.toValidOffsetY(value), true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScrollView.prototype.toValidOffsetX = function (value) {
	        return Math.min(Math.max(0, value), Math.max(0, this._cw - this.w));
	    };
	    ScrollView.prototype.toValidOffsetY = function (value) {
	        return Math.min(Math.max(0, value), Math.max(0, this._ch - this.h));
	    };
	    Object.defineProperty(ScrollView.prototype, "offsetX", {
	        get: function () {
	            return this._ox;
	        },
	        /**
	         * 水平方向上的偏移。
	         */
	        set: function (value) {
	            this.setProp("ox", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "offsetY", {
	        get: function () {
	            return this._oy;
	        },
	        /**
	         * 垂直方向上的偏移。
	         */
	        set: function (value) {
	            this.setProp("oy", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "contentW", {
	        get: function () {
	            return this._cw;
	        },
	        /**
	         * 滚动视图所包含内容的宽度。
	         */
	        set: function (value) {
	            this.setProp("cw", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScrollView.prototype, "contentH", {
	        get: function () {
	            return this._ch;
	        },
	        /**
	         * 滚动视图所包含内容的高度。
	         */
	        set: function (value) {
	            this.setProp("ch", value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScrollView.prototype.selfHitTest = function (x, y, ctx) {
	        return _super.prototype.selfHitTest.call(this, x - this._ox, y - this._oy, ctx);
	    };
	    /*
	     * 在处理指针事件前，先加上滚动的偏移。
	     */
	    ScrollView.prototype.offsetPointerEvent = function (evt) {
	        evt.x += this._ox;
	        evt.y += this._oy;
	    };
	    /*
	     * 在处理指针事件后，再减去滚动的偏移。
	     */
	    ScrollView.prototype.unOffsetPointerEvent = function (evt) {
	        evt.x -= this._ox;
	        evt.y -= this._oy;
	    };
	    /*
	     * 把指针事件转换成touch，以便Scroller可以处理。
	     */
	    ScrollView.prototype.pointerEventToTouches = function (evt) {
	        var touch = this._touches[0];
	        touch.id = evt.id;
	        touch.pageX = evt.x;
	        touch.pageY = evt.y;
	        return this._touches;
	    };
	    /*
	     * 先处理滚动条的事件，再处理Scroller事件，最后发给子控件。
	     */
	    ScrollView.prototype.dispatchPointerDown = function (evt, ctx) {
	        this._pointerInBar = false;
	        if (this.dragToScroll) {
	            this._saveOX = this._ox;
	            this._saveOY = this._oy;
	            var win = this.win;
	            var p = this.eventPointToLocal(point_1.Point.point.copy(win.pointerPosition));
	            if (p.isInRect(this._vScrollBarRect)) {
	                if (p.isInRect(this._vScrollDraggerRect)) {
	                    this._pointerInVScrollDraggerRect = true;
	                }
	                else {
	                    if (p.y < this._vScrollDraggerRect.y) {
	                        this._pointerInVScrollBarRectUp = true;
	                    }
	                    else {
	                        this._pointerInVScrollBarRectDown = true;
	                    }
	                }
	                this._pointerInBar = true;
	            }
	            if (p.isInRect(this._hScrollBarRect)) {
	                if (p.isInRect(this._hScrollDraggerRect)) {
	                    this._pointerInHScrollDraggerRect = true;
	                }
	                else {
	                    if (p.x < this._hScrollDraggerRect.x) {
	                        this._pointerInHScrollBarRectLeft = true;
	                    }
	                    else {
	                        this._pointerInHScrollBarRectRight = true;
	                    }
	                }
	                this._pointerInBar = true;
	            }
	        }
	        if (this.slideToScroll) {
	            if (!this._pointerInBar) {
	                this._scrollBarOpacity = 1;
	                this.scroller.doTouchStart(this.pointerEventToTouches(evt), evt.timeStamp);
	            }
	        }
	        if (!this._pointerInBar) {
	            this.offsetPointerEvent(evt);
	            _super.prototype.dispatchPointerDown.call(this, evt, ctx);
	            this.unOffsetPointerEvent(evt);
	        }
	    };
	    ScrollView.prototype.dispatchPointerMove = function (evt, ctx) {
	        if (evt.pointerDown) {
	            var offsetX = this.offsetX;
	            var offsetY = this.offsetY;
	            if (this.dragToScroll) {
	                if (this._pointerInVScrollDraggerRect) {
	                    var dy = evt.y - evt.pointerDownY;
	                    offsetY = this._saveOY + (dy / this.h) * this._ch;
	                }
	                if (this._pointerInHScrollDraggerRect) {
	                    var dx = evt.x - evt.pointerDownX;
	                    offsetX = this._saveOX + (dx / this.w) * this._cw;
	                }
	            }
	            if (this.slideToScroll) {
	                if (!this._pointerInBar) {
	                    this.scroller.doTouchMove(this.pointerEventToTouches(evt), evt.timeStamp);
	                }
	                else {
	                    this.scroller.scrollTo(this.toValidOffsetX(offsetX), this.toValidOffsetY(offsetY));
	                }
	            }
	            else {
	                this.validOffsetX = offsetX;
	                this.validOffsetY = offsetY;
	            }
	        }
	        if (!this._pointerInBar) {
	            this.offsetPointerEvent(evt);
	            _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	            this.unOffsetPointerEvent(evt);
	        }
	        else {
	            this.dispatchEvent(this._scrollEvent.reset(Events.SCROLL, this, this.offsetX, this.offsetY));
	        }
	        this.requestRedraw();
	    };
	    ScrollView.prototype.dispatchPointerUp = function (evt) {
	        if (this.dragToScroll) {
	            if (this._pointerInVScrollBarRectUp) {
	                this.validOffsetY = this.offsetY - this.h;
	            }
	            else if (this._pointerInVScrollBarRectDown) {
	                this.validOffsetY = this.offsetY + this.h;
	            }
	            else if (this._pointerInHScrollBarRectLeft) {
	                this.validOffsetX = this.offsetX - this.w;
	            }
	            else if (this._pointerInHScrollBarRectRight) {
	                this.validOffsetX = this.offsetX + this.w;
	            }
	            this._pointerInVScrollBarRectUp = false;
	            this._pointerInVScrollBarRectDown = false;
	            this._pointerInHScrollBarRectLeft = false;
	            this._pointerInHScrollBarRectRight = false;
	            this._pointerInVScrollDraggerRect = false;
	            this._pointerInHScrollDraggerRect = false;
	        }
	        if (this.slideToScroll) {
	            if (!this._pointerInBar) {
	                this.scroller.doTouchEnd(evt.timeStamp);
	            }
	            else {
	                this.scroller.scrollTo(this.offsetX, this.offsetY);
	                this.handleScrollDone();
	            }
	        }
	        if (!this._pointerInBar) {
	            this.offsetPointerEvent(evt);
	            _super.prototype.dispatchPointerUp.call(this, evt);
	            this.unOffsetPointerEvent(evt);
	        }
	        else {
	            this.dispatchEvent(this._scrollEvent.reset(Events.SCROLL, this, this.offsetX, this.offsetY));
	        }
	        this._pointerInBar = false;
	    };
	    ScrollView.prototype.dispatchClick = function (evt) {
	        if (!this._pointerInBar) {
	            this.offsetPointerEvent(evt);
	            _super.prototype.dispatchClick.call(this, evt);
	            this.unOffsetPointerEvent(evt);
	        }
	    };
	    ScrollView.prototype.dispatchDblClick = function (evt) {
	        if (!this._pointerInBar) {
	            this.offsetPointerEvent(evt);
	            _super.prototype.dispatchDblClick.call(this, evt);
	            this.unOffsetPointerEvent(evt);
	        }
	    };
	    /*
	     * 更新Scroller的参数。
	     */
	    ScrollView.prototype.updateScrollerDimensions = function (w, h, contentW, contentH) {
	        if (this._slideToScroll) {
	            this.scroller.setDimensions(w, h, contentW, contentH);
	        }
	    };
	    Object.defineProperty(ScrollView.prototype, "scroller", {
	        get: function () {
	            return this._scroller;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScrollView.prototype.hideScrollBar = function () {
	        if (!this.dragToScroll) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ scrollBarOpacity: 0 }, 300).start();
	            tween.onComplete(function () {
	                this.scrollBarOpacity = 0;
	            });
	            this.requestRedraw();
	        }
	    };
	    ScrollView.prototype.handleScrolling = function (left, top) {
	        this.offsetX = left;
	        this.offsetY = top;
	        this.dispatchEvent(this._scrollEvent.reset(Events.SCROLL, this, left, top));
	    };
	    ScrollView.prototype.handleScrollDone = function () {
	        this.hideScrollBar();
	        this.dispatchEvent(this._scrollEvent.reset(Events.SCROLL_DONE, this, this.offsetX, this.offsetY));
	    };
	    ScrollView.prototype.initScroller = function (options) {
	        var _this = this;
	        var me = this;
	        options.scrollingComplete = function () {
	            me.handleScrollDone();
	        };
	        this._scroller = new scroller_1.Scroller(function (left, top) {
	            me.handleScrolling(left, top);
	        }, options);
	        this.on(Events.PROP_CHANGE, function (evt) {
	            var prop = evt.prop;
	            var value = evt.newValue;
	            if (prop === "w" || prop === "h" || prop === "cw" || prop === "ch") {
	                _this.updateScrollerDimensions(_this.w, _this.h, _this.contentW, _this.contentH);
	            }
	        });
	        this.updateScrollerDimensions(this.w, this.h, this.contentW, this.contentH);
	    };
	    /*
	     * 绘制垂直滚动条。
	     */
	    ScrollView.prototype.drawScrollBarV = function (ctx, hBarVisible) {
	        var w = this.w;
	        var h = this.h;
	        var options = this.scrollBarStyle;
	        var barY = 0;
	        var barH = h;
	        var barW = options.size;
	        var barX = w - barW;
	        var barColor = options.backGroundColor;
	        var r = options.roundRadius;
	        var draggerW = options.draggerSize;
	        var draggerH = Math.max(draggerW, Math.min(h, h * h / this.contentH));
	        var draggerX = barX + ((barW - draggerW) >> 1);
	        var draggerY = Math.min(h - draggerH, (this.offsetY / this.contentH) * h);
	        var draggerColor = options.foreGroundColor;
	        if (hBarVisible) {
	            draggerY = Math.min(draggerY, h - barW - draggerH);
	        }
	        var win = this.win;
	        if (this._pointerInVScrollDraggerRect) {
	            draggerColor = options.foreGroundOverColor;
	        }
	        this._vScrollBarRect.init(barX, barY, barW, barH);
	        this._vScrollDraggerRect.init(draggerX, draggerY, draggerW, draggerH);
	        graphics_1.Graphics.drawRect(ctx, barColor, null, 0, barX, barY, barW, barH);
	        graphics_1.Graphics.drawRoundRect(ctx, draggerColor, null, 0, draggerX, draggerY, draggerW, draggerH, r);
	        var lineColor = options.lineColor;
	        var lineWidth = options.lineWidth;
	        graphics_1.Graphics.drawLine(ctx, lineColor, lineWidth, barX, barY, barX, hBarVisible ? barH - barW : barH);
	    };
	    /*
	     * 绘制水平滚动条。
	     */
	    ScrollView.prototype.drawScrollBarH = function (ctx, vBarVisible) {
	        var w = this.w;
	        var h = this.h;
	        var options = this.scrollBarStyle;
	        var barX = 0;
	        var barW = w;
	        var barH = options.size;
	        var barY = h - barH;
	        var barColor = options.backGroundColor;
	        var r = options.roundRadius;
	        var draggerH = options.draggerSize;
	        var draggerW = Math.max(draggerH, Math.min(w, w * w / this.contentW));
	        var draggerY = barY + ((barH - draggerH) >> 1);
	        var draggerX = Math.min(w - draggerW, (this.offsetX / this.contentW) * w);
	        var draggerColor = options.foreGroundColor;
	        if (vBarVisible) {
	            draggerX = Math.min(draggerX, w - barH - draggerW);
	        }
	        var win = this.win;
	        if (this._pointerInHScrollDraggerRect) {
	            draggerColor = options.foreGroundOverColor;
	        }
	        this._hScrollBarRect.init(barX, barY, barW, barH);
	        this._hScrollDraggerRect.init(draggerX, draggerY, draggerW, draggerH);
	        graphics_1.Graphics.drawRect(ctx, barColor, null, 0, barX, barY, barW, barH);
	        graphics_1.Graphics.drawRoundRect(ctx, draggerColor, null, 0, draggerX, draggerY, draggerW, draggerH, r);
	        var lineColor = options.lineColor;
	        var lineWidth = options.lineWidth;
	        graphics_1.Graphics.drawLine(ctx, lineColor, lineWidth, barX, barY, vBarVisible ? barW - barH : barW, barY);
	    };
	    /*
	     * 绘制滚动条。
	     */
	    ScrollView.prototype.drawScrollBar = function (ctx) {
	        var hBarVisible = this.isHScrollBarVisible();
	        var vBarVisible = this.isVScrollBarVisible();
	        if (this._scrollBarOpacity > 0) {
	            var opacity = ctx.globalAlpha;
	            ctx.globalAlpha = this._scrollBarOpacity;
	            if (vBarVisible) {
	                this.drawScrollBarV(ctx, hBarVisible);
	            }
	            if (hBarVisible) {
	                this.drawScrollBarH(ctx, vBarVisible);
	            }
	            ctx.globalAlpha = opacity;
	        }
	    };
	    /*
	     * 绘制子控件。
	     */
	    ScrollView.prototype.doDrawChildren = function (ctx) {
	        _super.prototype.drawChildren.call(this, ctx);
	    };
	    ScrollView.prototype.beforeDrawChildren = function (ctx) {
	    };
	    ScrollView.prototype.afterDrawChildren = function (ctx) {
	    };
	    ScrollView.prototype.drawChildren = function (ctx) {
	        var ox = this._ox;
	        var oy = this._oy;
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var w = this.w - x - this.rightPadding;
	        var h = this.h - y - this.bottomPadding;
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(x, y, w, h);
	        ctx.clip();
	        this.beforeDrawChildren(ctx);
	        ctx.translate(-ox, -oy);
	        this.doDrawChildren(ctx);
	        ctx.restore();
	        this.afterDrawChildren(ctx);
	        this.drawScrollBar(ctx);
	        return this;
	    };
	    /**
	     * 滚动到指定的位置。
	     */
	    ScrollView.prototype.scrollTo = function (offsetX, offsetY, duration) {
	        if (duration > 0) {
	            var tween = new TWEEN.Tween(this);
	            tween.to({ offsetX: offsetX, offsetY: offsetY }, duration).start();
	            return tween;
	        }
	        else {
	            this.offsetX = offsetX;
	            this.offsetY = offsetY;
	            return null;
	        }
	    };
	    ScrollView.prototype.onWheel = function (evt) {
	        this.validOffsetY = this.offsetY - evt.delta / 10;
	        if (this.slideToScroll) {
	            this.scroller.scrollTo(this.offsetX, this.offsetY);
	            this.handleScrollDone();
	        }
	        else {
	            this.dispatchEvent(this._scrollEvent.reset(Events.SCROLL, this, this.offsetX, this.offsetY));
	        }
	    };
	    Object.defineProperty(ScrollView.prototype, "scrollerOptions", {
	        get: function () {
	            return this._scrollerOptions;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScrollView.prototype.getLayoutWidth = function () {
	        return this.w - this.leftPadding - this.rightPadding;
	    };
	    ScrollView.prototype.getLayoutHeight = function () {
	        return this.h - this.topPadding - this.bottomPadding;
	    };
	    ScrollView.prototype.getViewWidth = function () {
	        var w = this.clientW;
	        if (this.dragToScroll && this.isVScrollBarVisible()) {
	            w -= this._scrollBarStyle.size;
	        }
	        return w;
	    };
	    ScrollView.prototype.getViewHeight = function () {
	        var h = this.clientH;
	        if (this.dragToScroll && this.isHScrollBarVisible()) {
	            h -= this._scrollBarStyle.size;
	        }
	        return h;
	    };
	    ScrollView.prototype.getLayoutRect = function () {
	        var w = this.getLayoutWidth();
	        var h = this.getLayoutHeight();
	        if (this.dragToScroll) {
	            if (this.isVScrollBarVisible()) {
	                w -= this._scrollBarStyle.size;
	            }
	            if (this.isHScrollBarVisible()) {
	                h -= this._scrollBarStyle.size;
	            }
	        }
	        return this.layoutRect.init(this.leftPadding, this.topPadding, w, h);
	    };
	    ScrollView.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        this.initScroller(this._scrollerOptions);
	        this._scrollBarOpacity = this.dragToScroll ? 1 : 0;
	    };
	    ScrollView.prototype.onReset = function () {
	        var _this = this;
	        _super.prototype.onReset.call(this);
	        this._ox = 0;
	        this._oy = 0;
	        this._cw = 0;
	        this._ch = 0;
	        this._scrollerOptions = {
	            scrollingX: true,
	            scrollingY: true,
	            decelerationRate: 0.95,
	            penetrationAcceleration: 0.08
	        };
	        this._scroller = null;
	        this._scrollBarStyle = new ScrollBarStyle();
	        this._touches = [{ pageX: 0, pageY: 0, id: 0 }];
	        this._hScrollBarRect = rect_1.Rect.create(0, 0, 0, 0);
	        this._vScrollBarRect = rect_1.Rect.create(0, 0, 0, 0);
	        this._hScrollDraggerRect = rect_1.Rect.create(0, 0, 0, 0);
	        this._vScrollDraggerRect = rect_1.Rect.create(0, 0, 0, 0);
	        this.on(Events.WHEEL, function (evt) {
	            _this.onWheel(evt);
	        });
	        this._scrollEvent = Events.ScrollEvent.create();
	    };
	    ScrollView.prototype.getDefProps = function () {
	        return ScrollView.defProps;
	    };
	    ScrollView.create = function (options) {
	        return ScrollView.recycleBin.create(options);
	    };
	    ScrollView.defProps = Object.assign({}, widget_1.Widget.defProps, { _lp: 2, _tp: 2, _rp: 2, _bp: 2 });
	    ScrollView.TYPE = "scroll-view";
	    ScrollView.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ScrollView);
	    return ScrollView;
	}(widget_1.Widget));
	exports.ScrollView = ScrollView;
	;
	(function (ScrollerBarVisibility) {
	    ScrollerBarVisibility[ScrollerBarVisibility["INVISIBLE"] = 0] = "INVISIBLE";
	    ScrollerBarVisibility[ScrollerBarVisibility["AUTO"] = 1] = "AUTO";
	    ScrollerBarVisibility[ScrollerBarVisibility["ALWAYS"] = 2] = "ALWAYS";
	})(exports.ScrollerBarVisibility || (exports.ScrollerBarVisibility = {}));
	var ScrollerBarVisibility = exports.ScrollerBarVisibility;
	;
	var ScrollBarStyle = (function () {
	    function ScrollBarStyle() {
	        this.size = 12;
	        this.draggerSize = 8;
	        this.roundRadius = 4;
	        this.lineColor = "#E7E7E7";
	        this.lineColor = "#E0E0E0";
	        this.lineWidth = 0.5;
	        this.backGroundColor = "#FAFAFA";
	        this.foreGroundColor = "#c1c1c1";
	        this.foreGroundOverColor = "#818181";
	        this.hBarVisibility = ScrollerBarVisibility.AUTO;
	        this.vBarVisibility = ScrollerBarVisibility.AUTO;
	    }
	    return ScrollBarStyle;
	}());
	exports.ScrollBarStyle = ScrollBarStyle;
	;
	widget_factory_1.WidgetFactory.register(ScrollView.TYPE, ScrollView.create);


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	    if (true) {
	        // AMD
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(106), __webpack_require__(107)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // CommonJS
	        factory(exports, require('./lib/animate'), require('./lib/Scroller'));
	    }
	}(this, function (exports, animate, Scroller) {
	    exports.animate = animate;
	    exports.Scroller = Scroller;
	}));


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Scroller
	 * http://github.com/zynga/scroller
	 *
	 * Copyright 2011, Zynga Inc.
	 * Licensed under the MIT License.
	 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
	 *
	 * Based on the work of: Unify Project (unify-project.org)
	 * http://unify-project.org
	 * Copyright 2011, Deutsche Telekom AG
	 * License: MIT + Apache (V2)
	 */

	/**
	 * Generic animation class with support for dropped frames both optional easing and duration.
	 *
	 * Optional duration is useful when the lifetime is defined by another condition than time
	 * e.g. speed of an animating object, etc.
	 *
	 * Dropped frame logic allows to keep using the same updater logic independent from the actual
	 * rendering. This eases a lot of cases where it might be pretty complex to break down a state
	 * based on the pure time difference.
	 */
	(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // CommonJS
	        factory(exports);
	    } else {
	        // Browser globals
	        factory((root.animate = {}));
	    }
	}(this, function (exports) {
	    var global = typeof window === 'undefined' ? this : window
	    var time = Date.now || function () {
	        return +new Date();
	    };
	    var desiredFrames = 60;
	    var millisecondsPerSecond = 1000;
	    var running = {};
	    var counter = 1;

	    /**
	     * A requestAnimationFrame wrapper / polyfill.
	     *
	     * @param callback {Function} The callback to be invoked before the next repaint.
	     * @param root {HTMLElement} The root element for the repaint
	     */
	    exports.requestAnimationFrame = (function () {
	        // Check for request animation Frame support
	        var requestFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame;
	        var isNative = !!requestFrame;

	        if (requestFrame && !/requestAnimationFrame\(\)\s*\{\s*\[native code\]\s*\}/i.test(requestFrame.toString())) {
	            isNative = false;
	        }

	        if (isNative) {
	            return function (callback, root) {
	                requestFrame(callback, root);
	            };
	        }

	        var TARGET_FPS = 60;
	        var requests = {};
	        var requestCount = 0;
	        var rafHandle = 1;
	        var intervalHandle = null;
	        var lastActive = +new Date();

	        return function (callback, root) {
	            var callbackHandle = rafHandle++;

	            // Store callback
	            requests[callbackHandle] = callback;
	            requestCount++;

	            // Create timeout at first request
	            if (intervalHandle === null) {

	                intervalHandle = setInterval(function () {

	                    var time = +new Date();
	                    var currentRequests = requests;

	                    // Reset data structure before executing callbacks
	                    requests = {};
	                    requestCount = 0;

	                    for(var key in currentRequests) {
	                        if (currentRequests.hasOwnProperty(key)) {
	                            currentRequests[key](time);
	                            lastActive = time;
	                        }
	                    }

	                    // Disable the timeout when nothing happens for a certain
	                    // period of time
	                    if (time - lastActive > 2500) {
	                        clearInterval(intervalHandle);
	                        intervalHandle = null;
	                    }

	                }, 1000 / TARGET_FPS);
	            }

	            return callbackHandle;
	        };

	    })();

	    /**
	     * Stops the given animation.
	     *
	     * @param id {Integer} Unique animation ID
	     * @return {Boolean} Whether the animation was stopped (aka, was running before)
	     */
	    exports.stop = function (id) {
	        var cleared = (running[id] !== null);
	        if (cleared) {
	            running[id] = null;
	        }

	        return cleared;
	    };


	    /**
	     * Whether the given animation is still running.
	     *
	     * @param id {Integer} Unique animation ID
	     * @return {Boolean} Whether the animation is still running
	     */
	    exports.isRunning = function (id) {
	        return running[id] !== null;
	    };


	    /**
	     * Start the animation.
	     *
	     * @param stepCallback {Function} Pointer to function which is executed on every step.
	     *   Signature of the method should be `function(percent, now, virtual) { return continueWithAnimation; }`
	     * @param verifyCallback {Function} Executed before every animation step.
	     *   Signature of the method should be `function() { return continueWithAnimation; }`
	     * @param completedCallback {Function}
	     *   Signature of the method should be `function(droppedFrames, finishedAnimation, optional wasFinished) {}`
	     * @param duration {Integer} Milliseconds to run the animation
	     * @param easingMethod {Function} Pointer to easing function
	     *   Signature of the method should be `function(percent) { return modifiedValue; }`
	     * @param root {Element} Render root. Used for internal usage of requestAnimationFrame.
	     * @return {Integer} Identifier of animation. Can be used to stop it any time.
	     */
	    exports.start = function (stepCallback, verifyCallback, completedCallback, duration, easingMethod, root) {
	        var start = time();
	        var lastFrame = start;
	        var percent = 0;
	        var dropCounter = 0;
	        var id = counter++;

	        // Compacting running db automatically every few new animations
	        if (id % 20 === 0) {
	            var newRunning = {};
	            for (var usedId in running) {
	                newRunning[usedId] = true;
	            }
	            running = newRunning;
	        }

	        // This is the internal step method which is called every few milliseconds
	        var step = function (virtual) {

	            // Normalize virtual value
	            var render = virtual !== true;

	            // Get current time
	            var now = time();

	            // Verification is executed before next animation step
	            if (!running[id] || (verifyCallback && !verifyCallback(id))) {

	                running[id] = null;
	                completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, false);
	                return;

	            }

	            // For the current rendering to apply let's update omitted steps in memory.
	            // This is important to bring internal state variables up-to-date with progress in time.
	            if (render) {

	                var droppedFrames = Math.round((now - lastFrame) / (millisecondsPerSecond / desiredFrames)) - 1;
	                for (var j = 0; j < Math.min(droppedFrames, 4); j++) {
	                    step(true);
	                    dropCounter++;
	                }

	            }

	            // Compute percent value
	            if (duration) {
	                percent = (now - start) / duration;
	                if (percent > 1) {
	                    percent = 1;
	                }
	            }

	            // Execute step callback, then...
	            var value = easingMethod ? easingMethod(percent) : percent;
	            if ((stepCallback(value, now, render) === false || percent === 1) && render) {
	                running[id] = null;
	                completedCallback(desiredFrames - (dropCounter / ((now - start) / millisecondsPerSecond)), id, percent === 1 || duration === undefined);
	            } else if (render) {
	                lastFrame = now;
	                exports.requestAnimationFrame(step, root);
	            }
	        };

	        // Mark as running
	        running[id] = true;

	        // Init first step
	        exports.requestAnimationFrame(step, root);

	        // Return unique animation ID
	        return id;
	    };
	}));


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Scroller
	 * http://github.com/zynga/scroller
	 *
	 * Copyright 2011, Zynga Inc.
	 * Licensed under the MIT License.
	 * https://raw.github.com/zynga/scroller/master/MIT-LICENSE.txt
	 *
	 * Based on the work of: Unify Project (unify-project.org)
	 * http://unify-project.org
	 * Copyright 2011, Deutsche Telekom AG
	 * License: MIT + Apache (V2)
	 */

	(function (root, factory) {
	    if (true) {
	        // AMD
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(106)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module === 'object') {
	        // CommonJS
	        module.exports = factory(require('./animate'));
	    } else {
	        // Browser globals
	        root.Scroller = factory(root.animate);
	    }
	}(this, function (animate) {
	    var NOOP = function () {};

	    /**
	     * A pure logic 'component' for 'virtual' scrolling/zooming.
	     */
	    var Scroller = function (callback, options) {
	        this.__callback = callback;

	        this.options = {
	            /** Enable scrolling on x-axis */
	            scrollingX: true,

	            /** Enable scrolling on y-axis */
	            scrollingY: true,

	            /** Enable animations for deceleration, snap back, zooming and scrolling */
	            animating: true,

	            /** duration for animations triggered by scrollTo/zoomTo */
	            animationDuration: 250,

	            /** Enable bouncing (content can be slowly moved outside and jumps back after releasing) */
	            bouncing: true,

	            /** Enable locking to the main axis if user moves only slightly on one of them at start */
	            locking: true,

	            /** Enable pagination mode (switching between full page content panes) */
	            paging: false,

	            /** Enable snapping of content to a configured pixel grid */
	            snapping: false,

	            /** Enable zooming of content via API, fingers and mouse wheel */
	            zooming: false,

	            /** Minimum zoom level */
	            minZoom: 0.5,

	            /** Maximum zoom level */
	            maxZoom: 3,

	            /** Multiply or decrease scrolling speed **/
	            speedMultiplier: 1,

	            /** Callback that is fired on the later of touch end or deceleration end,
	                provided that another scrolling action has not begun. Used to know
	                when to fade out a scrollbar. */
	            scrollingComplete: NOOP,

	            /** This configures the amount of change applied to deceleration when reaching boundaries  **/
	            penetrationDeceleration : 0.03,

	            /** This configures the amount of change applied to acceleration when reaching boundaries  **/
	            penetrationAcceleration : 0.08
	        };

	        for (var key in options) {
	            this.options[key] = options[key];
	        }
	    };


	    // Easing Equations (c) 2003 Robert Penner, all rights reserved.
	    // Open source under the BSD License.

	    /**
	     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
	     **/
	    var easeOutCubic = function (pos) {
	        return (Math.pow((pos - 1), 3) + 1);
	    };

	    /**
	     * @param pos {Number} position between 0 (start of effect) and 1 (end of effect)
	     **/
	    var easeInOutCubic = function (pos) {
	        if ((pos /= 0.5) < 1) {
	            return 0.5 * Math.pow(pos, 3);
	        }

	        return 0.5 * (Math.pow((pos - 2), 3) + 2);
	    };


	    Scroller.prototype = {

	        /*
	          ---------------------------------------------------------------------------
	          INTERNAL FIELDS :: STATUS
	          ---------------------------------------------------------------------------
	        */

	        /** {Boolean} Whether only a single finger is used in touch handling */
	        __isSingleTouch: false,

	        /** {Boolean} Whether a touch event sequence is in progress */
	        __isTracking: false,

	        /** {Boolean} Whether a deceleration animation went to completion. */
	        __didDecelerationComplete: false,

	        /**
	         * {Boolean} Whether a gesture zoom/rotate event is in progress. Activates when
	         * a gesturestart event happens. This has higher priority than dragging.
	         */
	        __isGesturing: false,

	        /**
	         * {Boolean} Whether the user has moved by such a distance that we have enabled
	         * dragging mode. Hint: It's only enabled after some pixels of movement to
	         * not interrupt with clicks etc.
	         */
	        __isDragging: false,

	        /**
	         * {Boolean} Not touching and dragging anymore, and smoothly animating the
	         * touch sequence using deceleration.
	         */
	        __isDecelerating: false,

	        /**
	         * {Boolean} Smoothly animating the currently configured change
	         */
	        __isAnimating: false,



	        /*
	          ---------------------------------------------------------------------------
	          INTERNAL FIELDS :: DIMENSIONS
	          ---------------------------------------------------------------------------
	        */

	        /** {Integer} Viewport left boundary */
	        __clientLeft: 0,

	        /** {Integer} Viewport right boundary */
	        __clientTop: 0,

	        /** {Integer} Viewport width */
	        __clientWidth: 0,

	        /** {Integer} Viewport height */
	        __clientHeight: 0,

	        /** {Integer} Full content's width */
	        __contentWidth: 0,

	        /** {Integer} Full content's height */
	        __contentHeight: 0,

	        /** {Integer} Snapping width for content */
	        __snapWidth: 100,

	        /** {Integer} Snapping height for content */
	        __snapHeight: 100,

	        /** {Number} Zoom level */
	        __zoomLevel: 1,

	        /** {Number} Scroll position on x-axis */
	        __scrollLeft: 0,

	        /** {Number} Scroll position on y-axis */
	        __scrollTop: 0,

	        /** {Integer} Maximum allowed scroll position on x-axis */
	        __maxScrollLeft: 0,

	        /** {Integer} Maximum allowed scroll position on y-axis */
	        __maxScrollTop: 0,

	        /* {Number} Scheduled left position (final position when animating) */
	        __scheduledLeft: 0,

	        /* {Number} Scheduled top position (final position when animating) */
	        __scheduledTop: 0,

	        /* {Number} Scheduled zoom level (final scale when animating) */
	        __scheduledZoom: 0,



	        /*
	          ---------------------------------------------------------------------------
	          INTERNAL FIELDS :: LAST POSITIONS
	          ---------------------------------------------------------------------------
	        */

	        /** {Number} Left position of finger at start */
	        __lastTouchLeft: null,

	        /** {Number} Top position of finger at start */
	        __lastTouchTop: null,

	        /** {Date} Timestamp of last move of finger. Used to limit tracking range for deceleration speed. */
	        __lastTouchMove: null,

	        /** {Array} List of positions, uses three indexes for each state: left, top, timestamp */
	        __positions: null,



	        /*
	          ---------------------------------------------------------------------------
	          INTERNAL FIELDS :: DECELERATION SUPPORT
	          ---------------------------------------------------------------------------
	        */

	        /** {Integer} Minimum left scroll position during deceleration */
	        __minDecelerationScrollLeft: null,

	        /** {Integer} Minimum top scroll position during deceleration */
	        __minDecelerationScrollTop: null,

	        /** {Integer} Maximum left scroll position during deceleration */
	        __maxDecelerationScrollLeft: null,

	        /** {Integer} Maximum top scroll position during deceleration */
	        __maxDecelerationScrollTop: null,

	        /** {Number} Current factor to modify horizontal scroll position with on every step */
	        __decelerationVelocityX: null,

	        /** {Number} Current factor to modify vertical scroll position with on every step */
	        __decelerationVelocityY: null,



	        /*
	          ---------------------------------------------------------------------------
	          PUBLIC API
	          ---------------------------------------------------------------------------
	        */

	        /**
	         * Configures the dimensions of the client (outer) and content (inner) elements.
	         * Requires the available space for the outer element and the outer size of the inner element.
	         * All values which are falsy (null or zero etc.) are ignored and the old value is kept.
	         *
	         * @param clientWidth {Integer ? null} Inner width of outer element
	         * @param clientHeight {Integer ? null} Inner height of outer element
	         * @param contentWidth {Integer ? null} Outer width of inner element
	         * @param contentHeight {Integer ? null} Outer height of inner element
	         */
	        setDimensions : function (clientWidth, clientHeight, contentWidth, contentHeight) {
	            // Only update values which are defined
	            if (clientWidth !== null) {
	                this.__clientWidth = clientWidth;
	            }

	            if (clientHeight !== null) {
	                this.__clientHeight = clientHeight;
	            }

	            if (contentWidth !== null) {
	                this.__contentWidth = contentWidth;
	            }

	            if (contentHeight !== null) {
	                this.__contentHeight = contentHeight;
	            }

	            // Refresh maximums
	            this.__computeScrollMax();

	            // Refresh scroll position
	            this.scrollTo(this.__scrollLeft, this.__scrollTop, true);
	        },


	        /**
	         * Sets the client coordinates in relation to the document.
	         *
	         * @param left {Integer ? 0} Left position of outer element
	         * @param top {Integer ? 0} Top position of outer element
	         */
	        setPosition : function (left, top) {
	            this.__clientLeft = left || 0;
	            this.__clientTop = top || 0;
	        },


	        /**
	         * Configures the snapping (when snapping is active)
	         *
	         * @param width {Integer} Snapping width
	         * @param height {Integer} Snapping height
	         */
	        setSnapSize : function (width, height) {
	            this.__snapWidth = width;
	            this.__snapHeight = height;
	        },


	        /**
	         * Returns the scroll position and zooming values
	         *
	         * @return {Map} `left` and `top` scroll position and `zoom` level
	         */
	        getValues : function () {
	            return {
	                left: this.__scrollLeft,
	                top: this.__scrollTop,
	                right: this.__scrollLeft + this.__clientWidth/this.__zoomLevel,
	                bottom: this.__scrollTop + this.__clientHeight/this.__zoomLevel,
	                zoom: this.__zoomLevel
	            };
	        },


	        /**
	         * Get point in in content space from scroll coordinates.
	         */
	        getPoint : function (scrollLeft, scrollTop) {
	            var values = this.getValues();

	            return {
	                left : scrollLeft / values.zoom,
	                top : scrollTop / values.zoom
	            };
	        },


	        /**
	         * Returns the maximum scroll values
	         *
	         * @return {Map} `left` and `top` maximum scroll values
	         */
	        getScrollMax : function () {
	            return {
	                left: this.__maxScrollLeft,
	                top: this.__maxScrollTop
	            };
	        },


	        /**
	         * Zooms to the given level. Supports optional animation. Zooms
	         * the center when no coordinates are given.
	         *
	         * @param level {Number} Level to zoom to
	         * @param isAnimated {Boolean ? false} Whether to use animation
	         * @param fixedLeft {Number ? undefined} Stationary point's left coordinate (vector in client space)
	         * @param fixedTop {Number ? undefined} Stationary point's top coordinate (vector in client space)
	         * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
	         */
	        zoomTo : function (level, isAnimated, fixedLeft, fixedTop, callback) {
	            if (!this.options.zooming) {
	                throw new Error("Zooming is not enabled!");
	            }

	            // Add callback if exists
	            if(callback) {
	                this.__zoomComplete = callback;
	            }

	            // Stop deceleration
	            if (this.__isDecelerating) {
	                animate.stop(this.__isDecelerating);
	                this.__isDecelerating = false;
	            }

	            var oldLevel = this.__zoomLevel;

	            // Normalize fixed point to center of viewport if not defined
	            if (fixedLeft === undefined) {
	                fixedLeft = this.__clientWidth / 2;
	            }

	            if (fixedTop === undefined) {
	                fixedTop = this.__clientHeight / 2;
	            }

	            // Limit level according to configuration
	            level = Math.max(Math.min(level, this.options.maxZoom), this.options.minZoom);

	            // Recompute maximum values while temporary tweaking maximum scroll ranges
	            this.__computeScrollMax(level);

	            // Recompute left and top scroll positions based on new zoom level.
	            // Choosing the new viewport so that the origin's position remains
	            // fixed, we have central dilation about the origin.
	            // * Fixed point, $F$, remains stationary in content space and in the
	            // viewport.
	            // * Initial scroll position, $S_i$, in content space.
	            // * Final scroll position, $S_f$, in content space.
	            // * Initial scaling factor, $k_i$.
	            // * Final scaling factor, $k_f$.
	            //
	            // * $S_i \mapsto S_f$.
	            // * $(S_i - F) k_i = (S_f - F) k_f$.
	            // * $(S_i - F) k_i/k_f = (S_f - F)$.
	            // * $S_f = F + (S_i - F) k_i/k_f$.
	            //
	            // Fixed point location, $\vector{f} = (F - S_i) k_i$.
	            // * $F = S_i + \vector{f}/k_i$.
	            // * $S_f = S_i + \vector{f}/k_i + (S_i - S_i - \vector{f}/k_i) k_i/k_f$.
	            // * $S_f = S_i + \vector{f}/k_i - \vector{f}/k_f$.
	            // * $S_f k_f = S_i k_f + (k_f/k_i - 1)\vector{f}$.
	            // * $S_f k_f = (k_f/k_i)(S_i k_i) + (k_f/k_i - 1) \vector{f}$.
	            var k = level / oldLevel;
	            var left = k*(this.__scrollLeft + fixedLeft) - fixedLeft;
	            var top = k*(this.__scrollTop + fixedTop) - fixedTop;

	            // Limit x-axis
	            if (left > this.__maxScrollLeft) {
	                left = this.__maxScrollLeft;
	            } else if (left < 0) {
	                left = 0;
	            }

	            // Limit y-axis
	            if (top > this.__maxScrollTop) {
	                top = this.__maxScrollTop;
	            } else if (top < 0) {
	                top = 0;
	            }

	            // Push values out
	            this.__publish(left, top, level, isAnimated);
	        },


	        /**
	         * Zooms the content by the given factor.
	         *
	         * @param factor {Number} Zoom by given factor
	         * @param isAnimated {Boolean ? false} Whether to use animation
	         * @param originLeft {Number ? 0} Zoom in at given left coordinate
	         * @param originTop {Number ? 0} Zoom in at given top coordinate
	         * @param callback {Function ? null} A callback that gets fired when the zoom is complete.
	         */
	        zoomBy : function (factor, isAnimated, originLeft, originTop, callback) {
	            this.zoomTo(this.__zoomLevel * factor, isAnimated, originLeft, originTop, callback);
	        },


	        /**
	         * Scrolls to the given position. Respect limitations and snapping automatically.
	         *
	         * @param left {Number?null} Horizontal scroll position, keeps current if value is <code>null</code>
	         * @param top {Number?null} Vertical scroll position, keeps current if value is <code>null</code>
	         * @param isAnimated {Boolean?false} Whether the scrolling should happen using an animation
	         * @param zoom {Number} [1.0] Zoom level to go to
	         */
	        scrollTo : function (left, top, isAnimated, zoom) {
	            // Stop deceleration
	            if (this.__isDecelerating) {
	                animate.stop(this.__isDecelerating);
	                this.__isDecelerating = false;
	            }

	            // Correct coordinates based on new zoom level
	            if (zoom !== undefined && zoom !== this.__zoomLevel) {
	                if (!this.options.zooming) {
	                    throw new Error("Zooming is not enabled!");
	                }

	                left *= zoom;
	                top *= zoom;

	                // Recompute maximum values while temporary tweaking maximum scroll ranges
	                this.__computeScrollMax(zoom);
	            } else {
	                // Keep zoom when not defined
	                zoom = this.__zoomLevel;
	            }

	            if (!this.options.scrollingX) {
	                left = this.__scrollLeft;
	            } else {
	                if (this.options.paging) {
	                    left = Math.round(left / this.__clientWidth) * this.__clientWidth;
	                } else if (this.options.snapping) {
	                    left = Math.round(left / this.__snapWidth) * this.__snapWidth;
	                }
	            }

	            if (!this.options.scrollingY) {
	                top = this.__scrollTop;
	            } else {
	                if (this.options.paging) {
	                    top = Math.round(top / this.__clientHeight) * this.__clientHeight;
	                } else if (this.options.snapping) {
	                    top = Math.round(top / this.__snapHeight) * this.__snapHeight;
	                }
	            }

	            // Limit for allowed ranges
	            left = Math.max(Math.min(this.__maxScrollLeft, left), 0);
	            top = Math.max(Math.min(this.__maxScrollTop, top), 0);

	            // Don't animate when no change detected, still call publish to make sure
	            // that rendered position is really in-sync with internal data
	            if (left === this.__scrollLeft && top === this.__scrollTop) {
	                isAnimated = false;
	            }

	            // Publish new values
	            this.__publish(left, top, zoom, isAnimated);
	        },


	        /**
	         * Scroll by the given offset
	         *
	         * @param left {Number ? 0} Scroll x-axis by given offset
	         * @param top {Number ? 0} Scroll x-axis by given offset
	         * @param isAnimated {Boolean ? false} Whether to animate the given change
	         */
	        scrollBy : function (left, top, isAnimated) {
	            var startLeft = this.__isAnimating ? this.__scheduledLeft : this.__scrollLeft;
	            var startTop = this.__isAnimating ? this.__scheduledTop : this.__scrollTop;

	            this.scrollTo(startLeft + (left || 0), startTop + (top || 0), isAnimated);
	        },


	        /*
	          ---------------------------------------------------------------------------
	          EVENT CALLBACKS
	          ---------------------------------------------------------------------------
	        */

	        /**
	         * Mouse wheel handler for zooming support
	         */
	        doMouseZoom : function (wheelDelta, timeStamp, pageX, pageY) {
	            var change = wheelDelta > 0 ? 0.97 : 1.03;

	            return this.zoomTo(this.__zoomLevel * change, false, pageX - this.__clientLeft, pageY - this.__clientTop);
	        },


	        /**
	         * Touch start handler for scrolling support
	         */
	        doTouchStart : function (touches, timeStamp) {
	            // Array-like check is enough here
	            if (touches.length === undefined) {
	                throw new Error("Invalid touch list: " + touches);
	            }

	            if (timeStamp instanceof Date) {
	                timeStamp = timeStamp.valueOf();
	            }
	            if (typeof timeStamp !== "number") {
	                throw new Error("Invalid timestamp value: " + timeStamp);
	            }

	            // Reset interruptedAnimation flag
	            this.__interruptedAnimation = true;

	            // Stop deceleration
	            if (this.__isDecelerating) {
	                animate.stop(this.__isDecelerating);
	                this.__isDecelerating = false;
	                this.__interruptedAnimation = true;
	            }

	            // Stop animation
	            if (this.__isAnimating) {
	                animate.stop(this.__isAnimating);
	                this.__isAnimating = false;
	                this.__interruptedAnimation = true;
	            }

	            // Use center point when dealing with two fingers
	            var currentTouchLeft, currentTouchTop;
	            var isSingleTouch = touches.length === 1;
	            if (isSingleTouch) {
	                currentTouchLeft = touches[0].pageX;
	                currentTouchTop = touches[0].pageY;
	            } else {
	                currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
	                currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
	            }

	            // Store initial positions
	            this.__initialTouchLeft = currentTouchLeft;
	            this.__initialTouchTop = currentTouchTop;

	            // Store current zoom level
	            this.__zoomLevelStart = this.__zoomLevel;

	            // Store initial touch positions
	            this.__lastTouchLeft = currentTouchLeft;
	            this.__lastTouchTop = currentTouchTop;

	            // Store initial move time stamp
	            this.__lastTouchMove = timeStamp;

	            // Reset initial scale
	            this.__lastScale = 1;

	            // Reset locking flags
	            this.__enableScrollX = !isSingleTouch && this.options.scrollingX;
	            this.__enableScrollY = !isSingleTouch && this.options.scrollingY;

	            // Reset tracking flag
	            this.__isTracking = true;

	            // Reset deceleration complete flag
	            this.__didDecelerationComplete = false;

	            // Dragging starts directly with two fingers, otherwise lazy with an offset
	            this.__isDragging = !isSingleTouch;

	            // Some features are disabled in multi touch scenarios
	            this.__isSingleTouch = isSingleTouch;

	            // Clearing data structure
	            this.__positions = [];
	        },


	        /**
	         * Touch move handler for scrolling support
	         * @param {Number} [1.0] scale - ....
	         */
	        doTouchMove : function (touches, timeStamp, scale) {
	            // Array-like check is enough here
	            if (touches.length === undefined) {
	                throw new Error("Invalid touch list: " + touches);
	            }

	            if (timeStamp instanceof Date) {
	                timeStamp = timeStamp.valueOf();
	            }
	            if (typeof timeStamp !== "number") {
	                throw new Error("Invalid timestamp value: " + timeStamp);
	            }

	            // Ignore event when tracking is not enabled (event might be outside of element)
	            if (!this.__isTracking) {
	                return;
	            }

	            var currentTouchLeft, currentTouchTop;

	            // Compute move based around of center of fingers
	            if (touches.length === 2) {
	                currentTouchLeft = Math.abs(touches[0].pageX + touches[1].pageX) / 2;
	                currentTouchTop = Math.abs(touches[0].pageY + touches[1].pageY) / 2;
	            } else {
	                currentTouchLeft = touches[0].pageX;
	                currentTouchTop = touches[0].pageY;
	            }

	            var positions = this.__positions;

	            // Are we already is dragging mode?
	            if (this.__isDragging) {
	                // Compute move distance
	                var moveX = currentTouchLeft - this.__lastTouchLeft;
	                var moveY = currentTouchTop - this.__lastTouchTop;

	                // Read previous scroll position and zooming
	                var scrollLeft = this.__scrollLeft;
	                var scrollTop = this.__scrollTop;
	                var level = this.__zoomLevel;

	                // Work with scaling
	                if (scale !== undefined && this.options.zooming) {
	                    var oldLevel = level;

	                    // Recompute level based on previous scale and new scale
	                    level = level / this.__lastScale * scale;

	                    // Limit level according to configuration
	                    level = Math.max(Math.min(level, this.options.maxZoom), this.options.minZoom);

	                    // Only do further compution when change happened
	                    if (oldLevel !== level) {
	                        // Compute relative event position to container
	                        var currentTouchLeftRel = currentTouchLeft - this.__clientLeft;
	                        var currentTouchTopRel = currentTouchTop - this.__clientTop;

	                        // Recompute left and top coordinates based on new zoom level
	                        scrollLeft = ((currentTouchLeftRel + scrollLeft) * level / oldLevel) - currentTouchLeftRel;
	                        scrollTop = ((currentTouchTopRel + scrollTop) * level / oldLevel) - currentTouchTopRel;

	                        // Recompute max scroll values
	                        this.__computeScrollMax(level);
	                    }
	                }

	                if (this.__enableScrollX) {
	                    scrollLeft -= moveX * this.options.speedMultiplier;
	                    var maxScrollLeft = this.__maxScrollLeft;

	                    if (scrollLeft > maxScrollLeft || scrollLeft < 0) {
	                        // Slow down on the edges
	                        if (this.options.bouncing) {
	                            scrollLeft += (moveX / 2  * this.options.speedMultiplier);
	                        } else if (scrollLeft > maxScrollLeft) {
	                            scrollLeft = maxScrollLeft;
	                        } else {
	                            scrollLeft = 0;
	                        }
	                    }
	                }

	                // Compute new vertical scroll position
	                if (this.__enableScrollY) {
	                    scrollTop -= moveY * this.options.speedMultiplier;
	                    var maxScrollTop = this.__maxScrollTop;

	                    if (scrollTop > maxScrollTop || scrollTop < 0) {
	                        // Slow down on the edges
	                        if (this.options.bouncing) {
	                            scrollTop += (moveY / 2 * this.options.speedMultiplier);
	                        } else if (scrollTop > maxScrollTop) {
	                            scrollTop = maxScrollTop;
	                        } else {
	                            scrollTop = 0;
	                        }
	                    }
	                }

	                // Keep list from growing infinitely (holding min 10, max 20 measure points)
	                if (positions.length > 60) {
	                    positions.splice(0, 30);
	                }

	                // Track scroll movement for decleration
	                positions.push(scrollLeft, scrollTop, timeStamp);

	                // Sync scroll position
	                this.__publish(scrollLeft, scrollTop, level);

	                // Otherwise figure out whether we are switching into dragging mode now.
	            } else {
	                var minimumTrackingForScroll = this.options.locking ? 3 : 0;
	                var minimumTrackingForDrag = 5;

	                var distanceX = Math.abs(currentTouchLeft - this.__initialTouchLeft);
	                var distanceY = Math.abs(currentTouchTop - this.__initialTouchTop);

	                this.__enableScrollX = this.options.scrollingX && distanceX >= minimumTrackingForScroll;
	                this.__enableScrollY = this.options.scrollingY && distanceY >= minimumTrackingForScroll;

	                positions.push(this.__scrollLeft, this.__scrollTop, timeStamp);

	                this.__isDragging = (this.__enableScrollX || this.__enableScrollY) && (distanceX >= minimumTrackingForDrag || distanceY >= minimumTrackingForDrag);
	                if (this.__isDragging) {
	                    this.__interruptedAnimation = false;
	                }
	            }

	            // Update last touch positions and time stamp for next event
	            this.__lastTouchLeft = currentTouchLeft;
	            this.__lastTouchTop = currentTouchTop;
	            this.__lastTouchMove = timeStamp;
	            this.__lastScale = scale;
	        },


	        /**
	         * Touch end handler for scrolling support
	         */
	        doTouchEnd : function (timeStamp) {
	            if (timeStamp instanceof Date) {
	                timeStamp = timeStamp.valueOf();
	            }
	            if (typeof timeStamp !== "number") {
	                throw new Error("Invalid timestamp value: " + timeStamp);
	            }

	            // Ignore event when tracking is not enabled (no touchstart event on element)
	            // This is required as this listener ('touchmove') sits on the document and not on the element itself.
	            if (!this.__isTracking) {
	                return;
	            }

	            // Not touching anymore (when two finger hit the screen there are two touch end events)
	            this.__isTracking = false;

	            // Be sure to reset the dragging flag now. Here we also detect whether
	            // the finger has moved fast enough to switch into a deceleration animation.
	            if (this.__isDragging) {
	                // Reset dragging flag
	                this.__isDragging = false;

	                // Start deceleration
	                // Verify that the last move detected was in some relevant time frame
	                if (this.__isSingleTouch && this.options.animating && (timeStamp - this.__lastTouchMove) <= 100) {
	                    // Then figure out what the scroll position was about 100ms ago
	                    var positions = this.__positions;
	                    var endPos = positions.length - 1;
	                    var startPos = endPos;

	                    // Move pointer to position measured 100ms ago
	                    for (var i = endPos; i > 0 && positions[i] > (this.__lastTouchMove - 100); i -= 3) {
	                        startPos = i;
	                    }

	                    // If start and stop position is identical in a 100ms timeframe,
	                    // we cannot compute any useful deceleration.
	                    if (startPos !== endPos) {
	                        // Compute relative movement between these two points
	                        var timeOffset = positions[endPos] - positions[startPos];
	                        var movedLeft = this.__scrollLeft - positions[startPos - 2];
	                        var movedTop = this.__scrollTop - positions[startPos - 1];

	                        // Based on 50ms compute the movement to apply for each render step
	                        this.__decelerationVelocityX = movedLeft / timeOffset * (1000 / 60);
	                        this.__decelerationVelocityY = movedTop / timeOffset * (1000 / 60);

	                        // How much velocity is required to start the deceleration
	                        var minVelocityToStartDeceleration = this.options.paging || this.options.snapping ? 4 : 1;

	                        // Verify that we have enough velocity to start deceleration
	                        if (Math.abs(this.__decelerationVelocityX) > minVelocityToStartDeceleration || Math.abs(this.__decelerationVelocityY) > minVelocityToStartDeceleration) {
	                            this.__startDeceleration(timeStamp);
	                        }
	                    } else {
	                        this.options.scrollingComplete();
	                    }
	                } else if ((timeStamp - this.__lastTouchMove) > 100) {
	                    this.options.scrollingComplete();
	                }
	            }

	            // If this was a slower move it is per default non decelerated, but this
	            // still means that we want snap back to the bounds which is done here.
	            // This is placed outside the condition above to improve edge case stability
	            // e.g. touchend fired without enabled dragging. This should normally do not
	            // have modified the scroll positions or even showed the scrollbars though.
	            if (!this.__isDecelerating) {
	                if (this.__interruptedAnimation || this.__isDragging) {
	                    this.options.scrollingComplete();
	                }
	                this.scrollTo(this.__scrollLeft, this.__scrollTop, true, this.__zoomLevel);
	            }

	            // Fully cleanup list
	            this.__positions.length = 0;
	        },



	        /*
	          ---------------------------------------------------------------------------
	          PRIVATE API
	          ---------------------------------------------------------------------------
	        */

	        /**
	         * Applies the scroll position to the content element
	         *
	         * @param left {Number} Left scroll position
	         * @param top {Number} Top scroll position
	         * @param isAnimated {Boolean?false} Whether animation should be used to move to the new coordinates
	         */
	        __publish : function (left, top, zoom, isAnimated) {
	            // Remember whether we had an animation, then we try to continue
	            // based on the current "drive" of the animation.
	            var wasAnimating = this.__isAnimating;
	            if (wasAnimating) {
	                animate.stop(wasAnimating);
	                this.__isAnimating = false;
	            }

	            if (isAnimated && this.options.animating) {
	                // Keep scheduled positions for scrollBy/zoomBy functionality.
	                this.__scheduledLeft = left;
	                this.__scheduledTop = top;
	                this.__scheduledZoom = zoom;

	                var oldLeft = this.__scrollLeft;
	                var oldTop = this.__scrollTop;
	                var oldZoom = this.__zoomLevel;

	                var diffLeft = left - oldLeft;
	                var diffTop = top - oldTop;
	                var diffZoom = zoom - oldZoom;

	                var step = function (percent, now, render) {
	                    if (render) {
	                        this.__scrollLeft = oldLeft + (diffLeft * percent);
	                        this.__scrollTop = oldTop + (diffTop * percent);
	                        this.__zoomLevel = oldZoom + (diffZoom * percent);

	                        // Push values out
	                        if (this.__callback) {
	                            this.__callback(this.__scrollLeft, this.__scrollTop, this.__zoomLevel);
	                        }
	                    }
	                }.bind(this);

	                var verify = function (id) {
	                    return this.__isAnimating === id;
	                }.bind(this);

	                var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
	                    if (animationId === this.__isAnimating) {
	                        this.__isAnimating = false;
	                    }
	                    if (this.__didDecelerationComplete || wasFinished) {
	                        this.options.scrollingComplete();
	                    }

	                    if (this.options.zooming) {
	                        this.__computeScrollMax();
	                        if (this.__zoomComplete) {
	                            this.__zoomComplete();
	                            this.__zoomComplete = null;
	                        }
	                    }
	                }.bind(this);

	                // When continuing based on previous animation we choose an ease-out animation instead of ease-in-out
	                this.__isAnimating = animate.start(step, verify, completed, this.options.animationDuration, wasAnimating ? easeOutCubic : easeInOutCubic);

	            } else {
	                this.__scheduledLeft = this.__scrollLeft = left;
	                this.__scheduledTop = this.__scrollTop = top;
	                this.__scheduledZoom = this.__zoomLevel = zoom;

	                // Push values out
	                if (this.__callback) {
	                    this.__callback(left, top, zoom);
	                }

	                // Fix max scroll ranges
	                if (this.options.zooming) {
	                    this.__computeScrollMax();
	                    if (this.__zoomComplete) {
	                        this.__zoomComplete();
	                        this.__zoomComplete = null;
	                    }
	                }
	            }
	        },


	        /**
	         * Recomputes scroll minimum values based on client dimensions and content dimensions.
	         */
	        __computeScrollMax : function (zoomLevel) {
	            if (zoomLevel === undefined) {
	                zoomLevel = this.__zoomLevel;
	            }

	            this.__maxScrollLeft = Math.max(this.__contentWidth*zoomLevel - this.__clientWidth, 0);
	            this.__maxScrollTop = Math.max(this.__contentHeight*zoomLevel - this.__clientHeight, 0);
	        },



	        /*
	          ---------------------------------------------------------------------------
	          ANIMATION (DECELERATION) SUPPORT
	          ---------------------------------------------------------------------------
	        */

	        /**
	         * Called when a touch sequence end and the speed of the finger was high enough
	         * to switch into deceleration mode.
	         */
	        __startDeceleration : function (timeStamp) {
	            if (this.options.paging) {
	                var scrollLeft = Math.max(Math.min(this.__scrollLeft, this.__maxScrollLeft), 0);
	                var scrollTop = Math.max(Math.min(this.__scrollTop, this.__maxScrollTop), 0);
	                var clientWidth = this.__clientWidth;
	                var clientHeight = this.__clientHeight;

	                // We limit deceleration not to the min/max values of the allowed range, but to the size of the visible client area.
	                // Each page should have exactly the size of the client area.
	                this.__minDecelerationScrollLeft = Math.floor(scrollLeft / clientWidth) * clientWidth;
	                this.__minDecelerationScrollTop = Math.floor(scrollTop / clientHeight) * clientHeight;
	                this.__maxDecelerationScrollLeft = Math.ceil(scrollLeft / clientWidth) * clientWidth;
	                this.__maxDecelerationScrollTop = Math.ceil(scrollTop / clientHeight) * clientHeight;
	            } else {
	                this.__minDecelerationScrollLeft = 0;
	                this.__minDecelerationScrollTop = 0;
	                this.__maxDecelerationScrollLeft = this.__maxScrollLeft;
	                this.__maxDecelerationScrollTop = this.__maxScrollTop;
	            }

	            // Wrap class method
	            var step = function (percent, now, render) {
	                this.__stepThroughDeceleration(render);
	            }.bind(this);

	            // How much velocity is required to keep the deceleration running
	            var minVelocityToKeepDecelerating = this.options.snapping ? 4 : 0.1;

	            // Detect whether it's still worth to continue animating steps
	            // If we are already slow enough to not being user perceivable anymore, we stop the whole process here.
	            var verify = function () {
	                var shouldContinue = Math.abs(this.__decelerationVelocityX) >= minVelocityToKeepDecelerating || Math.abs(this.__decelerationVelocityY) >= minVelocityToKeepDecelerating;
	                if (!shouldContinue) {
	                    this.__didDecelerationComplete = true;
	                }
	                return shouldContinue;
	            }.bind(this);

	            var completed = function (renderedFramesPerSecond, animationId, wasFinished) {
	                this.__isDecelerating = false;
	                if (this.__didDecelerationComplete) {
	                    this.options.scrollingComplete();
	                }

	                // Animate to grid when snapping is active, otherwise just fix out-of-boundary positions
	                this.scrollTo(this.__scrollLeft, this.__scrollTop, this.options.snapping);
	            }.bind(this);

	            // Start animation and switch on flag
	            this.__isDecelerating = animate.start(step, verify, completed);
	        },


	        /**
	         * Called on every step of the animation
	         *
	         * @param inMemory {Boolean?false} Whether to not render the current step, but keep it in memory only. Used internally only!
	         */
	        __stepThroughDeceleration : function (render) {

	            //
	            // COMPUTE NEXT SCROLL POSITION
	            //

	            // Add deceleration to scroll position
	            var scrollLeft = this.__scrollLeft + this.__decelerationVelocityX;
	            var scrollTop = this.__scrollTop + this.__decelerationVelocityY;


	            //
	            // HARD LIMIT SCROLL POSITION FOR NON BOUNCING MODE
	            //

	            if (!this.options.bouncing) {
	                var scrollLeftFixed = Math.max(Math.min(this.__maxDecelerationScrollLeft, scrollLeft), this.__minDecelerationScrollLeft);
	                if (scrollLeftFixed !== scrollLeft) {
	                    scrollLeft = scrollLeftFixed;
	                    this.__decelerationVelocityX = 0;
	                }

	                var scrollTopFixed = Math.max(Math.min(this.__maxDecelerationScrollTop, scrollTop), this.__minDecelerationScrollTop);
	                if (scrollTopFixed !== scrollTop) {
	                    scrollTop = scrollTopFixed;
	                    this.__decelerationVelocityY = 0;
	                }
	            }


	            //
	            // UPDATE SCROLL POSITION
	            //

	            if (render) {
	                this.__publish(scrollLeft, scrollTop, this.__zoomLevel);
	            } else {
	                this.__scrollLeft = scrollLeft;
	                this.__scrollTop = scrollTop;
	            }


	            //
	            // SLOW DOWN
	            //

	            // Slow down velocity on every iteration
	            if (!this.options.paging) {
	                // This is the factor applied to every iteration of the animation
	                // to slow down the process. This should emulate natural behavior where
	                // objects slow down when the initiator of the movement is removed
	                var frictionFactor = 0.95;

	                this.__decelerationVelocityX *= frictionFactor;
	                this.__decelerationVelocityY *= frictionFactor;
	            }


	            //
	            // BOUNCING SUPPORT
	            //

	            if (this.options.bouncing) {
	                var scrollOutsideX = 0;
	                var scrollOutsideY = 0;

	                // This configures the amount of change applied to deceleration/acceleration when reaching boundaries
	                var penetrationDeceleration = this.options.penetrationDeceleration;
	                var penetrationAcceleration = this.options.penetrationAcceleration;

	                // Check limits
	                if (scrollLeft < this.__minDecelerationScrollLeft) {
	                    scrollOutsideX = this.__minDecelerationScrollLeft - scrollLeft;
	                } else if (scrollLeft > this.__maxDecelerationScrollLeft) {
	                    scrollOutsideX = this.__maxDecelerationScrollLeft - scrollLeft;
	                }

	                if (scrollTop < this.__minDecelerationScrollTop) {
	                    scrollOutsideY = this.__minDecelerationScrollTop - scrollTop;
	                } else if (scrollTop > this.__maxDecelerationScrollTop) {
	                    scrollOutsideY = this.__maxDecelerationScrollTop - scrollTop;
	                }

	                // Slow down until slow enough, then flip back to snap position
	                if (scrollOutsideX !== 0) {
	                    if (scrollOutsideX * this.__decelerationVelocityX <= 0) {
	                        this.__decelerationVelocityX += scrollOutsideX * penetrationDeceleration;
	                    } else {
	                        this.__decelerationVelocityX = scrollOutsideX * penetrationAcceleration;
	                    }
	                }

	                if (scrollOutsideY !== 0) {
	                    if (scrollOutsideY * this.__decelerationVelocityY <= 0) {
	                        this.__decelerationVelocityY += scrollOutsideY * penetrationDeceleration;
	                    } else {
	                        this.__decelerationVelocityY = scrollOutsideY * penetrationAcceleration;
	                    }
	                }
	            }
	        }
	    };

	    return Scroller;
	}));


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var widget_1 = __webpack_require__(23);
	var button_1 = __webpack_require__(98);
	var graphics_1 = __webpack_require__(29);
	var consts_1 = __webpack_require__(109);
	var radio_button_1 = __webpack_require__(110);
	var widget_factory_1 = __webpack_require__(27);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 标签控件上的标签按钮。
	 */
	var TabButton = (function (_super) {
	    __extends(TabButton, _super);
	    function TabButton() {
	        _super.call(this, TabButton.TYPE);
	    }
	    Object.defineProperty(TabButton.prototype, "closeButton", {
	        get: function () {
	            return this._closeButton;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabButton.prototype, "closeButtonAtLeft", {
	        get: function () {
	            return this._cbAtLeft;
	        },
	        set: function (value) {
	            this._cbAtLeft = value;
	            this.relayoutChildren();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabButton.prototype, "orientation", {
	        get: function () {
	            return this._orn;
	        },
	        set: function (value) {
	            this._orn = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabButton.prototype.setIcons = function (normalIconURL, currentIconURL) {
	        var _this = this;
	        if (normalIconURL) {
	            this._normalIcon = image_tile_1.ImageTile.create(normalIconURL, function (evt) {
	                _this.requestRedraw();
	            });
	        }
	        else {
	            this._normalIcon = null;
	        }
	        this._normalIconURL = normalIconURL ? normalIconURL : null;
	        if (currentIconURL) {
	            this._currentIcon = image_tile_1.ImageTile.create(currentIconURL, function (evt) {
	                _this.requestRedraw();
	            });
	        }
	        else {
	            this._currentIcon = null;
	        }
	        this._currentIconURL = currentIconURL ? currentIconURL : null;
	    };
	    Object.defineProperty(TabButton.prototype, "closable", {
	        get: function () {
	            return !!this._closeButton;
	        },
	        set: function (value) {
	            if (value && this._closeButton || !value && !this._closeButton) {
	                return;
	            }
	            if (this._closeButton) {
	                this.removeChild(this._closeButton);
	                this._closeButton = null;
	            }
	            else {
	                var closeButton = button_1.Button.create();
	                closeButton.set({ styleType: "tab-button.close" });
	                this.addChild(closeButton);
	                this._closeButton = closeButton;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabButton.prototype.relayoutChildren = function () {
	        if (this._closeButton) {
	            var x = this.leftPadding;
	            var y = this.topPadding;
	            var h = this.h - this.topPadding - this.bottomPadding;
	            var w = h;
	            if (!this.closeButtonAtLeft) {
	                x = this.w - this.rightPadding - w;
	            }
	            this._closeButton.moveResizeTo(x, y, w, h);
	        }
	        return rect_1.Rect.rect.init(0, 0, this.w, this.h);
	    };
	    Object.defineProperty(TabButton.prototype, "desireWidth", {
	        get: function () {
	            var w = this.leftPadding + this.rightPadding;
	            var text = this.text;
	            var style = this.getStyle();
	            if (this._currentIcon || this._normalIcon) {
	                w += this.h;
	            }
	            if (text && style) {
	                var font = style.font;
	                w += graphics_1.Graphics.measureText(text, font) + style.fontSize;
	            }
	            return w;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabButton.prototype, "tabPage", {
	        get: function () {
	            return this._tabPage;
	        },
	        set: function (value) {
	            this._tabPage = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabButton.prototype.getStyleType = function () {
	        var appendix = this.value ? "current" : "normal";
	        return (this._styleType || this.type) + "." + appendix;
	    };
	    TabButton.prototype.drawImage = function (ctx, style) {
	        var text = this.getLocaleText();
	        var icon = this.value ? this._currentIcon : this._normalIcon;
	        if (icon) {
	            var w = 0;
	            var h = 0;
	            var x = this.leftPadding;
	            var y = this.topPadding;
	            if (this._orn === consts_1.Orientation.V) {
	                w = this.w - this.leftPadding - this.rightPadding;
	                h = this.h - this.bottomPadding - this.topPadding;
	                if (text) {
	                    h -= style.fontSize;
	                }
	                icon.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	                if (text) {
	                    y = this.h - this.bottomPadding - style.fontSize;
	                    graphics_1.Graphics.drawTextSL(ctx, text, style, rect_1.Rect.rect.init(0, y, w, style.fontSize));
	                }
	            }
	            else {
	                h = this.h - this.topPadding - this.bottomPadding;
	                w = h;
	                icon.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	                if (text) {
	                    x += w + this.leftPadding;
	                    w = this.w - x - this.rightPadding;
	                    graphics_1.Graphics.drawTextSL(ctx, text, style, rect_1.Rect.rect.init(x, y, w, h));
	                }
	            }
	        }
	        else {
	            graphics_1.Graphics.drawTextSL(ctx, text, style, rect_1.Rect.rect.init(0, 0, this.w, this.h));
	        }
	        return this;
	    };
	    TabButton.prototype.drawText = function (ctx, style) {
	        return this;
	    };
	    TabButton.prototype.onReset = function () {
	        this._tabPage = null;
	        this._closeButton = null;
	        this._normalIcon = null;
	        this._currentIcon = null;
	    };
	    TabButton.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._tabPage = null;
	        this._closeButton = null;
	        this._normalIcon = null;
	        this._currentIcon = null;
	    };
	    TabButton.prototype.getDefProps = function () {
	        return TabButton.defProps;
	    };
	    TabButton.create = function (options) {
	        return TabButton.re.create(options);
	    };
	    TabButton.defProps = Object.assign({}, widget_1.Widget.defProps, { _lp: 2, _tp: 2, _rp: 2, _bp: 2,
	        _normalIconURL: null, _currentIconURL: null, closable: false, _cbAtLeft: false, _orn: consts_1.Orientation.H });
	    TabButton.TYPE = "tab-button";
	    TabButton.re = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TabButton);
	    return TabButton;
	}(radio_button_1.RadioButton));
	exports.TabButton = TabButton;
	;
	widget_factory_1.WidgetFactory.register(TabButton.TYPE, TabButton.create);


/***/ },
/* 109 */
/***/ function(module, exports) {

	"use strict";
	(function (Orientation) {
	    Orientation[Orientation["V"] = 1] = "V";
	    Orientation[Orientation["VERTICAL"] = 1] = "VERTICAL";
	    Orientation[Orientation["H"] = 2] = "H";
	    Orientation[Orientation["HORIZONTAL"] = 2] = "HORIZONTAL";
	})(exports.Orientation || (exports.Orientation = {}));
	var Orientation = exports.Orientation;
	;
	(function (Direction) {
	    Direction[Direction["W"] = 1] = "W";
	    Direction[Direction["WEST"] = 1] = "WEST";
	    Direction[Direction["E"] = 2] = "E";
	    Direction[Direction["EAST"] = 2] = "EAST";
	    Direction[Direction["N"] = 3] = "N";
	    Direction[Direction["NORTH"] = 3] = "NORTH";
	    Direction[Direction["S"] = 4] = "S";
	    Direction[Direction["SOUTH"] = 4] = "SOUTH";
	    Direction[Direction["L"] = 1] = "L";
	    Direction[Direction["LEFT"] = 1] = "LEFT";
	    Direction[Direction["R"] = 2] = "R";
	    Direction[Direction["RIGHT"] = 2] = "RIGHT";
	    Direction[Direction["T"] = 3] = "T";
	    Direction[Direction["TOP"] = 3] = "TOP";
	    Direction[Direction["B"] = 4] = "B";
	    Direction[Direction["BOTTOM"] = 4] = "BOTTOM";
	})(exports.Direction || (exports.Direction = {}));
	var Direction = exports.Direction;
	;
	(function (AlignH) {
	    AlignH[AlignH["L"] = 1] = "L";
	    AlignH[AlignH["LEFT"] = 1] = "LEFT";
	    AlignH[AlignH["C"] = 2] = "C";
	    AlignH[AlignH["CENTER"] = 2] = "CENTER";
	    AlignH[AlignH["R"] = 3] = "R";
	    AlignH[AlignH["RIGHT"] = 3] = "RIGHT";
	})(exports.AlignH || (exports.AlignH = {}));
	var AlignH = exports.AlignH;
	;
	(function (AlignV) {
	    AlignV[AlignV["T"] = 1] = "T";
	    AlignV[AlignV["TOP"] = 1] = "TOP";
	    AlignV[AlignV["M"] = 2] = "M";
	    AlignV[AlignV["MIDDLE"] = 2] = "MIDDLE";
	    AlignV[AlignV["B"] = 3] = "B";
	    AlignV[AlignV["BOTTOM"] = 3] = "BOTTOM";
	})(exports.AlignV || (exports.AlignV = {}));
	var AlignV = exports.AlignV;
	;
	(function (Align) {
	    Align[Align["L"] = 1] = "L";
	    Align[Align["LEFT"] = 1] = "LEFT";
	    Align[Align["C"] = 2] = "C";
	    Align[Align["CENTER"] = 2] = "CENTER";
	    Align[Align["R"] = 3] = "R";
	    Align[Align["RIGHT"] = 3] = "RIGHT";
	    Align[Align["T"] = 1] = "T";
	    Align[Align["TOP"] = 1] = "TOP";
	    Align[Align["M"] = 2] = "M";
	    Align[Align["MIDDLE"] = 2] = "MIDDLE";
	    Align[Align["B"] = 3] = "B";
	    Align[Align["BOTTOM"] = 3] = "BOTTOM";
	})(exports.Align || (exports.Align = {}));
	var Align = exports.Align;
	;
	var Services = (function () {
	    function Services() {
	    }
	    Services.THEME_MANAGER = "qtk-theme-manager";
	    return Services;
	}());
	exports.Services = Services;
	;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var check_button_1 = __webpack_require__(111);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 单选按钮。同一个父控件中，只有一个单选按钮被勾选。被勾选时value为true，否则为false。
	 */
	var RadioButton = (function (_super) {
	    __extends(RadioButton, _super);
	    function RadioButton(type) {
	        _super.call(this, type || RadioButton.TYPE);
	    }
	    Object.defineProperty(RadioButton.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            this.setValue(value, false, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RadioButton.create = function (options) {
	        return RadioButton.r.create(options);
	    };
	    RadioButton.TYPE = "radio-button";
	    RadioButton.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(RadioButton);
	    return RadioButton;
	}(check_button_1.CheckButton));
	exports.RadioButton = RadioButton;
	;
	widget_factory_1.WidgetFactory.register(RadioButton.TYPE, RadioButton.create);


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var CheckButton = (function (_super) {
	    __extends(CheckButton, _super);
	    function CheckButton(type) {
	        _super.call(this, type || CheckButton.TYPE);
	    }
	    Object.defineProperty(CheckButton.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CheckButton.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            this.setValue(value, false, false);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CheckButton.prototype.getStyleType = function () {
	        var appendix = this.value ? "checked" : "unchecked";
	        return (this._styleType || this.type) + "." + appendix;
	    };
	    CheckButton.prototype.drawText = function (ctx, style) {
	        var text = this.getLocaleText();
	        if (text && style.textColor) {
	            var x = this.w >> 1;
	            var y = this.h >> 1;
	            var img = style.foreGroundImage;
	            ctx.font = style.font;
	            ctx.textAlign = "center";
	            ctx.textBaseline = "middle";
	            ctx.fillStyle = style.textColor;
	            if (img) {
	                var textAlign = style.textAlign;
	                switch (textAlign) {
	                    case "right": {
	                        x = this.h;
	                        ctx.textAlign = "left";
	                        break;
	                    }
	                    case "left": {
	                        x = 0;
	                        ctx.textAlign = "left";
	                        break;
	                    }
	                    default: {
	                        break;
	                    }
	                }
	            }
	            ctx.fillText(text, x, y);
	        }
	        return this;
	    };
	    CheckButton.prototype.drawImage = function (ctx, style) {
	        var img = style.foreGroundImage;
	        var text = this.text;
	        if (img) {
	            var x = 0;
	            var y = 0;
	            var w = this.w;
	            var h = this.h;
	            if (text && style.textColor) {
	                var textAlign = style.textAlign;
	                switch (textAlign) {
	                    case "right": {
	                        w = h;
	                        break;
	                    }
	                    case "left": {
	                        w = h;
	                        x = this.w - w;
	                        break;
	                    }
	                    default: {
	                        break;
	                    }
	                }
	            }
	            img.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	        }
	        return this;
	    };
	    CheckButton.prototype.dispatchClick = function (evt) {
	        this.value = !this.value;
	        this.notifyChange();
	        _super.prototype.dispatchClick.call(this, evt);
	    };
	    CheckButton.create = function (options) {
	        return CheckButton.recycleBin.create(options);
	    };
	    CheckButton.TYPE = "check-button";
	    CheckButton.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(CheckButton);
	    return CheckButton;
	}(widget_1.Widget));
	exports.CheckButton = CheckButton;
	;
	widget_factory_1.WidgetFactory.register(CheckButton.TYPE, CheckButton.create);


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var pages_1 = __webpack_require__(92);
	var widget_1 = __webpack_require__(23);
	var tab_page_1 = __webpack_require__(102);
	var Events = __webpack_require__(10);
	var tab_button_1 = __webpack_require__(108);
	var tab_button_group_1 = __webpack_require__(113);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TabControl = (function (_super) {
	    __extends(TabControl, _super);
	    function TabControl() {
	        _super.call(this, TabControl.TYPE);
	    }
	    Object.defineProperty(TabControl.prototype, "value", {
	        get: function () {
	            return this._pages.value;
	        },
	        set: function (value) {
	            this._pages.value = value;
	            this.buttonGroup.value = value;
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabControl.prototype, "pages", {
	        get: function () {
	            return this._pages;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabControl.prototype, "buttonGroup", {
	        get: function () {
	            return this._buttonGroup;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabControl.prototype, "buttonGroupAtTop", {
	        get: function () {
	            return this._bgAtTop;
	        },
	        set: function (value) {
	            this._bgAtTop = value;
	            this.relayoutChildren();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabControl.prototype, "buttonGroupHeight", {
	        get: function () {
	            return this._bgh;
	        },
	        set: function (value) {
	            this._bgh = value;
	            this.relayoutChildren();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabControl.prototype.removePage = function (tabPage, destroy) {
	        if (tabPage) {
	            var tabButton = tabPage.tabButton;
	            this.pages.removeChild(tabPage, false, destroy);
	            this.buttonGroup.removeChild(tabButton, false, destroy);
	            this.value--;
	        }
	    };
	    TabControl.prototype.addPage = function (title, normalIconURL, currentIconURL, closable, closeButtonAtLeft) {
	        if (!this.pages.app) {
	            this.pages.app = this.app;
	        }
	        if (!this.buttonGroup.app) {
	            this.buttonGroup.app = this.app;
	        }
	        var tabButton = tab_button_1.TabButton.create();
	        tabButton.setIcons(normalIconURL, currentIconURL);
	        tabButton.set({ text: title, closable: closable, closeButtonAtLeft: closeButtonAtLeft });
	        var tabPage = tab_page_1.TabPage.create();
	        tabButton.tabPage = tabPage;
	        tabPage.tabButton = tabButton;
	        this.pages.addChild(tabPage);
	        this.buttonGroup.addChild(tabButton);
	        var tabControl = this;
	        tabButton.on(Events.CLICK, function (evt) {
	            tabControl.pages.setValueByPage(this.tabPage);
	            if (closable && this.target && this.target === this.closeButton) {
	                tabControl.removePage(this.tabPage);
	            }
	        });
	        this.value = this._value;
	        this.relayoutChildren();
	        return tabPage;
	    };
	    TabControl.prototype.relayoutChildren = function () {
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var buttonGroupHeight = this.buttonGroupHeight;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        var w = this.w - this.leftPadding - this.rightPadding;
	        var pages = this._pages;
	        var buttonGroup = this._buttonGroup;
	        if (this.buttonGroupAtTop) {
	            if (buttonGroup) {
	                buttonGroup.moveResizeTo(x, y, w, buttonGroupHeight);
	                buttonGroup.relayoutChildren();
	            }
	            y += buttonGroupHeight;
	            h -= buttonGroupHeight;
	        }
	        else {
	            if (buttonGroup) {
	                buttonGroup.moveResizeTo(x, this.h - buttonGroupHeight - this.bottomPadding, w, buttonGroupHeight);
	                buttonGroup.relayoutChildren();
	            }
	            h -= buttonGroupHeight;
	        }
	        if (pages) {
	            pages.moveResizeTo(x, y, w, h);
	            pages.relayoutChildren();
	        }
	        return rect_1.Rect.rect.init(0, 0, this.w, this.h);
	    };
	    TabControl.prototype.onReset = function () {
	        this._value = 0;
	        this._pages = pages_1.Pages.create();
	        this.addChild(this._pages, true);
	        this._buttonGroup = tab_button_group_1.TabButtonGroup.create();
	        this.addChild(this._buttonGroup, true);
	    };
	    TabControl.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._pages = null;
	        this._buttonGroup = null;
	    };
	    TabControl.prototype.getDefProps = function () {
	        return TabControl.defProps;
	    };
	    TabControl.create = function (options) {
	        return TabControl.r.create(options);
	    };
	    TabControl.defProps = Object.assign({}, widget_1.Widget.defProps, { _bgh: 30, _bgAtTop: false });
	    TabControl.TYPE = "tab-control";
	    TabControl.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TabControl);
	    return TabControl;
	}(widget_1.Widget));
	exports.TabControl = TabControl;
	;
	widget_factory_1.WidgetFactory.register(TabControl.TYPE, TabControl.create);


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TabButtonGroup = (function (_super) {
	    __extends(TabButtonGroup, _super);
	    function TabButtonGroup() {
	        _super.call(this, TabButtonGroup.TYPE);
	    }
	    Object.defineProperty(TabButtonGroup.prototype, "value", {
	        get: function () {
	            var arr = this.children;
	            var n = arr.length;
	            for (var i = 0; i < n; i++) {
	                var iter = arr[i];
	                if (iter.value) {
	                    return i;
	                }
	            }
	            return 0;
	        },
	        set: function (value) {
	            var n = this.children.length;
	            var index = Math.max(0, Math.min(value, n - 1));
	            if (n > 0) {
	                this.children[index].value = true;
	            }
	            this.requestRedraw();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TabButtonGroup.prototype, "autoExpand", {
	        get: function () {
	            return this._ae;
	        },
	        set: function (value) {
	            this._ae = value;
	            this.relayoutChildren();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TabButtonGroup.prototype.relayoutChildren = function () {
	        var x = 0;
	        var y = 0;
	        var w = 0;
	        var h = this.h;
	        var n = this.children.length;
	        var autoExpand = this._ae;
	        if (n > 0) {
	            var itemW = this.w / n;
	            this.children.forEach(function (child) {
	                if (autoExpand) {
	                    w = itemW;
	                }
	                else {
	                    w = child.desireWidth;
	                }
	                child.moveResizeTo(x, y, w, h);
	                child.relayoutChildren();
	                x += w;
	            });
	        }
	        return rect_1.Rect.rect.init(0, 0, this.w, this.h);
	    };
	    TabButtonGroup.prototype.drawChildren = function (ctx) {
	        var current = null;
	        this._children.forEach(function (child) {
	            if (child.visible) {
	                if (child.value) {
	                    current = child;
	                }
	                else {
	                    child.draw(ctx);
	                }
	            }
	        });
	        if (current) {
	            current.draw(ctx);
	        }
	        return this;
	    };
	    TabButtonGroup.prototype.getDefProps = function () {
	        return TabButtonGroup.defProps;
	    };
	    TabButtonGroup.create = function (options) {
	        return TabButtonGroup.r.create(options);
	    };
	    TabButtonGroup.defProps = Object.assign({}, widget_1.Widget.defProps, { _ae: true });
	    TabButtonGroup.TYPE = "tab-button-group";
	    TabButtonGroup.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TabButtonGroup);
	    return TabButtonGroup;
	}(widget_1.Widget));
	exports.TabButtonGroup = TabButtonGroup;
	;
	widget_factory_1.WidgetFactory.register(TabButtonGroup.TYPE, TabButtonGroup.create);


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rich_text_1 = __webpack_require__(103);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var carota = __webpack_require__(30);
	var createDoc = carota.document;
	var dom = carota.dom;
	var node = carota.node;
	var text = carota.text;
	var rect = carota.rect;
	var frame = carota.frame;
	var toggles = {
	    66: 'bold',
	    73: 'italic',
	    85: 'underline',
	    83: 'strikeout'
	};
	/**
	 * 富文本编辑器。
	 */
	var RichTextEdit = (function (_super) {
	    __extends(RichTextEdit, _super);
	    function RichTextEdit() {
	        _super.call(this, RichTextEdit.TYPE);
	        this._element = null;
	        this._textArea = null;
	        this._keyboardX = null;
	        this._focusChar = null;
	        this._textAreaDiv = null;
	        this._keyboardSelect = 0;
	        this._textAreaContent = '';
	        this._nextKeyboardX = null;
	        this._richClipboard = null;
	        this._plainClipboard = null;
	        this._selectDragStart = null;
	        this.focused = false;
	        this.cachedWidth = 0;
	        this.cachedHeight = 0;
	        this.nextCaretToggle = Date.now();
	    }
	    Object.defineProperty(RichTextEdit.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RichTextEdit.prototype.undo = function () {
	        this._doc.performUndo();
	    };
	    RichTextEdit.prototype.redo = function () {
	        this._doc.performUndo(true);
	    };
	    RichTextEdit.prototype.selectAll = function () {
	        var length = this._doc.frame.length - 1;
	        this._doc.select(0, length);
	    };
	    RichTextEdit.prototype.setSelectedFont = function (value) {
	        this.setSelectedFormatting("font", value);
	    };
	    RichTextEdit.prototype.getSelectedFont = function () {
	        return this.getSelectedFormatting("font");
	    };
	    RichTextEdit.prototype.setSelectedSize = function (value) {
	        this.setSelectedFormatting("size", value);
	    };
	    RichTextEdit.prototype.getSelectedSize = function () {
	        return this.getSelectedFormatting("size");
	    };
	    RichTextEdit.prototype.setSelectedBold = function (value) {
	        this.setSelectedFormatting("bold", value);
	    };
	    RichTextEdit.prototype.getSelectedBold = function () {
	        return this.getSelectedFormatting("bold");
	    };
	    RichTextEdit.prototype.setSelectedItalic = function (value) {
	        this.setSelectedFormatting("italic", value);
	    };
	    RichTextEdit.prototype.getSelectedItalic = function () {
	        return this.getSelectedFormatting("italic");
	    };
	    RichTextEdit.prototype.setSelectedUnderline = function (value) {
	        this.setSelectedFormatting("underline", value);
	    };
	    RichTextEdit.prototype.getSelectedUnderline = function () {
	        return this.getSelectedFormatting("underline");
	    };
	    RichTextEdit.prototype.setSelectedStrikeout = function (value) {
	        this.setSelectedFormatting("strikeout", value);
	    };
	    RichTextEdit.prototype.getSelectedStrikeout = function () {
	        return this.getSelectedFormatting("strikeout");
	    };
	    RichTextEdit.prototype.setSelectedAlign = function (value) {
	        this.setSelectedFormatting("align", value);
	    };
	    RichTextEdit.prototype.getSelectedAlign = function () {
	        return this.getSelectedFormatting("align");
	    };
	    RichTextEdit.prototype.setSelectedScript = function (value) {
	        this.setSelectedFormatting("script", value);
	    };
	    RichTextEdit.prototype.getSelectedScript = function () {
	        return this.getSelectedFormatting("script");
	    };
	    RichTextEdit.prototype.setSelectedColor = function (value) {
	        this.setSelectedFormatting("color", value);
	    };
	    RichTextEdit.prototype.getSelectedColor = function () {
	        return this.getSelectedFormatting("color");
	    };
	    RichTextEdit.prototype.setSelectedFormatting = function (id, value) {
	        var range = this._doc.selectedRange();
	        range.setFormatting(id, value);
	        return this;
	    };
	    RichTextEdit.prototype.getSelectedFormatting = function (id) {
	        return null;
	    };
	    RichTextEdit.prototype.exhausted = function (ordinal, direction) {
	        return direction < 0 ? ordinal <= 0 : ordinal >= this._doc.frame.length - 1;
	    };
	    ;
	    RichTextEdit.prototype.differentLine = function (caret1, caret2) {
	        return (caret1.b <= caret2.t) || (caret2.b <= caret1.t);
	    };
	    ;
	    RichTextEdit.prototype.changeLine = function (ordinal, direction) {
	        var originalCaret = this._doc.getCaretCoords(ordinal), newCaret;
	        this._nextKeyboardX = (this._keyboardX !== null) ? this._keyboardX : originalCaret.l;
	        while (!this.exhausted(ordinal, direction)) {
	            ordinal += direction;
	            newCaret = this._doc.getCaretCoords(ordinal);
	            if (this.differentLine(newCaret, originalCaret)) {
	                break;
	            }
	        }
	        originalCaret = newCaret;
	        while (!this.exhausted(ordinal, direction)) {
	            if ((direction > 0 && newCaret.l >= this._nextKeyboardX) ||
	                (direction < 0 && newCaret.l <= this._nextKeyboardX)) {
	                break;
	            }
	            ordinal += direction;
	            newCaret = this._doc.getCaretCoords(ordinal);
	            if (this.differentLine(newCaret, originalCaret)) {
	                ordinal -= direction;
	                break;
	            }
	        }
	        return ordinal;
	    };
	    ;
	    RichTextEdit.prototype.endOfline = function (ordinal, direction) {
	        var originalCaret = this._doc.getCaretCoords(ordinal), newCaret;
	        while (!this.exhausted(ordinal, direction)) {
	            ordinal += direction;
	            newCaret = this._doc.getCaretCoords(ordinal);
	            if (this.differentLine(newCaret, originalCaret)) {
	                ordinal -= direction;
	                break;
	            }
	        }
	        return ordinal;
	    };
	    ;
	    RichTextEdit.prototype.handleKey = function (key, selecting, ctrlKey) {
	        var doc = this._doc;
	        var start = doc.selection.start, end = doc.selection.end, length = doc.frame.length - 1, handled = false;
	        this._nextKeyboardX = null;
	        if (!selecting) {
	            this._keyboardSelect = 0;
	        }
	        else if (!this._keyboardSelect) {
	            switch (key) {
	                case 37: // left arrow
	                case 38: // up - find character above
	                case 36: // start of line
	                case 33:
	                    this._keyboardSelect = -1;
	                    break;
	                case 39: // right arrow
	                case 40: // down arrow - find character below
	                case 35: // end of line
	                case 34:
	                    this._keyboardSelect = 1;
	                    break;
	            }
	        }
	        var ordinal = this._keyboardSelect === 1 ? end : start;
	        var changingCaret = false;
	        switch (key) {
	            case 37:
	                if (!selecting && start != end) {
	                    ordinal = start;
	                }
	                else {
	                    if (ordinal > 0) {
	                        if (ctrlKey) {
	                            var wordInfo = doc.wordContainingOrdinal(ordinal);
	                            if (wordInfo.ordinal === ordinal) {
	                                ordinal = wordInfo.index > 0 ? doc.wordOrdinal(wordInfo.index - 1) : 0;
	                            }
	                            else {
	                                ordinal = wordInfo.ordinal;
	                            }
	                        }
	                        else {
	                            ordinal--;
	                        }
	                    }
	                }
	                changingCaret = true;
	                break;
	            case 39:
	                if (!selecting && start != end) {
	                    ordinal = end;
	                }
	                else {
	                    if (ordinal < length) {
	                        if (ctrlKey) {
	                            var wordInfo = doc.wordContainingOrdinal(ordinal);
	                            ordinal = wordInfo.ordinal + wordInfo.word.length;
	                        }
	                        else {
	                            ordinal++;
	                        }
	                    }
	                }
	                changingCaret = true;
	                break;
	            case 40:
	                ordinal = this.changeLine(ordinal, 1);
	                changingCaret = true;
	                break;
	            case 38:
	                ordinal = this.changeLine(ordinal, -1);
	                changingCaret = true;
	                break;
	            case 36:
	                ordinal = this.endOfline(ordinal, -1);
	                changingCaret = true;
	                break;
	            case 35:
	                ordinal = this.endOfline(ordinal, 1);
	                changingCaret = true;
	                break;
	            case 33:
	                ordinal = 0;
	                changingCaret = true;
	                break;
	            case 34:
	                ordinal = length;
	                changingCaret = true;
	                break;
	            case 8:
	                if (start === end && start > 0) {
	                    doc.range(start - 1, start).clear();
	                    this._focusChar = start - 1;
	                    doc.select(this._focusChar, this._focusChar);
	                    handled = true;
	                }
	                break;
	            case 46:
	                if (start === end && start < length) {
	                    doc.range(start, start + 1).clear();
	                    handled = true;
	                }
	                break;
	            case 90:
	                if (ctrlKey) {
	                    handled = true;
	                    doc.performUndo();
	                }
	                break;
	            case 89:
	                if (ctrlKey) {
	                    handled = true;
	                    doc.performUndo(true);
	                }
	                break;
	            case 65:
	                if (ctrlKey) {
	                    handled = true;
	                    doc.select(0, length);
	                }
	                break;
	            case 67: // C - copy to clipboard
	            case 88:
	                if (ctrlKey) {
	                    // Allow standard handling to take place as well
	                    this._richClipboard = doc.selectedRange().save();
	                    this._plainClipboard = doc.selectedRange().plainText();
	                }
	                break;
	        }
	        var toggle = toggles[key];
	        if (ctrlKey && toggle) {
	            var selRange = doc.selectedRange();
	            selRange.setFormatting(toggle, selRange.getFormatting()[toggle] !== true);
	            handled = true;
	            this.requestRedraw();
	        }
	        if (changingCaret) {
	            switch (this._keyboardSelect) {
	                case 0:
	                    start = end = ordinal;
	                    break;
	                case -1:
	                    start = ordinal;
	                    break;
	                case 1:
	                    end = ordinal;
	                    break;
	            }
	            if (start === end) {
	                this._keyboardSelect = 0;
	            }
	            else {
	                if (start > end) {
	                    this._keyboardSelect = -this._keyboardSelect;
	                    var t = end;
	                    end = start;
	                    start = t;
	                }
	            }
	            this._focusChar = ordinal;
	            doc.select(start, end);
	            handled = true;
	        }
	        this._keyboardX = this._nextKeyboardX;
	        return handled;
	    };
	    ;
	    RichTextEdit.prototype.findNodeByEvent = function (evt) {
	        var x = evt.x - this.x + this.offsetX;
	        var y = evt.y - this.y + this.offsetY;
	        var node = this._doc.byCoordinate(x, y - this.getVerticalOffset());
	        return node;
	    };
	    RichTextEdit.prototype.dispatchDblClick = function (evt) {
	        var node = this.findNodeByEvent(evt).parent();
	        if (node) {
	            this._doc.select(node.ordinal, node.ordinal +
	                (node.word ? node.word.text.length : node.length));
	        }
	    };
	    RichTextEdit.prototype.updateTextArea = function () {
	        var doc = this._doc;
	        var textArea = this._textArea;
	        var textAreaDiv = this._textAreaDiv;
	        var element = this._element;
	        this._focusChar = this._focusChar === null ? doc.selection.end : this._focusChar;
	        var endChar = doc.byOrdinal(this._focusChar);
	        this._focusChar = null;
	        if (endChar) {
	            var bounds = endChar.bounds();
	            textAreaDiv.style.left = bounds.l + 'px';
	            textAreaDiv.style.top = bounds.t + 'px';
	            textArea.focus();
	            var scrollDownBy = Math.max(0, bounds.t + bounds.h -
	                (element.scrollTop + element.clientHeight));
	            if (scrollDownBy) {
	                element.scrollTop += scrollDownBy;
	            }
	            var scrollUpBy = Math.max(0, element.scrollTop - bounds.t);
	            if (scrollUpBy) {
	                element.scrollTop -= scrollUpBy;
	            }
	            var scrollRightBy = Math.max(0, bounds.l -
	                (element.scrollLeft + element.clientWidth));
	            if (scrollRightBy) {
	                element.scrollLeft += scrollRightBy;
	            }
	            var scrollLeftBy = Math.max(0, element.scrollLeft - bounds.l);
	            if (scrollLeftBy) {
	                element.scrollLeft -= scrollLeftBy;
	            }
	        }
	        this._textAreaContent = doc.selectedRange().plainText();
	        textArea.value = this._textAreaContent;
	        textArea.select();
	        setTimeout(function () {
	            textArea.focus();
	        }, 10);
	        return;
	    };
	    ;
	    RichTextEdit.prototype.dispatchPointerDown = function (evt, ctx) {
	        var doc = this._doc;
	        var node = this.findNodeByEvent(evt);
	        this._selectDragStart = node.ordinal;
	        doc.select(node.ordinal, node.ordinal);
	        this._keyboardX = null;
	        this.requestRedraw();
	    };
	    RichTextEdit.prototype.dispatchPointerUp = function (evt) {
	        var node = this.findNodeByEvent(evt);
	        this._selectDragStart = null;
	        this._keyboardX = null;
	        this.updateTextArea();
	        this.requestRedraw();
	        this._textArea.focus();
	    };
	    RichTextEdit.prototype.dispatchPointerMove = function (evt, ctx) {
	        var doc = this._doc;
	        var node = this.findNodeByEvent(evt);
	        if (this._selectDragStart !== null) {
	            if (node) {
	                this._focusChar = node.ordinal;
	                if (this._selectDragStart > node.ordinal) {
	                    doc.select(node.ordinal, this._selectDragStart);
	                }
	                else {
	                    doc.select(this._selectDragStart, node.ordinal);
	                }
	            }
	        }
	        this.requestRedraw();
	    };
	    RichTextEdit.prototype.onInit = function () {
	        var _this = this;
	        _super.prototype.onInit.call(this);
	        var doc = this._doc;
	        var div = document.createElement("div");
	        div.innerHTML = '<div class="carotaTextArea" style="overflow: hidden; position: absolute; height: 0;">' +
	            '<textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" ' +
	            'style="position: absolute; padding: 0px; width: 1000px; height: 1em; ' +
	            'outline: none; font-size: 4px;"></textarea>';
	        '</div>';
	        document.body.appendChild(div);
	        this._element = div;
	        var textAreaDiv = div.querySelector('.carotaTextArea');
	        var textArea = div.querySelector('textarea');
	        this._textArea = textArea;
	        this._textAreaDiv = textAreaDiv;
	        dom.handleEvent(textArea, 'keydown', function (evt) {
	            _this.handleKey(evt.keyCode, evt.shiftKey, evt.ctrlKey);
	        });
	        dom.handleEvent(textArea, 'input', function (evt) {
	            var newText = textArea.value;
	            if (_this._textAreaContent != newText) {
	                _this._textAreaContent = '';
	                textArea.value = '';
	                if (newText === _this._plainClipboard) {
	                    newText = _this._richClipboard;
	                }
	                doc.insert(newText);
	            }
	            _this.requestRedraw();
	        });
	        var timer = setInterval(function (evt) {
	            if (_this.parent) {
	                _this.updateCaret();
	            }
	            else {
	                clearInterval(timer);
	            }
	        }, 200);
	        doc.selectionChanged(function (getformatting, takeFocus) {
	            _this.requestRedraw();
	            if (!_this._selectDragStart) {
	                if (takeFocus !== false) {
	                    _this.updateTextArea();
	                }
	            }
	        });
	    };
	    RichTextEdit.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        document.body.removeChild(this._textAreaDiv);
	        this._textArea = null;
	        this._textAreaDiv = null;
	    };
	    RichTextEdit.prototype.updateCaret = function () {
	        var doc = this._doc;
	        var requirePaint = false;
	        var textArea = this._textArea;
	        var newFocused = document.activeElement === textArea;
	        if (this.focused !== newFocused) {
	            this.focused = newFocused;
	            requirePaint = true;
	        }
	        var now = Date.now();
	        if (now > this.nextCaretToggle) {
	            this.nextCaretToggle = now + 500;
	            if (doc.toggleCaret()) {
	                requirePaint = true;
	            }
	        }
	        if (this.w !== this.cachedWidth ||
	            this.h !== this.cachedHeight) {
	            requirePaint = true;
	            this.cachedWidth = this.w;
	            this.cachedHeight = this.h;
	        }
	        if (requirePaint) {
	            this.requestRedraw();
	        }
	    };
	    ;
	    RichTextEdit.prototype.hasFocus = function () {
	        return this._selectDragStart || (document.activeElement === this._textArea);
	    };
	    RichTextEdit.create = function (options) {
	        return RichTextEdit.rBin.create(options);
	    };
	    RichTextEdit.TYPE = "rich-text-edit";
	    RichTextEdit.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(RichTextEdit);
	    return RichTextEdit;
	}(rich_text_1.RichText));
	exports.RichTextEdit = RichTextEdit;
	;
	widget_factory_1.WidgetFactory.register(RichTextEdit.TYPE, RichTextEdit.create);


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var edit_1 = __webpack_require__(21);
	var button_1 = __webpack_require__(98);
	var widget_1 = __webpack_require__(23);
	var dialog_1 = __webpack_require__(96);
	var graphics_1 = __webpack_require__(29);
	var Events = __webpack_require__(10);
	var list_view_1 = __webpack_require__(116);
	var list_item_1 = __webpack_require__(118);
	var widget_factory_1 = __webpack_require__(27);
	var recyclable_creator_1 = __webpack_require__(87);
	var image_tile_1 = __webpack_require__(11);
	var simple_layouter_1 = __webpack_require__(119);
	var ComboBoxOption = (function () {
	    function ComboBoxOption(text, value, imageURL, color) {
	        this.text = text;
	        this.color = color;
	        this.isDefault = false;
	        this.value = value === undefined ? text : value;
	        this.image = imageURL ? image_tile_1.ImageTile.create(imageURL, function () { }) : null;
	    }
	    return ComboBoxOption;
	}());
	exports.ComboBoxOption = ComboBoxOption;
	;
	var ComboBoxItem = (function (_super) {
	    __extends(ComboBoxItem, _super);
	    function ComboBoxItem() {
	        _super.call(this, ComboBoxItem.TYPE);
	    }
	    ComboBoxItem.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.padding = 2;
	    };
	    Object.defineProperty(ComboBoxItem.prototype, "text", {
	        get: function () {
	            return this.data.text;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComboBoxItem.prototype.getStyleType = function () {
	        if (this._styleType) {
	            return this._styleType;
	        }
	        if (this.data.isDefault) {
	            return "combo-box-item.current";
	        }
	        else {
	            return "combo-box-item";
	        }
	    };
	    ComboBoxItem.prototype.drawText = function (ctx, style) {
	        var data = this.data;
	        var x = this.leftPadding;
	        ;
	        var y = this.topPadding;
	        var w = this.w - x - this.rightPadding;
	        var h = this.h - y - this.bottomPadding;
	        if (style.foreGroundImage) {
	            style.foreGroundImage.draw(ctx, image_tile_1.ImageDrawType.AUTO, x, y, h, h);
	        }
	        x += h + this.leftPadding;
	        if (data.image) {
	            data.image.draw(ctx, image_tile_1.ImageDrawType.AUTO, x, y, h, h);
	            x += h + this.leftPadding;
	        }
	        else if (data.color) {
	            ctx.fillStyle = data.color;
	            ctx.fillRect(x, y, h, h);
	            x += h + this.leftPadding;
	        }
	        var r = rect_1.Rect.rect.init(x, y, w, h);
	        if (this.customDraw) {
	            this.customDraw(ctx, style, r, this.data);
	        }
	        else {
	            var text = this.getLocaleText();
	            if (text && style.textColor) {
	                graphics_1.Graphics.drawTextSL(ctx, text, style, r);
	            }
	        }
	        return this;
	    };
	    ComboBoxItem.create = function (options) {
	        return ComboBoxItem.r.create().reset(ComboBoxItem.TYPE, options);
	    };
	    ComboBoxItem.TYPE = "combo-box-item";
	    ComboBoxItem.r = new recyclable_creator_1.RecyclableCreator(function () { return new ComboBoxItem(); });
	    return ComboBoxItem;
	}(list_item_1.ListItem));
	exports.ComboBoxItem = ComboBoxItem;
	;
	var ComboBoxBase = (function (_super) {
	    __extends(ComboBoxBase, _super);
	    function ComboBoxBase(type) {
	        _super.call(this, type);
	    }
	    Object.defineProperty(ComboBoxBase.prototype, "options", {
	        get: function () {
	            return this._options;
	        },
	        set: function (value) {
	            var _this = this;
	            this.resetOptions();
	            if (value) {
	                value.forEach(function (item) {
	                    _this.addOption(item.text, item.value, item.imageURL, item.color);
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxBase.prototype, "optionsJson", {
	        set: function (options) {
	            var _this = this;
	            this.resetOptions();
	            options.forEach(function (item) {
	                if (typeof item === "string") {
	                    _this.addOption(item);
	                }
	                else {
	                    _this.addOption(item.text, item.value, item.imageURL, item.color);
	                }
	            });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxBase.prototype, "customItemDraw", {
	        get: function () {
	            return this._customItemDraw;
	        },
	        set: function (value) {
	            this._customItemDraw = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxBase.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxBase.prototype, "itemH", {
	        get: function () {
	            return this._ih;
	        },
	        set: function (value) {
	            this._ih = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxBase.prototype, "value", {
	        get: function () {
	            return this._current ? this._current.value : null;
	        },
	        set: function (value) {
	            var arr = this._options;
	            this._current = null;
	            this._value = value;
	            if (arr) {
	                var n = arr.length;
	                for (var i = 0; i < n; i++) {
	                    var iter = arr[i];
	                    if (iter.value === value) {
	                        this._current = iter;
	                        break;
	                    }
	                }
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComboBoxBase.prototype.resetOptions = function () {
	        this._options = [];
	        return this;
	    };
	    ComboBoxBase.prototype.addOption = function (text, value, imageURL, color) {
	        var item = new ComboBoxOption(text, value, imageURL, color);
	        this._options.push(item);
	        if (value === this._value || (value === undefined && text === this._value)) {
	            this._current = item;
	        }
	        return this;
	    };
	    ComboBoxBase.prototype.onItemSelected = function (data) {
	        if (data) {
	            var oldValue = this._current ? this._current.value : null;
	            this._current = data;
	            this.dispatchEvent(this.eChangeEvent.init(Events.CHANGE, { oldValue: oldValue, newValue: data.value }));
	        }
	        this.requestRedraw();
	    };
	    ComboBoxBase.prototype.showPopup = function () {
	        var _this = this;
	        var vp = this.app.getViewPort();
	        var p = this.toViewPoint(point_1.Point.point.init(0, 0));
	        var x = p.x;
	        var w = this.w;
	        var y = p.y + this.h;
	        var padding = 4;
	        var scrollable = false;
	        var itemH = this.itemH;
	        var options = this._options;
	        var dialog = dialog_1.Dialog.create();
	        var n = this._options.length || 1;
	        var h = n * itemH + padding + padding;
	        var halfH = vp.h >> 1;
	        if ((y + h) > vp.h) {
	            if (h < halfH) {
	                y = p.y - h;
	            }
	            else {
	                h = halfH;
	                if ((y + h) > vp.h) {
	                    y = p.y - h;
	                }
	                scrollable = true;
	            }
	        }
	        dialog.set({ x: x, y: y, w: w, h: h, hasOwnCanvas: true, app: this.app });
	        dialog.styleType = "widget.transparent";
	        dialog.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	        var listView = list_view_1.ListView.create();
	        listView.padding = padding;
	        listView.itemH = itemH;
	        listView.styleType = "combo-box-popup";
	        listView.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ x: "0", y: "0px", w: "100%", h: "100%" });
	        listView.dragToScroll = scrollable;
	        dialog.addChild(listView);
	        dialog.target = listView;
	        for (var i = 0; i < n; i++) {
	            var iter = options[i];
	            var item = ComboBoxItem.create({ customDraw: this.customItemDraw });
	            iter.isDefault = this._current === iter;
	            item.set({ data: iter });
	            listView.addChild(item, true);
	        }
	        listView.relayoutChildren();
	        listView.relayoutChildren();
	        dialog.open();
	        dialog.grab();
	        this._isPopupOpened = true;
	        dialog.on(Events.CLICK, function (evt) {
	            var item = listView.target;
	            if (item || !dialog.hitTestResult) {
	                if (item) {
	                    var data = item.data;
	                    _this.onItemSelected(data);
	                }
	                _this._isPopupOpened = false;
	                dialog.close();
	            }
	        });
	    };
	    ComboBoxBase.prototype.onBindProp = function (prop, value) {
	        var _this = this;
	        if (prop === "options") {
	            this.resetOptions();
	            value.forEach(function (opt) {
	                _this.addOption(opt.text, opt.value, opt.imageURL, opt.color);
	            });
	        }
	        else {
	            return _super.prototype.onBindProp.call(this, prop, value);
	        }
	    };
	    ComboBoxBase.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._options = [];
	        this._current = null;
	    };
	    ComboBoxBase.prototype.onToJson = function (json) {
	        if (this._options) {
	            json.options = JSON.parse(JSON.stringify(this._options));
	        }
	    };
	    ComboBoxBase.prototype.onFromJson = function (json) {
	        if (json.options) {
	            this._options = JSON.parse(JSON.stringify(json.options));
	        }
	    };
	    ComboBoxBase.prototype.getDefProps = function () {
	        return ComboBoxBase.defProps;
	    };
	    ComboBoxBase.defProps = Object.assign({}, widget_1.Widget.defProps, { _ih: 25, _lp: 2, _rp: 2 });
	    return ComboBoxBase;
	}(widget_1.Widget));
	exports.ComboBoxBase = ComboBoxBase;
	;
	var ComboBox = (function (_super) {
	    __extends(ComboBox, _super);
	    function ComboBox() {
	        _super.call(this, ComboBox.TYPE);
	    }
	    Object.defineProperty(ComboBox.prototype, "customDraw", {
	        get: function () {
	            return this._customDraw;
	        },
	        set: function (value) {
	            this._customDraw = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBox.prototype, "text", {
	        get: function () {
	            return this._current ? this._current.text : "";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComboBox.prototype.getFgImageRect = function (style) {
	        var h = this.clientH;
	        return rect_1.Rect.rect.init(this.w - this.h, this.topPadding, h, h);
	    };
	    ComboBox.prototype.drawText = function (ctx, style) {
	        if (this.customDraw) {
	            var r = rect_1.Rect.rect.init(this.leftPadding, this.topPadding, this.clientW - this.h, this.clientH);
	            this.customDraw(ctx, style, r, this._current);
	        }
	        else {
	            _super.prototype.drawText.call(this, ctx, style);
	        }
	        return this;
	    };
	    ComboBox.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (!this._isPopupOpened) {
	            this.showPopup();
	        }
	    };
	    ComboBox.create = function (options) {
	        return ComboBox.recycleBin.create().reset(ComboBox.TYPE, options);
	    };
	    ComboBox.TYPE = "combo-box";
	    ComboBox.recycleBin = new recyclable_creator_1.RecyclableCreator(function () { return new ComboBox(); });
	    return ComboBox;
	}(ComboBoxBase));
	exports.ComboBox = ComboBox;
	;
	widget_factory_1.WidgetFactory.register(ComboBox.TYPE, ComboBox.create);
	var ComboBoxEditable = (function (_super) {
	    __extends(ComboBoxEditable, _super);
	    function ComboBoxEditable() {
	        _super.call(this, ComboBoxEditable.TYPE);
	    }
	    Object.defineProperty(ComboBoxEditable.prototype, "value", {
	        get: function () {
	            return this._edit ? this._edit.text : this._value;
	        },
	        set: function (value) {
	            this._value = value;
	            if (this._edit) {
	                this._edit.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComboBoxEditable.prototype.onItemSelected = function (data) {
	        if (data) {
	            _super.prototype.onItemSelected.call(this, data);
	            if (this._edit) {
	                this._edit.text = data.text || data.value;
	            }
	        }
	    };
	    ComboBoxEditable.prototype.relayoutChildren = function () {
	        this.requestRedraw();
	        if (this._edit && this._button) {
	            var x = this.leftPadding;
	            var y = this.topPadding;
	            var w = this.clientW - this.h;
	            var h = this.clientH;
	            this._edit.moveResizeTo(x, y, w, h, 0);
	            x = this.w - this.h;
	            w = this.h - this.rightPadding;
	            this._button.moveResizeTo(x, y, w, h, 0);
	        }
	        return this.getLayoutRect();
	    };
	    ComboBoxEditable.prototype.dispose = function () {
	        this._edit = null;
	        this._button = null;
	        _super.prototype.dispose.call(this);
	    };
	    ComboBoxEditable.prototype.onReset = function () {
	        var _this = this;
	        _super.prototype.onReset.call(this);
	        this.padding = 0;
	        this._edit = edit_1.Edit.create({ multiLineMode: false });
	        this.addChild(this._edit);
	        this._button = button_1.Button.create({ styleType: "combo-box.button" });
	        this.addChild(this._button);
	        this._button.on(Events.CLICK, function (evt) {
	            if (!_this._isPopupOpened) {
	                _this.showPopup();
	            }
	        });
	    };
	    ComboBoxEditable.create = function (options) {
	        return ComboBoxEditable.recycleBin.create().reset(ComboBoxEditable.TYPE, options);
	    };
	    ComboBoxEditable.TYPE = "combo-box.editable";
	    ComboBoxEditable.recycleBin = new recyclable_creator_1.RecyclableCreator(function () {
	        return new ComboBoxEditable();
	    });
	    return ComboBoxEditable;
	}(ComboBoxBase));
	exports.ComboBoxEditable = ComboBoxEditable;
	;
	widget_factory_1.WidgetFactory.register(ComboBoxEditable.TYPE, ComboBoxEditable.create);


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var scroll_view_1 = __webpack_require__(104);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var list_layouter_1 = __webpack_require__(117);
	var ListView = (function (_super) {
	    __extends(ListView, _super);
	    function ListView(type) {
	        _super.call(this, type || ListView.TYPE);
	    }
	    Object.defineProperty(ListView.prototype, "itemSpacing", {
	        get: function () {
	            return this._is;
	        },
	        set: function (value) {
	            this._is = value;
	            var layouter = this._childrenLayouter;
	            layouter.spacing = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ListView.prototype, "itemH", {
	        get: function () {
	            return this._ih;
	        },
	        set: function (value) {
	            this._ih = value;
	            var layouter = this._childrenLayouter;
	            layouter.h = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ListView.prototype, "childrenLayouter", {
	        get: function () {
	            return this._childrenLayouter;
	        },
	        set: function (layouter) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListView.prototype.beforeDrawChildren = function (ctx) {
	        _super.prototype.beforeDrawChildren.call(this, ctx);
	    };
	    ListView.prototype.afterDrawChildren = function (ctx) {
	        _super.prototype.afterDrawChildren.call(this, ctx);
	    };
	    ListView.prototype.doDrawChildren = function (ctx) {
	        var top = this.offsetY;
	        var bottom = top + this.h;
	        this._children.forEach(function (child) {
	            var visible = child.visible && child.y < bottom && (child.y + child.h) > top;
	            if (visible) {
	                child.draw(ctx);
	            }
	        });
	    };
	    Object.defineProperty(ListView.prototype, "desireHeight", {
	        get: function () {
	            var itemH = this.itemH;
	            var h = this.topPadding + this.bottomPadding;
	            this.children.forEach(function (child) {
	                var param = child.layoutParam;
	                if (param) {
	                    h += param.h || itemH;
	                }
	                else {
	                    h += child.h || itemH;
	                }
	            });
	            return h;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListView.prototype.relayoutChildren = function () {
	        var r = _super.prototype.relayoutChildren.call(this);
	        this.contentW = r.w + this.leftPadding + this.rightPadding;
	        this.contentH = r.h + this.topPadding + this.bottomPadding;
	        return r;
	    };
	    ListView.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.scrollerOptions.scrollingX = false;
	        this._childrenLayouter = list_layouter_1.ListLayouter.create({ height: this.itemH, spacing: 0 });
	    };
	    ListView.prototype.getDefProps = function () {
	        return ListView.defProps;
	    };
	    ListView.create = function (options) {
	        return ListView.recycleBinListView.create(options);
	    };
	    ListView.defProps = Object.assign({}, widget_1.Widget.defProps, { _ih: 30, _is: 0 });
	    ListView.TYPE = "list-view";
	    ListView.recycleBinListView = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ListView);
	    return ListView;
	}(scroll_view_1.ScrollView));
	exports.ListView = ListView;
	;
	widget_factory_1.WidgetFactory.register(ListView.TYPE, ListView.create);


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var layouter_1 = __webpack_require__(82);
	var TYPE = "list";
	/**
	 * 列表布局器。
	 */
	var ListLayouter = (function (_super) {
	    __extends(ListLayouter, _super);
	    function ListLayouter() {
	        _super.call(this);
	        this.rect = rect_1.Rect.create(0, 0, 0, 0);
	    }
	    Object.defineProperty(ListLayouter.prototype, "type", {
	        get: function () {
	            return TYPE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 设置参数。
	     */
	    ListLayouter.prototype.setOptions = function (options) {
	        this.h = options.h || 80;
	        this.spacing = options.spacing || 0;
	        return this;
	    };
	    ListLayouter.prototype.layoutChildren = function (widget, children, rect) {
	        var x = rect.x;
	        var y = rect.y;
	        var w = rect.w;
	        var h = this.h;
	        var spacing = this.spacing;
	        var arr = widget.children;
	        for (var i = 0, n = arr.length; i < n; i++) {
	            var child = arr[i];
	            var param = child.layoutParam;
	            if (!child.visible) {
	                continue;
	            }
	            if (param && param.type === TYPE) {
	                h = param.h || this.h;
	                spacing = param.spacing || this.spacing;
	            }
	            else {
	                h = this.h;
	                spacing = i ? this.spacing : 0;
	            }
	            y += spacing;
	            child.moveResizeTo(x, y, w, h);
	            child.relayoutChildren();
	            y += h;
	        }
	        this.rect.init(rect.x, rect.y, w, y - rect.y);
	        return this.rect;
	    };
	    ListLayouter.prototype.createParam = function (options) {
	        return ListLayouterParam.create(options);
	    };
	    ListLayouter.create = function (options) {
	        var layouter = new ListLayouter();
	        return layouter.setOptions(options);
	    };
	    return ListLayouter;
	}(layouter_1.Layouter));
	exports.ListLayouter = ListLayouter;
	;
	layouter_1.LayouterFactory.register(TYPE, ListLayouter.create);
	/**
	 * 列表布局器的参数。
	 *
	 * 如果父控件使用ListLayouter布局器，则子控件需要把layoutParam设置为ListLayouterParam。
	 *
	 */
	var ListLayouterParam = (function (_super) {
	    __extends(ListLayouterParam, _super);
	    function ListLayouterParam(h, spacing) {
	        _super.call(this, TYPE);
	        this.h = h || 0;
	        this.spacing = spacing || 0;
	    }
	    ListLayouterParam.create = function (opt) {
	        var options = opt || {};
	        return new ListLayouterParam(options.h || options.height, options.spacing);
	    };
	    return ListLayouterParam;
	}(layouter_1.LayouterParam));
	exports.ListLayouterParam = ListLayouterParam;
	;
	layouter_1.LayouterParamFactory.register(TYPE, ListLayouterParam.create);


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var graphics_1 = __webpack_require__(29);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var image_tile_1 = __webpack_require__(11);
	(function (ListItemStyle) {
	    ListItemStyle[ListItemStyle["NORMAL"] = 0] = "NORMAL";
	    ListItemStyle[ListItemStyle["FIRST"] = 1] = "FIRST";
	    ListItemStyle[ListItemStyle["LAST"] = 2] = "LAST";
	})(exports.ListItemStyle || (exports.ListItemStyle = {}));
	var ListItemStyle = exports.ListItemStyle;
	;
	/**
	 * 列表项。
	 */
	var ListItem = (function (_super) {
	    __extends(ListItem, _super);
	    function ListItem(type) {
	        _super.call(this, type || ListItem.TYPE);
	    }
	    Object.defineProperty(ListItem.prototype, "oddEvenStyle", {
	        get: function () {
	            return this._oddEvenStyle;
	        },
	        /**
	         * 奇数行和偶数行是否采用不同的风格。
	         */
	        set: function (value) {
	            this._oddEvenStyle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListItem.prototype.getStyleType = function () {
	        if (!this._oddEvenStyle) {
	            return _super.prototype.getStyleType.call(this);
	        }
	        return this._index % 2 ? "list-item.even" : "list-item.odd";
	    };
	    ListItem.prototype.relayoutChildren = function () {
	        if (this.parent) {
	            this._index = this.parent.children.indexOf(this);
	        }
	        return _super.prototype.relayoutChildren.call(this);
	    };
	    Object.defineProperty(ListItem.prototype, "iconURL", {
	        get: function () {
	            return this._iconURL;
	        },
	        set: function (value) {
	            var _this = this;
	            if (value) {
	                this._icon = image_tile_1.ImageTile.create(value, function (evt) {
	                    _this.requestRedraw();
	                });
	            }
	            else {
	                this._icon = null;
	            }
	            this._iconURL = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListItem.prototype.drawBackground = function (ctx, style) {
	        if (style.backGroundImage) {
	            style.backGroundImage.draw(ctx, style.backGroundImageDrawType, 0, 0, this.w, this.h);
	        }
	        else if (style.backGroundColor || (style.lineColor && style.lineWidth)) {
	            graphics_1.Graphics.drawRect(ctx, style.backGroundColor, null, 0, 0, 0, this.w, this.h);
	            if (this.listItemStyle === ListItemStyle.FIRST) {
	                graphics_1.Graphics.drawLine(ctx, style.lineColor, style.lineWidth, 0, 0, this.w, 0);
	            }
	            graphics_1.Graphics.drawLine(ctx, style.lineColor, style.lineWidth, 0, this.h, this.w, this.h);
	        }
	        return this;
	    };
	    ListItem.prototype.drawImage = function (ctx, style) {
	        var icon = this._icon;
	        var y = this.topPadding;
	        var x = this.leftPadding;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        var w = h;
	        if (icon) {
	            icon.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	        }
	        return this;
	    };
	    ListItem.prototype.getTextRect = function (style) {
	        var x = this.leftPadding;
	        if (this._icon) {
	            x += this.h;
	        }
	        var y = this.topPadding;
	        var w = this.w - x - this.rightPadding;
	        var h = this.h - y - this.bottomPadding;
	        if (style.foreGroundImage) {
	            w -= this.h;
	        }
	        return rect_1.Rect.rect.init(x, y, w, h);
	    };
	    ListItem.prototype.getDefProps = function () {
	        return ListItem.defProps;
	    };
	    ListItem.create = function (options) {
	        return ListItem.recycleBin.create(options);
	    };
	    ListItem.defProps = Object.assign({}, widget_1.Widget.defProps, { _oddEvenStyle: false, _iconURL: null });
	    ListItem.TYPE = "list-item";
	    ListItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ListItem);
	    return ListItem;
	}(widget_1.Widget));
	exports.ListItem = ListItem;
	;
	widget_factory_1.WidgetFactory.register(ListItem.TYPE, ListItem.create);
	var ListItemCheckable = (function (_super) {
	    __extends(ListItemCheckable, _super);
	    function ListItemCheckable(type) {
	        _super.call(this, type || ListItemCheckable.TYPE);
	    }
	    Object.defineProperty(ListItemCheckable.prototype, "multiCheckable", {
	        get: function () {
	            return this._multiCheckable;
	        },
	        set: function (value) {
	            this._multiCheckable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListItemCheckable.prototype.drawImage = function (ctx, style) {
	        if (this.value) {
	            var icon = style.foreGroundImage;
	            if (icon) {
	                var h = this.h - this.topPadding - this.bottomPadding;
	                var w = h;
	                var y = this.topPadding;
	                var x = this.w - this.rightPadding - w;
	                icon.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	            }
	        }
	        return _super.prototype.drawImage.call(this, ctx, style);
	    };
	    ListItemCheckable.prototype.dispatchClick = function (evt) {
	        this.value = !this.value;
	        _super.prototype.dispatchClick.call(this, evt);
	    };
	    Object.defineProperty(ListItemCheckable.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        set: function (value) {
	            this.setValue(value, true, !this.multiCheckable);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ListItemCheckable.create = function (options) {
	        return ListItemCheckable.rBin.create(options);
	    };
	    ListItemCheckable.TYPE = "list-item.checkable";
	    ListItemCheckable.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ListItemCheckable);
	    return ListItemCheckable;
	}(ListItem));
	exports.ListItemCheckable = ListItemCheckable;
	;
	widget_factory_1.WidgetFactory.register(ListItemCheckable.TYPE, ListItemCheckable.create);


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var layouter_1 = __webpack_require__(82);
	var TYPE = "simple";
	/**
	 * 简单的布局器。
	 */
	var SimpleLayouter = (function (_super) {
	    __extends(SimpleLayouter, _super);
	    function SimpleLayouter() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(SimpleLayouter.prototype, "type", {
	        get: function () {
	            return TYPE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SimpleLayouter.prototype.layoutChildren = function (widget, children, rect) {
	        var arr = widget.children;
	        for (var i = 0, n = arr.length; i < n; i++) {
	            this.layoutChild(arr[i], rect);
	        }
	        return rect;
	    };
	    SimpleLayouter.prototype.layoutChild = function (child, r) {
	        var pw = r.w;
	        var ph = r.h;
	        var param = child.layoutParam;
	        if (param && param.type === TYPE && child.visible) {
	            var w = layouter_1.Layouter.evalValue(param.w, pw);
	            var h = layouter_1.Layouter.evalValue(param.h, ph);
	            if (param.minW >= 0) {
	                w = Math.max(w, param.minW);
	            }
	            if (param.minH >= 0) {
	                h = Math.max(h, param.minH);
	            }
	            if (param.maxW >= 0) {
	                w = Math.min(w, param.maxW);
	            }
	            if (param.maxH >= 0) {
	                h = Math.min(h, param.maxH);
	            }
	            var f = param.x[0];
	            var x = (f === "c" || f === "m") ? (pw - w) >> 1 : layouter_1.Layouter.evalValue(param.x, pw);
	            f = param.y[0];
	            var y = (f === "c" || f === "m") ? (ph - h) >> 1 : layouter_1.Layouter.evalValue(param.y, ph);
	            child.moveResizeTo(r.x + x, r.y + y, w, h);
	            child.relayoutChildren();
	        }
	    };
	    SimpleLayouter.prototype.createParam = function (options) {
	        return SimpleLayouterParam.create(options);
	    };
	    SimpleLayouter.create = function (options) {
	        var layouter = new SimpleLayouter();
	        return layouter.setOptions(options);
	    };
	    return SimpleLayouter;
	}(layouter_1.Layouter));
	exports.SimpleLayouter = SimpleLayouter;
	;
	layouter_1.LayouterFactory.register(TYPE, SimpleLayouter.create);
	/**
	 * 简单的布局器的参数。
	 *
	 * 如果父控件使用SimpleLayouter布局器，则子控件需要把layoutParam设置为SimpleLayouterParam。
	 *
	 * 对于x/y/w/h参数：
	 * *.如果以px结尾，则直接取它的值。
	 * *.如果以%结尾，则表示父控件的宽度/高度的百分比。
	 * *.如果以-开头，则表示父控件的宽度/高度的减去该值。
	 *
	 * x也可以为『center』，表示水平居中。
	 * y也可以为『middle』，表示垂直居中。
	 *
	 * 示例：
	 *
	 * 父控件的宽度为800，高度为600:
	 *
	 * param.x = "10px"  则 x = 10;
	 * param.x = "10%"   则 x = 80;
	 * param.x = "-10%"  则 x = 720;
	 * param.x = "-10px" 则 x = 790;
	 *
	 */
	var SimpleLayouterParam = (function (_super) {
	    __extends(SimpleLayouterParam, _super);
	    function SimpleLayouterParam(x, y, w, h) {
	        _super.call(this, TYPE);
	        this.x = x;
	        this.y = y;
	        this.w = w;
	        this.h = h;
	        this.minW = -1;
	        this.minH = -1;
	        this.maxW = -1;
	        this.maxH = -1;
	    }
	    SimpleLayouterParam.create = function (opts) {
	        var options = opts || {};
	        return new SimpleLayouterParam(options.x || '0px', options.y || 'center', options.w || '100%', options.h || '100%');
	    };
	    return SimpleLayouterParam;
	}(layouter_1.LayouterParam));
	exports.SimpleLayouterParam = SimpleLayouterParam;
	;
	layouter_1.LayouterParamFactory.register(TYPE, SimpleLayouterParam.create);


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var grid_layouter_1 = __webpack_require__(121);
	var scroll_view_1 = __webpack_require__(104);
	/**
	 * 网格视图。
	 */
	var GridView = (function (_super) {
	    __extends(GridView, _super);
	    function GridView() {
	        _super.call(this, GridView.TYPE);
	    }
	    Object.defineProperty(GridView.prototype, "cols", {
	        get: function () {
	            return this._cols;
	        },
	        /**
	         * 列数。列数和列宽设置其中之一即可。
	         */
	        set: function (value) {
	            this._cols = value;
	            var layouter = this._childrenLayouter;
	            layouter.cols = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "colWidth", {
	        get: function () {
	            return this._colWidth;
	        },
	        /**
	         * 列宽。列数和列宽设置其中之一即可。
	         */
	        set: function (value) {
	            this._colWidth = value;
	            var layouter = this._childrenLayouter;
	            layouter.colWidth = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rows", {
	        get: function () {
	            return this._rows;
	        },
	        /**
	         * 行数。行数和行高设置其中之一即可。
	         */
	        set: function (value) {
	            this._rows = value;
	            var layouter = this._childrenLayouter;
	            layouter.rows = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GridView.prototype, "rowHeight", {
	        get: function () {
	            return this._rowHeight;
	        },
	        /**
	         * 行高。行数和行高设置其中之一即可。
	         */
	        set: function (value) {
	            this._rowHeight = value;
	            var layouter = this._childrenLayouter;
	            layouter.rowHeight = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 每一网格周围的空白。
	     */
	    GridView.prototype.setItemMargins = function (margins) {
	        var layouter = this._childrenLayouter;
	        layouter.leftMargin = margins.left || margins.all || 0;
	        layouter.rightMargin = margins.right || margins.all || 0;
	        layouter.topMargin = margins.top || margins.all || 0;
	        layouter.bottomMargin = margins.bottom || margins.all || 0;
	        return this;
	    };
	    Object.defineProperty(GridView.prototype, "childrenLayouter", {
	        get: function () {
	            return this._childrenLayouter;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GridView.prototype.doDrawChildren = function (ctx) {
	        var top = this.offsetY;
	        var bottom = top + this.h;
	        this._children.forEach(function (child) {
	            var visible = child.visible && child.y < bottom && (child.y + child.h) > top;
	            if (visible) {
	                child.draw(ctx);
	            }
	        });
	        return this;
	    };
	    GridView.prototype.relayoutChildren = function () {
	        this.ensureOptions();
	        var r = _super.prototype.relayoutChildren.call(this);
	        this.contentW = r.w + this.leftPadding + this.rightPadding;
	        this.contentH = r.h + this.topPadding + this.bottomPadding;
	        return r;
	    };
	    GridView.prototype.ensureOptions = function () {
	        if (this.rows > 0 && this.cols > 0) {
	            this.scrollerOptions.scrollingX = false;
	            this.scrollerOptions.scrollingY = false;
	            this.scrollBarStyle.vBarVisibility = scroll_view_1.ScrollerBarVisibility.INVISIBLE;
	            this.scrollBarStyle.hBarVisibility = scroll_view_1.ScrollerBarVisibility.INVISIBLE;
	        }
	        else if (this.cols > 0) {
	            this.scrollerOptions.scrollingX = false;
	            this.scrollerOptions.scrollingY = true;
	            this.scrollBarStyle.vBarVisibility = scroll_view_1.ScrollerBarVisibility.AUTO;
	            this.scrollBarStyle.hBarVisibility = scroll_view_1.ScrollerBarVisibility.INVISIBLE;
	        }
	        else if (this.rows > 0) {
	            this.scrollerOptions.scrollingX = true;
	            this.scrollerOptions.scrollingY = false;
	            this.scrollBarStyle.hBarVisibility = scroll_view_1.ScrollerBarVisibility.AUTO;
	            this.scrollBarStyle.vBarVisibility = scroll_view_1.ScrollerBarVisibility.INVISIBLE;
	        }
	        else {
	            this.scrollerOptions.scrollingX = false;
	            this.scrollerOptions.scrollingY = true;
	            this.scrollBarStyle.vBarVisibility = scroll_view_1.ScrollerBarVisibility.AUTO;
	            this.scrollBarStyle.hBarVisibility = scroll_view_1.ScrollerBarVisibility.INVISIBLE;
	        }
	    };
	    GridView.prototype.onToJson = function (json) {
	        delete json.childrenLayouter;
	    };
	    GridView.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        this.relayoutChildren();
	    };
	    GridView.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._childrenLayouter = grid_layouter_1.GridLayouter.create({ cols: this.cols, rows: this.rows });
	    };
	    GridView.prototype.getDefProps = function () {
	        return GridView.defProps;
	    };
	    GridView.create = function (options) {
	        return GridView.recycleBinGridView.create(options);
	    };
	    GridView.defProps = Object.assign({}, scroll_view_1.ScrollView.defProps, { _cols: 3, _rows: 3, _rowHeight: 0, _colWidth: 0 });
	    GridView.TYPE = "grid-view";
	    GridView.recycleBinGridView = widget_recyclable_creator_1.WidgetRecyclableCreator.create(GridView);
	    return GridView;
	}(scroll_view_1.ScrollView));
	exports.GridView = GridView;
	;
	widget_factory_1.WidgetFactory.register(GridView.TYPE, GridView.create);


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var layouter_1 = __webpack_require__(82);
	var TYPE = "grid";
	/**
	 * 网格布局器。
	 */
	var GridLayouter = (function (_super) {
	    __extends(GridLayouter, _super);
	    function GridLayouter() {
	        _super.call(this);
	        this.rect = rect_1.Rect.create(0, 0, 0, 0);
	    }
	    Object.defineProperty(GridLayouter.prototype, "type", {
	        get: function () {
	            return TYPE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 设置参数。
	     */
	    GridLayouter.prototype.setOptions = function (options) {
	        this.cols = options.cols || 0;
	        this.rows = options.rows || 0;
	        this.colWidth = options.colWidth || 0;
	        this.rowHeight = options.rowHeight || 0;
	        this.leftMargin = options.leftMargin || options.margin || 0;
	        this.rightMargin = options.rightMargin || options.margin || 0;
	        this.topMargin = options.topMargin || options.margin || 0;
	        this.bottomMargin = options.bottomMargin || options.margin || 0;
	        if (!this.cols && !this.colWidth) {
	            this.cols = 3;
	        }
	        if (!this.rows && !this.rowHeight) {
	            this.rows = 3;
	        }
	        return this;
	    };
	    GridLayouter.prototype.layoutChildren = function (widget, children, r) {
	        var leftMargin = this.leftMargin;
	        var rightMargin = this.rightMargin;
	        var topMargin = this.topMargin;
	        var bottomMargin = this.bottomMargin;
	        var defParam = new GridLayouterParam(-1, 1, -1, 1);
	        var row = 0;
	        var col = 0;
	        var spanCols = 0;
	        var spanRows = 0;
	        var arr = widget.children;
	        var n = widget.children.length;
	        var cols = this.cols;
	        var rows = this.rows;
	        if (!cols && !rows) {
	            cols = Math.floor(r.w / this.colWidth);
	        }
	        var iw = cols > 0 ? r.w / cols : this.colWidth;
	        var ih = rows > 0 ? r.h / rows : this.rowHeight;
	        var ret = this.rect.copy(r);
	        for (var i = 0; i < n; i++) {
	            var child = arr[i];
	            var param = child.layoutParam || defParam;
	            if (!child.visible) {
	                continue;
	            }
	            if (cols > 0) {
	                col = i % cols;
	                row = Math.floor(i / cols);
	            }
	            else if (rows > 0) {
	                row = i % rows;
	                col = Math.floor(i / rows);
	            }
	            if (param.col >= 0) {
	                col = param.col;
	            }
	            if (param.row >= 0) {
	                row = param.row;
	            }
	            spanRows = Math.max(param.spanRows, 1);
	            spanCols = Math.max(param.spanCols, 1);
	            var x = col * iw + leftMargin + r.x;
	            var y = row * ih + topMargin + r.y;
	            var w = iw * spanCols - leftMargin - rightMargin;
	            var h = ih * spanRows - topMargin - bottomMargin;
	            child.moveResizeTo(x, y, w, h);
	            child.relayoutChildren();
	            ret.w = Math.max(x + w - r.x, r.w);
	            ret.h = Math.max(y + h - r.y, r.h);
	        }
	        return ret;
	    };
	    GridLayouter.prototype.createParam = function (options) {
	        return GridLayouterParam.create(options);
	    };
	    GridLayouter.create = function (options) {
	        var layouter = new GridLayouter();
	        return layouter.setOptions(options);
	    };
	    return GridLayouter;
	}(layouter_1.Layouter));
	exports.GridLayouter = GridLayouter;
	;
	layouter_1.LayouterFactory.register(TYPE, GridLayouter.create);
	/**
	 * 网格布局器的参数。
	 *
	 * 如果父控件使用GridLayouter布局器，则子控件需要把layoutParam设置为GridLayouterParam。
	 *
	 */
	var GridLayouterParam = (function (_super) {
	    __extends(GridLayouterParam, _super);
	    function GridLayouterParam(row, spanRows, col, spanCols) {
	        _super.call(this, TYPE);
	        this.row = row >= 0 ? row : -1;
	        this.col = col >= 0 ? col : -1;
	        this.spanRows = spanRows || 1;
	        this.spanCols = spanCols || 1;
	    }
	    GridLayouterParam.create = function (opts) {
	        var options = opts || {};
	        return new GridLayouterParam(options.row, options.spanRows, options.col, options.spanCols);
	    };
	    return GridLayouterParam;
	}(layouter_1.LayouterParam));
	exports.GridLayouterParam = GridLayouterParam;
	;
	layouter_1.LayouterParamFactory.register(TYPE, GridLayouterParam.create);


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var widget_factory_1 = __webpack_require__(27);
	var graphics_1 = __webpack_require__(29);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var widget_1 = __webpack_require__(23);
	/**
	 * 树形视图中，显示的一个子项。
	 */
	var TreeItem = (function (_super) {
	    __extends(TreeItem, _super);
	    function TreeItem() {
	        _super.call(this, TreeItem.TYPE);
	    }
	    Object.defineProperty(TreeItem.prototype, "text", {
	        /**
	         * 显示的文本，从data中获取。
	         */
	        get: function () {
	            return this._data.text;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "icon", {
	        /**
	         * 显示的图标，从data中获取。
	         */
	        get: function () {
	            return this._data.icon;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "userData", {
	        /**
	         * 显示的图标，从data中获取。
	         */
	        get: function () {
	            return this._data.userData;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "desireWidth", {
	        get: function () {
	            var text = this.data.text;
	            var style = this.getStyle();
	            var w = this._level * this._indention + this.h;
	            if (text) {
	                w += graphics_1.Graphics.measureText(text, style.font);
	            }
	            return w;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "visible", {
	        /**
	         * 可见性判断：要求父控件没有折叠。
	         */
	        get: function () {
	            var item = this.parentItem;
	            while (item !== null) {
	                if (!item.expanded) {
	                    return false;
	                }
	                item = item.parentItem;
	            }
	            return this._visible;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "parentItem", {
	        get: function () {
	            return this._parentItem;
	        },
	        set: function (parentItem) {
	            this._parentItem = parentItem;
	            if (parentItem) {
	                parentItem._childrenItems.push(this);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "childrenItems", {
	        get: function () {
	            return this._childrenItems;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "level", {
	        get: function () {
	            return this._level;
	        },
	        set: function (value) {
	            this._level = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "selected", {
	        get: function () {
	            return this.data.selected;
	        },
	        set: function (value) {
	            this.data.selected = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "isLeaf", {
	        get: function () {
	            var data = this._data;
	            return !data.children || !data.children.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        set: function (value) {
	            this._data = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "indention", {
	        get: function () {
	            return this._indention;
	        },
	        set: function (value) {
	            this._indention = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeItem.prototype, "expanded", {
	        get: function () {
	            return this.data.expanded;
	        },
	        set: function (value) {
	            this.data.expanded = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TreeItem.prototype.getStateForStyle = function () {
	        return this.selected ? widget_1.WidgetState.SELECTED : this._state;
	    };
	    TreeItem.prototype.getStyleType = function () {
	        if (this._styleType) {
	            return this._styleType;
	        }
	        var appendix = this.isLeaf ? "leaf" : (this.expanded ? "expanded" : "collapsed");
	        return (this.type) + "." + appendix;
	    };
	    TreeItem.prototype.drawImage = function (ctx, style) {
	        var img = style.foreGroundImage;
	        if (img) {
	            var y = 0;
	            var w = this.h;
	            var h = this.h;
	            var x = this._level * this._indention;
	            img.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	        }
	        return this;
	    };
	    TreeItem.prototype.drawText = function (ctx, style) {
	        var text = this.data.text;
	        if (text && style.textColor) {
	            var y = 0;
	            var h = this.h;
	            var x = this._level * this._indention;
	            if (style.foreGroundImage) {
	                x += h;
	            }
	            var w = this.x + this.w - x;
	            graphics_1.Graphics.drawTextSL(ctx, text, style, rect_1.Rect.rect.init(x, y, w, h));
	        }
	        return this;
	    };
	    TreeItem.prototype.dispatchDblClick = function (evt) {
	        _super.prototype.dispatchDblClick.call(this, evt);
	        if (!this.isLeaf) {
	            this.expanded = !this.expanded;
	            this.parent.relayoutChildren();
	        }
	    };
	    TreeItem.prototype.dispatchClick = function (evt) {
	        if (!this.isLeaf) {
	            var p = this.toLocalPoint(point_1.Point.point.copy(evt));
	            var y = 0;
	            var w = this.h;
	            var h = this.h;
	            var x = this._level * this._indention;
	            if (p.isIn(x, y, w, h)) {
	                this.expanded = !this.expanded;
	                this.parent.relayoutChildren();
	            }
	        }
	        var parent = this.parent;
	        if (evt.ctrlKey && parent.multiSelectable) {
	            parent.setItemSelected(this, !this.selected, false);
	        }
	        else {
	            parent.setItemSelected(this, true, true);
	        }
	        _super.prototype.dispatchClick.call(this, evt);
	    };
	    TreeItem.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._data = null;
	        this.parentItem = null;
	        this._childrenItems = null;
	    };
	    TreeItem.prototype.onReset = function () {
	        this._level = 0;
	        this._data = null;
	        this._indention = 30;
	        this._parentItem = null;
	        this._childrenItems = [];
	    };
	    TreeItem.create = function (options) {
	        return TreeItem.recycleBin.create(options);
	    };
	    TreeItem.TYPE = "tree-item";
	    TreeItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TreeItem);
	    return TreeItem;
	}(widget_1.Widget));
	exports.TreeItem = TreeItem;
	;
	widget_factory_1.WidgetFactory.register(TreeItem.TYPE, TreeItem.create);


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tree_item_1 = __webpack_require__(122);
	var list_view_1 = __webpack_require__(116);
	var tree_item_data_1 = __webpack_require__(124);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 树形视图。
	 */
	var TreeView = (function (_super) {
	    __extends(TreeView, _super);
	    function TreeView() {
	        _super.call(this);
	        this.type = TreeView.TYPE;
	    }
	    Object.defineProperty(TreeView.prototype, "multiSelectable", {
	        get: function () {
	            return this._multiSelectable;
	        },
	        set: function (value) {
	            this._multiSelectable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeView.prototype, "indention", {
	        /**
	         * 每一层缩减的距离。
	         */
	        get: function () {
	            return this._indention || 30;
	        },
	        set: function (value) {
	            this._indention = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 选中一个子项。
	     */
	    TreeView.prototype.setItemSelected = function (item, selected, exclude) {
	        if (!this.multiSelectable || exclude) {
	            this.children.forEach(function (child) {
	                if (child === item) {
	                    child.selected = selected;
	                }
	                else {
	                    if (child.selected) {
	                        child.selected = false;
	                    }
	                }
	            });
	        }
	        else {
	            item.selected = selected;
	        }
	        this.requestRedraw();
	        return this;
	    };
	    TreeView.prototype.addItem = function (parentData, text, data, image) {
	        parentData = parentData ? parentData : this._rootData;
	        var itemData = parentData.addChild(text, image, data);
	        this.reload();
	        return itemData;
	    };
	    TreeView.prototype.removeAllItems = function () {
	        this._rootData.children.length = 0;
	        this.reload();
	    };
	    TreeView.prototype.removeItem = function (item, destroy) {
	        var ret = item.parent.removeChild(item, destroy);
	        this.reload();
	        return ret;
	    };
	    TreeView.prototype.doLoad = function (data, parentItem, level) {
	        var _this = this;
	        var item = tree_item_1.TreeItem.create();
	        var isLeaf = !data.children || !data.children.length;
	        data.treeItem = item;
	        item.set({ level: level, indention: this.indention, data: data, parentItem: parentItem });
	        this.addChild(item, true);
	        if (!isLeaf) {
	            data.children.forEach(function (iter) {
	                _this.doLoad(iter, item, level + 1);
	            });
	        }
	    };
	    TreeView.prototype.reload = function () {
	        var _this = this;
	        this.resetChilren();
	        this._rootData.children.forEach(function (data) {
	            _this.doLoad(data, null, 0);
	        });
	        this.relayoutChildren();
	    };
	    TreeView.prototype.loadData = function (data) {
	        if (data.text === "%root%") {
	            this._rootData = data;
	        }
	        else {
	            this._rootData.children.length = 0;
	            this._rootData.children.push(data);
	        }
	        this.reload();
	        return this;
	    };
	    TreeView.prototype.getLayoutWidth = function () {
	        var w = 0;
	        this.children.forEach(function (child) {
	            var desireWidth = child.desireWidth;
	            if (desireWidth > w) {
	                w = desireWidth;
	            }
	        });
	        return Math.max(this.w, w + this.itemH * 2);
	    };
	    TreeView.prototype.resetChilren = function () {
	        this.children.forEach(function (child) {
	            child.deinit();
	            child.dispose();
	        });
	        this.children.length = 0;
	        return this;
	    };
	    TreeView.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._rootData = tree_item_data_1.TreeItemData.create("root", null, null);
	        this.scrollerOptions.scrollingX = true;
	    };
	    TreeView.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._rootData = null;
	    };
	    TreeView.create = function (options) {
	        return TreeView.recycleBinTreeView.create(options);
	    };
	    TreeView.TYPE = "tree-view";
	    TreeView.recycleBinTreeView = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TreeView);
	    return TreeView;
	}(list_view_1.ListView));
	exports.TreeView = TreeView;
	;
	widget_factory_1.WidgetFactory.register(TreeView.TYPE, TreeView.create);


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var utils_1 = __webpack_require__(25);
	var emitter_1 = __webpack_require__(8);
	var image_tile_1 = __webpack_require__(11);
	/**
	 * TreeItem对应的数据信息。
	 */
	var TreeItemData = (function (_super) {
	    __extends(TreeItemData, _super);
	    function TreeItemData(text, iconURL, userData) {
	        _super.call(this);
	        this.userData = userData;
	        this.text = text;
	        if (iconURL) {
	            this.icon = image_tile_1.ImageTile.create(iconURL, function (evt) {
	            });
	        }
	        else {
	            this.icon = null;
	        }
	        this.children = [];
	        return;
	    }
	    /**
	     * 从子节点数组中删除指定的子节点。
	     * @param data 子节点。
	     * @param destroy 是否销毁该子节点。
	     * @returns 成功返回true失败返回false。
	     */
	    TreeItemData.prototype.removeChild = function (data, destroy) {
	        if (utils_1.aRemove(this.children, data)) {
	            data.parent = null;
	            if (destroy) {
	                data.dispose();
	            }
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    /**
	     * 增加一个子节点。
	     * @param text 文本
	     * @param icon 图标
	     * @param data 数据
	     * @returns 成功返回新增的子节点，失败返回null。
	     */
	    TreeItemData.prototype.addChild = function (text, icon, userData) {
	        var itemData = TreeItemData.create(text, icon, userData);
	        this.children.push(itemData);
	        itemData.parent = this;
	        return itemData;
	    };
	    TreeItemData.prototype.dispose = function () {
	        this.userData = null;
	        this.text = null;
	        this.icon = null;
	        this.parent = null;
	        this.children.forEach(function (child) {
	            child.dispose();
	        });
	        this.children = null;
	    };
	    TreeItemData.prototype.reset = function () {
	        this.userData = null;
	        this.text = null;
	        this.icon = null;
	        this.children = [];
	        this.parent = null;
	        return this;
	    };
	    TreeItemData.create = function (text, icon, userData) {
	        return new TreeItemData(text, icon, userData);
	    };
	    return TreeItemData;
	}(emitter_1.Emitter));
	exports.TreeItemData = TreeItemData;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var path = __webpack_require__(13);
	var TWEEN = __webpack_require__(24);
	var Assets = __webpack_require__(15);
	var Events = __webpack_require__(10);
	var consts_1 = __webpack_require__(109);
	var main_loop_1 = __webpack_require__(93);
	var emitter_1 = __webpack_require__(8);
	var view_port_1 = __webpack_require__(91);
	var image_tile_1 = __webpack_require__(11);
	var theme_manager_1 = __webpack_require__(126);
	var device_info_1 = __webpack_require__(127);
	var service_locator_1 = __webpack_require__(128);
	var window_manager_1 = __webpack_require__(129);
	var inputEventAdapter = __webpack_require__(19);
	var interaction_request_1 = __webpack_require__(130);
	var interaction_service_1 = __webpack_require__(132);
	/**
	 * 代表整个应用程序，可以通过Application获取各种服务。
	 *
	 */
	var Application = (function (_super) {
	    __extends(Application, _super);
	    function Application(name) {
	        _super.call(this);
	        this.name = name;
	        this._options = {};
	        this.servicesManager = new service_locator_1.ServiceLocator();
	        var options = this._options;
	        var str = window.location.search.substr(1);
	        var arr = str.split('&');
	        arr.forEach(function (iter) {
	            var keyValue = iter.split("=");
	            options[keyValue[0]] = keyValue[1];
	        });
	        if (!Application.instance) {
	            Application.instance = this;
	        }
	    }
	    Object.defineProperty(Application.prototype, "assets", {
	        get: function () {
	            return Assets;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Application.prototype, "isReady", {
	        get: function () {
	            return this._isReady;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Application.prototype, "mainLoop", {
	        get: function () {
	            return this._mainLoop;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Application.prototype.getMainLoop = function () {
	        return this._mainLoop;
	    };
	    Object.defineProperty(Application.prototype, "options", {
	        get: function () {
	            return this._options;
	        },
	        set: function (options) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Application.prototype.loadScript = function (src) {
	        Assets.loadScript(src);
	    };
	    Application.prototype.preload = function (assetsURLS, onDone, onProgress) {
	        Assets.Group.preload(assetsURLS, function (evt) {
	            if (evt.loaded === evt.total) {
	                if (onDone) {
	                    onDone(evt);
	                }
	            }
	            if (onProgress) {
	                onProgress(evt);
	            }
	        });
	        return this;
	    };
	    Application.prototype.initOptions = function (args) {
	        var options = this._options;
	        for (var key in args) {
	            options[key] = args[key];
	        }
	    };
	    Application.prototype.run = function () {
	        this.dispatchEvent({ type: Events.RUN });
	        this._mainLoop.requestRedraw();
	    };
	    Application.prototype.init = function (args) {
	        var _this = this;
	        this.initOptions(args);
	        var themeManager = new theme_manager_1.ThemeManager();
	        var sysThemeDataURL = this._options.sysThemeDataURL;
	        var appThemeDataURL = this._options.appThemeDataURL;
	        interaction_request_1.InteractionRequest.init(interaction_service_1.InteractionService.init());
	        if (sysThemeDataURL) {
	            Assets.loadJSON(sysThemeDataURL).then(function (json) {
	                var baseURL = path.dirname(sysThemeDataURL);
	                themeManager.load(json, baseURL);
	                return appThemeDataURL;
	            }).then(function (url) {
	                if (url) {
	                    Assets.loadJSON(url).then(function (json) {
	                        var baseURL = path.dirname(url);
	                        themeManager.load(json, baseURL);
	                        _this.dispatchEventAsync({ type: Events.READY });
	                        _this._isReady = true;
	                        _this.onReady(_this);
	                    });
	                }
	                else {
	                    _this.dispatchEventAsync({ type: Events.READY });
	                    _this._isReady = true;
	                    _this.onReady(_this);
	                }
	            });
	        }
	        this.registerService(consts_1.Services.THEME_MANAGER, themeManager);
	        this._viewPort = view_port_1.ViewPort.create(0, 0, 0);
	        this._mainLoop = main_loop_1.MainLoop.create();
	        device_info_1.DeviceInfo.init(navigator.language, navigator.userAgent);
	        inputEventAdapter.init(document, window, device_info_1.DeviceInfo.isPointerSupported, device_info_1.DeviceInfo.isMSPointerSupported, device_info_1.DeviceInfo.isTouchSupported);
	        if (device_info_1.DeviceInfo.isMacOS) {
	            var density = this.viewPort.density;
	            image_tile_1.ImageTile.init(density, 1 / density, function (img) {
	                _this.mainLoop.requestRedraw();
	            });
	        }
	        this._mainLoop.on(Events.PRETICK, function (evt) {
	            var time = evt.deltaTime;
	            TWEEN.update(time);
	        });
	        if (device_info_1.DeviceInfo.isMobile || this.options.isMobile) {
	            this._windwManager = window_manager_1.WindowManager.create({ app: this });
	        }
	        return this;
	    };
	    Application.prototype.getService = function (name) {
	        return this.servicesManager.get(name);
	    };
	    Application.prototype.registerService = function (name, service) {
	        this.servicesManager.register(name, service);
	        return this;
	    };
	    Application.prototype.getThemeManager = function () {
	        return this.getService(consts_1.Services.THEME_MANAGER);
	    };
	    Object.defineProperty(Application.prototype, "viewPort", {
	        get: function () {
	            return this._viewPort;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Application.prototype.getViewPort = function () {
	        return this._viewPort;
	    };
	    /**
	     * 子类可以重载此函数，做App的初始化工作。
	     */
	    Application.prototype.onReady = function (app) {
	    };
	    Application.get = function () {
	        return Application.instance;
	    };
	    Application.create = function (name) {
	        var app = new Application(name);
	        return app;
	    };
	    return Application;
	}(emitter_1.Emitter));
	exports.Application = Application;
	;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var style_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(25);
	/**
	 * 主题用来统一控制Widget的外观风格。
	 */
	var ThemeManager = (function () {
	    function ThemeManager() {
	        this.data = {};
	    }
	    /**
	     * 设置指定名称和状态下控件的风格。
	     */
	    ThemeManager.prototype.set = function (name, state, style) {
	        if (!this.data[name]) {
	            this.data[name] = {};
	        }
	        this.data[name][state] = style;
	        return this;
	    };
	    /**
	     * 获取指定名称和状态下控件的风格。
	     */
	    ThemeManager.prototype.get = function (name, state) {
	        var styles = this.data[name];
	        return styles ? styles[state] : null;
	    };
	    /**
	     * 初始化。
	     */
	    ThemeManager.prototype.load = function (data, baseURL) {
	        var json = this.expand(data);
	        for (var itemName in json) {
	            var itemInfo = json[itemName];
	            for (var stateName in itemInfo) {
	                var styleInfo = itemInfo[stateName];
	                this.set(itemName, stateName, style_1.Style.create(styleInfo, baseURL));
	            }
	        }
	        return this;
	    };
	    ThemeManager.prototype.expandCommon = function (itemInfo, common) {
	        for (var key in itemInfo) {
	            var value = itemInfo[key];
	            itemInfo[key] = utils_1.assign(value, common);
	        }
	        return itemInfo;
	    };
	    ThemeManager.prototype.expandExtends = function (extInfo, baseInfo) {
	        var ret = {};
	        for (var key in baseInfo) {
	            ret[key] = utils_1.assign({}, baseInfo[key]);
	        }
	        for (var key in extInfo) {
	            ret[key] = utils_1.assign(ret[key] || {}, extInfo[key]);
	        }
	        return ret;
	    };
	    ThemeManager.prototype.expand = function (json) {
	        var ret = {};
	        for (var itemName in json) {
	            var itemInfo = json[itemName];
	            var common = itemInfo["common"];
	            var ext = itemInfo["extends"];
	            delete itemInfo["common"];
	            delete itemInfo["extends"];
	            if (ext) {
	                var baseInfo = JSON.parse(JSON.stringify(ret[ext]));
	                if (common) {
	                    this.expandCommon(baseInfo, common);
	                }
	                itemInfo = this.expandExtends(itemInfo, baseInfo);
	            }
	            else {
	                if (common) {
	                    this.expandCommon(itemInfo, common);
	                }
	            }
	            ret[itemName] = itemInfo;
	        }
	        return ret;
	    };
	    return ThemeManager;
	}());
	exports.ThemeManager = ThemeManager;


/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * 设备信息。可以获取语言，操作系统和浏览器等相关信息(单例对象，直接调用)。
	 */
	"use strict";
	var DeviceInfo = (function () {
	    function DeviceInfo() {
	    }
	    DeviceInfo.init = function (_locale, userAgent) {
	        DeviceInfo.locale = (_locale || navigator.language).toLowerCase();
	        DeviceInfo.language = DeviceInfo.locale.split("-")[0];
	        var ua = userAgent = userAgent || navigator.userAgent;
	        DeviceInfo.isWindowsPhone = ua.indexOf("Windows Phone") >= 0;
	        DeviceInfo.isAndroid = ua.indexOf("Android") >= 0;
	        DeviceInfo.isIPhone = ua.indexOf("iPhone;") >= 0;
	        DeviceInfo.isIPad = ua.indexOf("iPad;") >= 0;
	        DeviceInfo.isLinux = !DeviceInfo.isAndroid && ua.indexOf("Linux;") >= 0;
	        DeviceInfo.isMacOS = !DeviceInfo.isIPhone && !DeviceInfo.isIPad && ua.indexOf("Macintosh;") >= 0;
	        DeviceInfo.isWindows = !DeviceInfo.isWindowsPhone && ua.indexOf("Windows NT") >= 0;
	        DeviceInfo.isMobile = ua.indexOf("Mobile") >= 0;
	        DeviceInfo.isPointerSupported = window.navigator.pointerEnabled;
	        DeviceInfo.isMSPointerSupported = window.navigator.msPointerEnabled;
	        var msTouchEnabled = !!window.navigator.msMaxTouchPoints;
	        var generalTouchEnabled = "ontouchstart" in document.createElement("div");
	        DeviceInfo.isTouchSupported = !!msTouchEnabled || generalTouchEnabled;
	    };
	    return DeviceInfo;
	}());
	exports.DeviceInfo = DeviceInfo;


/***/ },
/* 128 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 管理各种服务。
	 */
	var ServiceLocator = (function () {
	    function ServiceLocator() {
	        this.services = {};
	    }
	    ServiceLocator.prototype.register = function (name, service) {
	        this.services[name] = service;
	        return this;
	    };
	    ServiceLocator.prototype.get = function (name) {
	        return this.services[name];
	    };
	    return ServiceLocator;
	}());
	exports.ServiceLocator = ServiceLocator;
	;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var WindowManager = (function (_super) {
	    __extends(WindowManager, _super);
	    function WindowManager() {
	        _super.call(this, WindowManager.TYPE);
	    }
	    WindowManager.prototype.onWindowCreate = function (evt) {
	        console.log("onWindowCreate");
	    };
	    WindowManager.prototype.onWindowCreated = function (evt) {
	        console.log("onWindowCreated");
	    };
	    WindowManager.prototype.onWindowOpen = function (evt) {
	        console.log("onWindowOpen");
	    };
	    WindowManager.prototype.onWindowClose = function (evt) {
	        console.log("onWindowClose");
	    };
	    WindowManager.prototype.onCreated = function () {
	        var _this = this;
	        _super.prototype.onCreated.call(this);
	        var app = this.app;
	        this.createCanvas();
	        app.on(Events.WINDOW_OPEN, function (evt) { return _this.onWindowOpen(evt); });
	        app.on(Events.WINDOW_CLOSE, function (evt) { return _this.onWindowClose(evt); });
	        app.on(Events.WINDOW_CREATE, function (evt) { return _this.onWindowCreate(evt); });
	        app.on(Events.WINDOW_CREATED, function (evt) { return _this.onWindowCreated(evt); });
	    };
	    WindowManager.create = function (options) {
	        return WindowManager.recycleBin.create(options);
	    };
	    WindowManager.TYPE = "window-manager";
	    WindowManager.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(WindowManager);
	    return WindowManager;
	}(widget_1.Widget));
	exports.WindowManager = WindowManager;
	;
	widget_factory_1.WidgetFactory.register(WindowManager.TYPE, WindowManager.create);


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var interaction_types_1 = __webpack_require__(131);
	var InteractionRequest = (function () {
	    function InteractionRequest(service) {
	        this.service = service;
	    }
	    InteractionRequest.prototype.request = function (name, callback, payload) {
	        var detail = { name: name, callback: callback, payload: payload };
	        this.service.dispatchRequest(detail);
	    };
	    InteractionRequest.prototype.toast = function (info) {
	        this.request(interaction_types_1.InteractionTypes.TOAST, null, info);
	    };
	    InteractionRequest.prototype.notify = function (info) {
	        this.request(interaction_types_1.InteractionTypes.NOTIFICATION, null, info);
	    };
	    InteractionRequest.prototype.confirm = function (info, callback) {
	        this.request(interaction_types_1.InteractionTypes.CONFIRMATION, callback, info);
	    };
	    InteractionRequest.prototype.input = function (info, callback) {
	        this.request(interaction_types_1.InteractionTypes.INPUT, callback, info);
	    };
	    InteractionRequest.prototype.choice = function (info, callback) {
	        this.request(interaction_types_1.InteractionTypes.CHOICE, callback, info);
	    };
	    InteractionRequest.prototype.props = function (info, callback) {
	        this.request(interaction_types_1.InteractionTypes.PROPS, callback, info);
	    };
	    InteractionRequest.prototype.progress = function (info, callback) {
	        this.request(interaction_types_1.InteractionTypes.PROGRESS, callback, info);
	    };
	    InteractionRequest.init = function (service) {
	        InteractionRequest.instance = new InteractionRequest(service);
	    };
	    InteractionRequest.toast = function (info) {
	        InteractionRequest.instance.toast(info);
	    };
	    InteractionRequest.notify = function (info) {
	        InteractionRequest.instance.notify(info);
	    };
	    InteractionRequest.confirm = function (info, callback) {
	        InteractionRequest.instance.confirm(info, callback);
	    };
	    InteractionRequest.input = function (info, callback) {
	        InteractionRequest.instance.input(info, callback);
	    };
	    InteractionRequest.choice = function (info, callback) {
	        InteractionRequest.instance.choice(info, callback);
	    };
	    InteractionRequest.props = function (info, callback) {
	        InteractionRequest.instance.props(info, callback);
	    };
	    InteractionRequest.progress = function (info, callback) {
	        InteractionRequest.instance.progress(info, callback);
	    };
	    InteractionRequest.request = function (name, callback, payload) {
	        InteractionRequest.instance.request(name, callback, payload);
	    };
	    return InteractionRequest;
	}());
	exports.InteractionRequest = InteractionRequest;


/***/ },
/* 131 */
/***/ function(module, exports) {

	"use strict";
	var InteractionTypes = (function () {
	    function InteractionTypes() {
	    }
	    InteractionTypes.PROPS = "props";
	    InteractionTypes.TOAST = "toast";
	    InteractionTypes.INPUT = "input";
	    InteractionTypes.CHOICE = "choice";
	    InteractionTypes.PROGRESS = "progress";
	    InteractionTypes.NOTIFICATION = "notification";
	    InteractionTypes.CONFIRMATION = "confirmation";
	    return InteractionTypes;
	}());
	exports.InteractionTypes = InteractionTypes;
	;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var emitter_1 = __webpack_require__(8);
	var Events = __webpack_require__(10);
	var toast_dialog_1 = __webpack_require__(133);
	var input_dialog_1 = __webpack_require__(137);
	var props_dialog_1 = __webpack_require__(138);
	var choice_dialog_1 = __webpack_require__(163);
	var progress_dialog_1 = __webpack_require__(164);
	var confirmation_dialog_1 = __webpack_require__(165);
	var notification_dialog_1 = __webpack_require__(166);
	var interaction_types_1 = __webpack_require__(131);
	var InteractionService = (function () {
	    function InteractionService() {
	        this._emitter = new emitter_1.Emitter();
	    }
	    InteractionService.prototype.onRequest = function (callback) {
	        this._emitter.on(Events.INTERACTION_REQUEST, callback);
	    };
	    InteractionService.prototype.offRequest = function (callback) {
	        this._emitter.off(Events.INTERACTION_REQUEST, callback);
	    };
	    InteractionService.prototype.dispatchRequest = function (detail) {
	        var type = Events.INTERACTION_REQUEST;
	        var e = Events.InteractionRequestEvent.create(type, detail);
	        this._emitter.dispatchEvent(e);
	        if (!e.defaultPrevented) {
	            this.defaultHandler(e);
	        }
	        e.dispose();
	    };
	    InteractionService.prototype.defaultHandler = function (e) {
	        var name = e.name;
	        var payload = e.payload;
	        switch (name) {
	            case interaction_types_1.InteractionTypes.TOAST: {
	                toast_dialog_1.ToastDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.INPUT: {
	                input_dialog_1.InputDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.PROGRESS: {
	                progress_dialog_1.ProgressDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.CHOICE: {
	                choice_dialog_1.ChoiceDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.PROPS: {
	                props_dialog_1.PropsDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.NOTIFICATION: {
	                notification_dialog_1.NotificationDialog.show(e);
	                break;
	            }
	            case interaction_types_1.InteractionTypes.CONFIRMATION: {
	                confirmation_dialog_1.ConfirmationDialog.show(e);
	                break;
	            }
	            default: break;
	        }
	    };
	    InteractionService.getInstance = function () {
	        return InteractionService.instance;
	    };
	    InteractionService.init = function () {
	        InteractionService.instance = new InteractionService();
	        return InteractionService.instance;
	    };
	    InteractionService.onRequest = function (callback) {
	        InteractionService.instance.onRequest(callback);
	    };
	    InteractionService.offRequest = function (callback) {
	        InteractionService.instance.offRequest(callback);
	    };
	    return InteractionService;
	}());
	exports.InteractionService = InteractionService;
	;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var ToastDialog = (function () {
	    function ToastDialog() {
	    }
	    ToastDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showToast(info.text, info.duration || 1000, info.w);
	    };
	    return ToastDialog;
	}());
	exports.ToastDialog = ToastDialog;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var group_1 = __webpack_require__(95);
	var dialog_1 = __webpack_require__(96);
	var label_1 = __webpack_require__(22);
	var edit_1 = __webpack_require__(21);
	var button_1 = __webpack_require__(98);
	var Events = __webpack_require__(10);
	var graphics_1 = __webpack_require__(29);
	var list_view_1 = __webpack_require__(116);
	var progress_bar_1 = __webpack_require__(100);
	var application_1 = __webpack_require__(125);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var consts_1 = __webpack_require__(109);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var list_item_1 = __webpack_require__(118);
	var dock_layouter_1 = __webpack_require__(135);
	var linear_layouter_1 = __webpack_require__(136);
	var grid_layouter_1 = __webpack_require__(121);
	var simple_layouter_1 = __webpack_require__(119);
	var TitleOptions = (function () {
	    function TitleOptions(text, iconStyleType, hasCloseButton) {
	        this.h = 0;
	        this.text = text;
	        this.draggable = true;
	        this.iconStyleType = iconStyleType;
	        this.hasCloseButton = hasCloseButton;
	    }
	    return TitleOptions;
	}());
	exports.TitleOptions = TitleOptions;
	;
	var ButtonOption = (function () {
	    function ButtonOption() {
	    }
	    return ButtonOption;
	}());
	exports.ButtonOption = ButtonOption;
	var ButtonsOptions = (function () {
	    function ButtonsOptions() {
	        this.buttons = [];
	    }
	    Object.defineProperty(ButtonsOptions.prototype, "buttonCount", {
	        get: function () {
	            return this.buttons.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ButtonsOptions;
	}());
	exports.ButtonsOptions = ButtonsOptions;
	;
	var MessageBox = (function (_super) {
	    __extends(MessageBox, _super);
	    function MessageBox(type) {
	        _super.call(this, type || MessageBox.TYPE);
	        this._contentPadding = 10;
	    }
	    Object.defineProperty(MessageBox.prototype, "title", {
	        get: function () {
	            return this._title;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MessageBox.prototype, "content", {
	        get: function () {
	            return this._content;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MessageBox.prototype, "buttons", {
	        get: function () {
	            return this._buttons;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MessageBox.prototype.initTitle = function (titleOptions) {
	        var w = this.w;
	        var win = this;
	        if (titleOptions) {
	            var title = group_1.Group.create({ styleType: "dialog.title-bg" });
	            var titleH = titleOptions.h || MessageBox.TITLE_H;
	            title.layoutParam = dock_layouter_1.DockLayouterParam.create({ position: consts_1.Direction.TOP, size: titleH });
	            title.childrenLayouter = linear_layouter_1.LinearLayouter.createH();
	            this.addChild(title);
	            if (titleOptions.draggable) {
	                title.useBehavior("movable", { moveParent: true });
	            }
	            if (titleOptions.iconStyleType) {
	                var icon = button_1.Button.create({ name: "icon", styleType: titleOptions.iconStyleType });
	                icon.layoutParam = linear_layouter_1.LinearLayouterParam.create({ position: 1, h: "100%", w: title.h });
	                title.addChild(icon);
	            }
	            if (titleOptions.text) {
	                var label = label_1.Label.create({ name: "text", text: titleOptions.text, styleType: "dialog.title-text" });
	                label.layoutParam = linear_layouter_1.LinearLayouterParam.create({ position: 2, h: "100%", w: w - titleH * 2 });
	                title.addChild(label);
	            }
	            if (titleOptions.hasCloseButton) {
	                var button = button_1.Button.create({ name: "close", styleType: "messagebox.button.close" });
	                button.layoutParam = linear_layouter_1.LinearLayouterParam.create({ position: -1, h: "100%", w: titleH });
	                title.addChild(button);
	                button.on(Events.CLICK, function (evt) {
	                    win.animateClose();
	                });
	            }
	            this._title = title;
	        }
	    };
	    MessageBox.prototype.initButtons = function (buttonsOptions) {
	        var w = this.w;
	        var win = this;
	        if (buttonsOptions && buttonsOptions.buttons) {
	            var buttons = group_1.Group.create();
	            var n = buttonsOptions.buttons.length;
	            var buttonsH = buttonsOptions.h || MessageBox.BUTTONS_H;
	            var margin = n < 2 ? w / (4 * n) : w / (8 * n);
	            buttons.layoutParam = dock_layouter_1.DockLayouterParam.create({ position: consts_1.Direction.BOTTOM, size: buttonsH });
	            buttons.childrenLayouter = grid_layouter_1.GridLayouter.create({
	                topMargin: 5,
	                bottomMargin: 5,
	                leftMargin: margin,
	                rightMargin: margin,
	                rows: 1,
	                cols: n
	            });
	            this.addChild(buttons);
	            buttonsOptions.buttons.forEach(function (iter) {
	                var b = button_1.Button.create({ text: iter.text, styleType: iter.styleType });
	                b.on(Events.CLICK, function (evt) {
	                    if (iter.onClick) {
	                        iter.onClick();
	                    }
	                    win.animateClose();
	                });
	                buttons.addChild(b);
	            });
	            this._buttons = buttons;
	        }
	        return this;
	    };
	    MessageBox.prototype.initContent = function (data) {
	        var content = group_1.Group.create();
	        content.layoutParam = dock_layouter_1.DockLayouterParam.create({ position: consts_1.Direction.BOTTOM, size: "100%" });
	        this.addChild(content);
	        if (data) {
	            content.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	            var label = label_1.Label.create({ text: data, multiLineMode: true, padding: this._contentPadding });
	            label.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ w: "100%", h: "100%" });
	            content.addChild(label);
	        }
	        this._content = content;
	    };
	    MessageBox.prototype.createChildren = function (titleOptions, buttonsOptions, content) {
	        var vp = this.app.getViewPort();
	        var style = this._themeManager.get("messagebox.content", this.stateToString(widget_1.WidgetState.NORMAL));
	        if (this.w <= 10) {
	            var textW = graphics_1.Graphics.measureText(content, style.font);
	            var padding = this.leftPadding + this.rightPadding + this._contentPadding * 2;
	            var w = Math.min(vp.width, Math.max(60, textW + padding));
	            if (buttonsOptions) {
	                w = Math.max(w, buttonsOptions.buttonCount * 128);
	            }
	            this.w = w;
	        }
	        if (this.h < 10) {
	            var lines = graphics_1.Graphics.layoutText(content, this.w, style.font);
	            var n = lines ? lines.length : 0;
	            var padding = this.topPadding + this.bottomPadding + this._contentPadding * 2;
	            var h = n * style.fontSize * 1.5 + padding;
	            if (titleOptions) {
	                h += titleOptions.h || MessageBox.TITLE_H;
	            }
	            if (buttonsOptions) {
	                h += buttonsOptions.h || MessageBox.BUTTONS_H;
	            }
	            this.h = h;
	        }
	        this.initTitle(titleOptions);
	        this.initButtons(buttonsOptions);
	        this.initContent(content);
	    };
	    MessageBox.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.padding = 1;
	        this.childrenLayouter = dock_layouter_1.DockLayouter.create();
	    };
	    MessageBox.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._title = null;
	        this._content = null;
	        this._buttons = null;
	    };
	    MessageBox.prototype.open = function () {
	        _super.prototype.open.call(this);
	        this.grab();
	        this.moveToCenter();
	        return this;
	    };
	    MessageBox.prototype.animateClose = function () {
	        var _this = this;
	        this.opacityTo(0, 300).onComplete(function (evt) {
	            _this.close();
	        });
	    };
	    MessageBox.showMessage = function (msg, onClose, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 0);
	        var messageBox = MessageBox.create({ app: app, w: rw, h: 0 });
	        var buttonsOption = new ButtonsOptions();
	        buttonsOption.buttons.push({ styleType: "button.ok", text: "Close", onClick: null });
	        var titleOptions = new TitleOptions("Infomation", "messagebox.info.icon", true);
	        messageBox.createChildren(titleOptions, buttonsOption, msg);
	        messageBox.on(Events.WINDOW_CLOSE, onClose);
	        messageBox.open();
	    };
	    MessageBox.showConfirm = function (msg, onYes, onNo, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 0);
	        var messageBox = MessageBox.create({ app: app, w: rw, h: 0 });
	        var buttonsOption = new ButtonsOptions();
	        buttonsOption.buttons.push({ styleType: "button.cancel", text: "Cancel", onClick: onNo });
	        buttonsOption.buttons.push({ styleType: "button.ok", text: "Yes", onClick: onYes });
	        var titleOptions = new TitleOptions("Question", "messagebox.question.icon", false);
	        messageBox.createChildren(titleOptions, buttonsOption, msg);
	        messageBox.open();
	    };
	    MessageBox.showToast = function (msg, duration, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 0);
	        var messageBox = MessageBox.create({ app: app, styleType: "messagebox.toast", w: rw, h: 0 });
	        messageBox.createChildren(null, null, msg);
	        messageBox.on(Events.POINTER_UP, function (evt) {
	            if (messageBox) {
	                this.animateClose();
	                messageBox = null;
	            }
	        });
	        setTimeout(function (evt) {
	            if (messageBox) {
	                messageBox.animateClose();
	                messageBox = null;
	            }
	        }, duration || 3000);
	        messageBox.open();
	    };
	    MessageBox.showProgress = function (msg, taskStart, onDone, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 0) || 200;
	        var rh = MessageBox.TITLE_H + MessageBox.BUTTONS_H + 50;
	        var messageBox = MessageBox.create({ app: app, w: rw, h: rh });
	        var buttonsOption = new ButtonsOptions();
	        buttonsOption.buttons.push({ styleType: "button.ok", text: "Close", onClick: null });
	        var titleOptions = new TitleOptions(msg, "messagebox.info.icon", false);
	        messageBox.createChildren(titleOptions, buttonsOption, null);
	        var group = messageBox.content;
	        var progressBar = progress_bar_1.ProgressBar.create();
	        group.padding = 10;
	        group.topPadding = 20;
	        group.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	        progressBar.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ x: "center", y: "middle", w: "100%", h: "20px" });
	        var closeButton = messageBox.buttons.children[0];
	        closeButton.enable = false;
	        function onProgress(value) {
	            progressBar.value = value;
	            progressBar.requestRedraw();
	            if (value >= 1) {
	                onDone();
	                closeButton.enable = true;
	            }
	        }
	        group.addChild(progressBar);
	        messageBox.open();
	        taskStart(onProgress);
	    };
	    MessageBox.showInput = function (title, inputTips, value, isValueValid, onDone, inputType, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 0) || 200;
	        var rh = MessageBox.TITLE_H + MessageBox.BUTTONS_H + 50;
	        var messageBox = MessageBox.create({ app: app, w: rw, h: rh });
	        var buttonsOption = new ButtonsOptions();
	        buttonsOption.buttons.push({ styleType: "button.cancel", text: "Cancel", onClick: null });
	        buttonsOption.buttons.push({ styleType: "button.ok", text: "OK", onClick: onOK });
	        var titleOptions = new TitleOptions(title, "messagebox.info.icon", false);
	        messageBox.createChildren(titleOptions, buttonsOption, null);
	        var group = messageBox.content;
	        var edit = edit_1.Edit.create({ inputTips: inputTips, value: value, inputType: inputType || "text" });
	        group.padding = 10;
	        group.topPadding = 15;
	        group.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	        edit.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ x: "center", y: "middle", w: "100%", h: "25px" });
	        function onOK() {
	            onDone(edit.text);
	        }
	        edit.on(Events.CHANGING, function (evt) {
	            okButton.enable = isValueValid(evt.value);
	        });
	        var okButton = messageBox.buttons.children[1];
	        okButton.enable = isValueValid(value);
	        group.addChild(edit);
	        messageBox.open();
	    };
	    MessageBox.showChoice = function (title, data, multiple, onDone, w, h) {
	        var itemH = 30;
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var contentH = Math.min(8, data.length) * itemH;
	        var rw = Math.min(vp.w, w || 0) || 300;
	        var rh = Math.min(vp.h, h || 0) || MessageBox.TITLE_H + MessageBox.BUTTONS_H + contentH + 30;
	        var messageBox = MessageBox.create({ app: app, w: rw, h: rh });
	        var buttonsOption = new ButtonsOptions();
	        buttonsOption.buttons.push({ styleType: "button.cancel", text: "Cancel", onClick: null });
	        buttonsOption.buttons.push({ styleType: "button.ok", text: "OK", onClick: onOK });
	        var titleOptions = new TitleOptions(title, "messagebox.info.icon", false);
	        messageBox.createChildren(titleOptions, buttonsOption, null);
	        var group = messageBox.content;
	        var listView = list_view_1.ListView.create({ itemH: itemH, dragToScroll: true });
	        group.padding = 5;
	        group.topPadding = 5;
	        group.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	        listView.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ x: "center", y: "middle", w: "100%", h: "100%" });
	        data.forEach(function (iter) {
	            var item = list_item_1.ListItemCheckable.create({
	                multiCheckable: multiple,
	                iconURL: iter.iconURL,
	                text: iter.text,
	                userData: iter,
	                leftPadding: 2
	            });
	            listView.addChild(item, true);
	        });
	        listView.relayoutChildren();
	        function onOK() {
	            var ret = [];
	            listView.children.forEach(function (iter) {
	                if (iter.value) {
	                    ret.push(iter.userData);
	                }
	            });
	            onDone(ret);
	        }
	        group.addChild(listView);
	        messageBox.open();
	    };
	    MessageBox.create = function (options) {
	        return MessageBox.rBin.create(options);
	    };
	    MessageBox.TITLE_H = 25;
	    MessageBox.BUTTONS_H = 40;
	    MessageBox.MSG_FONT_SIZE = 12;
	    MessageBox.TYPE = "messagebox";
	    MessageBox.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(MessageBox);
	    return MessageBox;
	}(dialog_1.Dialog));
	exports.MessageBox = MessageBox;
	;
	widget_factory_1.WidgetFactory.register(MessageBox.TYPE, MessageBox.create);


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var consts_1 = __webpack_require__(109);
	var layouter_1 = __webpack_require__(82);
	var TYPE = "dock";
	/**
	 * Dock布局器。
	 */
	var DockLayouter = (function (_super) {
	    __extends(DockLayouter, _super);
	    function DockLayouter() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(DockLayouter.prototype, "type", {
	        get: function () {
	            return TYPE;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DockLayouter.prototype.layoutChildren = function (widget, children, rect) {
	        var _this = this;
	        var r = rect.clone();
	        var arr = widget.children.forEach(function (child) {
	            if (r.w > 0 && r.h > 0) {
	                _this.layoutChild(child, r);
	            }
	        });
	        r.dispose();
	        return rect;
	    };
	    DockLayouter.prototype.layoutChild = function (child, r) {
	        var x = 0;
	        var y = 0;
	        var w = 0;
	        var h = 0;
	        var param = child.layoutParam;
	        if (param && param.type === TYPE && child.visible) {
	            switch (param.position) {
	                case consts_1.Direction.LEFT: {
	                    x = r.x;
	                    y = r.y;
	                    h = r.h;
	                    w = Math.min(r.w, param.size ? layouter_1.Layouter.evalValue(param.size, r.w) : child.w);
	                    r.x += w;
	                    r.w -= w;
	                    break;
	                }
	                case consts_1.Direction.RIGHT: {
	                    y = r.y;
	                    h = r.h;
	                    w = Math.min(r.w, param.size ? layouter_1.Layouter.evalValue(param.size, r.w) : child.w);
	                    x = r.x + r.w - w;
	                    r.w -= w;
	                    break;
	                }
	                case consts_1.Direction.BOTTOM: {
	                    x = r.x;
	                    w = r.w;
	                    h = Math.min(r.h, param.size ? layouter_1.Layouter.evalValue(param.size, r.h) : child.h);
	                    y = r.y + r.h - h;
	                    r.h -= h;
	                    break;
	                }
	                default: {
	                    x = r.x;
	                    y = r.y;
	                    w = r.w;
	                    h = Math.min(r.h, param.size ? layouter_1.Layouter.evalValue(param.size, r.h) : child.h);
	                    r.h -= h;
	                    r.y += h;
	                    break;
	                }
	            }
	            child.moveResizeTo(x, y, w, h);
	            child.relayoutChildren();
	        }
	    };
	    DockLayouter.prototype.createParam = function (options) {
	        return DockLayouterParam.create(options);
	    };
	    DockLayouter.create = function (options) {
	        var layouter = new DockLayouter();
	        return layouter.setOptions(options);
	    };
	    return DockLayouter;
	}(layouter_1.Layouter));
	exports.DockLayouter = DockLayouter;
	;
	layouter_1.LayouterFactory.register(TYPE, DockLayouter.create);
	/**
	 * Dock布局器的参数。
	 *
	 * 如果父控件使用DockLayouter布局器，则子控件需要把layoutParam设置为DockLayouterParam。
	 *
	 * 对于size参数：
	 * *.如果以px结尾，则直接取它的值。
	 * *.如果以%结尾，则表示剩余空间的宽度/高度的百分比。
	 *
	 */
	var DockLayouterParam = (function (_super) {
	    __extends(DockLayouterParam, _super);
	    function DockLayouterParam(position, size) {
	        _super.call(this, TYPE);
	        this.size = size;
	        this.position = position;
	    }
	    Object.defineProperty(DockLayouterParam.prototype, "widget", {
	        set: function (widget) {
	            var _this = this;
	            this._widget = widget;
	            widget.on(Events.RESIZING, function (evt) { return _this.onWidgetResized(); });
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 对应的Widget被用户RESIZE之后，重排兄弟控件。
	     */
	    DockLayouterParam.prototype.onWidgetResized = function () {
	        var widget = this._widget;
	        if (this.position === consts_1.Direction.LEFT || this.position === consts_1.Direction.RIGHT) {
	            var w = widget.w;
	            this.size = w.toString();
	        }
	        else if (this.position === consts_1.Direction.TOP || this.position === consts_1.Direction.BOTTOM) {
	            var h = widget.h;
	            this.size = h.toString();
	        }
	        widget.parent.relayoutChildren();
	    };
	    DockLayouterParam.create = function (opts) {
	        var options = opts || {};
	        return new DockLayouterParam(options.position, options.size || "");
	    };
	    return DockLayouterParam;
	}(layouter_1.LayouterParam));
	exports.DockLayouterParam = DockLayouterParam;
	;
	layouter_1.LayouterParamFactory.register(TYPE, DockLayouterParam.create);


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var consts_1 = __webpack_require__(109);
	var utils_1 = __webpack_require__(25);
	var layouter_1 = __webpack_require__(82);
	var TYPE_H = "linear-h";
	var TYPE_V = "linear-v";
	/**
	 * 线性布局器。可以设置为水平和垂直两个方向。
	 */
	var LinearLayouter = (function (_super) {
	    __extends(LinearLayouter, _super);
	    function LinearLayouter() {
	        _super.apply(this, arguments);
	    }
	    Object.defineProperty(LinearLayouter.prototype, "type", {
	        get: function () {
	            return this.orientation === consts_1.Orientation.V ? TYPE_V : TYPE_H;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 设置参数。
	     */
	    LinearLayouter.prototype.setOptions = function (options) {
	        this.spacing = options.spacing || 0;
	        this.orientation = options.orientation || consts_1.Orientation.V;
	        return this;
	    };
	    LinearLayouter.prototype.layoutChildren = function (widget, children, rect) {
	        var _this = this;
	        var r = rect.clone();
	        var defParam = LinearLayouterParam.defParam;
	        var arr = children.filter(function (child) {
	            var param = child.layoutParam || defParam;
	            return param.position > 0;
	        });
	        utils_1.stableSort(arr, function (a, b) {
	            var ap = a.layoutParam || defParam;
	            var bp = b.layoutParam || defParam;
	            return ap.position - bp.position;
	        });
	        arr.forEach(function (child, index) {
	            if (r.w > 0 && r.h > 0) {
	                _this.layoutChild(child, r, index);
	            }
	        });
	        arr = children.filter(function (child) {
	            var param = child.layoutParam || defParam;
	            return !param.position;
	        });
	        arr.forEach(function (child, index) {
	            if (r.w > 0 && r.h > 0) {
	                _this.layoutChild(child, r, index);
	            }
	        });
	        arr = children.filter(function (child) {
	            var param = child.layoutParam || defParam;
	            return param.position < 0;
	        });
	        utils_1.stableSort(arr, function (a, b) {
	            var ap = a.layoutParam || defParam;
	            var bp = b.layoutParam || defParam;
	            return bp.position - ap.position;
	        });
	        arr.forEach(function (child, index) {
	            if (r.w > 0 && r.h > 0) {
	                _this.layoutChild(child, r, index);
	            }
	        });
	        r.dispose();
	        return rect;
	    };
	    LinearLayouter.prototype.layoutChild = function (child, r, index) {
	        var x = 0;
	        var y = 0;
	        var w = 0;
	        var h = 0;
	        var defParam = LinearLayouterParam.defParam;
	        var param = child.layoutParam || defParam;
	        var position = param.position;
	        if (param && param.type === LinearLayouterParam.TYPE && child.visible) {
	            var spacing = (index > 0 || !position) ? (param.spacing || this.spacing) : 0;
	            if (this.orientation === consts_1.Orientation.V) {
	                r.h -= spacing;
	            }
	            else {
	                r.w -= spacing;
	            }
	            h = Math.min(r.h, param.h ? layouter_1.Layouter.evalValue(param.h, r.h) : child.h);
	            w = Math.min(r.w, param.w ? layouter_1.Layouter.evalValue(param.w, r.w) : child.w);
	            if (this.orientation === consts_1.Orientation.V) {
	                switch (param.align) {
	                    case consts_1.Align.LEFT: {
	                        x = r.x;
	                        break;
	                    }
	                    case consts_1.Align.RIGHT: {
	                        x = r.x + r.w - w;
	                        break;
	                    }
	                    default: {
	                        x = r.x + ((r.w - w) >> 1);
	                        break;
	                    }
	                }
	                var spacingH = spacing + h;
	                if (position >= 0) {
	                    y = r.y + spacing;
	                    r.y += spacingH;
	                }
	                else {
	                    y = r.y + r.h - spacingH;
	                }
	                r.h -= h;
	            }
	            else {
	                switch (param.align) {
	                    case consts_1.Align.TOP: {
	                        y = r.y;
	                        break;
	                    }
	                    case consts_1.Align.BOTTOM: {
	                        y = r.y + r.h - h;
	                        break;
	                    }
	                    default: {
	                        y = r.y + ((r.h - h) >> 1);
	                        break;
	                    }
	                }
	                var spacingW = spacing + w;
	                if (position >= 0) {
	                    x = r.x + spacing;
	                    r.x += spacingW;
	                }
	                else {
	                    x = r.x + r.w - spacingW;
	                }
	                r.w -= w;
	            }
	            child.moveResizeTo(x, y, w, h);
	            child.relayoutChildren();
	        }
	    };
	    LinearLayouter.prototype.createParam = function (options) {
	        return LinearLayouterParam.create(options);
	    };
	    LinearLayouter.createV = function (options) {
	        var layouter = new LinearLayouter();
	        layouter.setOptions(options);
	        layouter.orientation = consts_1.Orientation.V;
	        return layouter;
	    };
	    LinearLayouter.createH = function (options) {
	        var layouter = new LinearLayouter();
	        layouter.setOptions(options || {});
	        layouter.orientation = consts_1.Orientation.H;
	        return layouter;
	    };
	    return LinearLayouter;
	}(layouter_1.Layouter));
	exports.LinearLayouter = LinearLayouter;
	;
	layouter_1.LayouterFactory.register(TYPE_H, LinearLayouter.createH);
	layouter_1.LayouterFactory.register(TYPE_V, LinearLayouter.createV);
	/**
	 * Linear布局器的参数。
	 *
	 * 如果父控件使用LinearLayouter布局器，则子控件需要把layoutParam设置为LinearLayouterParam。
	 *
	 * 对于w参数：
	 * *.如果以px结尾，则直接取它的值。
	 * *.如果以%结尾，则表示剩余空间的宽度/高度的百分比。
	 *
	 */
	var LinearLayouterParam = (function (_super) {
	    __extends(LinearLayouterParam, _super);
	    function LinearLayouterParam(type, w, h, spacing, align, position) {
	        _super.call(this, type || LinearLayouterParam.TYPE);
	        this.w = w || "100%";
	        this.h = h || "100%";
	        this.align = align;
	        this.spacing = spacing;
	        this.position = position;
	    }
	    LinearLayouterParam.createWithType = function (type, opts) {
	        var options = opts || {};
	        return new LinearLayouterParam(LinearLayouterParam.TYPE, options.w || options.width, options.h || options.height, options.spacing || 0, options.align || consts_1.Align.C, options.position === undefined ? 1 : options.position);
	    };
	    LinearLayouterParam.create = function (opts) {
	        return LinearLayouterParam.createWithType(LinearLayouterParam.TYPE, opts);
	    };
	    LinearLayouterParam.TYPE = "linear";
	    LinearLayouterParam.defParam = LinearLayouterParam.create(null);
	    return LinearLayouterParam;
	}(layouter_1.LayouterParam));
	exports.LinearLayouterParam = LinearLayouterParam;
	;
	layouter_1.LayouterParamFactory.register(LinearLayouterParam.TYPE, LinearLayouterParam.create);


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var InputDialog = (function () {
	    function InputDialog() {
	    }
	    InputDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showInput(info.title, info.inputTips, info.value, info.isValueValid, function (value) {
	            info.value = value;
	            e.returnResult();
	        }, info.inputType, info.w);
	    };
	    return InputDialog;
	}());
	exports.InputDialog = InputDialog;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var property_dialog_1 = __webpack_require__(139);
	var PropsDialog = (function () {
	    function PropsDialog() {
	    }
	    PropsDialog.show = function (e) {
	        var info = e.payload;
	        var onCancel = info.mutable ? function (ret) { } : null;
	        property_dialog_1.PropertyDialog.show(info.pagePropsDesc, info.data, function (ret) {
	            info.data = ret;
	            e.returnResult();
	        }, onCancel, info.w);
	    };
	    return PropsDialog;
	}());
	exports.PropsDialog = PropsDialog;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var application_1 = __webpack_require__(125);
	var property_page_1 = __webpack_require__(140);
	var view_model_1 = __webpack_require__(158);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var widget_factory_1 = __webpack_require__(27);
	var message_box_1 = __webpack_require__(134);
	var simple_layouter_1 = __webpack_require__(119);
	/**
	 * 属性对话框。
	 */
	var PropertyDialog = (function (_super) {
	    __extends(PropertyDialog, _super);
	    function PropertyDialog() {
	        _super.apply(this, arguments);
	    }
	    PropertyDialog.prototype.createChildren = function (titleOptions, buttonsOptions, content) {
	        _super.prototype.createChildren.call(this, titleOptions, buttonsOptions, content);
	    };
	    PropertyDialog.show = function (pagePropsDesc, data, onYes, onNo, w) {
	        var app = application_1.Application.get();
	        var vp = app.getViewPort();
	        var rw = Math.min(vp.w, w || 300);
	        var dataCopy = onNo ? JSON.parse(JSON.stringify(data)) : data;
	        var page = property_page_1.PropertyPage.create({ layoutParam: simple_layouter_1.SimpleLayouterParam.create({ w: "100%", h: "100%" }) });
	        page.initWithPropsDesc(pagePropsDesc.propsDesc);
	        var h = page.h + message_box_1.MessageBox.TITLE_H + message_box_1.MessageBox.BUTTONS_H + 20;
	        var messageBox = PropertyDialog.create({ app: app, styleType: message_box_1.MessageBox.TYPE, w: rw, h: h });
	        var titleOptions = new message_box_1.TitleOptions(pagePropsDesc.title, "messagebox.info.icon", false);
	        var buttonsOption = new message_box_1.ButtonsOptions();
	        if (onNo) {
	            buttonsOption.buttons.push({ styleType: "button.cancel", text: "Cancel", onClick: function () {
	                    if (onNo) {
	                        onNo(data);
	                    }
	                } });
	        }
	        buttonsOption.buttons.push({ styleType: "button.ok", text: onNo ? "Yes" : "OK", onClick: function () {
	                if (onYes) {
	                    onYes(dataCopy);
	                }
	            } });
	        messageBox.createChildren(titleOptions, buttonsOption, null);
	        var group = messageBox.content.set({ padding: 5, childrenLayouter: simple_layouter_1.SimpleLayouter.create() });
	        group.addChild(page);
	        var vm = view_model_1.ViewModel.create(dataCopy);
	        page.bindData(vm);
	        messageBox.open();
	    };
	    PropertyDialog.create = function (options) {
	        return PropertyDialog.rb.create(options);
	    };
	    PropertyDialog.TYPE = "property-dialog";
	    PropertyDialog.rb = widget_recyclable_creator_1.WidgetRecyclableCreator.create(PropertyDialog);
	    return PropertyDialog;
	}(message_box_1.MessageBox));
	exports.PropertyDialog = PropertyDialog;
	widget_factory_1.WidgetFactory.register(PropertyDialog.TYPE, PropertyDialog.create);


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var title_link_1 = __webpack_require__(141);
	var title_line_1 = __webpack_require__(143);
	var title_edit_1 = __webpack_require__(145);
	var title_label_1 = __webpack_require__(146);
	var title_check_button_1 = __webpack_require__(147);
	var title_range_1 = __webpack_require__(148);
	var title_vector_1 = __webpack_require__(150);
	var widget_1 = __webpack_require__(23);
	var title_slider_1 = __webpack_require__(152);
	var title_text_area_1 = __webpack_require__(153);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var title_choosable_edit_1 = __webpack_require__(154);
	var props_desc_1 = __webpack_require__(156);
	var title_combo_box_1 = __webpack_require__(157);
	var props_desc_2 = __webpack_require__(156);
	var props_desc_3 = __webpack_require__(156);
	var props_desc_4 = __webpack_require__(156);
	/**
	 * 属性编辑页，包装了各种TitleValue。
	 */
	var PropertyPage = (function (_super) {
	    __extends(PropertyPage, _super);
	    function PropertyPage() {
	        _super.call(this, PropertyPage.TYPE);
	    }
	    Object.defineProperty(PropertyPage.prototype, "itemH", {
	        get: function () {
	            return this._itemH;
	        },
	        set: function (value) {
	            this._itemH = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PropertyPage.prototype, "titleW", {
	        get: function () {
	            return this._titleW;
	        },
	        set: function (value) {
	            this._titleW = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PropertyPage.prototype, "valueW", {
	        get: function () {
	            return this._valueW;
	        },
	        set: function (value) {
	            this._valueW = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PropertyPage.prototype.addLabel = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_label_1.TitleLabel.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addCheckButton = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_check_button_1.TitleCheckButton.create({
	            h: itemH,
	            name: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        var valueWidget = widget.valueWidget;
	        valueWidget.text = title;
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addLink = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_link_1.TitleLink.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addGroupBegin = function (title) {
	        var itemH = this.itemH;
	        var widget = title_line_1.TitleLine.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addGroupEnd = function () {
	        var itemH = this.itemH;
	        var widget = title_line_1.TitleLine.create({
	            h: itemH,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addRange = function (title, firstValue, secondValue) {
	        var itemH = this.itemH;
	        var widget = title_range_1.TitleRange.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = { first: firstValue, second: secondValue };
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addVector2 = function (title, x, y, xTitle, yTitle) {
	        var itemH = this.itemH * 2;
	        var widget = title_vector_1.TitleVector.create({
	            d: 2,
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        var valueWidget = widget.valueWidget;
	        valueWidget.set({ xTitle: xTitle, yTitle: yTitle });
	        widget.value = { x: x, y: y };
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addVector3 = function (title, x, y, z, xTitle, yTitle, zTitle) {
	        var itemH = this.itemH * 2;
	        var widget = title_vector_1.TitleVector.create({
	            d: 3,
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        var valueWidget = widget.valueWidget;
	        valueWidget.set({ xTitle: xTitle, yTitle: yTitle, zTitle: zTitle });
	        widget.value = { x: x, y: y, z: z };
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addVector4 = function (title, x, y, z, w, xTitle, yTitle, zTitle, wTitle) {
	        var itemH = this.itemH * 2;
	        var widget = title_vector_1.TitleVector.create({
	            d: 4,
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        var valueWidget = widget.valueWidget;
	        valueWidget.set({ xTitle: xTitle, yTitle: yTitle, zTitle: zTitle, wTitle: wTitle });
	        widget.value = { x: x, y: y, z: z, w: w };
	        this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addEdit = function (title, value, inputTips, inputType, inputFilter) {
	        var itemH = this.itemH;
	        var valueW = inputType === "number" ? "50%" : this.valueW;
	        var widget = title_edit_1.TitleEdit.create({
	            h: itemH,
	            name: title,
	            title: title,
	            valueW: valueW,
	            titleW: this.titleW,
	            inputType: inputType,
	            inputTips: inputTips,
	            inputFilter: inputFilter
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addChoosableEdit = function (title, value, inputTips) {
	        var itemH = this.itemH;
	        var widget = title_choosable_edit_1.TitleChoosableEdit.create({
	            h: itemH,
	            name: title,
	            title: title,
	            inputTips: inputTips,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addComboBox = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_combo_box_1.TitleComboBox.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addComboBoxEditable = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_combo_box_1.TitleComboBoxEditable.create({
	            h: itemH,
	            name: title,
	            title: title,
	            value: value,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addSlider = function (title, value) {
	        var itemH = this.itemH;
	        var widget = title_slider_1.TitleSlider.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.addTextArea = function (title, value, h) {
	        var itemH = h || (this.itemH * 4);
	        var widget = title_text_area_1.TitleTextArea.create({
	            h: itemH,
	            name: title,
	            title: title,
	            titleW: this.titleW,
	            valueW: this.valueW
	        });
	        widget.value = value,
	            this.addChild(widget, true);
	        return widget;
	    };
	    PropertyPage.prototype.findByTitle = function (title) {
	        return this.findChildByName(title);
	    };
	    PropertyPage.prototype.addWithPropDesc = function (item) {
	        var titleValue = null;
	        if (item.type === props_desc_3.NumberPropDesc.TYPE) {
	            titleValue = this.addEdit(item.name, item.value, item.desc, "number");
	        }
	        else if (item.type === props_desc_3.TextPropDesc.TYPE) {
	            titleValue = this.addEdit(item.name, item.value, item.desc, "text");
	        }
	        else if (item.type === props_desc_3.ReadonlyTextPropDesc.TYPE) {
	            titleValue = this.addLabel(item.name, item.value);
	        }
	        else if (item.type === props_desc_4.SliderPropDesc.TYPE) {
	            titleValue = this.addSlider(item.name, item.value);
	        }
	        else if (item.type === props_desc_1.LinkPropDesc.TYPE) {
	            titleValue = this.addLink(item.name, item.value);
	        }
	        else if (item.type === props_desc_1.BoolPropDesc.TYPE) {
	            titleValue = this.addCheckButton(item.name, item.value);
	        }
	        else if (item.type === props_desc_1.LinePropDesc.TYPE) {
	            if (item.name) {
	                titleValue = this.addGroupBegin(item.name);
	            }
	            else {
	                titleValue = this.addGroupEnd();
	            }
	        }
	        else if (item.type === props_desc_4.RangePropDesc.TYPE) {
	            var value = item.value || { first: 0, second: 0 };
	            titleValue = this.addRange(item.name, value.first, value.second);
	        }
	        else if (item.type === props_desc_4.Vector2PropDesc.TYPE) {
	            var p2 = item;
	            var value = item.value || { x: 0, y: 0 };
	            titleValue = this.addVector2(item.name, value.x, value.y, p2.xTitle, p2.yTitle);
	        }
	        else if (item.type === props_desc_4.OptionsPropDesc.TYPE) {
	            var value = item.value || { x: 0, y: 0 };
	            var propDesc = item;
	            titleValue = this.addComboBox(item.name, value);
	            if (propDesc.options) {
	                var comboBox = titleValue.valueWidget;
	                comboBox.optionsJson = propDesc.options;
	            }
	        }
	        else if (item.type === props_desc_4.Vector3PropDesc.TYPE) {
	            var p3 = item;
	            var value = item.value || { x: 0, y: 0, z: 0 };
	            titleValue = this.addVector3(item.name, value.x, value.y, value.z, p3.xTitle, p3.yTitle, p3.zTitle);
	        }
	        else if (item.type === props_desc_2.Vector4PropDesc.TYPE) {
	            var p4 = item;
	            var value = item.value || { x: 0, y: 0, z: 0, w: 0 };
	            titleValue = this.addVector4(item.name, value.x, value.y, value.z, value.w, p4.xTitle, p4.yTitle, p4.zTitle, p4.wTitle);
	        }
	        if (titleValue && item.path) {
	            var valueWidget = titleValue.valueWidget;
	            var bindRule = {
	                value: {
	                    path: item.path,
	                    converter: item.converter,
	                    validationRule: item.validationRule
	                }
	            };
	            valueWidget.dataBindingRule = bindRule;
	        }
	    };
	    PropertyPage.prototype.initWithPropsDesc = function (propsDesc) {
	        var _this = this;
	        this.removeAllChildren();
	        propsDesc.forEach(function (item) {
	            _this.addWithPropDesc(item);
	        });
	        propsDesc.once(Events.CHANGE, function (evt) {
	            console.log("reload changed");
	            _this.initWithPropsDesc(propsDesc);
	        });
	        var viewModel = this._viewModel;
	        if (viewModel) {
	            this.children.forEach(function (child) {
	                child.bindData(viewModel);
	            });
	        }
	        this.relayoutChildren();
	    };
	    PropertyPage.prototype.initWithJson = function (json) {
	        var propsDesc = props_desc_3.PropsDesc.create(json);
	        this.initWithPropsDesc(propsDesc);
	    };
	    PropertyPage.prototype.onAddChild = function (child) {
	        this.reComputeH();
	    };
	    PropertyPage.prototype.onRemoveChild = function (child) {
	        this.reComputeH();
	    };
	    PropertyPage.prototype.reComputeH = function () {
	        var h = this.topPadding + this.bottomPadding;
	        this.children.forEach(function (child) {
	            h += child.h;
	        });
	        this.h = h;
	        return this;
	    };
	    PropertyPage.prototype.relayoutChildren = function () {
	        var r = this.getLayoutRect();
	        var y = r.y;
	        this.children.forEach(function (child) {
	            child.moveResizeTo(r.x, y, r.w, child.h, 0);
	            child.relayoutChildren();
	            y += child.h;
	        });
	        this.h = this.bottomPadding + y;
	        this.requestRedraw();
	        return r;
	    };
	    PropertyPage.prototype.getDefProps = function () {
	        return PropertyPage.defProps;
	    };
	    PropertyPage.create = function (options) {
	        return PropertyPage.rBin.create(options);
	    };
	    PropertyPage.defProps = Object.assign({}, widget_1.Widget.defProps, { _itemH: 30, _titleW: "60px", _valueW: "100%" });
	    PropertyPage.TYPE = "property-page";
	    PropertyPage.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(PropertyPage);
	    return PropertyPage;
	}(widget_1.Widget));
	exports.PropertyPage = PropertyPage;
	;
	widget_factory_1.WidgetFactory.register(PropertyPage.TYPE, PropertyPage.create);


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var label_1 = __webpack_require__(22);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleLink = (function (_super) {
	    __extends(TitleLink, _super);
	    function TitleLink(type) {
	        _super.call(this, type || TitleLink.TYPE);
	    }
	    TitleLink.prototype.createValueWidget = function (options) {
	        var link = label_1.Label.create(options);
	        link.styleType = "link";
	        link.on(Events.CLICK, function (evt) {
	            window.open(this.text, "_blank");
	        });
	        link.on(Events.POINTER_ENTER, function (evt) {
	            document.body.style.cursor = "pointer";
	        });
	        link.on(Events.POINTER_LEAVE, function (evt) {
	            document.body.style.cursor = "default";
	        });
	        return link;
	    };
	    TitleLink.create = function (options) {
	        return TitleLink.recycleBin.create(options);
	    };
	    TitleLink.TYPE = "title-link";
	    TitleLink.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleLink);
	    return TitleLink;
	}(title_value_1.TitleValue));
	exports.TitleLink = TitleLink;
	;
	widget_factory_1.WidgetFactory.register(TitleLink.TYPE, TitleLink.create);


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var label_1 = __webpack_require__(22);
	var widget_1 = __webpack_require__(23);
	var linear_layouter_1 = __webpack_require__(136);
	var TitleValue = (function (_super) {
	    __extends(TitleValue, _super);
	    function TitleValue(type) {
	        _super.call(this, type);
	    }
	    Object.defineProperty(TitleValue.prototype, "title", {
	        get: function () {
	            return this._title;
	        },
	        set: function (value) {
	            this._title = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleValue.prototype, "titleW", {
	        get: function () {
	            return this._titleW;
	        },
	        set: function (value) {
	            this._titleW = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleValue.prototype, "valueW", {
	        get: function () {
	            return this._valueW;
	        },
	        set: function (value) {
	            this._valueW = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleValue.prototype, "titleWidget", {
	        get: function () {
	            return this._titleWidget;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleValue.prototype, "valueWidget", {
	        get: function () {
	            return this._valueWidget;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleValue.prototype, "value", {
	        get: function () {
	            return this._valueWidget ? this.valueWidget.value : this._value;
	        },
	        set: function (value) {
	            this._value = value;
	            if (this._valueWidget) {
	                this._valueWidget.value = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /*
	     * Child must override
	     */
	    TitleValue.prototype.createValueWidget = function (options) {
	        return null;
	    };
	    TitleValue.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        this.titleWidget.text = this._title;
	        this.titleWidget.layoutParam = linear_layouter_1.LinearLayouterParam.create({ w: this._titleW, h: "100%" });
	        this.valueWidget.layoutParam = linear_layouter_1.LinearLayouterParam.create({ w: this._valueW, h: "100%" });
	    };
	    TitleValue.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.childrenLayouter = linear_layouter_1.LinearLayouter.createH({ spacing: 5 });
	        var titleWidget = label_1.Label.create();
	        this.addChild(titleWidget);
	        this._titleWidget = titleWidget;
	        var valueWidget = this.createValueWidget();
	        this.addChild(valueWidget);
	        this._valueWidget = valueWidget;
	        if (this._value !== undefined) {
	            valueWidget.value = this._value;
	        }
	    };
	    TitleValue.prototype.forwardChangeEvent = function (evt) {
	        var e = this.eChangeEvent;
	        e.init(evt.type, { value: this.value });
	        this.dispatchEvent(e);
	    };
	    TitleValue.prototype.onCreated = function () {
	        var _this = this;
	        _super.prototype.onCreated.call(this);
	        var valueWidget = this.valueWidget;
	        valueWidget.on(Events.CHANGE, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        valueWidget.on(Events.CHANGING, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	    };
	    TitleValue.prototype.onToJson = function (json) {
	        delete json._value;
	    };
	    TitleValue.prototype.getDefProps = function () {
	        return TitleValue.defProps;
	    };
	    TitleValue.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._titleWidget = null;
	        this._valueWidget = null;
	    };
	    TitleValue.defProps = Object.assign({}, widget_1.Widget.defProps, { _lp: 2, _tp: 2, _rp: 2, _bp: 2,
	        _title: null, _titleW: 60, _valueW: 60 });
	    return TitleValue;
	}(widget_1.Widget));
	exports.TitleValue = TitleValue;
	;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var title_value_1 = __webpack_require__(142);
	var color_tile_1 = __webpack_require__(144);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleLine = (function (_super) {
	    __extends(TitleLine, _super);
	    function TitleLine(type) {
	        _super.call(this, type || TitleLine.TYPE);
	    }
	    TitleLine.prototype.createValueWidget = function (options) {
	        return color_tile_1.ColorLine.create({ styleType: "title.line" });
	    };
	    TitleLine.create = function (options) {
	        return TitleLine.recycleBin.create(options);
	    };
	    TitleLine.TYPE = "title-line";
	    TitleLine.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleLine);
	    return TitleLine;
	}(title_value_1.TitleValue));
	exports.TitleLine = TitleLine;
	;
	widget_factory_1.WidgetFactory.register(TitleLine.TYPE, TitleLine.create);


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var style_1 = __webpack_require__(7);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var graphics_1 = __webpack_require__(29);
	var consts_1 = __webpack_require__(109);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 颜色控件。
	 */
	var Color = (function (_super) {
	    __extends(Color, _super);
	    function Color(type) {
	        _super.call(this, type);
	    }
	    Object.defineProperty(Color.prototype, "color", {
	        get: function () {
	            return this._style.lineColor;
	        },
	        set: function (value) {
	            this._style.lineColor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color.prototype, "lineColor", {
	        get: function () {
	            return this._style.lineColor;
	        },
	        set: function (value) {
	            this._style.lineColor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color.prototype, "lineWidth", {
	        get: function () {
	            return this._style.lineWidth;
	        },
	        set: function (value) {
	            this._style.lineWidth = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color.prototype, "value", {
	        get: function () {
	            return this.color;
	        },
	        set: function (color) {
	            this.color = color;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Color.prototype.onToJson = function (json) {
	        if (this._style) {
	            json.style = this._style.toJson();
	        }
	    };
	    Color.prototype.onFromJson = function (json) {
	        if (json.style) {
	            this._style = style_1.Style.create(json.style);
	        }
	    };
	    Color.prototype.setStyle = function (state, style) {
	        this._style = style;
	        return this;
	    };
	    Color.prototype.onReset = function () {
	        this._style = style_1.Style.create();
	        this._style.fontSize = 16;
	        this._style.textColor = "Black";
	    };
	    Color.prototype.getStyle = function () {
	        if (this.styleType) {
	            return _super.prototype.getStyle.call(this);
	        }
	        return this._style;
	    };
	    return Color;
	}(widget_1.Widget));
	exports.Color = Color;
	;
	var ColorTile = (function (_super) {
	    __extends(ColorTile, _super);
	    function ColorTile() {
	        _super.call(this, ColorTile.TYPE);
	    }
	    Object.defineProperty(ColorTile.prototype, "color", {
	        get: function () {
	            return this._style.backGroundColor;
	        },
	        set: function (value) {
	            this._style.backGroundColor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorTile.prototype, "roundRadius", {
	        get: function () {
	            return this._style.roundRadius;
	        },
	        set: function (value) {
	            this._style.roundRadius = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ColorTile.create = function (options) {
	        return ColorTile.recycleBin.create(options);
	    };
	    ColorTile.TYPE = "color-tile";
	    ColorTile.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ColorTile);
	    return ColorTile;
	}(Color));
	exports.ColorTile = ColorTile;
	;
	widget_factory_1.WidgetFactory.register(ColorTile.TYPE, ColorTile.create);
	var ColorLine = (function (_super) {
	    __extends(ColorLine, _super);
	    function ColorLine() {
	        _super.call(this, ColorLine.TYPE);
	    }
	    Object.defineProperty(ColorLine.prototype, "color", {
	        get: function () {
	            return this._style.lineColor;
	        },
	        set: function (value) {
	            this._style.lineColor = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "orientation", {
	        get: function () {
	            return this._orientation;
	        },
	        set: function (value) {
	            this._orientation = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "vAlign", {
	        get: function () {
	            return this._vAlign;
	        },
	        set: function (value) {
	            this._vAlign = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "hAlign", {
	        get: function () {
	            return this._hAlign;
	        },
	        set: function (value) {
	            this._hAlign = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "lineJoin", {
	        get: function () {
	            return this._style.lineJoin;
	        },
	        set: function (value) {
	            this._style.lineJoin = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "lineCap", {
	        get: function () {
	            return this._style.lineCap;
	        },
	        set: function (value) {
	            this._style.lineCap = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorLine.prototype, "dashLine", {
	        get: function () {
	            return this._style.dashLine;
	        },
	        set: function (value) {
	            this._style.dashLine = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ColorLine.prototype.drawColorBackground = function (ctx, style) {
	        var x = 0;
	        var y = 0;
	        var lineWidth = style.lineWidth || 1;
	        ctx.lineCap = style.lineCap || "butt";
	        ctx.lineJoin = style.lineJoin || "miter";
	        if (style.dashLine) {
	            ctx.setLineDash(style.dashLine);
	        }
	        if (this._orientation === consts_1.Orientation.V) {
	            switch (this._hAlign) {
	                case consts_1.AlignH.L: {
	                    x = 0;
	                    break;
	                }
	                case consts_1.AlignH.R: {
	                    x = this.w - lineWidth;
	                    break;
	                }
	                default: {
	                    x = this.w >> 1;
	                    break;
	                }
	            }
	            graphics_1.Graphics.drawLine(ctx, style.lineColor, lineWidth, x, y, x, this.h);
	        }
	        else {
	            switch (this._vAlign) {
	                case consts_1.AlignV.T: {
	                    y = 0;
	                    break;
	                }
	                case consts_1.AlignV.B: {
	                    y = this.h - lineWidth;
	                    break;
	                }
	                default: {
	                    y = this.h >> 1;
	                    break;
	                }
	            }
	            graphics_1.Graphics.drawLine(ctx, style.lineColor, lineWidth, x, y, this.w, y);
	        }
	        return this;
	    };
	    ColorLine.create = function (options) {
	        return ColorLine.recycleBin.create(options);
	    };
	    ColorLine.TYPE = "color-tile";
	    ColorLine.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ColorLine);
	    return ColorLine;
	}(Color));
	exports.ColorLine = ColorLine;
	;
	widget_factory_1.WidgetFactory.register(ColorLine.TYPE, ColorLine.create);


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var edit_1 = __webpack_require__(21);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleEdit = (function (_super) {
	    __extends(TitleEdit, _super);
	    function TitleEdit(type) {
	        _super.call(this, type || TitleEdit.TYPE);
	    }
	    Object.defineProperty(TitleEdit.prototype, "inputFilter", {
	        get: function () {
	            return this._inputFilter;
	        },
	        set: function (value) {
	            this._inputFilter = value;
	            if (this._valueWidget) {
	                this._valueWidget.set({ inputFilter: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleEdit.prototype, "inputType", {
	        get: function () {
	            return this._inputType;
	        },
	        set: function (value) {
	            this._inputType = value;
	            if (this._valueWidget) {
	                this._valueWidget.set({ inputType: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleEdit.prototype, "inputTips", {
	        get: function () {
	            return this._inputTips;
	        },
	        set: function (value) {
	            this._inputTips = value;
	            if (this._valueWidget) {
	                this._valueWidget.set({ inputTips: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleEdit.prototype.createValueWidget = function (options) {
	        var opts = options || {};
	        if (this._inputTips) {
	            opts.inputTips = this._inputTips;
	        }
	        if (this._inputType) {
	            opts.inputType = this._inputType;
	        }
	        if (this._inputFilter) {
	            opts.inputFilter = this._inputFilter;
	        }
	        return edit_1.Edit.create(opts);
	    };
	    TitleEdit.create = function (options) {
	        return TitleEdit.recycleBin.create(options);
	    };
	    TitleEdit.TYPE = "title-edit";
	    TitleEdit.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleEdit);
	    return TitleEdit;
	}(title_value_1.TitleValue));
	exports.TitleEdit = TitleEdit;
	;
	widget_factory_1.WidgetFactory.register(TitleEdit.TYPE, TitleEdit.create);


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var label_1 = __webpack_require__(22);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleLabel = (function (_super) {
	    __extends(TitleLabel, _super);
	    function TitleLabel(type) {
	        _super.call(this, type || TitleLabel.TYPE);
	    }
	    TitleLabel.prototype.createValueWidget = function (options) {
	        return label_1.Label.create(options);
	    };
	    TitleLabel.create = function (options) {
	        return TitleLabel.recycleBin.create(options);
	    };
	    TitleLabel.TYPE = "title-label";
	    TitleLabel.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleLabel);
	    return TitleLabel;
	}(title_value_1.TitleValue));
	exports.TitleLabel = TitleLabel;
	;
	widget_factory_1.WidgetFactory.register(TitleLabel.TYPE, TitleLabel.create);


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var title_value_1 = __webpack_require__(142);
	var check_button_1 = __webpack_require__(111);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleCheckButton = (function (_super) {
	    __extends(TitleCheckButton, _super);
	    function TitleCheckButton(type) {
	        _super.call(this, type || TitleCheckButton.TYPE);
	    }
	    TitleCheckButton.prototype.createValueWidget = function (options) {
	        return check_button_1.CheckButton.create(options);
	    };
	    TitleCheckButton.create = function (options) {
	        return TitleCheckButton.recycleBin.create(options);
	    };
	    TitleCheckButton.TYPE = "title-check-button";
	    TitleCheckButton.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleCheckButton);
	    return TitleCheckButton;
	}(title_value_1.TitleValue));
	exports.TitleCheckButton = TitleCheckButton;
	;
	widget_factory_1.WidgetFactory.register(TitleCheckButton.TYPE, TitleCheckButton.create);


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var range_edit_1 = __webpack_require__(149);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleRange = (function (_super) {
	    __extends(TitleRange, _super);
	    function TitleRange(type) {
	        _super.call(this, type || TitleRange.TYPE);
	    }
	    TitleRange.prototype.createValueWidget = function (options) {
	        return range_edit_1.RangeEdit.create(options);
	    };
	    TitleRange.create = function (options) {
	        return TitleRange.recycleBin.create(options);
	    };
	    TitleRange.TYPE = "title-range";
	    TitleRange.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleRange);
	    return TitleRange;
	}(title_value_1.TitleValue));
	exports.TitleRange = TitleRange;
	;
	widget_factory_1.WidgetFactory.register(TitleRange.TYPE, TitleRange.create);


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var label_1 = __webpack_require__(22);
	var edit_1 = __webpack_require__(21);
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 范围编辑器。
	 */
	var RangeEdit = (function (_super) {
	    __extends(RangeEdit, _super);
	    function RangeEdit() {
	        _super.call(this, RangeEdit.TYPE);
	    }
	    Object.defineProperty(RangeEdit.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeEdit.prototype, "firstEditor", {
	        get: function () {
	            return this._firstEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeEdit.prototype, "secondEditor", {
	        get: function () {
	            return this._secondEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RangeEdit.prototype, "value", {
	        get: function () {
	            if (!this._value) {
	                this._value = {};
	            }
	            if (this._firstEditor) {
	                this._value.first = +this._firstEditor.value;
	            }
	            if (this._secondEditor) {
	                this._value.second = +this._secondEditor.value;
	            }
	            return this._value;
	        },
	        set: function (value) {
	            this._value = value;
	            if (this._firstEditor) {
	                this._firstEditor.value = value.first;
	            }
	            if (this._secondEditor) {
	                this._secondEditor.value = value.second;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RangeEdit.prototype.onToJson = function (json) {
	        delete json._value;
	    };
	    RangeEdit.prototype.relayoutChildren = function () {
	        this.requestRedraw();
	        if (this.w && this.h && this._firstEditor && this._label && this._secondEditor) {
	            var x = this.leftPadding;
	            var y = this.topPadding;
	            var h = this.clientH;
	            var labelW = 15;
	            var w = (this.clientW - labelW) >> 1;
	            this._firstEditor.moveResizeTo(x, y, w, h, 0);
	            x += w;
	            this._label.moveResizeTo(x, y, labelW, h, 0);
	            x += labelW;
	            this._secondEditor.moveResizeTo(x, y, w, h, 0);
	        }
	        return this.getLayoutRect();
	    };
	    RangeEdit.prototype.dispose = function () {
	        this._firstEditor = null;
	        this._secondEditor = null;
	        _super.prototype.dispose.call(this);
	    };
	    RangeEdit.prototype.forwardChangeEvent = function (evt) {
	        var e = this.eChangeEvent;
	        e.init(evt.type, { value: this.value });
	        this.dispatchEvent(e);
	    };
	    RangeEdit.prototype.onReset = function () {
	        var _this = this;
	        _super.prototype.onReset.call(this);
	        this.padding = 0;
	        var value = this._value || { first: 0, second: 0 };
	        this._firstEditor = edit_1.Edit.create({ value: value.first, inputType: "number" });
	        this.addChild(this._firstEditor, false);
	        this._firstEditor.on(Events.CHANGE, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        this._firstEditor.on(Events.CHANGING, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        this._label = label_1.Label.create({ text: "-", multiLineMode: false });
	        this.addChild(this._label, false);
	        this._secondEditor = edit_1.Edit.create({ value: value.second, inputType: "number" });
	        this.addChild(this._secondEditor, false);
	        this._secondEditor.on(Events.CHANGE, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        this._secondEditor.on(Events.CHANGING, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        this.relayoutChildren();
	    };
	    RangeEdit.create = function (options) {
	        return RangeEdit.rBin.create(options);
	    };
	    RangeEdit.TYPE = "range.edit";
	    RangeEdit.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(RangeEdit);
	    return RangeEdit;
	}(widget_1.Widget));
	exports.RangeEdit = RangeEdit;
	;
	widget_factory_1.WidgetFactory.register(RangeEdit.TYPE, RangeEdit.create);


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var vector_edit_1 = __webpack_require__(151);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleVector = (function (_super) {
	    __extends(TitleVector, _super);
	    function TitleVector(type) {
	        _super.call(this, type || TitleVector.TYPE);
	    }
	    Object.defineProperty(TitleVector.prototype, "d", {
	        /**
	         * dimension
	         */
	        get: function () {
	            return this._d;
	        },
	        set: function (value) {
	            this._d = value;
	            ;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleVector.prototype.createValueWidget = function (options) {
	        return vector_edit_1.VectorEdit.create({ d: this.d || 2 });
	    };
	    TitleVector.create = function (options) {
	        var widget = TitleVector.recycleBin.create(null);
	        widget.d = options ? (options.d || 2) : 2;
	        widget.reset(TitleVector.TYPE, options);
	        return widget;
	    };
	    TitleVector.TYPE = "title-vector";
	    TitleVector.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleVector);
	    return TitleVector;
	}(title_value_1.TitleValue));
	exports.TitleVector = TitleVector;
	;
	widget_factory_1.WidgetFactory.register(TitleVector.TYPE, TitleVector.create);


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var label_1 = __webpack_require__(22);
	var edit_1 = __webpack_require__(21);
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	var widget_factory_1 = __webpack_require__(27);
	var recyclable_creator_1 = __webpack_require__(87);
	var grid_layouter_1 = __webpack_require__(121);
	/**
	 * 范围编辑器。
	 */
	var VectorEdit = (function (_super) {
	    __extends(VectorEdit, _super);
	    function VectorEdit() {
	        _super.call(this, VectorEdit.TYPE);
	    }
	    Object.defineProperty(VectorEdit.prototype, "xTitle", {
	        get: function () {
	            return this._xTitle;
	        },
	        set: function (value) {
	            if (value || value === "") {
	                this._xTitle;
	                this._xLabel.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "yTitle", {
	        get: function () {
	            return this._yTitle;
	        },
	        set: function (value) {
	            if (value || value === "") {
	                this._yTitle;
	                this._yLabel.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "zTitle", {
	        get: function () {
	            return this._zTitle;
	        },
	        set: function (value) {
	            if (value || value === "") {
	                this._zTitle;
	                this._zLabel.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "wTitle", {
	        get: function () {
	            return this._wTitle;
	        },
	        set: function (value) {
	            if (value || value === "") {
	                this._wTitle;
	                this._wLabel.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "inputable", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "d", {
	        /**
	         * dimension
	         */
	        get: function () {
	            return this._d;
	        },
	        set: function (value) {
	            this._d = value;
	            ;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "xEditor", {
	        get: function () {
	            return this._xEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "yEditor", {
	        get: function () {
	            return this._yEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "zEditor", {
	        get: function () {
	            return this._zEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "wEditor", {
	        get: function () {
	            return this._wEditor;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(VectorEdit.prototype, "value", {
	        get: function () {
	            if (!this._value) {
	                this._value = {};
	            }
	            if (this._xEditor) {
	                this._value.x = +(this._xEditor.value);
	            }
	            if (this._yEditor) {
	                this._value.y = +(this._yEditor.value);
	            }
	            if (this._zEditor) {
	                this._value.z = +(this._zEditor.value);
	            }
	            if (this._wEditor) {
	                this._value.w = +(this._wEditor.value);
	            }
	            return this._value;
	        },
	        set: function (value) {
	            this._value = value;
	            if (this._xEditor) {
	                this._xEditor.value = +value.x;
	            }
	            if (this._yEditor) {
	                this._yEditor.value = +value.y;
	            }
	            if (this._zEditor) {
	                this._zEditor.value = +value.z;
	            }
	            if (this._wEditor) {
	                this._wEditor.value = +value.w;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    VectorEdit.prototype.onToJson = function (json) {
	        delete json._value;
	    };
	    VectorEdit.prototype.dispose = function () {
	        this._xEditor = null;
	        this._yEditor = null;
	        this._zEditor = null;
	        this._wEditor = null;
	        this._xLabel = null;
	        this._yLabel = null;
	        this._zLabel = null;
	        this._wLabel = null;
	        _super.prototype.dispose.call(this);
	    };
	    VectorEdit.prototype.forwardChangeEvent = function (evt) {
	        var e = this.eChangeEvent;
	        e.init(evt.type, { value: this.value });
	        this.dispatchEvent(e);
	    };
	    VectorEdit.prototype.createEdit = function (value) {
	        var _this = this;
	        var edit = edit_1.Edit.create({ multiLineMode: false, value: value, inputType: "number" });
	        this.addChild(edit, false);
	        edit.on(Events.CHANGE, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        edit.on(Events.CHANGING, function (evt) {
	            _this.forwardChangeEvent(evt);
	        });
	        return edit;
	    };
	    VectorEdit.prototype.createLabel = function (text) {
	        var label = label_1.Label.create({ text: text });
	        label.set({ multiLineMode: false, topPadding: 10, bottomPadding: 0, styleType: "label.small" });
	        this.addChild(label, false);
	        return label;
	    };
	    VectorEdit.prototype.onCreated = function () {
	        _super.prototype.onCreated.call(this);
	        this.padding = 0;
	        var value = this._value || { x: 0, y: 0, z: 0, w: 0 };
	        this.d = Math.max(2, Math.min(4, this.d || 2));
	        var cols = this.d;
	        var rows = 2;
	        this.childrenLayouter = grid_layouter_1.GridLayouter.create({ rows: rows, cols: cols, rightMargin: 10 });
	        this._xLabel = this.createLabel(this._xTitle);
	        this._yLabel = this.createLabel(this._yTitle);
	        if (this.d > 2) {
	            this._zLabel = this.createLabel(this._zTitle);
	        }
	        if (this.d > 3) {
	            this._wLabel = this.createLabel(this._wTitle);
	        }
	        this._xEditor = this.createEdit(value.x);
	        this._yEditor = this.createEdit(value.y);
	        if (this.d > 2) {
	            this._zEditor = this.createEdit(value.z);
	        }
	        if (this.d > 3) {
	            this._wEditor = this.createEdit(value.w);
	        }
	        this.relayoutChildren();
	    };
	    VectorEdit.prototype.getDefProps = function () {
	        return VectorEdit.defProps;
	    };
	    VectorEdit.create = function (options) {
	        return VectorEdit.rBin.create().reset(VectorEdit.TYPE, options);
	    };
	    VectorEdit.defProps = Object.assign({}, widget_1.Widget.defProps, { _d: 2, _xTitle: "X", _yTitle: "Y", _zTitle: "Z", _wTitle: "W" });
	    VectorEdit.TYPE = "vector.edit";
	    VectorEdit.rBin = new recyclable_creator_1.RecyclableCreator(function () {
	        return new VectorEdit();
	    });
	    return VectorEdit;
	}(widget_1.Widget));
	exports.VectorEdit = VectorEdit;
	;
	widget_factory_1.WidgetFactory.register(VectorEdit.TYPE, VectorEdit.create);


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var slider_1 = __webpack_require__(99);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleSlider = (function (_super) {
	    __extends(TitleSlider, _super);
	    function TitleSlider(type) {
	        _super.call(this, type || TitleSlider.TYPE);
	    }
	    TitleSlider.prototype.createValueWidget = function (options) {
	        return slider_1.Slider.create(options);
	    };
	    TitleSlider.create = function (options) {
	        return TitleSlider.recycleBin.create(options);
	    };
	    TitleSlider.TYPE = "title-slider";
	    TitleSlider.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleSlider);
	    return TitleSlider;
	}(title_value_1.TitleValue));
	exports.TitleSlider = TitleSlider;
	;
	widget_factory_1.WidgetFactory.register(TitleSlider.TYPE, TitleSlider.create);


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var edit_1 = __webpack_require__(21);
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleTextArea = (function (_super) {
	    __extends(TitleTextArea, _super);
	    function TitleTextArea(type) {
	        _super.call(this, type || TitleTextArea.TYPE);
	    }
	    Object.defineProperty(TitleTextArea.prototype, "inputTips", {
	        get: function () {
	            return this._inputTips;
	        },
	        set: function (value) {
	            this._inputTips = value;
	            if (this._valueWidget) {
	                this._valueWidget.set({ inputTips: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleTextArea.prototype.createValueWidget = function (options) {
	        var opts = options || {};
	        if (this._inputTips) {
	            opts.inputTips = this._inputTips;
	        }
	        opts.multiLines = true;
	        return edit_1.Edit.create(opts);
	    };
	    TitleTextArea.create = function (options) {
	        return TitleTextArea.recycleBin.create(options);
	    };
	    TitleTextArea.TYPE = "title-text-area";
	    TitleTextArea.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleTextArea);
	    return TitleTextArea;
	}(title_value_1.TitleValue));
	exports.TitleTextArea = TitleTextArea;
	;
	widget_factory_1.WidgetFactory.register(TitleTextArea.TYPE, TitleTextArea.create);


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var title_value_1 = __webpack_require__(142);
	var choosable_edit_1 = __webpack_require__(155);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var TitleChoosableEdit = (function (_super) {
	    __extends(TitleChoosableEdit, _super);
	    function TitleChoosableEdit(type) {
	        _super.call(this, type || TitleChoosableEdit.TYPE);
	    }
	    Object.defineProperty(TitleChoosableEdit.prototype, "onChoose", {
	        get: function () {
	            var edit = this._valueWidget;
	            return edit.onChoose;
	        },
	        set: function (value) {
	            var edit = this._valueWidget;
	            edit.onChoose = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleChoosableEdit.prototype, "inputTips", {
	        get: function () {
	            return this._inputTips;
	        },
	        set: function (value) {
	            this._inputTips = value;
	            if (this._valueWidget) {
	                this._valueWidget.set({ inputTips: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleChoosableEdit.prototype.createValueWidget = function (options) {
	        return choosable_edit_1.ChoosableEdit.create();
	    };
	    TitleChoosableEdit.create = function (options) {
	        return TitleChoosableEdit.recycleBin.create(options);
	    };
	    TitleChoosableEdit.TYPE = "title-choosable-edit";
	    TitleChoosableEdit.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleChoosableEdit);
	    return TitleChoosableEdit;
	}(title_value_1.TitleValue));
	exports.TitleChoosableEdit = TitleChoosableEdit;
	;
	widget_factory_1.WidgetFactory.register(TitleChoosableEdit.TYPE, TitleChoosableEdit.create);


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var edit_1 = __webpack_require__(21);
	var button_1 = __webpack_require__(98);
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 编辑器+选择按钮。
	 */
	var ChoosableEdit = (function (_super) {
	    __extends(ChoosableEdit, _super);
	    function ChoosableEdit() {
	        _super.call(this, ChoosableEdit.TYPE);
	    }
	    Object.defineProperty(ChoosableEdit.prototype, "inputTips", {
	        get: function () {
	            return this._inputTips;
	        },
	        set: function (value) {
	            this._inputTips = value;
	            if (this._edit) {
	                this._edit.set({ inputTips: value });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ChoosableEdit.prototype, "value", {
	        get: function () {
	            return this._edit ? this._edit.text : this._value;
	        },
	        set: function (value) {
	            this._value = value;
	            if (this._edit) {
	                this._edit.text = value;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ChoosableEdit.prototype.relayoutChildren = function () {
	        this.requestRedraw();
	        if (this._edit && this._button) {
	            var x = this.leftPadding;
	            var y = this.topPadding;
	            var h = this.clientH;
	            var w = this.clientW - this.h - 6;
	            this._edit.moveResizeTo(x, y, w, h, 0);
	            w = this.h;
	            x = this.w - w - 4;
	            this._button.moveResizeTo(x, y, w, h, 0);
	        }
	        return this.getLayoutRect();
	    };
	    ChoosableEdit.prototype.dispose = function () {
	        this._edit = null;
	        this._button = null;
	        _super.prototype.dispose.call(this);
	    };
	    ChoosableEdit.prototype.onReset = function () {
	        var _this = this;
	        _super.prototype.onReset.call(this);
	        this.padding = 0;
	        this.onChoose = null;
	        this._edit = edit_1.Edit.create();
	        this.addChild(this._edit);
	        this._edit.on(Events.CHANGE, function (evt) {
	            _this.dispatchEvent(evt);
	        });
	        this._button = button_1.Button.create({ text: "..." });
	        this.addChild(this._button);
	        this._button.on(Events.CLICK, function (evt) {
	            if (_this.onChoose) {
	                _this.onChoose();
	            }
	        });
	    };
	    ChoosableEdit.create = function (options) {
	        return ChoosableEdit.rBin.create(options);
	    };
	    ChoosableEdit.TYPE = "choosable.edit";
	    ChoosableEdit.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ChoosableEdit);
	    return ChoosableEdit;
	}(widget_1.Widget));
	exports.ChoosableEdit = ChoosableEdit;
	;
	widget_factory_1.WidgetFactory.register(ChoosableEdit.TYPE, ChoosableEdit.create);


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var emitter_1 = __webpack_require__(8);
	var PropDesc = (function () {
	    function PropDesc(type) {
	        this.type = type;
	    }
	    PropDesc.prototype.toJson = function () {
	        var _this = this;
	        var json = {};
	        PropDesc.keys.forEach(function (key) {
	            var value = _this[key];
	            if (value !== undefined) {
	                json[key] = value;
	            }
	        });
	        return json;
	    };
	    PropDesc.prototype.fromJson = function (json) {
	        var _this = this;
	        PropDesc.keys.forEach(function (key) {
	            var value = _this[key];
	            if (value !== undefined) {
	                _this[key] = value;
	            }
	        });
	    };
	    PropDesc.prototype.setBasic = function (name, value, desc) {
	        this.name = name;
	        this.desc = desc;
	        this.value = value;
	    };
	    PropDesc.prototype.setDataBindingRule = function (path, converter, validationRule) {
	        this.path = path;
	        this.converter = converter;
	        this.validationRule = validationRule;
	        return this;
	    };
	    PropDesc.keys = ["type", "name", "desc", "value", "path", "converter", "validationRule"];
	    return PropDesc;
	}());
	exports.PropDesc = PropDesc;
	;
	var NumberPropDesc = (function (_super) {
	    __extends(NumberPropDesc, _super);
	    function NumberPropDesc(min, max) {
	        _super.call(this, NumberPropDesc.TYPE);
	        this.min = min;
	        this.max = max;
	    }
	    NumberPropDesc.prototype.toJson = function () {
	        var json = _super.prototype.toJson.call(this);
	        json.min = this.min;
	        json.max = this.max;
	        return json;
	    };
	    NumberPropDesc.prototype.fromJson = function (json) {
	        _super.prototype.fromJson.call(this, json);
	        this.min = json.min;
	        this.max = json.max;
	    };
	    NumberPropDesc.create = function (min, max) {
	        return new NumberPropDesc(min, max);
	    };
	    NumberPropDesc.TYPE = "number";
	    return NumberPropDesc;
	}(PropDesc));
	exports.NumberPropDesc = NumberPropDesc;
	;
	var TextPropDesc = (function (_super) {
	    __extends(TextPropDesc, _super);
	    function TextPropDesc() {
	        _super.call(this, TextPropDesc.TYPE);
	    }
	    TextPropDesc.create = function () {
	        return new TextPropDesc();
	    };
	    TextPropDesc.TYPE = "text";
	    return TextPropDesc;
	}(PropDesc));
	exports.TextPropDesc = TextPropDesc;
	var LinkPropDesc = (function (_super) {
	    __extends(LinkPropDesc, _super);
	    function LinkPropDesc() {
	        _super.call(this, LinkPropDesc.TYPE);
	    }
	    LinkPropDesc.create = function () {
	        return new LinkPropDesc();
	    };
	    LinkPropDesc.TYPE = "link";
	    return LinkPropDesc;
	}(PropDesc));
	exports.LinkPropDesc = LinkPropDesc;
	var ReadonlyTextPropDesc = (function (_super) {
	    __extends(ReadonlyTextPropDesc, _super);
	    function ReadonlyTextPropDesc() {
	        _super.call(this, ReadonlyTextPropDesc.TYPE);
	    }
	    ReadonlyTextPropDesc.create = function () {
	        return new ReadonlyTextPropDesc();
	    };
	    ReadonlyTextPropDesc.TYPE = "text-readonly";
	    return ReadonlyTextPropDesc;
	}(PropDesc));
	exports.ReadonlyTextPropDesc = ReadonlyTextPropDesc;
	var SliderPropDesc = (function (_super) {
	    __extends(SliderPropDesc, _super);
	    function SliderPropDesc() {
	        _super.call(this, SliderPropDesc.TYPE);
	    }
	    SliderPropDesc.create = function () {
	        return new SliderPropDesc();
	    };
	    SliderPropDesc.TYPE = "slider";
	    return SliderPropDesc;
	}(PropDesc));
	exports.SliderPropDesc = SliderPropDesc;
	var RangePropDesc = (function (_super) {
	    __extends(RangePropDesc, _super);
	    function RangePropDesc() {
	        _super.call(this, RangePropDesc.TYPE);
	    }
	    RangePropDesc.create = function () {
	        return new RangePropDesc();
	    };
	    RangePropDesc.TYPE = "range";
	    return RangePropDesc;
	}(PropDesc));
	exports.RangePropDesc = RangePropDesc;
	var Vector2PropDesc = (function (_super) {
	    __extends(Vector2PropDesc, _super);
	    function Vector2PropDesc(xTitle, yTitle) {
	        _super.call(this, Vector2PropDesc.TYPE);
	        this.xTitle = xTitle;
	        this.yTitle = yTitle;
	    }
	    Vector2PropDesc.prototype.toJson = function () {
	        var json = _super.prototype.toJson.call(this);
	        json.xTitle = this.xTitle;
	        json.yTitle = this.yTitle;
	        return json;
	    };
	    Vector2PropDesc.prototype.fromJson = function (json) {
	        _super.prototype.fromJson.call(this, json);
	        this.xTitle = json.xTitle;
	        this.yTitle = json.yTitle;
	    };
	    Vector2PropDesc.create = function (xTitle, yTitle) {
	        return new Vector2PropDesc(xTitle, yTitle);
	    };
	    Vector2PropDesc.TYPE = "vector2";
	    return Vector2PropDesc;
	}(PropDesc));
	exports.Vector2PropDesc = Vector2PropDesc;
	var Vector3PropDesc = (function (_super) {
	    __extends(Vector3PropDesc, _super);
	    function Vector3PropDesc(xTitle, yTitle, zTitle) {
	        _super.call(this, Vector3PropDesc.TYPE);
	        this.xTitle = xTitle;
	        this.yTitle = yTitle;
	        this.zTitle = zTitle;
	    }
	    Vector3PropDesc.prototype.toJson = function () {
	        var json = _super.prototype.toJson.call(this);
	        json.xTitle = this.xTitle;
	        json.yTitle = this.yTitle;
	        json.zTitle = this.zTitle;
	        return json;
	    };
	    Vector3PropDesc.prototype.fromJson = function (json) {
	        _super.prototype.fromJson.call(this, json);
	        this.xTitle = json.xTitle;
	        this.yTitle = json.yTitle;
	        this.zTitle = json.zTitle;
	    };
	    Vector3PropDesc.create = function (xTitle, yTitle, zTitle) {
	        return new Vector3PropDesc(xTitle, yTitle, zTitle);
	    };
	    Vector3PropDesc.TYPE = "vector3";
	    return Vector3PropDesc;
	}(PropDesc));
	exports.Vector3PropDesc = Vector3PropDesc;
	var Vector4PropDesc = (function (_super) {
	    __extends(Vector4PropDesc, _super);
	    function Vector4PropDesc(xTitle, yTitle, zTitle, wTitle) {
	        _super.call(this, Vector4PropDesc.TYPE);
	        this.xTitle = xTitle;
	        this.yTitle = yTitle;
	        this.zTitle = zTitle;
	        this.wTitle = wTitle;
	    }
	    Vector4PropDesc.prototype.toJson = function () {
	        var json = _super.prototype.toJson.call(this);
	        json.xTitle = this.xTitle;
	        json.yTitle = this.yTitle;
	        json.zTitle = this.zTitle;
	        json.wTitle = this.wTitle;
	        return json;
	    };
	    Vector4PropDesc.prototype.fromJson = function (json) {
	        _super.prototype.fromJson.call(this, json);
	        this.xTitle = json.xTitle;
	        this.yTitle = json.yTitle;
	        this.zTitle = json.zTitle;
	        this.wTitle = json.wTitle;
	    };
	    Vector4PropDesc.create = function (xTitle, yTitle, zTitle, wTitle) {
	        return new Vector4PropDesc(xTitle, yTitle, zTitle, wTitle);
	    };
	    Vector4PropDesc.TYPE = "vector4";
	    return Vector4PropDesc;
	}(PropDesc));
	exports.Vector4PropDesc = Vector4PropDesc;
	var LinePropDesc = (function (_super) {
	    __extends(LinePropDesc, _super);
	    function LinePropDesc() {
	        _super.call(this, LinePropDesc.TYPE);
	    }
	    LinePropDesc.create = function () {
	        return new LinePropDesc();
	    };
	    LinePropDesc.TYPE = "line";
	    return LinePropDesc;
	}(PropDesc));
	exports.LinePropDesc = LinePropDesc;
	var BoolPropDesc = (function (_super) {
	    __extends(BoolPropDesc, _super);
	    function BoolPropDesc() {
	        _super.call(this, BoolPropDesc.TYPE);
	    }
	    BoolPropDesc.create = function () {
	        return new BoolPropDesc();
	    };
	    BoolPropDesc.TYPE = "bool";
	    return BoolPropDesc;
	}(PropDesc));
	exports.BoolPropDesc = BoolPropDesc;
	var OptionsPropDesc = (function (_super) {
	    __extends(OptionsPropDesc, _super);
	    function OptionsPropDesc(options) {
	        _super.call(this, OptionsPropDesc.TYPE);
	        this.options = options;
	    }
	    OptionsPropDesc.prototype.toJson = function () {
	        var json = _super.prototype.toJson.call(this);
	        json.options = this.options;
	        return json;
	    };
	    OptionsPropDesc.prototype.fromJson = function (json) {
	        _super.prototype.fromJson.call(this, json);
	        this.options = json.options;
	    };
	    OptionsPropDesc.create = function (options) {
	        return new OptionsPropDesc(options);
	    };
	    OptionsPropDesc.TYPE = "options";
	    return OptionsPropDesc;
	}(PropDesc));
	exports.OptionsPropDesc = OptionsPropDesc;
	var PropsDesc = (function (_super) {
	    __extends(PropsDesc, _super);
	    function PropsDesc() {
	        _super.apply(this, arguments);
	    }
	    PropsDesc.prototype.notifyChange = function () {
	        var e = Events.ChangeEvent.create().init(Events.CHANGE, { value: null });
	        this.dispatchEvent(e);
	        e.dispose();
	        return this;
	    };
	    PropsDesc.prototype.forEach = function (func) {
	        var items = this._items;
	        items.forEach(function (item) {
	            func(item);
	        });
	    };
	    PropsDesc.prototype.toJson = function () {
	        var json = {};
	        json.items = this._items.map(function (item) {
	            return item.toJson();
	        });
	        return json;
	    };
	    ;
	    PropsDesc.prototype.fromJson = function (json) {
	        this.parse(json.items);
	    };
	    PropsDesc.prototype.parse = function (json) {
	        var items = [];
	        json.forEach(function (data) {
	            var desc = null;
	            var type = data.type;
	            if (type === NumberPropDesc.TYPE) {
	                desc = NumberPropDesc.create(data.min, data.max);
	            }
	            else if (type === SliderPropDesc.TYPE) {
	                desc = SliderPropDesc.create();
	            }
	            else if (type === TextPropDesc.TYPE) {
	                desc = TextPropDesc.create();
	            }
	            else if (type === LinkPropDesc.TYPE) {
	                desc = LinkPropDesc.create();
	            }
	            else if (type === ReadonlyTextPropDesc.TYPE) {
	                desc = ReadonlyTextPropDesc.create();
	            }
	            else if (type === RangePropDesc.TYPE) {
	                desc = RangePropDesc.create();
	            }
	            else if (type === Vector2PropDesc.TYPE) {
	                desc = Vector2PropDesc.create(data.xTitle, data.yTitle);
	            }
	            else if (type === Vector3PropDesc.TYPE) {
	                desc = Vector3PropDesc.create(data.xTitle, data.yTitle, data.zTitle);
	            }
	            else if (type === Vector4PropDesc.TYPE) {
	                desc = Vector4PropDesc.create(data.xTitle, data.yTitle, data.zTitle, data.wTitle);
	            }
	            else if (type === OptionsPropDesc.TYPE) {
	                desc = OptionsPropDesc.create(data.options);
	            }
	            else if (type === LinePropDesc.TYPE) {
	                desc = LinePropDesc.create();
	            }
	            else if (type === BoolPropDesc.TYPE) {
	                desc = BoolPropDesc.create();
	            }
	            else {
	                console.log("not supported:" + type);
	                return;
	            }
	            items.push(desc);
	            desc.setBasic(data.name, data.value, data.desc);
	            desc.setDataBindingRule(data.path, data.converter, data.validationRule);
	        });
	        this._items = items;
	        return this;
	    };
	    PropsDesc.create = function (json) {
	        var propsDesc = new PropsDesc();
	        if (json) {
	            propsDesc.parse(json);
	        }
	        return propsDesc;
	    };
	    return PropsDesc;
	}(emitter_1.Emitter));
	exports.PropsDesc = PropsDesc;
	;
	var PagePropsDesc = (function () {
	    function PagePropsDesc(title, propsDesc) {
	        this.title = title;
	        this.propsDesc = propsDesc;
	    }
	    PagePropsDesc.prototype.toJson = function () {
	        return { title: this.title, propsDesc: this.propsDesc.toJson() };
	    };
	    PagePropsDesc.prototype.fromJson = function (json) {
	        this.title = json.title;
	        this.propsDesc = PropsDesc.create(json.propsDesc.items);
	    };
	    PagePropsDesc.create = function (title, json) {
	        var propsDesc = PropsDesc.create(json);
	        var pagePropsDesc = new PagePropsDesc(title, propsDesc);
	        return pagePropsDesc;
	    };
	    return PagePropsDesc;
	}());
	exports.PagePropsDesc = PagePropsDesc;
	;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var title_value_1 = __webpack_require__(142);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var combo_box_1 = __webpack_require__(115);
	var TitleComboBoxBase = (function (_super) {
	    __extends(TitleComboBoxBase, _super);
	    function TitleComboBoxBase(type) {
	        _super.call(this, type);
	    }
	    Object.defineProperty(TitleComboBoxBase.prototype, "itemH", {
	        get: function () {
	            var comboBox = this._valueWidget;
	            return comboBox.itemH;
	        },
	        set: function (value) {
	            var comboBox = this._valueWidget;
	            comboBox.itemH = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleComboBoxBase.prototype.resetOptions = function () {
	        var comboBox = this._valueWidget;
	        comboBox.resetOptions();
	        return this;
	    };
	    TitleComboBoxBase.prototype.addOption = function (text, value, imageURL, color) {
	        var comboBox = this._valueWidget;
	        comboBox.addOption(text, value, imageURL, color);
	        return this;
	    };
	    return TitleComboBoxBase;
	}(title_value_1.TitleValue));
	exports.TitleComboBoxBase = TitleComboBoxBase;
	var TitleComboBox = (function (_super) {
	    __extends(TitleComboBox, _super);
	    function TitleComboBox(type) {
	        _super.call(this, type || TitleComboBox.TYPE);
	    }
	    TitleComboBox.prototype.createValueWidget = function (options) {
	        return combo_box_1.ComboBox.create(options);
	    };
	    TitleComboBox.create = function (options) {
	        return TitleComboBox.recycleBin.create(options);
	    };
	    TitleComboBox.TYPE = "title-combo-box";
	    TitleComboBox.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleComboBox);
	    return TitleComboBox;
	}(TitleComboBoxBase));
	exports.TitleComboBox = TitleComboBox;
	;
	widget_factory_1.WidgetFactory.register(TitleComboBox.TYPE, TitleComboBox.create);
	var TitleComboBoxEditable = (function (_super) {
	    __extends(TitleComboBoxEditable, _super);
	    function TitleComboBoxEditable(type) {
	        _super.call(this, type || TitleComboBoxEditable.TYPE);
	    }
	    TitleComboBoxEditable.prototype.createValueWidget = function (options) {
	        return combo_box_1.ComboBoxEditable.create(options);
	    };
	    TitleComboBoxEditable.create = function (options) {
	        return TitleComboBoxEditable.recycleBin.create(options);
	    };
	    TitleComboBoxEditable.TYPE = "title-combo-box-editable";
	    TitleComboBoxEditable.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleComboBoxEditable);
	    return TitleComboBoxEditable;
	}(TitleComboBoxBase));
	exports.TitleComboBoxEditable = TitleComboBoxEditable;
	;
	widget_factory_1.WidgetFactory.register(TitleComboBoxEditable.TYPE, TitleComboBoxEditable.create);


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var view_model_default_1 = __webpack_require__(159);
	/**
	 * IViewModel的基本实现。如果不能满足要求，可以重载部分函数。
	 */
	var ViewModel = (function (_super) {
	    __extends(ViewModel, _super);
	    function ViewModel() {
	        _super.apply(this, arguments);
	    }
	    ViewModel.create = function (data) {
	        var viewModel = new ViewModel(data);
	        return viewModel;
	    };
	    return ViewModel;
	}(view_model_default_1.ViewModelDefault));
	exports.ViewModel = ViewModel;
	;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var pointer = __webpack_require__(160);
	var emitter_1 = __webpack_require__(8);
	var Events = __webpack_require__(10);
	var ivalidation_rule_1 = __webpack_require__(162);
	var iview_model_1 = __webpack_require__(85);
	var ViewModelDefault = (function (_super) {
	    __extends(ViewModelDefault, _super);
	    function ViewModelDefault(data) {
	        _super.call(this);
	        this._commands = {};
	        this._converters = {};
	        this._data = data || {};
	        this._validationRules = {};
	        this.isCollection = false;
	        this._bindingMode = iview_model_1.BindingMode.TWO_WAY;
	        this._ePropChange = Events.PropChangeEvent.create();
	    }
	    Object.defineProperty(ViewModelDefault.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        set: function (value) {
	            this.setData(value, true);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewModelDefault.prototype.setData = function (value, notify) {
	        this._data = value;
	        if (notify) {
	            this.notifyChange(Events.PROP_CHANGE, "/", null);
	        }
	        return this;
	    };
	    Object.defineProperty(ViewModelDefault.prototype, "bindingMode", {
	        get: function () {
	            return this._bindingMode;
	        },
	        set: function (value) {
	            this._bindingMode = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewModelDefault.prototype.onChange = function (callback) {
	        this.on(Events.PROP_DELETE, callback);
	        this.on(Events.PROP_CHANGE, callback);
	        return this;
	    };
	    ViewModelDefault.prototype.offChange = function (callback) {
	        this.off(Events.PROP_DELETE, callback);
	        this.off(Events.PROP_CHANGE, callback);
	        return this;
	    };
	    ViewModelDefault.prototype.notifyChange = function (type, path, value) {
	        this.dispatchEvent(this._ePropChange.init(type, { prop: path, value: value }));
	    };
	    ViewModelDefault.prototype.fixPath = function (path) {
	        if (path && path.charAt(0) !== '/') {
	            return '/' + path;
	        }
	        else {
	            return path;
	        }
	    };
	    ViewModelDefault.prototype.getProp = function (path, converterName) {
	        var value = pointer.get(this._data, this.fixPath(path));
	        return this.convert(converterName, value);
	    };
	    ViewModelDefault.prototype.delProp = function (path) {
	        pointer.remove(this._data, path);
	        this.notifyChange(Events.PROP_DELETE, this.fixPath(path), null);
	        return this;
	    };
	    ViewModelDefault.prototype.setPropEx = function (source, value, oldValue) {
	        var path = source.path;
	        var converterName = source.converter;
	        var validationRule = source.validationRule;
	        return this.setProp(path, value, converterName, validationRule);
	    };
	    ViewModelDefault.prototype.setProp = function (path, v, converterName, validationRule) {
	        var value = this.convertBack(converterName, v);
	        var validateResult = this.isValueValid(validationRule, value);
	        if (!validateResult.code) {
	            pointer.set(this._data, path, value);
	            this.notifyChange(Events.PROP_CHANGE, this.fixPath(path), value);
	        }
	        else {
	            console.log("invalid value");
	        }
	        return validateResult;
	        ;
	    };
	    ViewModelDefault.prototype.getCommand = function (name) {
	        return this._commands[name];
	    };
	    ViewModelDefault.prototype.canExecute = function (name) {
	        var ret = false;
	        var cmd = this.getCommand(name);
	        if (cmd && cmd.canExecute()) {
	            ret = true;
	        }
	        return ret;
	    };
	    ViewModelDefault.prototype.execCommand = function (name, args) {
	        var ret = false;
	        var cmd = this.getCommand(name);
	        if (cmd && cmd.canExecute()) {
	            ret = cmd.execute(args);
	        }
	        return ret;
	    };
	    ViewModelDefault.prototype.registerCommand = function (name, cmd) {
	        this._commands[name] = cmd;
	        return this;
	    };
	    ViewModelDefault.prototype.unregisterCommand = function (name) {
	        this._commands[name] = null;
	        return this;
	    };
	    ViewModelDefault.prototype.getValueConverter = function (name) {
	        return this._converters[name];
	    };
	    ViewModelDefault.prototype.registerValueConverter = function (name, converter) {
	        this._converters[name] = converter;
	        return this;
	    };
	    ViewModelDefault.prototype.unregisterValueConverter = function (name) {
	        this._converters[name] = null;
	        return this;
	    };
	    ViewModelDefault.prototype.convert = function (converterName, value) {
	        var converter = converterName ? this.getValueConverter(converterName) : null;
	        return converter ? converter.convert(value) : value;
	    };
	    ViewModelDefault.prototype.convertBack = function (converterName, value) {
	        var converter = converterName ? this.getValueConverter(converterName) : null;
	        return converter ? converter.convertBack(value) : value;
	    };
	    ViewModelDefault.prototype.getValidationRule = function (name) {
	        return this._validationRules[name];
	    };
	    ViewModelDefault.prototype.registerValidationRule = function (name, validationRule) {
	        this._validationRules[name] = validationRule;
	        return this;
	    };
	    ViewModelDefault.prototype.unregisterValidationRule = function (name) {
	        this._validationRules[name] = null;
	        return this;
	    };
	    ViewModelDefault.prototype.isValueValid = function (ruleName, value) {
	        var validationRule = ruleName ? this.getValidationRule(ruleName) : null;
	        return validationRule ? validationRule.validate(value) : ivalidation_rule_1.ValidationResult.validResult;
	    };
	    return ViewModelDefault;
	}(emitter_1.Emitter));
	exports.ViewModelDefault = ViewModelDefault;
	;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var each = __webpack_require__(161);
	module.exports = api;


	/**
	 * Convenience wrapper around the api.
	 * Calls `.get` when called with an `object` and a `pointer`.
	 * Calls `.set` when also called with `value`.
	 * If only supplied `object`, returns a partially applied function, mapped to the object.
	 *
	 * @param {Object} obj
	 * @param {String|Array} pointer
	 * @param value
	 * @returns {*}
	 */

	function api (obj, pointer, value) {
	    // .set()
	    if (arguments.length === 3) {
	        return api.set(obj, pointer, value);
	    }
	    // .get()
	    if (arguments.length === 2) {
	        return api.get(obj, pointer);
	    }
	    // Return a partially applied function on `obj`.
	    var wrapped = api.bind(api, obj);

	    // Support for oo style
	    for (var name in api) {
	        if (api.hasOwnProperty(name)) {
	            wrapped[name] = api[name].bind(wrapped, obj);
	        }
	    }
	    return wrapped;
	}


	/**
	 * Lookup a json pointer in an object
	 *
	 * @param {Object} obj
	 * @param {String|Array} pointer
	 * @returns {*}
	 */
	api.get = function get (obj, pointer) {
	    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);

	    for (var i = 0; i < refTokens.length; ++i) {
	        var tok = refTokens[i];
	        if (!(typeof obj == 'object' && tok in obj)) {
	            throw new Error('Invalid reference token: ' + tok);
	        }
	        obj = obj[tok];
	    }
	    return obj;
	};

	/**
	 * Sets a value on an object
	 *
	 * @param {Object} obj
	 * @param {String|Array} pointer
	 * @param value
	 */
	api.set = function set (obj, pointer, value) {
	    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer),
	      nextTok = refTokens[0];

	    for (var i = 0; i < refTokens.length - 1; ++i) {
	        var tok = refTokens[i];
	        if (tok === '-' && Array.isArray(obj)) {
	          tok = obj.length;
	        }
	        nextTok = refTokens[i + 1];

	        if (!(tok in obj)) {
	            if (nextTok.match(/^(\d+|-)$/)) {
	                obj[tok] = [];
	            } else {
	                obj[tok] = {};
	            }
	        }
	        obj = obj[tok];
	    }
	    if (nextTok === '-' && Array.isArray(obj)) {
	      nextTok = obj.length;
	    }
	    obj[nextTok] = value;
	    return this;
	};

	/**
	 * Removes an attribute
	 *
	 * @param {Object} obj
	 * @param {String|Array} pointer
	 */
	api.remove = function (obj, pointer) {
	    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);
	    var finalToken = refTokens[refTokens.length -1];
	    if (finalToken === undefined) {
	        throw new Error('Invalid JSON pointer for remove: "' + pointer + '"');
	    }
	    delete api.get(obj, refTokens.slice(0, -1))[finalToken];
	};

	/**
	 * Returns a (pointer -> value) dictionary for an object
	 *
	 * @param obj
	 * @param {function} descend
	 * @returns {}
	 */
	api.dict = function dict (obj, descend) {
	    var results = {};
	    api.walk(obj, function (value, pointer) {
	        results[pointer] = value;
	    }, descend);
	    return results;
	};

	/**
	 * Iterates over an object
	 * Iterator: function (value, pointer) {}
	 *
	 * @param obj
	 * @param {function} iterator
	 * @param {function} descend
	 */
	api.walk = function walk (obj, iterator, descend) {
	    var refTokens = [];

	    descend = descend || function (value) {
	        var type = Object.prototype.toString.call(value);
	        return type === '[object Object]' || type === '[object Array]';
	    };

	    (function next (cur) {
	        each(cur, function (value, key) {
	            refTokens.push(String(key));
	            if (descend(value)) {
	                next(value);
	            } else {
	                iterator(value, api.compile(refTokens));
	            }
	            refTokens.pop();
	        });
	    }(obj));
	};

	/**
	 * Tests if an object has a value for a json pointer
	 *
	 * @param obj
	 * @param pointer
	 * @returns {boolean}
	 */
	api.has = function has (obj, pointer) {
	    try {
	        api.get(obj, pointer);
	    } catch (e) {
	        return false;
	    }
	    return true;
	};

	/**
	 * Escapes a reference token
	 *
	 * @param str
	 * @returns {string}
	 */
	api.escape = function escape (str) {
	    return str.toString().replace(/~/g, '~0').replace(/\//g, '~1');
	};

	/**
	 * Unescapes a reference token
	 *
	 * @param str
	 * @returns {string}
	 */
	api.unescape = function unescape (str) {
	    return str.replace(/~1/g, '/').replace(/~0/g, '~');
	};

	/**
	 * Converts a json pointer into a array of reference tokens
	 *
	 * @param pointer
	 * @returns {Array}
	 */
	api.parse = function parse (pointer) {
	    if (pointer === '') { return []; }
	    if (pointer.charAt(0) !== '/') { throw new Error('Invalid JSON pointer: ' + pointer); }
	    return pointer.substring(1).split(/\//).map(api.unescape);
	};

	/**
	 * Builds a json pointer from a array of reference tokens
	 *
	 * @param refTokens
	 * @returns {string}
	 */
	api.compile = function compile (refTokens) {
	    if (refTokens.length === 0) { return ''; }
	    return '/' + refTokens.map(api.escape).join('/');
	};


/***/ },
/* 161 */
/***/ function(module, exports) {

	
	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;

	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};



/***/ },
/* 162 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 数据有效性检查的结果。
	 */
	var ValidationResult = (function () {
	    function ValidationResult(code, message) {
	        this.code = code;
	        this.message = message;
	    }
	    /**
	     * 创建函数。
	     */
	    ValidationResult.create = function (code, message) {
	        return new ValidationResult(code, message);
	    };
	    /**
	     * 数据有效时，可以共用的结果，不能在运行时修改。
	     */
	    ValidationResult.validResult = ValidationResult.create(0, "valid");
	    /**
	     * 数据无效时，可以共用的结果，不能在运行时修改。
	     */
	    ValidationResult.invalidResult = ValidationResult.create(-1, "invalid");
	    return ValidationResult;
	}());
	exports.ValidationResult = ValidationResult;
	;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var ChoiceDialog = (function () {
	    function ChoiceDialog() {
	    }
	    ChoiceDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showChoice(info.title, info.options, info.multiple, function (value) {
	            info.value = value;
	            e.returnResult();
	        }, info.w, info.h);
	    };
	    return ChoiceDialog;
	}());
	exports.ChoiceDialog = ChoiceDialog;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var ProgressDialog = (function () {
	    function ProgressDialog() {
	    }
	    ProgressDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showProgress(info.title, info.runTask, function () {
	            e.returnResult();
	        }, info.w);
	    };
	    return ProgressDialog;
	}());
	exports.ProgressDialog = ProgressDialog;


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var ConfirmationDialog = (function () {
	    function ConfirmationDialog() {
	    }
	    ConfirmationDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showConfirm(info.content, function (ret) {
	            info.confirmed = true;
	            e.returnResult();
	        }, function (ret) {
	            info.confirmed = false;
	            e.returnResult();
	        }, info.w);
	    };
	    return ConfirmationDialog;
	}());
	exports.ConfirmationDialog = ConfirmationDialog;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var message_box_1 = __webpack_require__(134);
	var NotificationDialog = (function () {
	    function NotificationDialog() {
	    }
	    NotificationDialog.show = function (e) {
	        var info = e.payload;
	        message_box_1.MessageBox.showMessage(info.content, function (ret) {
	            e.returnResult();
	        }, info.w);
	    };
	    return NotificationDialog;
	}());
	exports.NotificationDialog = NotificationDialog;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var key_event_1 = __webpack_require__(20);
	var behavior_1 = __webpack_require__(81);
	/**
	 * Movable Behavior的初始化参数。
	 */
	var MovableOptions = (function () {
	    function MovableOptions(opts) {
	        var options = opts || {};
	        this.xMin = options.xMin || 0;
	        this.yMin = options.yMin || 0;
	        this.xMax = options.xMax || 0;
	        this.yMax = options.yMax || 0;
	        this.xLimit = options.xLimit || false;
	        this.yLimit = options.yLimit || false;
	        this.xMovable = options.xMovable !== undefined ? options.xMovable : true;
	        this.yMovable = options.yMovable !== undefined ? options.yMovable : true;
	        this.moveParent = options.moveParent || false;
	        this.animateDuration = options.animateDuration >= 0 ? options.animateDuration : 500;
	    }
	    return MovableOptions;
	}());
	exports.MovableOptions = MovableOptions;
	;
	/**
	 * 让Widget具有可以Movable的特性，按住鼠标可以拖动控件。
	 *
	 * move的过程中，按下ESCAPE键，Widget将恢复原来的位置。
	 */
	var Movable = (function (_super) {
	    __extends(Movable, _super);
	    function Movable(widget, options) {
	        _super.call(this, Movable.TYPE, widget, options);
	        this.movingEvent = { type: Events.MOVING };
	        this.moveEndEvent = { type: Events.MOVE_END };
	        this.moveBeginEvent = { type: Events.MOVE_BEGIN };
	        this.moveCancelEvent = { type: Events.MOVE_CANCEL };
	    }
	    Movable.prototype.init = function (options) {
	        this.options = new MovableOptions(options);
	    };
	    Movable.prototype.moveWidget = function (x, y, end) {
	        var options = this.options;
	        var moveParent = options.moveParent;
	        var widget = moveParent ? this.widget.parent : this.widget;
	        if (!options.xMovable) {
	            x = widget.x;
	        }
	        if (!options.yMovable) {
	            y = widget.y;
	        }
	        if (options.xLimit) {
	            x = Math.min(options.xMax, Math.max(options.xMin, x));
	        }
	        if (options.yLimit) {
	            y = Math.min(options.yMax, Math.max(options.yMin, y));
	        }
	        widget.moveTo(x, y);
	        if (end) {
	            widget.dispatchEvent(this.moveEndEvent);
	        }
	        else {
	            widget.dispatchEvent(this.movingEvent);
	        }
	    };
	    Movable.prototype.onCancelled = function () {
	        var _this = this;
	        var animate = true;
	        var widget = this.widget;
	        var duration = this.options.animateDuration;
	        widget.requestRedraw();
	        document.body.style.cursor = "default";
	        var tween = widget.moveTo(this.x, this.y, duration);
	        if (tween) {
	            tween.onComplete(function (evt) {
	                widget.dispatchEvent(_this.moveCancelEvent);
	            });
	            tween.onUpdate(function (evt) {
	                widget.dispatchEvent(_this.movingEvent);
	            });
	            return;
	        }
	    };
	    Movable.prototype.onKeyDownGlobal = function (evt) {
	        var keyCode = evt.detail.keyCode;
	        if (keyCode === key_event_1.KeyEvent.VK_ESCAPE && this.dragging) {
	            this.dragging = false;
	            this.onCancelled();
	        }
	    };
	    Movable.prototype.onPointerDown = function (evt) {
	        var moveParent = this.options.moveParent;
	        var widget = moveParent ? this.widget.parent : this.widget;
	        this.x = widget.x;
	        this.y = widget.y;
	        this.dragging = true;
	        widget.dispatchEvent(this.moveBeginEvent);
	        document.body.style.cursor = "move";
	    };
	    Movable.prototype.onPointerUp = function (evt) {
	        document.body.style.cursor = "default";
	        if (this.dragging) {
	            this.dragging = false;
	            var dx = evt.dx;
	            var dy = evt.dy;
	            this.moveWidget(this.x + dx, this.y + dy, true);
	        }
	    };
	    Movable.prototype.onPointerMove = function (evt) {
	        if (this.dragging) {
	            var dx = evt.dx;
	            var dy = evt.dy;
	            this.moveWidget(this.x + dx, this.y + dy, false);
	        }
	    };
	    ;
	    Movable.TYPE = "movable";
	    return Movable;
	}(behavior_1.Behavior));
	exports.Movable = Movable;
	behavior_1.BehaviorFactory.register(Movable.TYPE, function (widget, options) {
	    return new Movable(widget, options);
	});


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var key_event_1 = __webpack_require__(20);
	var behavior_1 = __webpack_require__(81);
	/**
	 * 让Widget具有拖放功能的拖动功能。
	 *
	 */
	var Draggable = (function (_super) {
	    __extends(Draggable, _super);
	    function Draggable(widget, options) {
	        _super.call(this, Draggable.TYPE, widget, options);
	    }
	    Draggable.prototype.init = function (options) {
	        this.onDrawDragging = function (evt) {
	            var ctx = evt.ctx;
	            var win = evt.widget;
	            var p = win.pointerPosition;
	            var e = Events.DragEvent.get(Events.DRAGSTART);
	            var image = e.dataTransfer.dragImage;
	            if (image) {
	                if (image.draw) {
	                    image.draw(ctx, p.x, p.y);
	                }
	            }
	            else {
	                ctx.fillStyle = "green";
	                ctx.fillRect(p.x, p.y, 10, 10);
	            }
	        };
	    };
	    Draggable.prototype.onCancelled = function () {
	        var widget = this.widget;
	        widget.win.requestRedraw();
	        Events.DragEvent.isDragging = false;
	        widget.win.off(Events.AFTER_DRAW, this.onDrawDragging);
	        widget.dispatchEvent(Events.DragEvent.get(Events.DRAGEND));
	    };
	    Draggable.prototype.onKeyDownGlobal = function (evt) {
	        var keyCode = evt.detail.keyCode;
	        if (keyCode === key_event_1.KeyEvent.VK_ESCAPE && this.dragging) {
	            this.dragging = false;
	            this.onCancelled();
	        }
	    };
	    Draggable.prototype.onPointerDown = function (evt) {
	        this.widget.win.on(Events.AFTER_DRAW, this.onDrawDragging);
	    };
	    Draggable.prototype.onPointerUp = function (evt) {
	        if (this.dragging) {
	            this.dragging = false;
	            Events.DragEvent.isDragging = false;
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DRAGEND));
	            this.widget.win.off(Events.AFTER_DRAW, this.onDrawDragging);
	        }
	    };
	    Draggable.prototype.onPointerMove = function (evt) {
	        if (evt.pointerDown && !this.dragging) {
	            this.dragging = true;
	            Events.DragEvent.isDragging = true;
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DRAGSTART));
	        }
	        if (evt.pointerDown) {
	            this.widget.win.requestRedraw();
	        }
	    };
	    ;
	    Draggable.TYPE = "draggable";
	    return Draggable;
	}(behavior_1.Behavior));
	exports.Draggable = Draggable;
	behavior_1.BehaviorFactory.register(Draggable.TYPE, function (widget, options) {
	    return new Draggable(widget, options);
	});


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var behavior_1 = __webpack_require__(81);
	/**
	 * 让Widget可作为拖放功能的Drop目标。
	 *
	 */
	var Droppable = (function (_super) {
	    __extends(Droppable, _super);
	    function Droppable(widget, options) {
	        _super.call(this, Droppable.TYPE, widget, options);
	    }
	    Droppable.prototype.onPointerEnter = function (evt) {
	        if (Events.DragEvent.isDragging) {
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DRAGENTER));
	        }
	    };
	    Droppable.prototype.onPointerLeave = function (evt) {
	        if (Events.DragEvent.isDragging) {
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DRAGLEAVE));
	        }
	    };
	    Droppable.prototype.onPointerUp = function (evt) {
	        if (Events.DragEvent.isDragging) {
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DROP));
	        }
	    };
	    Droppable.prototype.onPointerMove = function (evt) {
	        if (Events.DragEvent.isDragging) {
	            this.widget.dispatchEvent(Events.DragEvent.get(Events.DRAGOVER));
	        }
	    };
	    ;
	    Droppable.TYPE = "droppable";
	    return Droppable;
	}(behavior_1.Behavior));
	exports.Droppable = Droppable;
	behavior_1.BehaviorFactory.register(Droppable.TYPE, function (widget, options) {
	    return new Droppable(widget, options);
	});


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var point_1 = __webpack_require__(6);
	var Events = __webpack_require__(10);
	var key_event_1 = __webpack_require__(20);
	var behavior_1 = __webpack_require__(81);
	/**
	 * Resizable Behavior的初始化参数。
	 */
	var ResizableOptions = (function () {
	    function ResizableOptions(options) {
	        this.north = options.north || options.all || false;
	        this.south = options.south || options.all || false;
	        this.west = options.west || options.all || false;
	        this.east = options.east || options.all || false;
	        this.northWest = options.northWest || options.all || false;
	        this.northEast = options.northEast || options.all || false;
	        this.southWest = options.southWest || options.all || false;
	        this.southEast = options.southEast || options.all || false;
	        this.animateDuration = options.animateDuration >= 0 ? options.animateDuration : 500;
	    }
	    return ResizableOptions;
	}());
	exports.ResizableOptions = ResizableOptions;
	;
	/**
	 * 让Widget具有可以Resizable的特性。
	 * 当鼠标移动到Widget对应的位置，如四角和四边时，鼠标的指针会提示在此处按下鼠标可以resize Widget。
	 *
	 * Resize的过程中，按下ESCAPE键，Widget将恢复原来的位置与大小。
	 */
	var Resizable = (function (_super) {
	    __extends(Resizable, _super);
	    function Resizable(widget, options) {
	        _super.call(this, Resizable.TYPE, widget, options);
	        this.resizingEvent = { type: Events.RESIZING };
	        this.resizeEndEvent = { type: Events.RESIZE_END };
	        this.resizeBeginEvent = { type: Events.RESIZE_BEGIN };
	        this.resizeCancelEvent = { type: Events.RESIZE_CANCEL };
	    }
	    Resizable.prototype.init = function (options) {
	        this.options = new ResizableOptions(options);
	    };
	    Resizable.prototype.onCancelled = function () {
	        var _this = this;
	        var widget = this.widget;
	        var duration = this.options.animateDuration;
	        widget.requestRedraw();
	        document.body.style.cursor = "default";
	        var tween = this.widget.moveResizeTo(this.x, this.y, this.w, this.h, duration);
	        if (tween) {
	            tween.onComplete(function (evt) {
	                widget.dispatchEvent(_this.resizeCancelEvent);
	            });
	            tween.onUpdate(function (evt) {
	                widget.dispatchEvent(_this.resizingEvent);
	            });
	        }
	        else {
	            widget.dispatchEvent(this.resizeCancelEvent);
	        }
	    };
	    Resizable.prototype.onKeyDownGlobal = function (evt) {
	        var keyCode = evt.detail.keyCode;
	        if (keyCode === key_event_1.KeyEvent.VK_ESCAPE && this.resizing) {
	            this.resizing = false;
	            this.onCancelled();
	        }
	    };
	    Resizable.prototype.onPointerDown = function (evt) {
	        var result = this.testPointerPosition(evt);
	        if (result) {
	            var widget = this.widget;
	            this.x = widget.x;
	            this.y = widget.y;
	            this.w = widget.w;
	            this.h = widget.h;
	            this.resizing = true;
	            this.pointerDownArea = result;
	            document.body.style.cursor = result + "-resize";
	            widget.dispatchEvent(this.resizeBeginEvent);
	        }
	        else {
	            document.body.style.cursor = "default";
	        }
	    };
	    Resizable.prototype.onPointerUp = function (evt) {
	        if (this.resizing) {
	            this.widget.dispatchEvent(this.resizeEndEvent);
	        }
	        this.resizing = false;
	        document.body.style.cursor = "default";
	    };
	    Resizable.prototype.testPointerPosition = function (evt) {
	        var delta = 3;
	        var w = this.widget.w;
	        var h = this.widget.h;
	        var p = this.widget.toLocalPoint(point_1.Point.point.init(evt.x, evt.y));
	        var right = w - delta;
	        var bottom = h - delta;
	        var options = this.options;
	        var southResizable = options.southWest || options.southEast || options.south;
	        var northResizable = options.northWest || options.northEast || options.north;
	        if (p.y >= 0 && p.y <= delta) {
	            if (p.x >= 0 && p.x <= delta && northResizable) {
	                return "nw";
	            }
	            else if (p.x > delta && p.x < right && options.north) {
	                return "n";
	            }
	            else if (p.x >= right && p.x <= w && options.northEast) {
	                return "ne";
	            }
	        }
	        else if (p.y > delta && p.y < bottom) {
	            if (p.x >= 0 && p.x <= delta && options.west) {
	                return "w";
	            }
	            else if (p.x >= right && p.x <= w && options.east) {
	                return "e";
	            }
	        }
	        else if (p.y >= bottom && p.y <= h && southResizable) {
	            if (p.x >= 0 && p.x <= delta) {
	                return "sw";
	            }
	            else if (p.x > delta && p.x < right && options.south) {
	                return "s";
	            }
	            else if (p.x >= right && p.x <= w && options.southEast) {
	                return "se";
	            }
	        }
	        return null;
	    };
	    Resizable.prototype.onPointerMove = function (evt) {
	        if (this.resizing) {
	            var dx = evt.dx;
	            var dy = evt.dy;
	            var widget = this.widget;
	            switch (this.pointerDownArea) {
	                case "n": {
	                    widget.moveResizeTo(this.x, this.y + dy, this.w, this.h - dy);
	                    break;
	                }
	                case "ne": {
	                    widget.moveResizeTo(this.x, this.y + dy, this.w + dx, this.h - dy);
	                    break;
	                }
	                case "nw": {
	                    widget.moveResizeTo(this.x + dx, this.y + dy, this.w - dx, this.h - dy);
	                    break;
	                }
	                case "w": {
	                    widget.moveResizeTo(this.x + dx, this.y, this.w - dx, this.h);
	                    break;
	                }
	                case "e": {
	                    widget.moveResizeTo(this.x, this.y, this.w + dx, this.h);
	                    break;
	                }
	                case "s": {
	                    widget.moveResizeTo(this.x, this.y, this.w, this.h + dy);
	                    break;
	                }
	                case "se": {
	                    widget.moveResizeTo(this.x, this.y, this.w + dx, this.h + dy);
	                    break;
	                }
	                case "sw": {
	                    widget.moveResizeTo(this.x + dx, this.y, this.w - dx, this.h + dy);
	                    break;
	                }
	            }
	            widget.dispatchEvent(this.resizingEvent);
	        }
	        else {
	            var result = this.testPointerPosition(evt);
	            if (result) {
	                document.body.style.cursor = result + "-resize";
	            }
	            else {
	                document.body.style.cursor = "default";
	            }
	        }
	    };
	    Resizable.TYPE = "resizable";
	    return Resizable;
	}(behavior_1.Behavior));
	exports.Resizable = Resizable;
	behavior_1.BehaviorFactory.register(Resizable.TYPE, function (widget, options) {
	    return new Resizable(widget, options);
	});


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var dialog_1 = __webpack_require__(96);
	var graphics_1 = __webpack_require__(29);
	var list_view_1 = __webpack_require__(116);
	var Events = __webpack_require__(10);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var list_layouter_1 = __webpack_require__(117);
	var simple_layouter_1 = __webpack_require__(119);
	var Menu = (function (_super) {
	    __extends(Menu, _super);
	    function Menu() {
	        _super.call(this, Menu.TYPE);
	    }
	    Object.defineProperty(Menu.prototype, "openedMenu", {
	        get: function () {
	            return this._openedMenu;
	        },
	        set: function (value) {
	            var _this = this;
	            this._openedMenu = value;
	            if (value) {
	                value.on(Events.WINDOW_CLOSE, function (evt) {
	                    _this._openedMenu = null;
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Menu.prototype.hasItems = function () {
	        return this._listView.children.length > 0;
	    };
	    Object.defineProperty(Menu.prototype, "itemH", {
	        get: function () {
	            return this._listView.itemH;
	        },
	        set: function (value) {
	            this._listView.itemH = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "owner", {
	        get: function () {
	            return this._owner;
	        },
	        /**
	         * owner代表上级菜单或菜单条。
	         */
	        set: function (owner) {
	            this._owner = owner;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Menu.prototype, "trigger", {
	        get: function () {
	            return this._trigger;
	        },
	        /**
	         * 触发该菜单的MenuBarItem或MenuItem。
	         */
	        set: function (trigger) {
	            this._trigger = trigger;
	            this.app = trigger.app;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Menu.prototype.onItemEnter = function (child) {
	        var openedMenu = this._openedMenu;
	        if (child.onInitSubMenu) {
	            if (!openedMenu) {
	                child.openSubMenu();
	            }
	            else if (openedMenu.trigger !== child) {
	                child.reopenSubMenu(openedMenu);
	            }
	        }
	        else if (openedMenu) {
	            openedMenu.close();
	        }
	    };
	    Menu.prototype.dispatchPointerMove = function (evt, ctx) {
	        var owner = this.owner;
	        /*
	         * 如果事件在当前菜单外，把事件转发给owner处理。
	         */
	        if (!evt.pointerDown && owner) {
	            var hitTestResult = this.selfHitTest(evt.x, evt.y, ctx);
	            if (!hitTestResult) {
	                ctx.save();
	                ctx.identity();
	                var x = this.x;
	                var y = this.y;
	                evt.x += x;
	                evt.y += y;
	                evt.x -= owner.x;
	                evt.y -= owner.y;
	                owner.dispatchPointerMove(evt, ctx);
	                evt.x += owner.x;
	                evt.y += owner.y;
	                evt.x -= x;
	                evt.y -= y;
	                ctx.restore();
	            }
	        }
	        _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	    };
	    Menu.prototype.clearContent = function () {
	        this._listView.removeAllChildren();
	        return this;
	    };
	    Menu.prototype.resizeToContent = function () {
	        var w = this.w || 200;
	        var listView = this._listView;
	        var h = listView.desireHeight + this.topPadding + this.bottomPadding;
	        this.resizeTo(w, h);
	        this.relayoutChildren();
	        return this;
	    };
	    Menu.prototype.open = function () {
	        this.resizeToContent();
	        _super.prototype.open.call(this);
	        this.grab();
	        return this;
	    };
	    Menu.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (!this.hitTestResult) {
	            this.close();
	        }
	    };
	    Menu.prototype.addSpace = function () {
	        var item = this.addItemExt("-", null);
	        item.styleType = item.type + ".space";
	        return item;
	    };
	    Menu.prototype.addCheckableItem = function (text, onClick, value, shortcut) {
	        var item = this.addItemExt(text, null, shortcut, null);
	        item.set({ checkable: true, value: value });
	        item.styleType = item.type + ".checkable";
	        if (onClick) {
	            item.on(Events.CLICK, onClick);
	        }
	        return item;
	    };
	    Menu.prototype.addItem = function (text, onClick, iconURL, shortcut) {
	        var item = this.addItemExt(text, iconURL, shortcut, null);
	        if (onClick) {
	            item.on(Events.CLICK, onClick);
	        }
	        return item;
	    };
	    Menu.prototype.addFolderItem = function (text, onInitSubMenu) {
	        var item = this.addItemExt(text, null, null, onInitSubMenu);
	        item.styleType = item.type + ".folder";
	        return item;
	    };
	    Menu.prototype.addItemExt = function (text, iconURL, shortcut, onInitSubMenu) {
	        var _this = this;
	        var listView = this._listView;
	        if (!listView.app) {
	            listView.app = this.app;
	        }
	        var item = MenuItem.create();
	        var h = text === "-" ? this.itemH >> 1 : this.itemH;
	        item.set({ iconURL: iconURL, text: text, shortcut: shortcut, onInitSubMenu: onInitSubMenu });
	        item.layoutParam = list_layouter_1.ListLayouterParam.create({ h: h });
	        listView.addChild(item);
	        item.on(Events.POINTER_ENTER, function (evt) {
	            _this.onItemEnter(item);
	        });
	        return item;
	    };
	    Menu.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.hasOwnCanvas = true;
	        this.styleType = "widget.transparent";
	        this.childrenLayouter = simple_layouter_1.SimpleLayouter.create();
	        var listView = list_view_1.ListView.create();
	        listView.padding = 0;
	        listView.itemH = 25;
	        listView.styleType = "menu";
	        listView.dragToScroll = false;
	        listView.slideToScroll = false;
	        listView.bottomPadding = 4;
	        listView.layoutParam = simple_layouter_1.SimpleLayouterParam.create({ x: "0", y: "0px", w: "100%", h: "100%" });
	        this.addChild(listView);
	        this.target = listView;
	        this._listView = listView;
	        this.topPadding = 0;
	        this.bottomPadding = 4;
	        this.leftPadding = 2;
	        this.rightPadding = 2;
	    };
	    Menu.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._trigger = null;
	        this._listView = null;
	        this._openedMenu = null;
	    };
	    Menu.create = function (options) {
	        return Menu.r.create(options);
	    };
	    Menu.TYPE = "menu";
	    Menu.r = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Menu);
	    return Menu;
	}(dialog_1.Dialog));
	exports.Menu = Menu;
	;
	var MenuItem = (function (_super) {
	    __extends(MenuItem, _super);
	    function MenuItem() {
	        _super.call(this, MenuItem.TYPE);
	    }
	    Object.defineProperty(MenuItem.prototype, "iconURL", {
	        set: function (value) {
	            var _this = this;
	            if (value) {
	                this._icon = image_tile_1.ImageTile.create(value, function (evt) {
	                    _this.requestRedraw();
	                });
	            }
	            else {
	                this._icon = null;
	            }
	            this._iconURL = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MenuItem.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (!this.onInitSubMenu) {
	            this.closeMenu();
	        }
	    };
	    MenuItem.prototype.drawImage = function (ctx, style) {
	        var icon = this._icon;
	        var y = this.topPadding;
	        var x = this.leftPadding;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        var w = h;
	        if (this.checkable && this.value || this.onInitSubMenu) {
	            icon = style.foreGroundImage;
	            if (this.onInitSubMenu) {
	                x = this.w - this.rightPadding - w;
	            }
	        }
	        if (icon) {
	            icon.draw(ctx, image_tile_1.ImageDrawType.ICON, x, y, w, h);
	        }
	        return this;
	    };
	    MenuItem.prototype.drawText = function (ctx, style) {
	        var text = this.getLocaleText();
	        ;
	        var h = this.h - this.topPadding - this.bottomPadding;
	        var x = this.leftPadding + h;
	        var y = this.topPadding;
	        var w = this.w - x - this.rightPadding;
	        if (text) {
	            if (text === "-") {
	                y = this.h >> 1;
	                w = this.w;
	                graphics_1.Graphics.drawLine(ctx, style.lineColor, 1, 0, y, w, y);
	            }
	            else {
	                graphics_1.Graphics.drawTextSL(ctx, text, style, rect_1.Rect.rect.init(x, y, w, h));
	            }
	        }
	        if (this.shortcut) {
	            if (!this._shortCutStyle) {
	                this._shortCutStyle = style.clone();
	                this._shortCutStyle.textAlign = "right";
	            }
	            text = this.shortcut;
	            graphics_1.Graphics.drawTextSL(ctx, text, this._shortCutStyle, rect_1.Rect.rect.init(x, y, w, h));
	        }
	        return this;
	    };
	    MenuItem.prototype.reopenSubMenu = function (menu) {
	        var ownerMenu = this.win;
	        menu.clearContent();
	        this.onInitSubMenu(menu);
	        menu.set({ trigger: this });
	        var p = this.toViewPoint(point_1.Point.point.init(this.w, 0));
	        var x = p.x - menu.leftPadding;
	        var y = p.y - menu.topPadding;
	        menu.moveTo(x, y);
	        menu.resizeToContent();
	    };
	    MenuItem.prototype.openSubMenu = function () {
	        var ownerMenu = this.win;
	        var menu = Menu.create();
	        menu.set({ trigger: this, owner: ownerMenu });
	        this.onInitSubMenu(menu);
	        if (menu.hasItems()) {
	            var p = this.toViewPoint(point_1.Point.point.init(this.w, 0));
	            var x = p.x - menu.leftPadding;
	            var y = p.y - menu.topPadding;
	            menu.moveTo(x, y);
	            ownerMenu.openedMenu = menu;
	            menu.open();
	        }
	        else {
	            menu.dispose();
	        }
	    };
	    MenuItem.prototype.closeMenu = function () {
	        var menu = this.win;
	        while (menu) {
	            var owner = menu.owner;
	            menu.close();
	            if (owner.type === Menu.TYPE) {
	                menu = owner;
	            }
	            else {
	                break;
	            }
	        }
	    };
	    MenuItem.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._icon = null;
	        this.onInitSubMenu = null;
	    };
	    MenuItem.prototype.getDefProps = function () {
	        return MenuItem.defProps;
	    };
	    MenuItem.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._icon = null;
	        this.onInitSubMenu = null;
	    };
	    MenuItem.create = function (options) {
	        return MenuItem.recycleBin.create(options);
	    };
	    MenuItem.defProps = Object.assign({}, widget_1.Widget.defProps, { _iconURL: null,
	        checkable: false, shortcut: null, _lp: 2, _rp: 4
	    });
	    MenuItem.TYPE = "menu-item";
	    MenuItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(MenuItem);
	    return MenuItem;
	}(widget_1.Widget));
	exports.MenuItem = MenuItem;
	;
	widget_factory_1.WidgetFactory.register(Menu.TYPE, Menu.create);
	widget_factory_1.WidgetFactory.register(MenuItem.TYPE, MenuItem.create);


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var window_1 = __webpack_require__(97);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var WindowNormal = (function (_super) {
	    __extends(WindowNormal, _super);
	    function WindowNormal() {
	        _super.call(this, WindowNormal.TYPE);
	    }
	    WindowNormal.create = function (options) {
	        return WindowNormal.recycleBin.create(options);
	    };
	    WindowNormal.TYPE = "window-normal";
	    WindowNormal.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(WindowNormal);
	    return WindowNormal;
	}(window_1.Window));
	exports.WindowNormal = WindowNormal;
	;
	widget_factory_1.WidgetFactory.register(WindowNormal.TYPE, WindowNormal.create);


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var menu_1 = __webpack_require__(171);
	var point_1 = __webpack_require__(6);
	var Events = __webpack_require__(10);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var image_tile_1 = __webpack_require__(11);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var linear_layouter_1 = __webpack_require__(136);
	var MenuBar = (function (_super) {
	    __extends(MenuBar, _super);
	    function MenuBar() {
	        _super.call(this, MenuBar.TYPE);
	    }
	    Object.defineProperty(MenuBar.prototype, "openedMenu", {
	        get: function () {
	            return this._openedMenu;
	        },
	        set: function (value) {
	            var _this = this;
	            this._openedMenu = value;
	            if (value) {
	                value.on(Events.WINDOW_CLOSE, function (evt) {
	                    _this._openedMenu = null;
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MenuBar.prototype, "itemWidth", {
	        get: function () {
	            return this._itemWidth;
	        },
	        set: function (value) {
	            this._itemWidth = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MenuBar.prototype.onItemEnter = function (child) {
	        var openedMenu = this._openedMenu;
	        if (openedMenu) {
	            if (openedMenu.trigger !== child) {
	                if (child.onInitSubMenu) {
	                    child.reopenMenu(openedMenu);
	                }
	                else {
	                    openedMenu.close();
	                }
	            }
	        }
	    };
	    MenuBar.prototype.addChild = function (child, fastMode) {
	        var _this = this;
	        child.on(Events.POINTER_ENTER, function (evt) {
	            _this.onItemEnter(child);
	        });
	        return _super.prototype.addChild.call(this, child, fastMode);
	    };
	    MenuBar.prototype.addSpace = function (width, position) {
	        var item = MenuBarItem.create();
	        item.styleType = "widget.transparent";
	        item.layoutParam = this.createChildLayoutParam({ w: width || this.itemWidth, h: "100%", position: position || 1 });
	        this.addChild(item);
	        return item;
	    };
	    MenuBar.prototype.addLogo = function (iconURL, width) {
	        var item = MenuBarItem.create();
	        var w = width || this.h || (this.itemWidth >> 1);
	        item.styleType = "widget.transparent";
	        item.setIcons(iconURL, iconURL);
	        item.layoutParam = this.createChildLayoutParam({ w: w, h: "100%", position: 0.1 });
	        this.addChild(item);
	        return item;
	    };
	    MenuBar.prototype.addItem = function (text, onInitSubMenu, width, position) {
	        var item = MenuBarItem.create();
	        item.set({ text: text, onInitSubMenu: onInitSubMenu });
	        item.layoutParam = this.createChildLayoutParam({ w: width || this.itemWidth, h: "100%", position: position || 1 });
	        this.addChild(item);
	        return item;
	    };
	    MenuBar.prototype.addTextButton = function (text, onClick, width, position) {
	        var item = MenuBarItem.create();
	        item.set({ text: text });
	        if (onClick) {
	            item.on(Events.CLICK, onClick);
	        }
	        item.layoutParam = this.createChildLayoutParam({ w: width || this.itemWidth, h: "100%", position: position || 1 });
	        this.addChild(item);
	        return item;
	    };
	    MenuBar.prototype.addImageButton = function (normalIconURL, overIconURL, activeIconURL, disableIconURL, checkedIconURL, onClick, position) {
	        var item = MenuBarItem.create();
	        if (onClick) {
	            item.on(Events.CLICK, onClick);
	        }
	        item.styleType = "widget.transparent";
	        item.setIcons(normalIconURL, overIconURL, activeIconURL, disableIconURL, checkedIconURL);
	        item.layoutParam = this.createChildLayoutParam({ w: this.h, h: "100%", position: position || 1 });
	        this.addChild(item);
	        return item;
	    };
	    MenuBar.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.childrenLayouter = linear_layouter_1.LinearLayouter.createH({ spacing: 1 });
	    };
	    MenuBar.prototype.getDefProps = function () {
	        return MenuBar.defProps;
	    };
	    MenuBar.create = function (options) {
	        return MenuBar.recycleBin.create(options);
	    };
	    MenuBar.defProps = Object.assign({}, widget_1.Widget.defProps, { _itemWidth: 40 });
	    MenuBar.TYPE = "menu-bar";
	    MenuBar.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(MenuBar);
	    return MenuBar;
	}(widget_1.Widget));
	exports.MenuBar = MenuBar;
	;
	var MenuBarItem = (function (_super) {
	    __extends(MenuBarItem, _super);
	    function MenuBarItem() {
	        _super.call(this, MenuBarItem.TYPE);
	    }
	    MenuBarItem.prototype.setIcons = function (normalIconURL, overIconURL, activeIconURL, disableIconURL, checkedIconURL) {
	        var redraw = this.requestRedraw.bind(this);
	        this._normalIcon = normalIconURL ? image_tile_1.ImageTile.create(normalIconURL, redraw) : null;
	        this._overIcon = overIconURL ? image_tile_1.ImageTile.create(overIconURL, redraw) : null;
	        this._activeIcon = activeIconURL ? image_tile_1.ImageTile.create(activeIconURL, redraw) : null;
	        this._disableIcon = disableIconURL ? image_tile_1.ImageTile.create(disableIconURL, redraw) : null;
	        this._checkedIcon = checkedIconURL ? image_tile_1.ImageTile.create(checkedIconURL, redraw) : null;
	        this._normalIconURL = normalIconURL ? normalIconURL : null;
	        this._overIconURL = overIconURL ? overIconURL : null;
	        this._activeIconURL = activeIconURL ? activeIconURL : null;
	        this._disableIconURL = disableIconURL ? disableIconURL : null;
	        this._checkedIconURL = checkedIconURL ? checkedIconURL : null;
	    };
	    MenuBarItem.prototype.drawImage = function (ctx, style) {
	        var icon = null;
	        if (!this._enable) {
	            icon = this._disableIcon;
	        }
	        else {
	            if (this._value) {
	                icon = this._checkedIcon;
	            }
	            else {
	                if (this.state === widget_1.WidgetState.OVER) {
	                    icon = this._overIcon;
	                }
	                else if (this.state === widget_1.WidgetState.ACTIVE) {
	                    icon = this._activeIcon;
	                }
	            }
	        }
	        if (!icon) {
	            icon = this._normalIcon;
	        }
	        if (icon) {
	            icon.draw(ctx, image_tile_1.ImageDrawType.ICON, 0, 0, this.w, this.h);
	        }
	        return this;
	    };
	    MenuBarItem.prototype.reopenMenu = function (menu) {
	        menu.clearContent();
	        this.onInitSubMenu(menu);
	        menu.set({ trigger: this });
	        var p = this.toViewPoint(point_1.Point.point.init(0, this.h));
	        menu.moveTo(p.x - menu.leftPadding, p.y);
	        menu.resizeToContent();
	    };
	    MenuBarItem.prototype.openMenu = function () {
	        var menuBar = this.parent;
	        var menu = menu_1.Menu.create();
	        menu.set({ trigger: this, owner: menuBar });
	        this.onInitSubMenu(menu);
	        if (menu.hasItems()) {
	            var p = this.toViewPoint(point_1.Point.point.init(0, this.h));
	            menu.moveTo(p.x - menu.leftPadding, p.y);
	            menuBar.openedMenu = menu;
	            menu.open();
	        }
	        else {
	            menu.dispose();
	        }
	    };
	    MenuBarItem.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (this.onInitSubMenu) {
	            this.openMenu();
	        }
	    };
	    MenuBarItem.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	    };
	    MenuBarItem.prototype.getDefProps = function () {
	        return MenuBarItem.defProps;
	    };
	    MenuBarItem.create = function (options) {
	        return MenuBarItem.recycleBin.create(options);
	    };
	    MenuBarItem.defProps = Object.assign({}, widget_1.Widget.defProps, {
	        _normalIconURL: null, _overIconURL: null, _activeIconURL: null, _disableIconURL: null, _checkedIconURL: null
	    });
	    MenuBarItem.TYPE = "menu-bar-item";
	    MenuBarItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(MenuBarItem);
	    return MenuBarItem;
	}(widget_1.Widget));
	exports.MenuBarItem = MenuBarItem;
	;
	widget_factory_1.WidgetFactory.register(MenuBar.TYPE, MenuBar.create);
	widget_factory_1.WidgetFactory.register(MenuBarItem.TYPE, MenuBarItem.create);


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	__webpack_require__(175);
	var point_1 = __webpack_require__(6);
	var Events = __webpack_require__(10);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	Chart.helpers.getRelativePosition = function (evt, chart) {
	    return { x: evt.clientX, y: evt.clientY };
	};
	Chart.helpers.getMaximumWidth = function (domNode) {
	    return domNode.width;
	};
	Chart.helpers.getMaximumHeight = function (domNode) {
	    return domNode.height;
	};
	/**
	 * 图表视图。对chart.js的封装。
	 */
	var ChartView = (function (_super) {
	    __extends(ChartView, _super);
	    function ChartView() {
	        _super.call(this, ChartView.TYPE);
	    }
	    Object.defineProperty(ChartView.prototype, "config", {
	        get: function () {
	            return this._chartConfig;
	        },
	        /**
	         * Chart需要的数据和配置。请在窗口open之前设置好。
	         */
	        set: function (value) {
	            this._chartConfig = value;
	            if (value && value.options) {
	                value.options.responsive = false;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 数据和配置变化时，需要调用此函数请求图表更新。
	     */
	    ChartView.prototype.update = function () {
	        this._chart.update();
	        return this;
	    };
	    /**
	     * 把事件转发给隐藏的Canvas处理。
	     */
	    ChartView.prototype.forwardPointerEvent = function (type, x, y) {
	        var p = this.toLocalPoint(point_1.Point.point.init(x, y));
	        var e = document.createEvent('MouseEvent');
	        e.initMouseEvent(type, true, true, window, 0, 0, 0, p.x, p.y, false, false, false, false, 0, null);
	        this._chartCanvas.dispatchEvent(e);
	    };
	    ChartView.prototype.dispatchPointerDown = function (evt, ctx) {
	        _super.prototype.dispatchPointerDown.call(this, evt, ctx);
	        this.forwardPointerEvent("mousedown", evt.x, evt.y);
	    };
	    ChartView.prototype.dispatchPointerMove = function (evt, ctx) {
	        _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	        this.forwardPointerEvent("mousemove", evt.x, evt.y);
	    };
	    ChartView.prototype.dispatchPointerUp = function (evt) {
	        _super.prototype.dispatchPointerUp.call(this, evt);
	        this.forwardPointerEvent("mouseup", evt.x, evt.y);
	    };
	    ChartView.prototype.syncCavnas = function () {
	        var canvas = this._chartCanvas;
	        canvas.width = this.w;
	        canvas.height = this.h;
	    };
	    ChartView.prototype.drawImage = function (ctx, style) {
	        var w = this.w;
	        var h = this.h;
	        var sw = this._chartCanvas.width;
	        var sh = this._chartCanvas.height;
	        ctx.drawImage(this._chartCanvas, 0, 0, sw, sh, 0, 0, w, h);
	        return this;
	    };
	    ChartView.prototype.onInit = function () {
	        var _this = this;
	        _super.prototype.onInit.call(this);
	        this._chartCanvas = document.createElement("canvas");
	        this.syncCavnas();
	        var ctx = this._chartCanvas.getContext("2d");
	        var me = this;
	        ctx.oFill = ctx.fill;
	        ctx.oStroke = ctx.stroke;
	        ctx.fill = function () {
	            ctx.oFill();
	            me.requestRedraw();
	        };
	        ctx.stroke = function () {
	            ctx.oStroke();
	            me.requestRedraw();
	        };
	        this._chart = new Chart(ctx, this.config);
	        var me = this;
	        var chart = this._chart;
	        var canvas = this._chartCanvas;
	        this.on(Events.PROP_CHANGE, function (evt) {
	            var prop = evt.prop;
	            var value = evt.newValue;
	            if (prop === "w" || prop === "h") {
	                canvas.width = _this.w;
	                canvas.height = _this.h;
	                chart.resize();
	            }
	        });
	    };
	    ChartView.prototype.onDeinit = function () {
	        _super.prototype.onDeinit.call(this);
	        this._chart = null;
	        this._chartCanvas = null;
	        this._chartConfig = null;
	    };
	    ChartView.create = function (options) {
	        return ChartView.recycleBin.create(options);
	    };
	    ChartView.TYPE = "chart-view";
	    ChartView.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(ChartView);
	    return ChartView;
	}(widget_1.Widget));
	exports.ChartView = ChartView;
	;
	widget_factory_1.WidgetFactory.register(ChartView.TYPE, ChartView.create);


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @namespace Chart
	 */
	var Chart = __webpack_require__(176)();

	__webpack_require__(177)(Chart);
	__webpack_require__(183)(Chart);
	__webpack_require__(184)(Chart);
	__webpack_require__(185)(Chart);
	__webpack_require__(186)(Chart);
	__webpack_require__(187)(Chart);
	__webpack_require__(188)(Chart);
	__webpack_require__(189)(Chart);
	__webpack_require__(190)(Chart);
	__webpack_require__(191)(Chart);
	__webpack_require__(192)(Chart);
	__webpack_require__(193)(Chart);
	__webpack_require__(194)(Chart);
	__webpack_require__(195)(Chart);
	__webpack_require__(196)(Chart);

	__webpack_require__(197)(Chart);
	__webpack_require__(198)(Chart);
	__webpack_require__(199)(Chart);
	__webpack_require__(200)(Chart);

	__webpack_require__(201)(Chart);
	__webpack_require__(202)(Chart);
	__webpack_require__(203)(Chart);
	__webpack_require__(204)(Chart);
	__webpack_require__(205)(Chart);
	__webpack_require__(206)(Chart);

	// Controllers must be loaded after elements
	// See Chart.core.datasetController.dataElementType
	__webpack_require__(314)(Chart);
	__webpack_require__(315)(Chart);
	__webpack_require__(316)(Chart);
	__webpack_require__(317)(Chart);
	__webpack_require__(318)(Chart);
	__webpack_require__(319)(Chart);

	__webpack_require__(320)(Chart);
	__webpack_require__(321)(Chart);
	__webpack_require__(322)(Chart);
	__webpack_require__(323)(Chart);
	__webpack_require__(324)(Chart);
	__webpack_require__(325)(Chart);
	__webpack_require__(326)(Chart);

	window.Chart = module.exports = Chart;


/***/ },
/* 176 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function() {

		// Occupy the global variable of Chart, and create a simple base class
		var Chart = function(item, config) {
			this.controller = new Chart.Controller(item, config, this);
			return this.controller;
		};

		// Globally expose the defaults to allow for user updating/changing
		Chart.defaults = {
			global: {
				responsive: true,
				responsiveAnimationDuration: 0,
				maintainAspectRatio: true,
				events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
				hover: {
					onHover: null,
					mode: 'nearest',
					intersect: true,
					animationDuration: 400
				},
				onClick: null,
				defaultColor: 'rgba(0,0,0,0.1)',
				defaultFontColor: '#666',
				defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
				defaultFontSize: 12,
				defaultFontStyle: 'normal',
				showLines: true,

				// Element defaults defined in element extensions
				elements: {},

				// Legend callback string
				legendCallback: function(chart) {
					var text = [];
					text.push('<ul class="' + chart.id + '-legend">');
					for (var i = 0; i < chart.data.datasets.length; i++) {
						text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
						if (chart.data.datasets[i].label) {
							text.push(chart.data.datasets[i].label);
						}
						text.push('</li>');
					}
					text.push('</ul>');

					return text.join('');
				}
			}
		};

		Chart.Chart = Chart;

		return Chart;
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* global window: false */
	/* global document: false */
	'use strict';

	var color = __webpack_require__(178);

	module.exports = function(Chart) {
		// Global Chart helpers object for utility methods and classes
		var helpers = Chart.helpers = {};

		// -- Basic js utility methods
		helpers.each = function(loopable, callback, self, reverse) {
			// Check to see if null or undefined firstly.
			var i, len;
			if (helpers.isArray(loopable)) {
				len = loopable.length;
				if (reverse) {
					for (i = len - 1; i >= 0; i--) {
						callback.call(self, loopable[i], i);
					}
				} else {
					for (i = 0; i < len; i++) {
						callback.call(self, loopable[i], i);
					}
				}
			} else if (typeof loopable === 'object') {
				var keys = Object.keys(loopable);
				len = keys.length;
				for (i = 0; i < len; i++) {
					callback.call(self, loopable[keys[i]], keys[i]);
				}
			}
		};
		helpers.clone = function(obj) {
			var objClone = {};
			helpers.each(obj, function(value, key) {
				if (helpers.isArray(value)) {
					objClone[key] = value.slice(0);
				} else if (typeof value === 'object' && value !== null) {
					objClone[key] = helpers.clone(value);
				} else {
					objClone[key] = value;
				}
			});
			return objClone;
		};
		helpers.extend = function(base) {
			var setFn = function(value, key) {
				base[key] = value;
			};
			for (var i = 1, ilen = arguments.length; i < ilen; i++) {
				helpers.each(arguments[i], setFn);
			}
			return base;
		};
		// Need a special merge function to chart configs since they are now grouped
		helpers.configMerge = function(_base) {
			var base = helpers.clone(_base);
			helpers.each(Array.prototype.slice.call(arguments, 1), function(extension) {
				helpers.each(extension, function(value, key) {
					var baseHasProperty = base.hasOwnProperty(key);
					var baseVal = baseHasProperty ? base[key] : {};

					if (key === 'scales') {
						// Scale config merging is complex. Add our own function here for that
						base[key] = helpers.scaleMerge(baseVal, value);
					} else if (key === 'scale') {
						// Used in polar area & radar charts since there is only one scale
						base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
					} else if (baseHasProperty
							&& typeof baseVal === 'object'
							&& !helpers.isArray(baseVal)
							&& baseVal !== null
							&& typeof value === 'object'
							&& !helpers.isArray(value)) {
						// If we are overwriting an object with an object, do a merge of the properties.
						base[key] = helpers.configMerge(baseVal, value);
					} else {
						// can just overwrite the value in this case
						base[key] = value;
					}
				});
			});

			return base;
		};
		helpers.scaleMerge = function(_base, extension) {
			var base = helpers.clone(_base);

			helpers.each(extension, function(value, key) {
				if (key === 'xAxes' || key === 'yAxes') {
					// These properties are arrays of items
					if (base.hasOwnProperty(key)) {
						helpers.each(value, function(valueObj, index) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
							if (index >= base[key].length || !base[key][index].type) {
								base[key].push(helpers.configMerge(axisDefaults, valueObj));
							} else if (valueObj.type && valueObj.type !== base[key][index].type) {
								// Type changed. Bring in the new defaults before we bring in valueObj so that valueObj can override the correct scale defaults
								base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
							} else {
								// Type is the same
								base[key][index] = helpers.configMerge(base[key][index], valueObj);
							}
						});
					} else {
						base[key] = [];
						helpers.each(value, function(valueObj) {
							var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
							base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
						});
					}
				} else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
					// If we are overwriting an object with an object, do a merge of the properties.
					base[key] = helpers.configMerge(base[key], value);

				} else {
					// can just overwrite the value in this case
					base[key] = value;
				}
			});

			return base;
		};
		helpers.getValueAtIndexOrDefault = function(value, index, defaultValue) {
			if (value === undefined || value === null) {
				return defaultValue;
			}

			if (helpers.isArray(value)) {
				return index < value.length ? value[index] : defaultValue;
			}

			return value;
		};
		helpers.getValueOrDefault = function(value, defaultValue) {
			return value === undefined ? defaultValue : value;
		};
		helpers.indexOf = Array.prototype.indexOf?
			function(array, item) {
				return array.indexOf(item);
			}:
			function(array, item) {
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (array[i] === item) {
						return i;
					}
				}
				return -1;
			};
		helpers.where = function(collection, filterCallback) {
			if (helpers.isArray(collection) && Array.prototype.filter) {
				return collection.filter(filterCallback);
			}
			var filtered = [];

			helpers.each(collection, function(item) {
				if (filterCallback(item)) {
					filtered.push(item);
				}
			});

			return filtered;
		};
		helpers.findIndex = Array.prototype.findIndex?
			function(array, callback, scope) {
				return array.findIndex(callback, scope);
			} :
			function(array, callback, scope) {
				scope = scope === undefined? array : scope;
				for (var i = 0, ilen = array.length; i < ilen; ++i) {
					if (callback.call(scope, array[i], i, array)) {
						return i;
					}
				}
				return -1;
			};
		helpers.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to start of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = -1;
			}
			for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
			// Default to end of the array
			if (startIndex === undefined || startIndex === null) {
				startIndex = arrayToSearch.length;
			}
			for (var i = startIndex - 1; i >= 0; i--) {
				var currentItem = arrayToSearch[i];
				if (filterCallback(currentItem)) {
					return currentItem;
				}
			}
		};
		helpers.inherits = function(extensions) {
			// Basic javascript inheritance based on the model created in Backbone.js
			var me = this;
			var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
				return me.apply(this, arguments);
			};

			var Surrogate = function() {
				this.constructor = ChartElement;
			};
			Surrogate.prototype = me.prototype;
			ChartElement.prototype = new Surrogate();

			ChartElement.extend = helpers.inherits;

			if (extensions) {
				helpers.extend(ChartElement.prototype, extensions);
			}

			ChartElement.__super__ = me.prototype;

			return ChartElement;
		};
		helpers.noop = function() {};
		helpers.uid = (function() {
			var id = 0;
			return function() {
				return id++;
			};
		}());
		// -- Math methods
		helpers.isNumber = function(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		};
		helpers.almostEquals = function(x, y, epsilon) {
			return Math.abs(x - y) < epsilon;
		};
		helpers.max = function(array) {
			return array.reduce(function(max, value) {
				if (!isNaN(value)) {
					return Math.max(max, value);
				}
				return max;
			}, Number.NEGATIVE_INFINITY);
		};
		helpers.min = function(array) {
			return array.reduce(function(min, value) {
				if (!isNaN(value)) {
					return Math.min(min, value);
				}
				return min;
			}, Number.POSITIVE_INFINITY);
		};
		helpers.sign = Math.sign?
			function(x) {
				return Math.sign(x);
			} :
			function(x) {
				x = +x; // convert to a number
				if (x === 0 || isNaN(x)) {
					return x;
				}
				return x > 0 ? 1 : -1;
			};
		helpers.log10 = Math.log10?
			function(x) {
				return Math.log10(x);
			} :
			function(x) {
				return Math.log(x) / Math.LN10;
			};
		helpers.toRadians = function(degrees) {
			return degrees * (Math.PI / 180);
		};
		helpers.toDegrees = function(radians) {
			return radians * (180 / Math.PI);
		};
		// Gets the angle from vertical upright to the point about a centre.
		helpers.getAngleFromPoint = function(centrePoint, anglePoint) {
			var distanceFromXCenter = anglePoint.x - centrePoint.x,
				distanceFromYCenter = anglePoint.y - centrePoint.y,
				radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

			var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

			if (angle < (-0.5 * Math.PI)) {
				angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
			}

			return {
				angle: angle,
				distance: radialDistanceFromCenter
			};
		};
		helpers.distanceBetweenPoints = function(pt1, pt2) {
			return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
		};
		helpers.aliasPixel = function(pixelWidth) {
			return (pixelWidth % 2 === 0) ? 0 : 0.5;
		};
		helpers.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
			// Props to Rob Spencer at scaled innovation for his post on splining between points
			// http://scaledinnovation.com/analytics/splines/aboutSplines.html

			// This function must also respect "skipped" points

			var previous = firstPoint.skip ? middlePoint : firstPoint,
				current = middlePoint,
				next = afterPoint.skip ? middlePoint : afterPoint;

			var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
			var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

			var s01 = d01 / (d01 + d12);
			var s12 = d12 / (d01 + d12);

			// If all points are the same, s01 & s02 will be inf
			s01 = isNaN(s01) ? 0 : s01;
			s12 = isNaN(s12) ? 0 : s12;

			var fa = t * s01; // scaling factor for triangle Ta
			var fb = t * s12;

			return {
				previous: {
					x: current.x - fa * (next.x - previous.x),
					y: current.y - fa * (next.y - previous.y)
				},
				next: {
					x: current.x + fb * (next.x - previous.x),
					y: current.y + fb * (next.y - previous.y)
				}
			};
		};
		helpers.EPSILON = Number.EPSILON || 1e-14;
		helpers.splineCurveMonotone = function(points) {
			// This function calculates Bézier control points in a similar way than |splineCurve|,
			// but preserves monotonicity of the provided data and ensures no local extremums are added
			// between the dataset discrete points due to the interpolation.
			// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

			var pointsWithTangents = (points || []).map(function(point) {
				return {
					model: point._model,
					deltaK: 0,
					mK: 0
				};
			});

			// Calculate slopes (deltaK) and initialize tangents (mK)
			var pointsLen = pointsWithTangents.length;
			var i, pointBefore, pointCurrent, pointAfter;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}

				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointAfter && !pointAfter.model.skip) {
					pointCurrent.deltaK = (pointAfter.model.y - pointCurrent.model.y) / (pointAfter.model.x - pointCurrent.model.x);
				}

				if (!pointBefore || pointBefore.model.skip) {
					pointCurrent.mK = pointCurrent.deltaK;
				} else if (!pointAfter || pointAfter.model.skip) {
					pointCurrent.mK = pointBefore.deltaK;
				} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
					pointCurrent.mK = 0;
				} else {
					pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
				}
			}

			// Adjust tangents to ensure monotonic properties
			var alphaK, betaK, tauK, squaredMagnitude;
			for (i = 0; i < pointsLen - 1; ++i) {
				pointCurrent = pointsWithTangents[i];
				pointAfter = pointsWithTangents[i + 1];
				if (pointCurrent.model.skip || pointAfter.model.skip) {
					continue;
				}

				if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
					pointCurrent.mK = pointAfter.mK = 0;
					continue;
				}

				alphaK = pointCurrent.mK / pointCurrent.deltaK;
				betaK = pointAfter.mK / pointCurrent.deltaK;
				squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
				if (squaredMagnitude <= 9) {
					continue;
				}

				tauK = 3 / Math.sqrt(squaredMagnitude);
				pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
				pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
			}

			// Compute control points
			var deltaX;
			for (i = 0; i < pointsLen; ++i) {
				pointCurrent = pointsWithTangents[i];
				if (pointCurrent.model.skip) {
					continue;
				}

				pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
				pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
				if (pointBefore && !pointBefore.model.skip) {
					deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
					pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
					pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
				}
				if (pointAfter && !pointAfter.model.skip) {
					deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
					pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
					pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
				}
			}
		};
		helpers.nextItem = function(collection, index, loop) {
			if (loop) {
				return index >= collection.length - 1 ? collection[0] : collection[index + 1];
			}
			return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
		};
		helpers.previousItem = function(collection, index, loop) {
			if (loop) {
				return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
			}
			return index <= 0 ? collection[0] : collection[index - 1];
		};
		// Implementation of the nice number algorithm used in determining where axis labels will go
		helpers.niceNum = function(range, round) {
			var exponent = Math.floor(helpers.log10(range));
			var fraction = range / Math.pow(10, exponent);
			var niceFraction;

			if (round) {
				if (fraction < 1.5) {
					niceFraction = 1;
				} else if (fraction < 3) {
					niceFraction = 2;
				} else if (fraction < 7) {
					niceFraction = 5;
				} else {
					niceFraction = 10;
				}
			} else if (fraction <= 1.0) {
				niceFraction = 1;
			} else if (fraction <= 2) {
				niceFraction = 2;
			} else if (fraction <= 5) {
				niceFraction = 5;
			} else {
				niceFraction = 10;
			}

			return niceFraction * Math.pow(10, exponent);
		};
		// Easing functions adapted from Robert Penner's easing equations
		// http://www.robertpenner.com/easing/
		var easingEffects = helpers.easingEffects = {
			linear: function(t) {
				return t;
			},
			easeInQuad: function(t) {
				return t * t;
			},
			easeOutQuad: function(t) {
				return -1 * t * (t - 2);
			},
			easeInOutQuad: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t;
				}
				return -1 / 2 * ((--t) * (t - 2) - 1);
			},
			easeInCubic: function(t) {
				return t * t * t;
			},
			easeOutCubic: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t + 1);
			},
			easeInOutCubic: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t + 2);
			},
			easeInQuart: function(t) {
				return t * t * t * t;
			},
			easeOutQuart: function(t) {
				return -1 * ((t = t / 1 - 1) * t * t * t - 1);
			},
			easeInOutQuart: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t;
				}
				return -1 / 2 * ((t -= 2) * t * t * t - 2);
			},
			easeInQuint: function(t) {
				return 1 * (t /= 1) * t * t * t * t;
			},
			easeOutQuint: function(t) {
				return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
			},
			easeInOutQuint: function(t) {
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * t * t * t * t * t;
				}
				return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
			},
			easeInSine: function(t) {
				return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
			},
			easeOutSine: function(t) {
				return 1 * Math.sin(t / 1 * (Math.PI / 2));
			},
			easeInOutSine: function(t) {
				return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
			},
			easeInExpo: function(t) {
				return (t === 0) ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
			},
			easeOutExpo: function(t) {
				return (t === 1) ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
			},
			easeInOutExpo: function(t) {
				if (t === 0) {
					return 0;
				}
				if (t === 1) {
					return 1;
				}
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * Math.pow(2, 10 * (t - 1));
				}
				return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
			},
			easeInCirc: function(t) {
				if (t >= 1) {
					return t;
				}
				return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
			},
			easeOutCirc: function(t) {
				return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
			},
			easeInOutCirc: function(t) {
				if ((t /= 1 / 2) < 1) {
					return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
				}
				return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
			},
			easeInElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
			},
			easeOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1) === 1) {
					return 1;
				}
				if (!p) {
					p = 1 * 0.3;
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
			},
			easeInOutElastic: function(t) {
				var s = 1.70158;
				var p = 0;
				var a = 1;
				if (t === 0) {
					return 0;
				}
				if ((t /= 1 / 2) === 2) {
					return 1;
				}
				if (!p) {
					p = 1 * (0.3 * 1.5);
				}
				if (a < Math.abs(1)) {
					a = 1;
					s = p / 4;
				} else {
					s = p / (2 * Math.PI) * Math.asin(1 / a);
				}
				if (t < 1) {
					return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
				}
				return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
			},
			easeInBack: function(t) {
				var s = 1.70158;
				return 1 * (t /= 1) * t * ((s + 1) * t - s);
			},
			easeOutBack: function(t) {
				var s = 1.70158;
				return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
			},
			easeInOutBack: function(t) {
				var s = 1.70158;
				if ((t /= 1 / 2) < 1) {
					return 1 / 2 * (t * t * (((s *= (1.525)) + 1) * t - s));
				}
				return 1 / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
			},
			easeInBounce: function(t) {
				return 1 - easingEffects.easeOutBounce(1 - t);
			},
			easeOutBounce: function(t) {
				if ((t /= 1) < (1 / 2.75)) {
					return 1 * (7.5625 * t * t);
				} else if (t < (2 / 2.75)) {
					return 1 * (7.5625 * (t -= (1.5 / 2.75)) * t + 0.75);
				} else if (t < (2.5 / 2.75)) {
					return 1 * (7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375);
				}
				return 1 * (7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375);
			},
			easeInOutBounce: function(t) {
				if (t < 1 / 2) {
					return easingEffects.easeInBounce(t * 2) * 0.5;
				}
				return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
			}
		};
		// Request animation polyfill - http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
		helpers.requestAnimFrame = (function() {
			return window.requestAnimationFrame ||
				window.webkitRequestAnimationFrame ||
				window.mozRequestAnimationFrame ||
				window.oRequestAnimationFrame ||
				window.msRequestAnimationFrame ||
				function(callback) {
					return window.setTimeout(callback, 1000 / 60);
				};
		}());
		helpers.cancelAnimFrame = (function() {
			return window.cancelAnimationFrame ||
				window.webkitCancelAnimationFrame ||
				window.mozCancelAnimationFrame ||
				window.oCancelAnimationFrame ||
				window.msCancelAnimationFrame ||
				function(callback) {
					return window.clearTimeout(callback, 1000 / 60);
				};
		}());
		// -- DOM methods
		helpers.getRelativePosition = function(evt, chart) {
			var mouseX, mouseY;
			var e = evt.originalEvent || evt,
				canvas = evt.currentTarget || evt.srcElement,
				boundingRect = canvas.getBoundingClientRect();

			var touches = e.touches;
			if (touches && touches.length > 0) {
				mouseX = touches[0].clientX;
				mouseY = touches[0].clientY;

			} else {
				mouseX = e.clientX;
				mouseY = e.clientY;
			}

			// Scale mouse coordinates into canvas coordinates
			// by following the pattern laid out by 'jerryj' in the comments of
			// http://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
			var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
			var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
			var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
			var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
			var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
			var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

			// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
			// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
			mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
			mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

			return {
				x: mouseX,
				y: mouseY
			};

		};
		helpers.addEvent = function(node, eventType, method) {
			if (node.addEventListener) {
				node.addEventListener(eventType, method);
			} else if (node.attachEvent) {
				node.attachEvent('on' + eventType, method);
			} else {
				node['on' + eventType] = method;
			}
		};
		helpers.removeEvent = function(node, eventType, handler) {
			if (node.removeEventListener) {
				node.removeEventListener(eventType, handler, false);
			} else if (node.detachEvent) {
				node.detachEvent('on' + eventType, handler);
			} else {
				node['on' + eventType] = helpers.noop;
			}
		};
		helpers.bindEvents = function(chartInstance, arrayOfEvents, handler) {
			// Create the events object if it's not already present
			var events = chartInstance.events = chartInstance.events || {};

			helpers.each(arrayOfEvents, function(eventName) {
				events[eventName] = function() {
					handler.apply(chartInstance, arguments);
				};
				helpers.addEvent(chartInstance.chart.canvas, eventName, events[eventName]);
			});
		};
		helpers.unbindEvents = function(chartInstance, arrayOfEvents) {
			var canvas = chartInstance.chart.canvas;
			helpers.each(arrayOfEvents, function(handler, eventName) {
				helpers.removeEvent(canvas, eventName, handler);
			});
		};

		// Private helper function to convert max-width/max-height values that may be percentages into a number
		function parseMaxStyle(styleValue, node, parentProperty) {
			var valueInPixels;
			if (typeof(styleValue) === 'string') {
				valueInPixels = parseInt(styleValue, 10);

				if (styleValue.indexOf('%') !== -1) {
					// percentage * size in dimension
					valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
				}
			} else {
				valueInPixels = styleValue;
			}

			return valueInPixels;
		}

		/**
		 * Returns if the given value contains an effective constraint.
		 * @private
		 */
		function isConstrainedValue(value) {
			return value !== undefined && value !== null && value !== 'none';
		}

		// Private helper to get a constraint dimension
		// @param domNode : the node to check the constraint on
		// @param maxStyle : the style that defines the maximum for the direction we are using (maxWidth / maxHeight)
		// @param percentageProperty : property of parent to use when calculating width as a percentage
		// @see http://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser
		function getConstraintDimension(domNode, maxStyle, percentageProperty) {
			var view = document.defaultView;
			var parentNode = domNode.parentNode;
			var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
			var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
			var hasCNode = isConstrainedValue(constrainedNode);
			var hasCContainer = isConstrainedValue(constrainedContainer);
			var infinity = Number.POSITIVE_INFINITY;

			if (hasCNode || hasCContainer) {
				return Math.min(
					hasCNode? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
					hasCContainer? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
			}

			return 'none';
		}
		// returns Number or undefined if no constraint
		helpers.getConstraintWidth = function(domNode) {
			return getConstraintDimension(domNode, 'max-width', 'clientWidth');
		};
		// returns Number or undefined if no constraint
		helpers.getConstraintHeight = function(domNode) {
			return getConstraintDimension(domNode, 'max-height', 'clientHeight');
		};
		helpers.getMaximumWidth = function(domNode) {
			var container = domNode.parentNode;
			var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
			var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
			var w = container.clientWidth - paddingLeft - paddingRight;
			var cw = helpers.getConstraintWidth(domNode);
			return isNaN(cw)? w : Math.min(w, cw);
		};
		helpers.getMaximumHeight = function(domNode) {
			var container = domNode.parentNode;
			var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
			var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
			var h = container.clientHeight - paddingTop - paddingBottom;
			var ch = helpers.getConstraintHeight(domNode);
			return isNaN(ch)? h : Math.min(h, ch);
		};
		helpers.getStyle = function(el, property) {
			return el.currentStyle ?
				el.currentStyle[property] :
				document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
		};
		helpers.retinaScale = function(chart) {
			var ctx = chart.ctx;
			var canvas = chart.canvas;
			var width = canvas.width;
			var height = canvas.height;
			var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;

			if (pixelRatio !== 1) {
				canvas.height = height * pixelRatio;
				canvas.width = width * pixelRatio;
				ctx.scale(pixelRatio, pixelRatio);

				// Store the device pixel ratio so that we can go backwards in `destroy`.
				// The devicePixelRatio changes with zoom, so there are no guarantees that it is the same
				// when destroy is called
				chart.originalDevicePixelRatio = chart.originalDevicePixelRatio || pixelRatio;
			}
		};
		// -- Canvas methods
		helpers.clear = function(chart) {
			chart.ctx.clearRect(0, 0, chart.width, chart.height);
		};
		helpers.fontString = function(pixelSize, fontStyle, fontFamily) {
			return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
		};
		helpers.longestText = function(ctx, font, arrayOfThings, cache) {
			cache = cache || {};
			var data = cache.data = cache.data || {};
			var gc = cache.garbageCollect = cache.garbageCollect || [];

			if (cache.font !== font) {
				data = cache.data = {};
				gc = cache.garbageCollect = [];
				cache.font = font;
			}

			ctx.font = font;
			var longest = 0;
			helpers.each(arrayOfThings, function(thing) {
				// Undefined strings and arrays should not be measured
				if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
					longest = helpers.measureText(ctx, data, gc, longest, thing);
				} else if (helpers.isArray(thing)) {
					// if it is an array lets measure each element
					// to do maybe simplify this function a bit so we can do this more recursively?
					helpers.each(thing, function(nestedThing) {
						// Undefined strings and arrays should not be measured
						if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
							longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
						}
					});
				}
			});

			var gcLen = gc.length / 2;
			if (gcLen > arrayOfThings.length) {
				for (var i = 0; i < gcLen; i++) {
					delete data[gc[i]];
				}
				gc.splice(0, gcLen);
			}
			return longest;
		};
		helpers.measureText = function(ctx, data, gc, longest, string) {
			var textWidth = data[string];
			if (!textWidth) {
				textWidth = data[string] = ctx.measureText(string).width;
				gc.push(string);
			}
			if (textWidth > longest) {
				longest = textWidth;
			}
			return longest;
		};
		helpers.numberOfLabelLines = function(arrayOfThings) {
			var numberOfLines = 1;
			helpers.each(arrayOfThings, function(thing) {
				if (helpers.isArray(thing)) {
					if (thing.length > numberOfLines) {
						numberOfLines = thing.length;
					}
				}
			});
			return numberOfLines;
		};
		helpers.drawRoundedRectangle = function(ctx, x, y, width, height, radius) {
			ctx.beginPath();
			ctx.moveTo(x + radius, y);
			ctx.lineTo(x + width - radius, y);
			ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
			ctx.lineTo(x + width, y + height - radius);
			ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
			ctx.lineTo(x + radius, y + height);
			ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
			ctx.lineTo(x, y + radius);
			ctx.quadraticCurveTo(x, y, x + radius, y);
			ctx.closePath();
		};
		helpers.color = function(c) {
			if (!color) {
				console.error('Color.js not found!');
				return c;
			}

			/* global CanvasGradient */
			if (c instanceof CanvasGradient) {
				return color(Chart.defaults.global.defaultColor);
			}

			return color(c);
		};
		helpers.addResizeListener = function(node, callback) {
			// Hide an iframe before the node
			var iframe = document.createElement('iframe');

			iframe.className = 'chartjs-hidden-iframe';
			iframe.style.cssText =
				'display:block;'+
				'overflow:hidden;'+
				'border:0;'+
				'margin:0;'+
				'top:0;'+
				'left:0;'+
				'bottom:0;'+
				'right:0;'+
				'height:100%;'+
				'width:100%;'+
				'position:absolute;'+
				'pointer-events:none;'+
				'z-index:-1;';

			// Prevent the iframe to gain focus on tab.
			// https://github.com/chartjs/Chart.js/issues/3090
			iframe.tabIndex = -1;

			// Insert the iframe so that contentWindow is available
			node.insertBefore(iframe, node.firstChild);

			// Let's keep track of this added iframe and thus avoid DOM query when removing it.
			node._chartjs = {
				resizer: iframe
			};

			this.addEvent(iframe.contentWindow || iframe, 'resize', callback);
		};
		helpers.removeResizeListener = function(node) {
			if (!node || !node._chartjs) {
				return;
			}

			var iframe = node._chartjs.resizer;
			if (iframe) {
				iframe.parentNode.removeChild(iframe);
			}

			delete node._chartjs;
		};
		helpers.isArray = Array.isArray?
			function(obj) {
				return Array.isArray(obj);
			} :
			function(obj) {
				return Object.prototype.toString.call(obj) === '[object Array]';
			};
		// ! @see http://stackoverflow.com/a/14853974
		helpers.arrayEquals = function(a0, a1) {
			var i, ilen, v0, v1;

			if (!a0 || !a1 || a0.length !== a1.length) {
				return false;
			}

			for (i = 0, ilen=a0.length; i < ilen; ++i) {
				v0 = a0[i];
				v1 = a1[i];

				if (v0 instanceof Array && v1 instanceof Array) {
					if (!helpers.arrayEquals(v0, v1)) {
						return false;
					}
				} else if (v0 !== v1) {
					// NOTE: two different object instances will never be equal: {x:20} != {x:20}
					return false;
				}
			}

			return true;
		};
		helpers.callCallback = function(fn, args, _tArg) {
			if (fn && typeof fn.call === 'function') {
				fn.apply(_tArg, args);
			}
		};
		helpers.getHoverColor = function(colorValue) {
			/* global CanvasPattern */
			return (colorValue instanceof CanvasPattern) ?
				colorValue :
				helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
		};
	};


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* MIT license */
	var convert = __webpack_require__(179);
	var string = __webpack_require__(181);

	var Color = function (obj) {
		if (obj instanceof Color) {
			return obj;
		}
		if (!(this instanceof Color)) {
			return new Color(obj);
		}

		this.values = {
			rgb: [0, 0, 0],
			hsl: [0, 0, 0],
			hsv: [0, 0, 0],
			hwb: [0, 0, 0],
			cmyk: [0, 0, 0, 0],
			alpha: 1
		};

		// parse Color() argument
		var vals;
		if (typeof obj === 'string') {
			vals = string.getRgba(obj);
			if (vals) {
				this.setValues('rgb', vals);
			} else if (vals = string.getHsla(obj)) {
				this.setValues('hsl', vals);
			} else if (vals = string.getHwb(obj)) {
				this.setValues('hwb', vals);
			} else {
				throw new Error('Unable to parse color from string "' + obj + '"');
			}
		} else if (typeof obj === 'object') {
			vals = obj;
			if (vals.r !== undefined || vals.red !== undefined) {
				this.setValues('rgb', vals);
			} else if (vals.l !== undefined || vals.lightness !== undefined) {
				this.setValues('hsl', vals);
			} else if (vals.v !== undefined || vals.value !== undefined) {
				this.setValues('hsv', vals);
			} else if (vals.w !== undefined || vals.whiteness !== undefined) {
				this.setValues('hwb', vals);
			} else if (vals.c !== undefined || vals.cyan !== undefined) {
				this.setValues('cmyk', vals);
			} else {
				throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
			}
		}
	};

	Color.prototype = {
		rgb: function () {
			return this.setSpace('rgb', arguments);
		},
		hsl: function () {
			return this.setSpace('hsl', arguments);
		},
		hsv: function () {
			return this.setSpace('hsv', arguments);
		},
		hwb: function () {
			return this.setSpace('hwb', arguments);
		},
		cmyk: function () {
			return this.setSpace('cmyk', arguments);
		},

		rgbArray: function () {
			return this.values.rgb;
		},
		hslArray: function () {
			return this.values.hsl;
		},
		hsvArray: function () {
			return this.values.hsv;
		},
		hwbArray: function () {
			var values = this.values;
			if (values.alpha !== 1) {
				return values.hwb.concat([values.alpha]);
			}
			return values.hwb;
		},
		cmykArray: function () {
			return this.values.cmyk;
		},
		rgbaArray: function () {
			var values = this.values;
			return values.rgb.concat([values.alpha]);
		},
		hslaArray: function () {
			var values = this.values;
			return values.hsl.concat([values.alpha]);
		},
		alpha: function (val) {
			if (val === undefined) {
				return this.values.alpha;
			}
			this.setValues('alpha', val);
			return this;
		},

		red: function (val) {
			return this.setChannel('rgb', 0, val);
		},
		green: function (val) {
			return this.setChannel('rgb', 1, val);
		},
		blue: function (val) {
			return this.setChannel('rgb', 2, val);
		},
		hue: function (val) {
			if (val) {
				val %= 360;
				val = val < 0 ? 360 + val : val;
			}
			return this.setChannel('hsl', 0, val);
		},
		saturation: function (val) {
			return this.setChannel('hsl', 1, val);
		},
		lightness: function (val) {
			return this.setChannel('hsl', 2, val);
		},
		saturationv: function (val) {
			return this.setChannel('hsv', 1, val);
		},
		whiteness: function (val) {
			return this.setChannel('hwb', 1, val);
		},
		blackness: function (val) {
			return this.setChannel('hwb', 2, val);
		},
		value: function (val) {
			return this.setChannel('hsv', 2, val);
		},
		cyan: function (val) {
			return this.setChannel('cmyk', 0, val);
		},
		magenta: function (val) {
			return this.setChannel('cmyk', 1, val);
		},
		yellow: function (val) {
			return this.setChannel('cmyk', 2, val);
		},
		black: function (val) {
			return this.setChannel('cmyk', 3, val);
		},

		hexString: function () {
			return string.hexString(this.values.rgb);
		},
		rgbString: function () {
			return string.rgbString(this.values.rgb, this.values.alpha);
		},
		rgbaString: function () {
			return string.rgbaString(this.values.rgb, this.values.alpha);
		},
		percentString: function () {
			return string.percentString(this.values.rgb, this.values.alpha);
		},
		hslString: function () {
			return string.hslString(this.values.hsl, this.values.alpha);
		},
		hslaString: function () {
			return string.hslaString(this.values.hsl, this.values.alpha);
		},
		hwbString: function () {
			return string.hwbString(this.values.hwb, this.values.alpha);
		},
		keyword: function () {
			return string.keyword(this.values.rgb, this.values.alpha);
		},

		rgbNumber: function () {
			var rgb = this.values.rgb;
			return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
		},

		luminosity: function () {
			// http://www.w3.org/TR/WCAG20/#relativeluminancedef
			var rgb = this.values.rgb;
			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
			}
			return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
		},

		contrast: function (color2) {
			// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();
			if (lum1 > lum2) {
				return (lum1 + 0.05) / (lum2 + 0.05);
			}
			return (lum2 + 0.05) / (lum1 + 0.05);
		},

		level: function (color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) {
				return 'AAA';
			}

			return (contrastRatio >= 4.5) ? 'AA' : '';
		},

		dark: function () {
			// YIQ equation from http://24ways.org/2010/calculating-color-contrast
			var rgb = this.values.rgb;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
			return yiq < 128;
		},

		light: function () {
			return !this.dark();
		},

		negate: function () {
			var rgb = [];
			for (var i = 0; i < 3; i++) {
				rgb[i] = 255 - this.values.rgb[i];
			}
			this.setValues('rgb', rgb);
			return this;
		},

		lighten: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] += hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},

		darken: function (ratio) {
			var hsl = this.values.hsl;
			hsl[2] -= hsl[2] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},

		saturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] += hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},

		desaturate: function (ratio) {
			var hsl = this.values.hsl;
			hsl[1] -= hsl[1] * ratio;
			this.setValues('hsl', hsl);
			return this;
		},

		whiten: function (ratio) {
			var hwb = this.values.hwb;
			hwb[1] += hwb[1] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},

		blacken: function (ratio) {
			var hwb = this.values.hwb;
			hwb[2] += hwb[2] * ratio;
			this.setValues('hwb', hwb);
			return this;
		},

		greyscale: function () {
			var rgb = this.values.rgb;
			// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
			var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
			this.setValues('rgb', [val, val, val]);
			return this;
		},

		clearer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha - (alpha * ratio));
			return this;
		},

		opaquer: function (ratio) {
			var alpha = this.values.alpha;
			this.setValues('alpha', alpha + (alpha * ratio));
			return this;
		},

		rotate: function (degrees) {
			var hsl = this.values.hsl;
			var hue = (hsl[0] + degrees) % 360;
			hsl[0] = hue < 0 ? 360 + hue : hue;
			this.setValues('hsl', hsl);
			return this;
		},

		/**
		 * Ported from sass implementation in C
		 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		 */
		mix: function (mixinColor, weight) {
			var color1 = this;
			var color2 = mixinColor;
			var p = weight === undefined ? 0.5 : weight;

			var w = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();

			var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
			var w2 = 1 - w1;

			return this
				.rgb(
					w1 * color1.red() + w2 * color2.red(),
					w1 * color1.green() + w2 * color2.green(),
					w1 * color1.blue() + w2 * color2.blue()
				)
				.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
		},

		toJSON: function () {
			return this.rgb();
		},

		clone: function () {
			// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
			// making the final build way to big to embed in Chart.js. So let's do it manually,
			// assuming that values to clone are 1 dimension arrays containing only numbers,
			// except 'alpha' which is a number.
			var result = new Color();
			var source = this.values;
			var target = result.values;
			var value, type;

			for (var prop in source) {
				if (source.hasOwnProperty(prop)) {
					value = source[prop];
					type = ({}).toString.call(value);
					if (type === '[object Array]') {
						target[prop] = value.slice(0);
					} else if (type === '[object Number]') {
						target[prop] = value;
					} else {
						console.error('unexpected color value:', value);
					}
				}
			}

			return result;
		}
	};

	Color.prototype.spaces = {
		rgb: ['red', 'green', 'blue'],
		hsl: ['hue', 'saturation', 'lightness'],
		hsv: ['hue', 'saturation', 'value'],
		hwb: ['hue', 'whiteness', 'blackness'],
		cmyk: ['cyan', 'magenta', 'yellow', 'black']
	};

	Color.prototype.maxes = {
		rgb: [255, 255, 255],
		hsl: [360, 100, 100],
		hsv: [360, 100, 100],
		hwb: [360, 100, 100],
		cmyk: [100, 100, 100, 100]
	};

	Color.prototype.getValues = function (space) {
		var values = this.values;
		var vals = {};

		for (var i = 0; i < space.length; i++) {
			vals[space.charAt(i)] = values[space][i];
		}

		if (values.alpha !== 1) {
			vals.a = values.alpha;
		}

		// {r: 255, g: 255, b: 255, a: 0.4}
		return vals;
	};

	Color.prototype.setValues = function (space, vals) {
		var values = this.values;
		var spaces = this.spaces;
		var maxes = this.maxes;
		var alpha = 1;
		var i;

		if (space === 'alpha') {
			alpha = vals;
		} else if (vals.length) {
			// [10, 10, 10]
			values[space] = vals.slice(0, space.length);
			alpha = vals[space.length];
		} else if (vals[space.charAt(0)] !== undefined) {
			// {r: 10, g: 10, b: 10}
			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[space.charAt(i)];
			}

			alpha = vals.a;
		} else if (vals[spaces[space][0]] !== undefined) {
			// {red: 10, green: 10, blue: 10}
			var chans = spaces[space];

			for (i = 0; i < space.length; i++) {
				values[space][i] = vals[chans[i]];
			}

			alpha = vals.alpha;
		}

		values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

		if (space === 'alpha') {
			return false;
		}

		var capped;

		// cap values of the space prior converting all values
		for (i = 0; i < space.length; i++) {
			capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
			values[space][i] = Math.round(capped);
		}

		// convert to all the other color spaces
		for (var sname in spaces) {
			if (sname !== space) {
				values[sname] = convert[space][sname](values[space]);
			}
		}

		return true;
	};

	Color.prototype.setSpace = function (space, args) {
		var vals = args[0];

		if (vals === undefined) {
			// color.rgb()
			return this.getValues(space);
		}

		// color.rgb(10, 10, 10)
		if (typeof vals === 'number') {
			vals = Array.prototype.slice.call(args);
		}

		this.setValues(space, vals);
		return this;
	};

	Color.prototype.setChannel = function (space, index, val) {
		var svalues = this.values[space];
		if (val === undefined) {
			// color.red()
			return svalues[index];
		} else if (val === svalues[index]) {
			// color.red(color.red())
			return this;
		}

		// color.red(100)
		svalues[index] = val;
		this.setValues(space, svalues);

		return this;
	};

	if (typeof window !== 'undefined') {
		window.Color = Color;
	}

	module.exports = Color;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var conversions = __webpack_require__(180);

	var convert = function() {
	   return new Converter();
	}

	for (var func in conversions) {
	  // export Raw versions
	  convert[func + "Raw"] =  (function(func) {
	    // accept array or plain args
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      return conversions[func](arg);
	    }
	  })(func);

	  var pair = /(\w+)2(\w+)/.exec(func),
	      from = pair[1],
	      to = pair[2];

	  // export rgb2hsl and ["rgb"]["hsl"]
	  convert[from] = convert[from] || {};

	  convert[from][to] = convert[func] = (function(func) { 
	    return function(arg) {
	      if (typeof arg == "number")
	        arg = Array.prototype.slice.call(arguments);
	      
	      var val = conversions[func](arg);
	      if (typeof val == "string" || val === undefined)
	        return val; // keyword

	      for (var i = 0; i < val.length; i++)
	        val[i] = Math.round(val[i]);
	      return val;
	    }
	  })(func);
	}


	/* Converter does lazy conversion and caching */
	var Converter = function() {
	   this.convs = {};
	};

	/* Either get the values for a space or
	  set the values for a space, depending on args */
	Converter.prototype.routeSpace = function(space, args) {
	   var values = args[0];
	   if (values === undefined) {
	      // color.rgb()
	      return this.getValues(space);
	   }
	   // color.rgb(10, 10, 10)
	   if (typeof values == "number") {
	      values = Array.prototype.slice.call(args);        
	   }

	   return this.setValues(space, values);
	};
	  
	/* Set the values for a space, invalidating cache */
	Converter.prototype.setValues = function(space, values) {
	   this.space = space;
	   this.convs = {};
	   this.convs[space] = values;
	   return this;
	};

	/* Get the values for a space. If there's already
	  a conversion for the space, fetch it, otherwise
	  compute it */
	Converter.prototype.getValues = function(space) {
	   var vals = this.convs[space];
	   if (!vals) {
	      var fspace = this.space,
	          from = this.convs[fspace];
	      vals = convert[fspace][space](from);

	      this.convs[space] = vals;
	   }
	  return vals;
	};

	["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
	   Converter.prototype[space] = function(vals) {
	      return this.routeSpace(space, arguments);
	   }
	});

	module.exports = convert;

/***/ },
/* 180 */
/***/ function(module, exports) {

	/* MIT license */

	module.exports = {
	  rgb2hsl: rgb2hsl,
	  rgb2hsv: rgb2hsv,
	  rgb2hwb: rgb2hwb,
	  rgb2cmyk: rgb2cmyk,
	  rgb2keyword: rgb2keyword,
	  rgb2xyz: rgb2xyz,
	  rgb2lab: rgb2lab,
	  rgb2lch: rgb2lch,

	  hsl2rgb: hsl2rgb,
	  hsl2hsv: hsl2hsv,
	  hsl2hwb: hsl2hwb,
	  hsl2cmyk: hsl2cmyk,
	  hsl2keyword: hsl2keyword,

	  hsv2rgb: hsv2rgb,
	  hsv2hsl: hsv2hsl,
	  hsv2hwb: hsv2hwb,
	  hsv2cmyk: hsv2cmyk,
	  hsv2keyword: hsv2keyword,

	  hwb2rgb: hwb2rgb,
	  hwb2hsl: hwb2hsl,
	  hwb2hsv: hwb2hsv,
	  hwb2cmyk: hwb2cmyk,
	  hwb2keyword: hwb2keyword,

	  cmyk2rgb: cmyk2rgb,
	  cmyk2hsl: cmyk2hsl,
	  cmyk2hsv: cmyk2hsv,
	  cmyk2hwb: cmyk2hwb,
	  cmyk2keyword: cmyk2keyword,

	  keyword2rgb: keyword2rgb,
	  keyword2hsl: keyword2hsl,
	  keyword2hsv: keyword2hsv,
	  keyword2hwb: keyword2hwb,
	  keyword2cmyk: keyword2cmyk,
	  keyword2lab: keyword2lab,
	  keyword2xyz: keyword2xyz,

	  xyz2rgb: xyz2rgb,
	  xyz2lab: xyz2lab,
	  xyz2lch: xyz2lch,

	  lab2xyz: lab2xyz,
	  lab2rgb: lab2rgb,
	  lab2lch: lab2lch,

	  lch2lab: lch2lab,
	  lch2xyz: lch2xyz,
	  lch2rgb: lch2rgb
	}


	function rgb2hsl(rgb) {
	  var r = rgb[0]/255,
	      g = rgb[1]/255,
	      b = rgb[2]/255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, l;

	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g)/ delta;

	  h = Math.min(h * 60, 360);

	  if (h < 0)
	    h += 360;

	  l = (min + max) / 2;

	  if (max == min)
	    s = 0;
	  else if (l <= 0.5)
	    s = delta / (max + min);
	  else
	    s = delta / (2 - max - min);

	  return [h, s * 100, l * 100];
	}

	function rgb2hsv(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      delta = max - min,
	      h, s, v;

	  if (max == 0)
	    s = 0;
	  else
	    s = (delta/max * 1000)/10;

	  if (max == min)
	    h = 0;
	  else if (r == max)
	    h = (g - b) / delta;
	  else if (g == max)
	    h = 2 + (b - r) / delta;
	  else if (b == max)
	    h = 4 + (r - g) / delta;

	  h = Math.min(h * 60, 360);

	  if (h < 0)
	    h += 360;

	  v = ((max / 255) * 1000) / 10;

	  return [h, s, v];
	}

	function rgb2hwb(rgb) {
	  var r = rgb[0],
	      g = rgb[1],
	      b = rgb[2],
	      h = rgb2hsl(rgb)[0],
	      w = 1/255 * Math.min(r, Math.min(g, b)),
	      b = 1 - 1/255 * Math.max(r, Math.max(g, b));

	  return [h, w * 100, b * 100];
	}

	function rgb2cmyk(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255,
	      c, m, y, k;

	  k = Math.min(1 - r, 1 - g, 1 - b);
	  c = (1 - r - k) / (1 - k) || 0;
	  m = (1 - g - k) / (1 - k) || 0;
	  y = (1 - b - k) / (1 - k) || 0;
	  return [c * 100, m * 100, y * 100, k * 100];
	}

	function rgb2keyword(rgb) {
	  return reverseKeywords[JSON.stringify(rgb)];
	}

	function rgb2xyz(rgb) {
	  var r = rgb[0] / 255,
	      g = rgb[1] / 255,
	      b = rgb[2] / 255;

	  // assume sRGB
	  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	  return [x * 100, y *100, z * 100];
	}

	function rgb2lab(rgb) {
	  var xyz = rgb2xyz(rgb),
	        x = xyz[0],
	        y = xyz[1],
	        z = xyz[2],
	        l, a, b;

	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;

	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);

	  return [l, a, b];
	}

	function rgb2lch(args) {
	  return lab2lch(rgb2lab(args));
	}

	function hsl2rgb(hsl) {
	  var h = hsl[0] / 360,
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      t1, t2, t3, rgb, val;

	  if (s == 0) {
	    val = l * 255;
	    return [val, val, val];
	  }

	  if (l < 0.5)
	    t2 = l * (1 + s);
	  else
	    t2 = l + s - l * s;
	  t1 = 2 * l - t2;

	  rgb = [0, 0, 0];
	  for (var i = 0; i < 3; i++) {
	    t3 = h + 1 / 3 * - (i - 1);
	    t3 < 0 && t3++;
	    t3 > 1 && t3--;

	    if (6 * t3 < 1)
	      val = t1 + (t2 - t1) * 6 * t3;
	    else if (2 * t3 < 1)
	      val = t2;
	    else if (3 * t3 < 2)
	      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
	    else
	      val = t1;

	    rgb[i] = val * 255;
	  }

	  return rgb;
	}

	function hsl2hsv(hsl) {
	  var h = hsl[0],
	      s = hsl[1] / 100,
	      l = hsl[2] / 100,
	      sv, v;

	  if(l === 0) {
	      // no need to do calc on black
	      // also avoids divide by 0 error
	      return [0, 0, 0];
	  }

	  l *= 2;
	  s *= (l <= 1) ? l : 2 - l;
	  v = (l + s) / 2;
	  sv = (2 * s) / (l + s);
	  return [h, sv * 100, v * 100];
	}

	function hsl2hwb(args) {
	  return rgb2hwb(hsl2rgb(args));
	}

	function hsl2cmyk(args) {
	  return rgb2cmyk(hsl2rgb(args));
	}

	function hsl2keyword(args) {
	  return rgb2keyword(hsl2rgb(args));
	}


	function hsv2rgb(hsv) {
	  var h = hsv[0] / 60,
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      hi = Math.floor(h) % 6;

	  var f = h - Math.floor(h),
	      p = 255 * v * (1 - s),
	      q = 255 * v * (1 - (s * f)),
	      t = 255 * v * (1 - (s * (1 - f))),
	      v = 255 * v;

	  switch(hi) {
	    case 0:
	      return [v, t, p];
	    case 1:
	      return [q, v, p];
	    case 2:
	      return [p, v, t];
	    case 3:
	      return [p, q, v];
	    case 4:
	      return [t, p, v];
	    case 5:
	      return [v, p, q];
	  }
	}

	function hsv2hsl(hsv) {
	  var h = hsv[0],
	      s = hsv[1] / 100,
	      v = hsv[2] / 100,
	      sl, l;

	  l = (2 - s) * v;
	  sl = s * v;
	  sl /= (l <= 1) ? l : 2 - l;
	  sl = sl || 0;
	  l /= 2;
	  return [h, sl * 100, l * 100];
	}

	function hsv2hwb(args) {
	  return rgb2hwb(hsv2rgb(args))
	}

	function hsv2cmyk(args) {
	  return rgb2cmyk(hsv2rgb(args));
	}

	function hsv2keyword(args) {
	  return rgb2keyword(hsv2rgb(args));
	}

	// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
	function hwb2rgb(hwb) {
	  var h = hwb[0] / 360,
	      wh = hwb[1] / 100,
	      bl = hwb[2] / 100,
	      ratio = wh + bl,
	      i, v, f, n;

	  // wh + bl cant be > 1
	  if (ratio > 1) {
	    wh /= ratio;
	    bl /= ratio;
	  }

	  i = Math.floor(6 * h);
	  v = 1 - bl;
	  f = 6 * h - i;
	  if ((i & 0x01) != 0) {
	    f = 1 - f;
	  }
	  n = wh + f * (v - wh);  // linear interpolation

	  switch (i) {
	    default:
	    case 6:
	    case 0: r = v; g = n; b = wh; break;
	    case 1: r = n; g = v; b = wh; break;
	    case 2: r = wh; g = v; b = n; break;
	    case 3: r = wh; g = n; b = v; break;
	    case 4: r = n; g = wh; b = v; break;
	    case 5: r = v; g = wh; b = n; break;
	  }

	  return [r * 255, g * 255, b * 255];
	}

	function hwb2hsl(args) {
	  return rgb2hsl(hwb2rgb(args));
	}

	function hwb2hsv(args) {
	  return rgb2hsv(hwb2rgb(args));
	}

	function hwb2cmyk(args) {
	  return rgb2cmyk(hwb2rgb(args));
	}

	function hwb2keyword(args) {
	  return rgb2keyword(hwb2rgb(args));
	}

	function cmyk2rgb(cmyk) {
	  var c = cmyk[0] / 100,
	      m = cmyk[1] / 100,
	      y = cmyk[2] / 100,
	      k = cmyk[3] / 100,
	      r, g, b;

	  r = 1 - Math.min(1, c * (1 - k) + k);
	  g = 1 - Math.min(1, m * (1 - k) + k);
	  b = 1 - Math.min(1, y * (1 - k) + k);
	  return [r * 255, g * 255, b * 255];
	}

	function cmyk2hsl(args) {
	  return rgb2hsl(cmyk2rgb(args));
	}

	function cmyk2hsv(args) {
	  return rgb2hsv(cmyk2rgb(args));
	}

	function cmyk2hwb(args) {
	  return rgb2hwb(cmyk2rgb(args));
	}

	function cmyk2keyword(args) {
	  return rgb2keyword(cmyk2rgb(args));
	}


	function xyz2rgb(xyz) {
	  var x = xyz[0] / 100,
	      y = xyz[1] / 100,
	      z = xyz[2] / 100,
	      r, g, b;

	  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	  // assume sRGB
	  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
	    : r = (r * 12.92);

	  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
	    : g = (g * 12.92);

	  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
	    : b = (b * 12.92);

	  r = Math.min(Math.max(0, r), 1);
	  g = Math.min(Math.max(0, g), 1);
	  b = Math.min(Math.max(0, b), 1);

	  return [r * 255, g * 255, b * 255];
	}

	function xyz2lab(xyz) {
	  var x = xyz[0],
	      y = xyz[1],
	      z = xyz[2],
	      l, a, b;

	  x /= 95.047;
	  y /= 100;
	  z /= 108.883;

	  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
	  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
	  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

	  l = (116 * y) - 16;
	  a = 500 * (x - y);
	  b = 200 * (y - z);

	  return [l, a, b];
	}

	function xyz2lch(args) {
	  return lab2lch(xyz2lab(args));
	}

	function lab2xyz(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      x, y, z, y2;

	  if (l <= 8) {
	    y = (l * 100) / 903.3;
	    y2 = (7.787 * (y / 100)) + (16 / 116);
	  } else {
	    y = 100 * Math.pow((l + 16) / 116, 3);
	    y2 = Math.pow(y / 100, 1/3);
	  }

	  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

	  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

	  return [x, y, z];
	}

	function lab2lch(lab) {
	  var l = lab[0],
	      a = lab[1],
	      b = lab[2],
	      hr, h, c;

	  hr = Math.atan2(b, a);
	  h = hr * 360 / 2 / Math.PI;
	  if (h < 0) {
	    h += 360;
	  }
	  c = Math.sqrt(a * a + b * b);
	  return [l, c, h];
	}

	function lab2rgb(args) {
	  return xyz2rgb(lab2xyz(args));
	}

	function lch2lab(lch) {
	  var l = lch[0],
	      c = lch[1],
	      h = lch[2],
	      a, b, hr;

	  hr = h / 360 * 2 * Math.PI;
	  a = c * Math.cos(hr);
	  b = c * Math.sin(hr);
	  return [l, a, b];
	}

	function lch2xyz(args) {
	  return lab2xyz(lch2lab(args));
	}

	function lch2rgb(args) {
	  return lab2rgb(lch2lab(args));
	}

	function keyword2rgb(keyword) {
	  return cssKeywords[keyword];
	}

	function keyword2hsl(args) {
	  return rgb2hsl(keyword2rgb(args));
	}

	function keyword2hsv(args) {
	  return rgb2hsv(keyword2rgb(args));
	}

	function keyword2hwb(args) {
	  return rgb2hwb(keyword2rgb(args));
	}

	function keyword2cmyk(args) {
	  return rgb2cmyk(keyword2rgb(args));
	}

	function keyword2lab(args) {
	  return rgb2lab(keyword2rgb(args));
	}

	function keyword2xyz(args) {
	  return rgb2xyz(keyword2rgb(args));
	}

	var cssKeywords = {
	  aliceblue:  [240,248,255],
	  antiquewhite: [250,235,215],
	  aqua: [0,255,255],
	  aquamarine: [127,255,212],
	  azure:  [240,255,255],
	  beige:  [245,245,220],
	  bisque: [255,228,196],
	  black:  [0,0,0],
	  blanchedalmond: [255,235,205],
	  blue: [0,0,255],
	  blueviolet: [138,43,226],
	  brown:  [165,42,42],
	  burlywood:  [222,184,135],
	  cadetblue:  [95,158,160],
	  chartreuse: [127,255,0],
	  chocolate:  [210,105,30],
	  coral:  [255,127,80],
	  cornflowerblue: [100,149,237],
	  cornsilk: [255,248,220],
	  crimson:  [220,20,60],
	  cyan: [0,255,255],
	  darkblue: [0,0,139],
	  darkcyan: [0,139,139],
	  darkgoldenrod:  [184,134,11],
	  darkgray: [169,169,169],
	  darkgreen:  [0,100,0],
	  darkgrey: [169,169,169],
	  darkkhaki:  [189,183,107],
	  darkmagenta:  [139,0,139],
	  darkolivegreen: [85,107,47],
	  darkorange: [255,140,0],
	  darkorchid: [153,50,204],
	  darkred:  [139,0,0],
	  darksalmon: [233,150,122],
	  darkseagreen: [143,188,143],
	  darkslateblue:  [72,61,139],
	  darkslategray:  [47,79,79],
	  darkslategrey:  [47,79,79],
	  darkturquoise:  [0,206,209],
	  darkviolet: [148,0,211],
	  deeppink: [255,20,147],
	  deepskyblue:  [0,191,255],
	  dimgray:  [105,105,105],
	  dimgrey:  [105,105,105],
	  dodgerblue: [30,144,255],
	  firebrick:  [178,34,34],
	  floralwhite:  [255,250,240],
	  forestgreen:  [34,139,34],
	  fuchsia:  [255,0,255],
	  gainsboro:  [220,220,220],
	  ghostwhite: [248,248,255],
	  gold: [255,215,0],
	  goldenrod:  [218,165,32],
	  gray: [128,128,128],
	  green:  [0,128,0],
	  greenyellow:  [173,255,47],
	  grey: [128,128,128],
	  honeydew: [240,255,240],
	  hotpink:  [255,105,180],
	  indianred:  [205,92,92],
	  indigo: [75,0,130],
	  ivory:  [255,255,240],
	  khaki:  [240,230,140],
	  lavender: [230,230,250],
	  lavenderblush:  [255,240,245],
	  lawngreen:  [124,252,0],
	  lemonchiffon: [255,250,205],
	  lightblue:  [173,216,230],
	  lightcoral: [240,128,128],
	  lightcyan:  [224,255,255],
	  lightgoldenrodyellow: [250,250,210],
	  lightgray:  [211,211,211],
	  lightgreen: [144,238,144],
	  lightgrey:  [211,211,211],
	  lightpink:  [255,182,193],
	  lightsalmon:  [255,160,122],
	  lightseagreen:  [32,178,170],
	  lightskyblue: [135,206,250],
	  lightslategray: [119,136,153],
	  lightslategrey: [119,136,153],
	  lightsteelblue: [176,196,222],
	  lightyellow:  [255,255,224],
	  lime: [0,255,0],
	  limegreen:  [50,205,50],
	  linen:  [250,240,230],
	  magenta:  [255,0,255],
	  maroon: [128,0,0],
	  mediumaquamarine: [102,205,170],
	  mediumblue: [0,0,205],
	  mediumorchid: [186,85,211],
	  mediumpurple: [147,112,219],
	  mediumseagreen: [60,179,113],
	  mediumslateblue:  [123,104,238],
	  mediumspringgreen:  [0,250,154],
	  mediumturquoise:  [72,209,204],
	  mediumvioletred:  [199,21,133],
	  midnightblue: [25,25,112],
	  mintcream:  [245,255,250],
	  mistyrose:  [255,228,225],
	  moccasin: [255,228,181],
	  navajowhite:  [255,222,173],
	  navy: [0,0,128],
	  oldlace:  [253,245,230],
	  olive:  [128,128,0],
	  olivedrab:  [107,142,35],
	  orange: [255,165,0],
	  orangered:  [255,69,0],
	  orchid: [218,112,214],
	  palegoldenrod:  [238,232,170],
	  palegreen:  [152,251,152],
	  paleturquoise:  [175,238,238],
	  palevioletred:  [219,112,147],
	  papayawhip: [255,239,213],
	  peachpuff:  [255,218,185],
	  peru: [205,133,63],
	  pink: [255,192,203],
	  plum: [221,160,221],
	  powderblue: [176,224,230],
	  purple: [128,0,128],
	  rebeccapurple: [102, 51, 153],
	  red:  [255,0,0],
	  rosybrown:  [188,143,143],
	  royalblue:  [65,105,225],
	  saddlebrown:  [139,69,19],
	  salmon: [250,128,114],
	  sandybrown: [244,164,96],
	  seagreen: [46,139,87],
	  seashell: [255,245,238],
	  sienna: [160,82,45],
	  silver: [192,192,192],
	  skyblue:  [135,206,235],
	  slateblue:  [106,90,205],
	  slategray:  [112,128,144],
	  slategrey:  [112,128,144],
	  snow: [255,250,250],
	  springgreen:  [0,255,127],
	  steelblue:  [70,130,180],
	  tan:  [210,180,140],
	  teal: [0,128,128],
	  thistle:  [216,191,216],
	  tomato: [255,99,71],
	  turquoise:  [64,224,208],
	  violet: [238,130,238],
	  wheat:  [245,222,179],
	  white:  [255,255,255],
	  whitesmoke: [245,245,245],
	  yellow: [255,255,0],
	  yellowgreen:  [154,205,50]
	};

	var reverseKeywords = {};
	for (var key in cssKeywords) {
	  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
	}


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* MIT license */
	var colorNames = __webpack_require__(182);

	module.exports = {
	   getRgba: getRgba,
	   getHsla: getHsla,
	   getRgb: getRgb,
	   getHsl: getHsl,
	   getHwb: getHwb,
	   getAlpha: getAlpha,

	   hexString: hexString,
	   rgbString: rgbString,
	   rgbaString: rgbaString,
	   percentString: percentString,
	   percentaString: percentaString,
	   hslString: hslString,
	   hslaString: hslaString,
	   hwbString: hwbString,
	   keyword: keyword
	}

	function getRgba(string) {
	   if (!string) {
	      return;
	   }
	   var abbr =  /^#([a-fA-F0-9]{3})$/,
	       hex =  /^#([a-fA-F0-9]{6})$/,
	       rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
	       keyword = /(\w+)/;

	   var rgb = [0, 0, 0],
	       a = 1,
	       match = string.match(abbr);
	   if (match) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i] + match[i], 16);
	      }
	   }
	   else if (match = string.match(hex)) {
	      match = match[1];
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
	      }
	   }
	   else if (match = string.match(rgba)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = parseInt(match[i + 1]);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(per)) {
	      for (var i = 0; i < rgb.length; i++) {
	         rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
	      }
	      a = parseFloat(match[4]);
	   }
	   else if (match = string.match(keyword)) {
	      if (match[1] == "transparent") {
	         return [0, 0, 0, 0];
	      }
	      rgb = colorNames[match[1]];
	      if (!rgb) {
	         return;
	      }
	   }

	   for (var i = 0; i < rgb.length; i++) {
	      rgb[i] = scale(rgb[i], 0, 255);
	   }
	   if (!a && a != 0) {
	      a = 1;
	   }
	   else {
	      a = scale(a, 0, 1);
	   }
	   rgb[3] = a;
	   return rgb;
	}

	function getHsla(string) {
	   if (!string) {
	      return;
	   }
	   var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hsl);
	   if (match) {
	      var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          s = scale(parseFloat(match[2]), 0, 100),
	          l = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, s, l, a];
	   }
	}

	function getHwb(string) {
	   if (!string) {
	      return;
	   }
	   var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
	   var match = string.match(hwb);
	   if (match) {
	    var alpha = parseFloat(match[4]);
	      var h = scale(parseInt(match[1]), 0, 360),
	          w = scale(parseFloat(match[2]), 0, 100),
	          b = scale(parseFloat(match[3]), 0, 100),
	          a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
	      return [h, w, b, a];
	   }
	}

	function getRgb(string) {
	   var rgba = getRgba(string);
	   return rgba && rgba.slice(0, 3);
	}

	function getHsl(string) {
	  var hsla = getHsla(string);
	  return hsla && hsla.slice(0, 3);
	}

	function getAlpha(string) {
	   var vals = getRgba(string);
	   if (vals) {
	      return vals[3];
	   }
	   else if (vals = getHsla(string)) {
	      return vals[3];
	   }
	   else if (vals = getHwb(string)) {
	      return vals[3];
	   }
	}

	// generators
	function hexString(rgb) {
	   return "#" + hexDouble(rgb[0]) + hexDouble(rgb[1])
	              + hexDouble(rgb[2]);
	}

	function rgbString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return rgbaString(rgba, alpha);
	   }
	   return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
	}

	function rgbaString(rgba, alpha) {
	   if (alpha === undefined) {
	      alpha = (rgba[3] !== undefined ? rgba[3] : 1);
	   }
	   return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
	           + ", " + alpha + ")";
	}

	function percentString(rgba, alpha) {
	   if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
	      return percentaString(rgba, alpha);
	   }
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);

	   return "rgb(" + r + "%, " + g + "%, " + b + "%)";
	}

	function percentaString(rgba, alpha) {
	   var r = Math.round(rgba[0]/255 * 100),
	       g = Math.round(rgba[1]/255 * 100),
	       b = Math.round(rgba[2]/255 * 100);
	   return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
	}

	function hslString(hsla, alpha) {
	   if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
	      return hslaString(hsla, alpha);
	   }
	   return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
	}

	function hslaString(hsla, alpha) {
	   if (alpha === undefined) {
	      alpha = (hsla[3] !== undefined ? hsla[3] : 1);
	   }
	   return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
	           + alpha + ")";
	}

	// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
	// (hwb have alpha optional & 1 is default value)
	function hwbString(hwb, alpha) {
	   if (alpha === undefined) {
	      alpha = (hwb[3] !== undefined ? hwb[3] : 1);
	   }
	   return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
	           + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
	}

	function keyword(rgb) {
	  return reverseNames[rgb.slice(0, 3)];
	}

	// helpers
	function scale(num, min, max) {
	   return Math.min(Math.max(min, num), max);
	}

	function hexDouble(num) {
	  var str = num.toString(16).toUpperCase();
	  return (str.length < 2) ? "0" + str : str;
	}


	//create a list of reverse color names
	var reverseNames = {};
	for (var name in colorNames) {
	   reverseNames[colorNames[name]] = name;
	}


/***/ },
/* 182 */
/***/ function(module, exports) {

	module.exports = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};

/***/ },
/* 183 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {
		// Global Chart canvas helpers object for drawing items to canvas
		var helpers = Chart.canvasHelpers = {};

		helpers.drawPoint = function(ctx, pointStyle, radius, x, y) {
			var type, edgeLength, xOffset, yOffset, height, size;

			if (typeof pointStyle === 'object') {
				type = pointStyle.toString();
				if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
					ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
					return;
				}
			}

			if (isNaN(radius) || radius <= 0) {
				return;
			}

			switch (pointStyle) {
			// Default includes circle
			default:
				ctx.beginPath();
				ctx.arc(x, y, radius, 0, Math.PI * 2);
				ctx.closePath();
				ctx.fill();
				break;
			case 'triangle':
				ctx.beginPath();
				edgeLength = 3 * radius / Math.sqrt(3);
				height = edgeLength * Math.sqrt(3) / 2;
				ctx.moveTo(x - edgeLength / 2, y + height / 3);
				ctx.lineTo(x + edgeLength / 2, y + height / 3);
				ctx.lineTo(x, y - 2 * height / 3);
				ctx.closePath();
				ctx.fill();
				break;
			case 'rect':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
				ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
				break;
			case 'rectRot':
				size = 1 / Math.SQRT2 * radius;
				ctx.beginPath();
				ctx.moveTo(x - size, y);
				ctx.lineTo(x, y + size);
				ctx.lineTo(x + size, y);
				ctx.lineTo(x, y - size);
				ctx.closePath();
				ctx.fill();
				break;
			case 'cross':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'crossRot':
				ctx.beginPath();
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'star':
				ctx.beginPath();
				ctx.moveTo(x, y + radius);
				ctx.lineTo(x, y - radius);
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				xOffset = Math.cos(Math.PI / 4) * radius;
				yOffset = Math.sin(Math.PI / 4) * radius;
				ctx.moveTo(x - xOffset, y - yOffset);
				ctx.lineTo(x + xOffset, y + yOffset);
				ctx.moveTo(x - xOffset, y + yOffset);
				ctx.lineTo(x + xOffset, y - yOffset);
				ctx.closePath();
				break;
			case 'line':
				ctx.beginPath();
				ctx.moveTo(x - radius, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			case 'dash':
				ctx.beginPath();
				ctx.moveTo(x, y);
				ctx.lineTo(x + radius, y);
				ctx.closePath();
				break;
			}

			ctx.stroke();
		};
	};


/***/ },
/* 184 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.elements = {};

		Chart.Element = function(configuration) {
			helpers.extend(this, configuration);
			this.initialize.apply(this, arguments);
		};

		helpers.extend(Chart.Element.prototype, {

			initialize: function() {
				this.hidden = false;
			},

			pivot: function() {
				var me = this;
				if (!me._view) {
					me._view = helpers.clone(me._model);
				}
				me._start = helpers.clone(me._view);
				return me;
			},

			transition: function(ease) {
				var me = this;

				if (!me._view) {
					me._view = helpers.clone(me._model);
				}

				// No animation -> No Transition
				if (ease === 1) {
					me._view = me._model;
					me._start = null;
					return me;
				}

				if (!me._start) {
					me.pivot();
				}

				helpers.each(me._model, function(value, key) {

					if (key[0] === '_') {
						// Only non-underscored properties
					// Init if doesn't exist
					} else if (!me._view.hasOwnProperty(key)) {
						if (typeof value === 'number' && !isNaN(me._view[key])) {
							me._view[key] = value * ease;
						} else {
							me._view[key] = value;
						}
					// No unnecessary computations
					} else if (value === me._view[key]) {
						// It's the same! Woohoo!
					// Color transitions if possible
					} else if (typeof value === 'string') {
						try {
							var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
							me._view[key] = color.rgbString();
						} catch (err) {
							me._view[key] = value;
						}
					// Number transitions
					} else if (typeof value === 'number') {
						var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
						me._view[key] = ((me._model[key] - startVal) * ease) + startVal;
					// Everything else
					} else {
						me._view[key] = value;
					}
				}, me);

				return me;
			},

			tooltipPosition: function() {
				return {
					x: this._model.x,
					y: this._model.y
				};
			},

			hasValue: function() {
				return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
			}
		});

		Chart.Element.extend = helpers.inherits;

	};


/***/ },
/* 185 */
/***/ function(module, exports) {

	/* global window: false */
	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.global.animation = {
			duration: 1000,
			easing: 'easeOutQuart',
			onProgress: helpers.noop,
			onComplete: helpers.noop
		};

		Chart.Animation = Chart.Element.extend({
			currentStep: null, // the current animation step
			numSteps: 60, // default number of steps
			easing: '', // the easing to use for this animation
			render: null, // render function used by the animation service

			onAnimationProgress: null, // user specified callback to fire on each step of the animation
			onAnimationComplete: null // user specified callback to fire when the animation finishes
		});

		Chart.animationService = {
			frameDuration: 17,
			animations: [],
			dropFrames: 0,
			request: null,
			addAnimation: function(chartInstance, animationObject, duration, lazy) {
				var me = this;

				if (!lazy) {
					chartInstance.animating = true;
				}

				for (var index = 0; index < me.animations.length; ++index) {
					if (me.animations[index].chartInstance === chartInstance) {
						// replacing an in progress animation
						me.animations[index].animationObject = animationObject;
						return;
					}
				}

				me.animations.push({
					chartInstance: chartInstance,
					animationObject: animationObject
				});

				// If there are no animations queued, manually kickstart a digest, for lack of a better word
				if (me.animations.length === 1) {
					me.requestAnimationFrame();
				}
			},
			// Cancel the animation for a given chart instance
			cancelAnimation: function(chartInstance) {
				var index = helpers.findIndex(this.animations, function(animationWrapper) {
					return animationWrapper.chartInstance === chartInstance;
				});

				if (index !== -1) {
					this.animations.splice(index, 1);
					chartInstance.animating = false;
				}
			},
			requestAnimationFrame: function() {
				var me = this;
				if (me.request === null) {
					// Skip animation frame requests until the active one is executed.
					// This can happen when processing mouse events, e.g. 'mousemove'
					// and 'mouseout' events will trigger multiple renders.
					me.request = helpers.requestAnimFrame.call(window, function() {
						me.request = null;
						me.startDigest();
					});
				}
			},
			startDigest: function() {
				var me = this;

				var startTime = Date.now();
				var framesToDrop = 0;

				if (me.dropFrames > 1) {
					framesToDrop = Math.floor(me.dropFrames);
					me.dropFrames = me.dropFrames % 1;
				}

				var i = 0;
				while (i < me.animations.length) {
					if (me.animations[i].animationObject.currentStep === null) {
						me.animations[i].animationObject.currentStep = 0;
					}

					me.animations[i].animationObject.currentStep += 1 + framesToDrop;

					if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
						me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
					}

					me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
					if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
						me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
					}

					if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
						if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
							me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
						}

						// executed the last frame. Remove the animation.
						me.animations[i].chartInstance.animating = false;

						me.animations.splice(i, 1);
					} else {
						++i;
					}
				}

				var endTime = Date.now();
				var dropFrames = (endTime - startTime) / me.frameDuration;

				me.dropFrames += dropFrames;

				// Do we have more stuff to animate?
				if (me.animations.length > 0) {
					me.requestAnimationFrame();
				}
			}
		};
	};


/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		// Create a dictionary of chart types, to allow for extension of existing types
		Chart.types = {};

		// Store a reference to each instance - allowing us to globally resize chart instances on window resize.
		// Destroy method on the chart will remove the instance of the chart from this reference.
		Chart.instances = {};

		// Controllers available for dataset visualization eg. bar, line, slice, etc.
		Chart.controllers = {};

		/**
		 * The "used" size is the final value of a dimension property after all calculations have
		 * been performed. This method uses the computed style of `element` but returns undefined
		 * if the computed style is not expressed in pixels. That can happen in some cases where
		 * `element` has a size relative to its parent and this last one is not yet displayed,
		 * for example because of `display: none` on a parent node.
		 * TODO(SB) Move this method in the upcoming core.platform class.
		 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
		 * @returns {Number} Size in pixels or undefined if unknown.
		 */
		function readUsedSize(element, property) {
			var value = helpers.getStyle(element, property);
			var matches = value && value.match(/(\d+)px/);
			return matches? Number(matches[1]) : undefined;
		}

		/**
		 * Initializes the canvas style and render size without modifying the canvas display size,
		 * since responsiveness is handled by the controller.resize() method. The config is used
		 * to determine the aspect ratio to apply in case no explicit height has been specified.
		 * TODO(SB) Move this method in the upcoming core.platform class.
		 */
		function initCanvas(canvas, config) {
			var style = canvas.style;

			// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
			// returns null or '' if no explicit value has been set to the canvas attribute.
			var renderHeight = canvas.getAttribute('height');
			var renderWidth = canvas.getAttribute('width');

			// Chart.js modifies some canvas values that we want to restore on destroy
			canvas._chartjs = {
				initial: {
					height: renderHeight,
					width: renderWidth,
					style: {
						display: style.display,
						height: style.height,
						width: style.width
					}
				}
			};

			// Force canvas to display as block to avoid extra space caused by inline
			// elements, which would interfere with the responsive resize process.
			// https://github.com/chartjs/Chart.js/issues/2538
			style.display = style.display || 'block';

			if (renderWidth === null || renderWidth === '') {
				var displayWidth = readUsedSize(canvas, 'width');
				if (displayWidth !== undefined) {
					canvas.width = displayWidth;
				}
			}

			if (renderHeight === null || renderHeight === '') {
				if (canvas.style.height === '') {
					// If no explicit render height and style height, let's apply the aspect ratio,
					// which one can be specified by the user but also by charts as default option
					// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
					canvas.height = canvas.width / (config.options.aspectRatio || 2);
				} else {
					var displayHeight = readUsedSize(canvas, 'height');
					if (displayWidth !== undefined) {
						canvas.height = displayHeight;
					}
				}
			}

			return canvas;
		}

		/**
		 * Restores the canvas initial state, such as render/display sizes and style.
		 * TODO(SB) Move this method in the upcoming core.platform class.
		 */
		function releaseCanvas(canvas) {
			if (!canvas._chartjs) {
				return;
			}

			var initial = canvas._chartjs.initial;
			['height', 'width'].forEach(function(prop) {
				var value = initial[prop];
				if (value === undefined || value === null) {
					canvas.removeAttribute(prop);
				} else {
					canvas.setAttribute(prop, value);
				}
			});

			helpers.each(initial.style || {}, function(value, key) {
				canvas.style[key] = value;
			});

			delete canvas._chartjs;
		}

		/**
		 * TODO(SB) Move this method in the upcoming core.platform class.
		 */
		function acquireContext(item, config) {
			if (typeof item === 'string') {
				item = document.getElementById(item);
			} else if (item.length) {
				// Support for array based queries (such as jQuery)
				item = item[0];
			}

			if (item && item.canvas) {
				// Support for any object associated to a canvas (including a context2d)
				item = item.canvas;
			}

			if (item instanceof HTMLCanvasElement) {
				// To prevent canvas fingerprinting, some add-ons undefine the getContext
				// method, for example: https://github.com/kkapsner/CanvasBlocker
				// https://github.com/chartjs/Chart.js/issues/2807
				var context = item.getContext && item.getContext('2d');
				if (context instanceof CanvasRenderingContext2D) {
					initCanvas(item, config);
					return context;
				}
			}

			return null;
		}

		/**
		 * Initializes the given config with global and chart default values.
		 */
		function initConfig(config) {
			config = config || {};

			// Do NOT use configMerge() for the data object because this method merges arrays
			// and so would change references to labels and datasets, preventing data updates.
			var data = config.data = config.data || {};
			data.datasets = data.datasets || [];
			data.labels = data.labels || [];

			config.options = helpers.configMerge(
				Chart.defaults.global,
				Chart.defaults[config.type],
				config.options || {});

			return config;
		}

		/**
		 * @class Chart.Controller
		 * The main controller of a chart.
		 */
		Chart.Controller = function(item, config, instance) {
			var me = this;

			config = initConfig(config);

			var context = acquireContext(item, config);
			var canvas = context && context.canvas;
			var height = canvas && canvas.height;
			var width = canvas && canvas.width;

			instance.ctx = context;
			instance.canvas = canvas;
			instance.config = config;
			instance.width = width;
			instance.height = height;
			instance.aspectRatio = height? width / height : null;

			me.id = helpers.uid();
			me.chart = instance;
			me.config = config;
			me.options = config.options;
			me._bufferedRender = false;

			// Add the chart instance to the global namespace
			Chart.instances[me.id] = me;

			Object.defineProperty(me, 'data', {
				get: function() {
					return me.config.data;
				}
			});

			if (!context || !canvas) {
				// The given item is not a compatible context2d element, let's return before finalizing
				// the chart initialization but after setting basic chart / controller properties that
				// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
				// https://github.com/chartjs/Chart.js/issues/2807
				console.error("Failed to create chart: can't acquire context from the given item");
				return me;
			}

			helpers.retinaScale(instance);

			// Responsiveness is currently based on the use of an iframe, however this method causes
			// performance issues and could be troublesome when used with ad blockers. So make sure
			// that the user is still able to create a chart without iframe when responsive is false.
			// See https://github.com/chartjs/Chart.js/issues/2210
			if (me.options.responsive) {
				helpers.addResizeListener(canvas.parentNode, function() {
					me.resize();
				});

				// Initial resize before chart draws (must be silent to preserve initial animations).
				me.resize(true);
			}

			me.initialize();

			return me;
		};

		helpers.extend(Chart.Controller.prototype, /** @lends Chart.Controller */ {
			initialize: function() {
				var me = this;

				// Before init plugin notification
				Chart.plugins.notify('beforeInit', [me]);

				me.bindEvents();

				// Make sure controllers are built first so that each dataset is bound to an axis before the scales
				// are built
				me.ensureScalesHaveIDs();
				me.buildOrUpdateControllers();
				me.buildScales();
				me.updateLayout();
				me.resetElements();
				me.initToolTip();
				me.update();

				// After init plugin notification
				Chart.plugins.notify('afterInit', [me]);

				return me;
			},

			clear: function() {
				helpers.clear(this.chart);
				return this;
			},

			stop: function() {
				// Stops any current animation loop occuring
				Chart.animationService.cancelAnimation(this);
				return this;
			},

			resize: function(silent) {
				var me = this;
				var chart = me.chart;
				var options = me.options;
				var canvas = chart.canvas;
				var aspectRatio = (options.maintainAspectRatio && chart.aspectRatio) || null;

				// the canvas render width and height will be casted to integers so make sure that
				// the canvas display style uses the same integer values to avoid blurring effect.
				var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
				var newHeight = Math.floor(aspectRatio? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));

				if (chart.width === newWidth && chart.height === newHeight) {
					return;
				}

				canvas.width = chart.width = newWidth;
				canvas.height = chart.height = newHeight;

				helpers.retinaScale(chart);

				canvas.style.width = newWidth + 'px';
				canvas.style.height = newHeight + 'px';

				// Notify any plugins about the resize
				var newSize = {width: newWidth, height: newHeight};
				Chart.plugins.notify('resize', [me, newSize]);

				// Notify of resize
				if (me.options.onResize) {
					me.options.onResize(me, newSize);
				}

				if (!silent) {
					me.stop();
					me.update(me.options.responsiveAnimationDuration);
				}
			},

			ensureScalesHaveIDs: function() {
				var options = this.options;
				var scalesOptions = options.scales || {};
				var scaleOptions = options.scale;

				helpers.each(scalesOptions.xAxes, function(xAxisOptions, index) {
					xAxisOptions.id = xAxisOptions.id || ('x-axis-' + index);
				});

				helpers.each(scalesOptions.yAxes, function(yAxisOptions, index) {
					yAxisOptions.id = yAxisOptions.id || ('y-axis-' + index);
				});

				if (scaleOptions) {
					scaleOptions.id = scaleOptions.id || 'scale';
				}
			},

			/**
			 * Builds a map of scale ID to scale object for future lookup.
			 */
			buildScales: function() {
				var me = this;
				var options = me.options;
				var scales = me.scales = {};
				var items = [];

				if (options.scales) {
					items = items.concat(
						(options.scales.xAxes || []).map(function(xAxisOptions) {
							return {options: xAxisOptions, dtype: 'category'};
						}),
						(options.scales.yAxes || []).map(function(yAxisOptions) {
							return {options: yAxisOptions, dtype: 'linear'};
						})
					);
				}

				if (options.scale) {
					items.push({options: options.scale, dtype: 'radialLinear', isDefault: true});
				}

				helpers.each(items, function(item) {
					var scaleOptions = item.options;
					var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
					var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
					if (!scaleClass) {
						return;
					}

					var scale = new scaleClass({
						id: scaleOptions.id,
						options: scaleOptions,
						ctx: me.chart.ctx,
						chart: me
					});

					scales[scale.id] = scale;

					// TODO(SB): I think we should be able to remove this custom case (options.scale)
					// and consider it as a regular scale part of the "scales"" map only! This would
					// make the logic easier and remove some useless? custom code.
					if (item.isDefault) {
						me.scale = scale;
					}
				});

				Chart.scaleService.addScalesToLayout(this);
			},

			updateLayout: function() {
				Chart.layoutService.update(this, this.chart.width, this.chart.height);
			},

			buildOrUpdateControllers: function() {
				var me = this;
				var types = [];
				var newControllers = [];

				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					var meta = me.getDatasetMeta(datasetIndex);
					if (!meta.type) {
						meta.type = dataset.type || me.config.type;
					}

					types.push(meta.type);

					if (meta.controller) {
						meta.controller.updateIndex(datasetIndex);
					} else {
						meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
						newControllers.push(meta.controller);
					}
				}, me);

				if (types.length > 1) {
					for (var i = 1; i < types.length; i++) {
						if (types[i] !== types[i - 1]) {
							me.isCombo = true;
							break;
						}
					}
				}

				return newControllers;
			},

			/**
			 * Reset the elements of all datasets
			 * @method resetElements
			 * @private
			 */
			resetElements: function() {
				var me = this;
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.reset();
				}, me);
			},

			/**
			* Resets the chart back to it's state before the initial animation
			* @method reset
			*/
			reset: function() {
				this.resetElements();
				this.tooltip.initialize();
			},

			update: function(animationDuration, lazy) {
				var me = this;
				Chart.plugins.notify('beforeUpdate', [me]);

				// In case the entire data object changed
				me.tooltip._data = me.data;

				// Make sure dataset controllers are updated and new controllers are reset
				var newControllers = me.buildOrUpdateControllers();

				// Make sure all dataset controllers have correct meta data counts
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
				}, me);

				Chart.layoutService.update(me, me.chart.width, me.chart.height);

				// Apply changes to the dataets that require the scales to have been calculated i.e BorderColor chages
				Chart.plugins.notify('afterScaleUpdate', [me]);

				// Can only reset the new controllers after the scales have been updated
				helpers.each(newControllers, function(controller) {
					controller.reset();
				});

				me.updateDatasets();

				// Do this before render so that any plugins that need final scale updates can use it
				Chart.plugins.notify('afterUpdate', [me]);

				if (!me._bufferedRender) {
					me.render(animationDuration, lazy);
				}
			},

			/**
			 * @method beforeDatasetsUpdate
			 * @description Called before all datasets are updated. If a plugin returns false,
			 * the datasets update will be cancelled until another chart update is triggered.
			 * @param {Object} instance the chart instance being updated.
			 * @returns {Boolean} false to cancel the datasets update.
			 * @memberof Chart.PluginBase
			 * @since version 2.1.5
			 * @instance
			 */

			/**
			 * @method afterDatasetsUpdate
			 * @description Called after all datasets have been updated. Note that this
			 * extension will not be called if the datasets update has been cancelled.
			 * @param {Object} instance the chart instance being updated.
			 * @memberof Chart.PluginBase
			 * @since version 2.1.5
			 * @instance
			 */

			/**
			 * Updates all datasets unless a plugin returns false to the beforeDatasetsUpdate
			 * extension, in which case no datasets will be updated and the afterDatasetsUpdate
			 * notification will be skipped.
			 * @protected
			 * @instance
			 */
			updateDatasets: function() {
				var me = this;
				var i, ilen;

				if (Chart.plugins.notify('beforeDatasetsUpdate', [me])) {
					for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
						me.getDatasetMeta(i).controller.update();
					}

					Chart.plugins.notify('afterDatasetsUpdate', [me]);
				}
			},

			render: function(duration, lazy) {
				var me = this;
				Chart.plugins.notify('beforeRender', [me]);

				var animationOptions = me.options.animation;
				if (animationOptions && ((typeof duration !== 'undefined' && duration !== 0) || (typeof duration === 'undefined' && animationOptions.duration !== 0))) {
					var animation = new Chart.Animation();
					animation.numSteps = (duration || animationOptions.duration) / 16.66; // 60 fps
					animation.easing = animationOptions.easing;

					// render function
					animation.render = function(chartInstance, animationObject) {
						var easingFunction = helpers.easingEffects[animationObject.easing];
						var stepDecimal = animationObject.currentStep / animationObject.numSteps;
						var easeDecimal = easingFunction(stepDecimal);

						chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
					};

					// user events
					animation.onAnimationProgress = animationOptions.onProgress;
					animation.onAnimationComplete = animationOptions.onComplete;

					Chart.animationService.addAnimation(me, animation, duration, lazy);
				} else {
					me.draw();
					if (animationOptions && animationOptions.onComplete && animationOptions.onComplete.call) {
						animationOptions.onComplete.call(me);
					}
				}
				return me;
			},

			draw: function(ease) {
				var me = this;
				var easingDecimal = ease || 1;
				me.clear();

				Chart.plugins.notify('beforeDraw', [me, easingDecimal]);

				// Draw all the scales
				helpers.each(me.boxes, function(box) {
					box.draw(me.chartArea);
				}, me);
				if (me.scale) {
					me.scale.draw();
				}

				Chart.plugins.notify('beforeDatasetsDraw', [me, easingDecimal]);

				// Draw each dataset via its respective controller (reversed to support proper line stacking)
				helpers.each(me.data.datasets, function(dataset, datasetIndex) {
					if (me.isDatasetVisible(datasetIndex)) {
						me.getDatasetMeta(datasetIndex).controller.draw(ease);
					}
				}, me, true);

				Chart.plugins.notify('afterDatasetsDraw', [me, easingDecimal]);

				// Finally draw the tooltip
				me.tooltip.transition(easingDecimal).draw();

				Chart.plugins.notify('afterDraw', [me, easingDecimal]);
			},

			// Get the single element that was clicked on
			// @return : An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
			getElementAtEvent: function(e) {
				return Chart.Interaction.modes.single(this, e);
			},

			getElementsAtEvent: function(e) {
				return Chart.Interaction.modes.label(this, e, {intersect: true});
			},

			getElementsAtXAxis: function(e) {
				return Chart.Interaction.modes['x-axis'](this, e, {intersect: true});
			},

			getElementsAtEventForMode: function(e, mode, options) {
				var method = Chart.Interaction.modes[mode];
				if (typeof method === 'function') {
					return method(this, e, options);
				}

				return [];
			},

			getDatasetAtEvent: function(e) {
				return Chart.Interaction.modes.dataset(this, e);
			},

			getDatasetMeta: function(datasetIndex) {
				var me = this;
				var dataset = me.data.datasets[datasetIndex];
				if (!dataset._meta) {
					dataset._meta = {};
				}

				var meta = dataset._meta[me.id];
				if (!meta) {
					meta = dataset._meta[me.id] = {
						type: null,
						data: [],
						dataset: null,
						controller: null,
						hidden: null,			// See isDatasetVisible() comment
						xAxisID: null,
						yAxisID: null
					};
				}

				return meta;
			},

			getVisibleDatasetCount: function() {
				var count = 0;
				for (var i = 0, ilen = this.data.datasets.length; i<ilen; ++i) {
					if (this.isDatasetVisible(i)) {
						count++;
					}
				}
				return count;
			},

			isDatasetVisible: function(datasetIndex) {
				var meta = this.getDatasetMeta(datasetIndex);

				// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
				// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
				return typeof meta.hidden === 'boolean'? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
			},

			generateLegend: function() {
				return this.options.legendCallback(this);
			},

			destroy: function() {
				var me = this;
				var canvas = me.chart.canvas;
				var meta, i, ilen;

				me.stop();

				// dataset controllers need to cleanup associated data
				for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
					meta = me.getDatasetMeta(i);
					if (meta.controller) {
						meta.controller.destroy();
						meta.controller = null;
					}
				}

				if (canvas) {
					helpers.unbindEvents(me, me.events);
					helpers.removeResizeListener(canvas.parentNode);
					helpers.clear(me.chart);
					releaseCanvas(canvas);
					me.chart.canvas = null;
					me.chart.ctx = null;
				}

				// if we scaled the canvas in response to a devicePixelRatio !== 1, we need to undo that transform here
				if (me.chart.originalDevicePixelRatio !== undefined) {
					me.chart.ctx.scale(1 / me.chart.originalDevicePixelRatio, 1 / me.chart.originalDevicePixelRatio);
				}

				Chart.plugins.notify('destroy', [me]);

				delete Chart.instances[me.id];
			},

			toBase64Image: function() {
				return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
			},

			initToolTip: function() {
				var me = this;
				me.tooltip = new Chart.Tooltip({
					_chart: me.chart,
					_chartInstance: me,
					_data: me.data,
					_options: me.options.tooltips
				}, me);
				me.tooltip.initialize();
			},

			bindEvents: function() {
				var me = this;
				helpers.bindEvents(me, me.options.events, function(evt) {
					me.eventHandler(evt);
				});
			},

			updateHoverStyle: function(elements, mode, enabled) {
				var method = enabled? 'setHoverStyle' : 'removeHoverStyle';
				var element, i, ilen;

				for (i=0, ilen=elements.length; i<ilen; ++i) {
					element = elements[i];
					if (element) {
						this.getDatasetMeta(element._datasetIndex).controller[method](element);
					}
				}
			},

			eventHandler: function(e) {
				var me = this;
				var hoverOptions = me.options.hover;

				// Buffer any update calls so that renders do not occur
				me._bufferedRender = true;

				var changed = me.handleEvent(e);
				changed |= me.legend.handleEvent(e);
				changed |= me.tooltip.handleEvent(e);

				if (changed && !me.animating) {
					// If entering, leaving, or changing elements, animate the change via pivot
					me.stop();

					// We only need to render at this point. Updating will cause scales to be
					// recomputed generating flicker & using more memory than necessary.
					me.render(hoverOptions.animationDuration, true);
				}

				me._bufferedRender = false;
				return me;
			},

			/**
			 * Handle an event
			 * @private
			 * param e {Event} the event to handle
			 * @return {Boolean} true if the chart needs to re-render
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me.options || {};
				var hoverOptions = options.hover;
				var changed = false;

				me.lastActive = me.lastActive || [];

				// Find Active Elements for hover and tooltips
				if (e.type === 'mouseout') {
					me.active = [];
				} else {
					me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
				}

				// On Hover hook
				if (hoverOptions.onHover) {
					hoverOptions.onHover.call(me, me.active);
				}

				if (e.type === 'mouseup' || e.type === 'click') {
					if (options.onClick) {
						options.onClick.call(me, e, me.active);
					}
				}

				// Remove styling for last active (even if it may still be active)
				if (me.lastActive.length) {
					me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
				}

				// Built in hover styling
				if (me.active.length && hoverOptions.mode) {
					me.updateHoverStyle(me.active, hoverOptions.mode, true);
				}

				changed = !helpers.arrayEquals(me.active, me.lastActive);

				// Remember Last Actives
				me.lastActive = me.active;

				return changed;
			}
		});
	};


/***/ },
/* 187 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

		/**
		 * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
		 * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
		 * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
		 */
		function listenArrayEvents(array, listener) {
			if (array._chartjs) {
				array._chartjs.listeners.push(listener);
				return;
			}

			Object.defineProperty(array, '_chartjs', {
				configurable: true,
				enumerable: false,
				value: {
					listeners: [listener]
				}
			});

			arrayEvents.forEach(function(key) {
				var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
				var base = array[key];

				Object.defineProperty(array, key, {
					configurable: true,
					enumerable: false,
					value: function() {
						var args = Array.prototype.slice.call(arguments);
						var res = base.apply(this, args);

						helpers.each(array._chartjs.listeners, function(object) {
							if (typeof object[method] === 'function') {
								object[method].apply(object, args);
							}
						});

						return res;
					}
				});
			});
		}

		/**
		 * Removes the given array event listener and cleanup extra attached properties (such as
		 * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
		 */
		function unlistenArrayEvents(array, listener) {
			var stub = array._chartjs;
			if (!stub) {
				return;
			}

			var listeners = stub.listeners;
			var index = listeners.indexOf(listener);
			if (index !== -1) {
				listeners.splice(index, 1);
			}

			if (listeners.length > 0) {
				return;
			}

			arrayEvents.forEach(function(key) {
				delete array[key];
			});

			delete array._chartjs;
		}

		// Base class for all dataset controllers (line, bar, etc)
		Chart.DatasetController = function(chart, datasetIndex) {
			this.initialize(chart, datasetIndex);
		};

		helpers.extend(Chart.DatasetController.prototype, {

			/**
			 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
			 * @type {Chart.core.element}
			 */
			datasetElementType: null,

			/**
			 * Element type used to generate a meta data (e.g. Chart.element.Point).
			 * @type {Chart.core.element}
			 */
			dataElementType: null,

			initialize: function(chart, datasetIndex) {
				var me = this;
				me.chart = chart;
				me.index = datasetIndex;
				me.linkScales();
				me.addElements();
			},

			updateIndex: function(datasetIndex) {
				this.index = datasetIndex;
			},

			linkScales: function() {
				var me = this;
				var meta = me.getMeta();
				var dataset = me.getDataset();

				if (meta.xAxisID === null) {
					meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
				}
				if (meta.yAxisID === null) {
					meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
				}
			},

			getDataset: function() {
				return this.chart.data.datasets[this.index];
			},

			getMeta: function() {
				return this.chart.getDatasetMeta(this.index);
			},

			getScaleForId: function(scaleID) {
				return this.chart.scales[scaleID];
			},

			reset: function() {
				this.update(true);
			},

			/**
			 * @private
			 */
			destroy: function() {
				if (this._data) {
					unlistenArrayEvents(this._data, this);
				}
			},

			createMetaDataset: function() {
				var me = this;
				var type = me.datasetElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index
				});
			},

			createMetaData: function(index) {
				var me = this;
				var type = me.dataElementType;
				return type && new type({
					_chart: me.chart.chart,
					_datasetIndex: me.index,
					_index: index
				});
			},

			addElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data || [];
				var metaData = meta.data;
				var i, ilen;

				for (i=0, ilen=data.length; i<ilen; ++i) {
					metaData[i] = metaData[i] || me.createMetaData(i);
				}

				meta.dataset = meta.dataset || me.createMetaDataset();
			},

			addElementAndReset: function(index) {
				var element = this.createMetaData(index);
				this.getMeta().data.splice(index, 0, element);
				this.updateElement(element, index, true);
			},

			buildOrUpdateElements: function() {
				var me = this;
				var dataset = me.getDataset();
				var data = dataset.data || (dataset.data = []);

				// In order to correctly handle data addition/deletion animation (an thus simulate
				// real-time charts), we need to monitor these data modifications and synchronize
				// the internal meta data accordingly.
				if (me._data !== data) {
					if (me._data) {
						// This case happens when the user replaced the data array instance.
						unlistenArrayEvents(me._data, me);
					}

					listenArrayEvents(data, me);
					me._data = data;
				}

				// Re-sync meta data in case the user replaced the data array or if we missed
				// any updates and so make sure that we handle number of datapoints changing.
				me.resyncElements();
			},

			update: helpers.noop,

			draw: function(ease) {
				var easingDecimal = ease || 1;
				var i, len;
				var metaData = this.getMeta().data;
				for (i = 0, len = metaData.length; i < len; ++i) {
					metaData[i].transition(easingDecimal).draw();
				}
			},

			removeHoverStyle: function(element, elementOpts) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					model = element._model;

				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
			},

			setHoverStyle: function(element) {
				var dataset = this.chart.data.datasets[element._datasetIndex],
					index = element._index,
					custom = element.custom || {},
					valueOrDefault = helpers.getValueAtIndexOrDefault,
					getHoverColor = helpers.getHoverColor,
					model = element._model;

				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},

			/**
			 * @private
			 */
			resyncElements: function() {
				var me = this;
				var meta = me.getMeta();
				var data = me.getDataset().data;
				var numMeta = meta.data.length;
				var numData = data.length;

				if (numData < numMeta) {
					meta.data.splice(numData, numMeta - numData);
				} else if (numData > numMeta) {
					me.insertElements(numMeta, numData - numMeta);
				}
			},

			/**
			 * @private
			 */
			insertElements: function(start, count) {
				for (var i=0; i<count; ++i) {
					this.addElementAndReset(start + i);
				}
			},

			/**
			 * @private
			 */
			onDataPush: function() {
				this.insertElements(this.getDataset().data.length-1, arguments.length);
			},

			/**
			 * @private
			 */
			onDataPop: function() {
				this.getMeta().data.pop();
			},

			/**
			 * @private
			 */
			onDataShift: function() {
				this.getMeta().data.shift();
			},

			/**
			 * @private
			 */
			onDataSplice: function(start, count) {
				this.getMeta().data.splice(start, count);
				this.insertElements(start, arguments.length - 2);
			},

			/**
			 * @private
			 */
			onDataUnshift: function() {
				this.insertElements(0, arguments.length);
			}
		});

		Chart.DatasetController.extend = helpers.inherits;
	};


/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		// The layout service is very self explanatory.  It's responsible for the layout within a chart.
		// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
		// It is this service's responsibility of carrying out that layout.
		Chart.layoutService = {
			defaults: {},

			// Register a box to a chartInstance. A box is simply a reference to an object that requires layout. eg. Scales, Legend, Plugins.
			addBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					chartInstance.boxes = [];
				}
				chartInstance.boxes.push(box);
			},

			removeBox: function(chartInstance, box) {
				if (!chartInstance.boxes) {
					return;
				}
				chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
			},

			// The most important function
			update: function(chartInstance, width, height) {

				if (!chartInstance) {
					return;
				}

				var layoutOptions = chartInstance.options.layout;
				var padding = layoutOptions ? layoutOptions.padding : null;

				var leftPadding = 0;
				var rightPadding = 0;
				var topPadding = 0;
				var bottomPadding = 0;

				if (!isNaN(padding)) {
					// options.layout.padding is a number. assign to all
					leftPadding = padding;
					rightPadding = padding;
					topPadding = padding;
					bottomPadding = padding;
				} else {
					leftPadding = padding.left || 0;
					rightPadding = padding.right || 0;
					topPadding = padding.top || 0;
					bottomPadding = padding.bottom || 0;
				}

				var leftBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'left';
				});
				var rightBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'right';
				});
				var topBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'top';
				});
				var bottomBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'bottom';
				});

				// Boxes that overlay the chartarea such as the radialLinear scale
				var chartAreaBoxes = helpers.where(chartInstance.boxes, function(box) {
					return box.options.position === 'chartArea';
				});

				// Ensure that full width boxes are at the very top / bottom
				topBoxes.sort(function(a, b) {
					return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
				});
				bottomBoxes.sort(function(a, b) {
					return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
				});

				// Essentially we now have any number of boxes on each of the 4 sides.
				// Our canvas looks like the following.
				// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
				// B1 is the bottom axis
				// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
				// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
				// an error will be thrown.
				//
				// |----------------------------------------------------|
				// |                  T1 (Full Width)                   |
				// |----------------------------------------------------|
				// |    |    |                 T2                  |    |
				// |    |----|-------------------------------------|----|
				// |    |    | C1 |                           | C2 |    |
				// |    |    |----|                           |----|    |
				// |    |    |                                     |    |
				// | L1 | L2 |           ChartArea (C0)            | R1 |
				// |    |    |                                     |    |
				// |    |    |----|                           |----|    |
				// |    |    | C3 |                           | C4 |    |
				// |    |----|-------------------------------------|----|
				// |    |    |                 B1                  |    |
				// |----------------------------------------------------|
				// |                  B2 (Full Width)                   |
				// |----------------------------------------------------|
				//
				// What we do to find the best sizing, we do the following
				// 1. Determine the minimum size of the chart area.
				// 2. Split the remaining width equally between each vertical axis
				// 3. Split the remaining height equally between each horizontal axis
				// 4. Give each layout the maximum size it can be. The layout will return it's minimum size
				// 5. Adjust the sizes of each axis based on it's minimum reported size.
				// 6. Refit each axis
				// 7. Position each axis in the final location
				// 8. Tell the chart the final location of the chart area
				// 9. Tell any axes that overlay the chart area the positions of the chart area

				// Step 1
				var chartWidth = width - leftPadding - rightPadding;
				var chartHeight = height - topPadding - bottomPadding;
				var chartAreaWidth = chartWidth / 2; // min 50%
				var chartAreaHeight = chartHeight / 2; // min 50%

				// Step 2
				var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);

				// Step 3
				var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);

				// Step 4
				var maxChartAreaWidth = chartWidth;
				var maxChartAreaHeight = chartHeight;
				var minBoxSizes = [];

				function getMinimumBoxSize(box) {
					var minSize;
					var isHorizontal = box.isHorizontal();

					if (isHorizontal) {
						minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
						maxChartAreaHeight -= minSize.height;
					} else {
						minSize = box.update(verticalBoxWidth, chartAreaHeight);
						maxChartAreaWidth -= minSize.width;
					}

					minBoxSizes.push({
						horizontal: isHorizontal,
						minSize: minSize,
						box: box
					});
				}

				helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);

				// At this point, maxChartAreaHeight and maxChartAreaWidth are the size the chart area could
				// be if the axes are drawn at their minimum sizes.

				// Steps 5 & 6
				var totalLeftBoxesWidth = leftPadding;
				var totalRightBoxesWidth = rightPadding;
				var totalTopBoxesHeight = topPadding;
				var totalBottomBoxesHeight = bottomPadding;

				// Function to fit a box
				function fitBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minBox) {
						return minBox.box === box;
					});

					if (minBoxSize) {
						if (box.isHorizontal()) {
							var scaleMargin = {
								left: totalLeftBoxesWidth,
								right: totalRightBoxesWidth,
								top: 0,
								bottom: 0
							};

							// Don't use min size here because of label rotation. When the labels are rotated, their rotation highly depends
							// on the margin. Sometimes they need to increase in size slightly
							box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
						} else {
							box.update(minBoxSize.minSize.width, maxChartAreaHeight);
						}
					}
				}

				// Update, and calculate the left and right margins for the horizontal boxes
				helpers.each(leftBoxes.concat(rightBoxes), fitBox);

				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});

				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});

				// Set the Left and Right margins for the horizontal boxes
				helpers.each(topBoxes.concat(bottomBoxes), fitBox);

				// Figure out how much margin is on the top and bottom of the vertical boxes
				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});

				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});

				function finalFitVerticalBox(box) {
					var minBoxSize = helpers.findNextWhere(minBoxSizes, function(minSize) {
						return minSize.box === box;
					});

					var scaleMargin = {
						left: 0,
						right: 0,
						top: totalTopBoxesHeight,
						bottom: totalBottomBoxesHeight
					};

					if (minBoxSize) {
						box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
					}
				}

				// Let the left layout know the final margin
				helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);

				// Recalculate because the size of each layout might have changed slightly due to the margins (label rotation for instance)
				totalLeftBoxesWidth = leftPadding;
				totalRightBoxesWidth = rightPadding;
				totalTopBoxesHeight = topPadding;
				totalBottomBoxesHeight = bottomPadding;

				helpers.each(leftBoxes, function(box) {
					totalLeftBoxesWidth += box.width;
				});

				helpers.each(rightBoxes, function(box) {
					totalRightBoxesWidth += box.width;
				});

				helpers.each(topBoxes, function(box) {
					totalTopBoxesHeight += box.height;
				});
				helpers.each(bottomBoxes, function(box) {
					totalBottomBoxesHeight += box.height;
				});

				// Figure out if our chart area changed. This would occur if the dataset layout label rotation
				// changed due to the application of the margins in step 6. Since we can only get bigger, this is safe to do
				// without calling `fit` again
				var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
				var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;

				if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
					helpers.each(leftBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});

					helpers.each(rightBoxes, function(box) {
						box.height = newMaxChartAreaHeight;
					});

					helpers.each(topBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});

					helpers.each(bottomBoxes, function(box) {
						if (!box.options.fullWidth) {
							box.width = newMaxChartAreaWidth;
						}
					});

					maxChartAreaHeight = newMaxChartAreaHeight;
					maxChartAreaWidth = newMaxChartAreaWidth;
				}

				// Step 7 - Position the boxes
				var left = leftPadding;
				var top = topPadding;

				function placeBox(box) {
					if (box.isHorizontal()) {
						box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
						box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
						box.top = top;
						box.bottom = top + box.height;

						// Move to next point
						top = box.bottom;

					} else {

						box.left = left;
						box.right = left + box.width;
						box.top = totalTopBoxesHeight;
						box.bottom = totalTopBoxesHeight + maxChartAreaHeight;

						// Move to next point
						left = box.right;
					}
				}

				helpers.each(leftBoxes.concat(topBoxes), placeBox);

				// Account for chart width and height
				left += maxChartAreaWidth;
				top += maxChartAreaHeight;

				helpers.each(rightBoxes, placeBox);
				helpers.each(bottomBoxes, placeBox);

				// Step 8
				chartInstance.chartArea = {
					left: totalLeftBoxesWidth,
					top: totalTopBoxesHeight,
					right: totalLeftBoxesWidth + maxChartAreaWidth,
					bottom: totalTopBoxesHeight + maxChartAreaHeight
				};

				// Step 9
				helpers.each(chartAreaBoxes, function(box) {
					box.left = chartInstance.chartArea.left;
					box.top = chartInstance.chartArea.top;
					box.right = chartInstance.chartArea.right;
					box.bottom = chartInstance.chartArea.bottom;

					box.update(maxChartAreaWidth, maxChartAreaHeight);
				});
			}
		};
	};


/***/ },
/* 189 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.scaleService = {
			// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
			// use the new chart options to grab the correct scale
			constructors: {},
			// Use a registration function so that we can move to an ES6 map when we no longer need to support
			// old browsers

			// Scale config defaults
			defaults: {},
			registerScaleType: function(type, scaleConstructor, defaults) {
				this.constructors[type] = scaleConstructor;
				this.defaults[type] = helpers.clone(defaults);
			},
			getScaleConstructor: function(type) {
				return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
			},
			getScaleDefaults: function(type) {
				// Return the scale defaults merged with the global settings so that we always use the latest ones
				return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
			},
			updateScaleDefaults: function(type, additions) {
				var defaults = this.defaults;
				if (defaults.hasOwnProperty(type)) {
					defaults[type] = helpers.extend(defaults[type], additions);
				}
			},
			addScalesToLayout: function(chartInstance) {
				// Adds each scale to the chart.boxes array to be sized accordingly
				helpers.each(chartInstance.scales, function(scale) {
					Chart.layoutService.addBox(chartInstance, scale);
				});
			}
		};
	};


/***/ },
/* 190 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var noop = Chart.helpers.noop;

		/**
		 * The plugin service singleton
		 * @namespace Chart.plugins
		 * @since 2.1.0
		 */
		Chart.plugins = {
			_plugins: [],

			/**
			 * Registers the given plugin(s) if not already registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			register: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					if (p.indexOf(plugin) === -1) {
						p.push(plugin);
					}
				});
			},

			/**
			 * Unregisters the given plugin(s) only if registered.
			 * @param {Array|Object} plugins plugin instance(s).
			 */
			unregister: function(plugins) {
				var p = this._plugins;
				([]).concat(plugins).forEach(function(plugin) {
					var idx = p.indexOf(plugin);
					if (idx !== -1) {
						p.splice(idx, 1);
					}
				});
			},

			/**
			 * Remove all registered p^lugins.
			 * @since 2.1.5
			 */
			clear: function() {
				this._plugins = [];
			},

			/**
			 * Returns the number of registered plugins?
			 * @returns {Number}
			 * @since 2.1.5
			 */
			count: function() {
				return this._plugins.length;
			},

			/**
			 * Returns all registered plugin intances.
			 * @returns {Array} array of plugin objects.
			 * @since 2.1.5
			 */
			getAll: function() {
				return this._plugins;
			},

			/**
			 * Calls registered plugins on the specified extension, with the given args. This
			 * method immediately returns as soon as a plugin explicitly returns false. The
			 * returned value can be used, for instance, to interrupt the current action.
			 * @param {String} extension the name of the plugin method to call (e.g. 'beforeUpdate').
			 * @param {Array} [args] extra arguments to apply to the extension call.
			 * @returns {Boolean} false if any of the plugins return false, else returns true.
			 */
			notify: function(extension, args) {
				var plugins = this._plugins;
				var ilen = plugins.length;
				var i, plugin;

				for (i=0; i<ilen; ++i) {
					plugin = plugins[i];
					if (typeof plugin[extension] === 'function') {
						if (plugin[extension].apply(plugin, args || []) === false) {
							return false;
						}
					}
				}

				return true;
			}
		};

		/**
		 * Plugin extension methods.
		 * @interface Chart.PluginBase
		 * @since 2.1.0
		 */
		Chart.PluginBase = Chart.Element.extend({
			// Called at start of chart init
			beforeInit: noop,

			// Called at end of chart init
			afterInit: noop,

			// Called at start of update
			beforeUpdate: noop,

			// Called at end of update
			afterUpdate: noop,

			// Called at start of draw
			beforeDraw: noop,

			// Called at end of draw
			afterDraw: noop,

			// Called during destroy
			destroy: noop
		});

		/**
		 * Provided for backward compatibility, use Chart.plugins instead
		 * @namespace Chart.pluginService
		 * @deprecated since version 2.1.5
		 * @todo remove me at version 3
		 */
		Chart.pluginService = Chart.plugins;
	};


/***/ },
/* 191 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		/**
		 * Namespace to hold static tick generation functions
		 * @namespace Chart.Ticks
		 */
		Chart.Ticks = {
			/**
			 * Namespace to hold generators for different types of ticks
			 * @namespace Chart.Ticks.generators
			 */
			generators: {
				/**
				 * Interface for the options provided to the numeric tick generator
				 * @interface INumericTickGenerationOptions
				 */
				/**
				 * The maximum number of ticks to display
				 * @name INumericTickGenerationOptions#maxTicks
				 * @type Number
				 */
				/**
				 * The distance between each tick.
				 * @name INumericTickGenerationOptions#stepSize
				 * @type Number
				 * @optional
				 */
				/**
				 * Forced minimum for the ticks. If not specified, the minimum of the data range is used to calculate the tick minimum
				 * @name INumericTickGenerationOptions#min
				 * @type Number
				 * @optional
				 */
				/**
				 * The maximum value of the ticks. If not specified, the maximum of the data range is used to calculate the tick maximum
				 * @name INumericTickGenerationOptions#max
				 * @type Number
				 * @optional
				 */

				/**
				 * Generate a set of linear ticks
				 * @method Chart.Ticks.generators.linear
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				linear: function(generationOptions, dataRange) {
					var ticks = [];
					// To get a "nice" value for the tick spacing, we will use the appropriately named
					// "nice number" algorithm. See http://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
					// for details.

					var spacing;
					if (generationOptions.stepSize && generationOptions.stepSize > 0) {
						spacing = generationOptions.stepSize;
					} else {
						var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
						spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
					}
					var niceMin = Math.floor(dataRange.min / spacing) * spacing;
					var niceMax = Math.ceil(dataRange.max / spacing) * spacing;

					// If min, max and stepSize is set and they make an evenly spaced scale use it.
					if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
						var minMaxDeltaDivisableByStepSize = ((generationOptions.max - generationOptions.min) % generationOptions.stepSize) === 0;
						if (minMaxDeltaDivisableByStepSize) {
							niceMin = generationOptions.min;
							niceMax = generationOptions.max;
						}
					}

					var numSpaces = (niceMax - niceMin) / spacing;
					// If very close to our rounded value, use it.
					if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
						numSpaces = Math.round(numSpaces);
					} else {
						numSpaces = Math.ceil(numSpaces);
					}

					// Put the values into the ticks array
					ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
					for (var j = 1; j < numSpaces; ++j) {
						ticks.push(niceMin + (j * spacing));
					}
					ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);

					return ticks;
				},

				/**
				 * Generate a set of logarithmic ticks
				 * @method Chart.Ticks.generators.logarithmic
				 * @param generationOptions {INumericTickGenerationOptions} the options used to generate the ticks
				 * @param dataRange {IRange} the range of the data
				 * @returns {Array<Number>} array of tick values
				 */
				logarithmic: function(generationOptions, dataRange) {
					var ticks = [];
					var getValueOrDefault = helpers.getValueOrDefault;

					// Figure out what the max number of ticks we can support it is based on the size of
					// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
					// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
					// the graph
					var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));

					while (tickVal < dataRange.max) {
						ticks.push(tickVal);

						var exp;
						var significand;

						if (tickVal === 0) {
							exp = Math.floor(helpers.log10(dataRange.minNotZero));
							significand = Math.round(dataRange.minNotZero / Math.pow(10, exp));
						} else {
							exp = Math.floor(helpers.log10(tickVal));
							significand = Math.floor(tickVal / Math.pow(10, exp)) + 1;
						}

						if (significand === 10) {
							significand = 1;
							++exp;
						}

						tickVal = significand * Math.pow(10, exp);
					}

					var lastTick = getValueOrDefault(generationOptions.max, tickVal);
					ticks.push(lastTick);

					return ticks;
				}
			},

			/**
			 * Namespace to hold formatters for different types of ticks
			 * @namespace Chart.Ticks.formatters
			 */
			formatters: {
				/**
				 * Formatter for value labels
				 * @method Chart.Ticks.formatters.values
				 * @param value the value to display
				 * @return {String|Array} the label to display
				 */
				values: function(value) {
					return helpers.isArray(value) ? value : '' + value;
				},

				/**
				 * Formatter for linear numeric ticks
				 * @method Chart.Ticks.formatters.linear
				 * @param tickValue {Number} the value to be formatted
				 * @param index {Number} the position of the tickValue parameter in the ticks array
				 * @param ticks {Array<Number>} the list of ticks being converted
				 * @return {String} string representation of the tickValue parameter
				 */
				linear: function(tickValue, index, ticks) {
					// If we have lots of ticks, don't use the ones
					var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

					// If we have a number like 2.5 as the delta, figure out how many decimal places we need
					if (Math.abs(delta) > 1) {
						if (tickValue !== Math.floor(tickValue)) {
							// not an integer
							delta = tickValue - Math.floor(tickValue);
						}
					}

					var logDelta = helpers.log10(Math.abs(delta));
					var tickString = '';

					if (tickValue !== 0) {
						var numDecimal = -1 * Math.floor(logDelta);
						numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
						tickString = tickValue.toFixed(numDecimal);
					} else {
						tickString = '0'; // never show decimal places for 0
					}

					return tickString;
				},

				logarithmic: function(tickValue, index, ticks) {
					var remain = tickValue / (Math.pow(10, Math.floor(helpers.log10(tickValue))));

					if (tickValue === 0) {
						return '0';
					} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
						return tickValue.toExponential();
					}
					return '';
				}
			}
		};
	};


/***/ },
/* 192 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.scale = {
			display: true,
			position: 'left',

			// grid line settings
			gridLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1,
				drawBorder: true,
				drawOnChartArea: true,
				drawTicks: true,
				tickMarkLength: 10,
				zeroLineWidth: 1,
				zeroLineColor: 'rgba(0,0,0,0.25)',
				offsetGridLines: false,
				borderDash: [],
				borderDashOffset: 0.0
			},

			// scale label
			scaleLabel: {
				// actual label
				labelString: '',

				// display property
				display: false
			},

			// label settings
			ticks: {
				beginAtZero: false,
				minRotation: 0,
				maxRotation: 50,
				mirror: false,
				padding: 10,
				reverse: false,
				display: true,
				autoSkip: true,
				autoSkipPadding: 0,
				labelOffset: 0,
				// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
				callback: Chart.Ticks.formatters.values
			}
		};

		Chart.Scale = Chart.Element.extend({

			// These methods are ordered by lifecyle. Utilities then follow.
			// Any function defined here is inherited by all scale types.
			// Any function can be extended by the scale type

			beforeUpdate: function() {
				helpers.callCallback(this.options.beforeUpdate, [this]);
			},
			update: function(maxWidth, maxHeight, margins) {
				var me = this;

				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();

				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = helpers.extend({
					left: 0,
					right: 0,
					top: 0,
					bottom: 0
				}, margins);

				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();

				// Data min/max
				me.beforeDataLimits();
				me.determineDataLimits();
				me.afterDataLimits();

				// Ticks
				me.beforeBuildTicks();
				me.buildTicks();
				me.afterBuildTicks();

				me.beforeTickToLabelConversion();
				me.convertTicksToLabels();
				me.afterTickToLabelConversion();

				// Tick Rotation
				me.beforeCalculateTickRotation();
				me.calculateTickRotation();
				me.afterCalculateTickRotation();
				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();

				return me.minSize;

			},
			afterUpdate: function() {
				helpers.callCallback(this.options.afterUpdate, [this]);
			},

			//

			beforeSetDimensions: function() {
				helpers.callCallback(this.options.beforeSetDimensions, [this]);
			},
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;

					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}

				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;
			},
			afterSetDimensions: function() {
				helpers.callCallback(this.options.afterSetDimensions, [this]);
			},

			// Data limits
			beforeDataLimits: function() {
				helpers.callCallback(this.options.beforeDataLimits, [this]);
			},
			determineDataLimits: helpers.noop,
			afterDataLimits: function() {
				helpers.callCallback(this.options.afterDataLimits, [this]);
			},

			//
			beforeBuildTicks: function() {
				helpers.callCallback(this.options.beforeBuildTicks, [this]);
			},
			buildTicks: helpers.noop,
			afterBuildTicks: function() {
				helpers.callCallback(this.options.afterBuildTicks, [this]);
			},

			beforeTickToLabelConversion: function() {
				helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
			},
			convertTicksToLabels: function() {
				var me = this;
				// Convert ticks to strings
				var tickOpts = me.options.ticks;
				me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
			},
			afterTickToLabelConversion: function() {
				helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
			},

			//

			beforeCalculateTickRotation: function() {
				helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
			},
			calculateTickRotation: function() {
				var me = this;
				var context = me.ctx;
				var globalDefaults = Chart.defaults.global;
				var optionTicks = me.options.ticks;

				// Get the width of each grid by calculating the difference
				// between x offsets between 0 and 1.
				var tickFontSize = helpers.getValueOrDefault(optionTicks.fontSize, globalDefaults.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(optionTicks.fontStyle, globalDefaults.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(optionTicks.fontFamily, globalDefaults.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				context.font = tickLabelFont;

				var firstWidth = context.measureText(me.ticks[0]).width;
				var lastWidth = context.measureText(me.ticks[me.ticks.length - 1]).width;
				var firstRotated;

				me.labelRotation = optionTicks.minRotation || 0;
				me.paddingRight = 0;
				me.paddingLeft = 0;

				if (me.options.display) {
					if (me.isHorizontal()) {
						me.paddingRight = lastWidth / 2 + 3;
						me.paddingLeft = firstWidth / 2 + 3;

						if (!me.longestTextCache) {
							me.longestTextCache = {};
						}
						var originalLabelWidth = helpers.longestText(context, tickLabelFont, me.ticks, me.longestTextCache);
						var labelWidth = originalLabelWidth;
						var cosRotation;
						var sinRotation;

						// Allow 3 pixels x2 padding either side for label readability
						// only the index matters for a dataset scale, but we want a consistent interface between scales
						var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;

						// Max label rotation can be set or default to 90 - also act as a loop counter
						while (labelWidth > tickWidth && me.labelRotation < optionTicks.maxRotation) {
							cosRotation = Math.cos(helpers.toRadians(me.labelRotation));
							sinRotation = Math.sin(helpers.toRadians(me.labelRotation));

							firstRotated = cosRotation * firstWidth;

							// We're right aligning the text now.
							if (firstRotated + tickFontSize / 2 > me.yLabelWidth) {
								me.paddingLeft = firstRotated + tickFontSize / 2;
							}

							me.paddingRight = tickFontSize / 2;

							if (sinRotation * originalLabelWidth > me.maxHeight) {
								// go back one step
								me.labelRotation--;
								break;
							}

							me.labelRotation++;
							labelWidth = cosRotation * originalLabelWidth;
						}
					}
				}

				if (me.margins) {
					me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
					me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
				}
			},
			afterCalculateTickRotation: function() {
				helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
			},

			//

			beforeFit: function() {
				helpers.callCallback(this.options.beforeFit, [this]);
			},
			fit: function() {
				var me = this;
				// Reset
				var minSize = me.minSize = {
					width: 0,
					height: 0
				};

				var opts = me.options;
				var globalDefaults = Chart.defaults.global;
				var tickOpts = opts.ticks;
				var scaleLabelOpts = opts.scaleLabel;
				var gridLineOpts = opts.gridLines;
				var display = opts.display;
				var isHorizontal = me.isHorizontal();

				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);

				var scaleLabelFontSize = helpers.getValueOrDefault(scaleLabelOpts.fontSize, globalDefaults.defaultFontSize);

				var tickMarkLength = opts.gridLines.tickMarkLength;

				// Width
				if (isHorizontal) {
					// subtract the margins to line up with the chartArea if we are a full width scale
					minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
				} else {
					minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				}

				// height
				if (isHorizontal) {
					minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
				} else {
					minSize.height = me.maxHeight; // fill all the height
				}

				// Are we showing a title for the scale?
				if (scaleLabelOpts.display && display) {
					if (isHorizontal) {
						minSize.height += (scaleLabelFontSize * 1.5);
					} else {
						minSize.width += (scaleLabelFontSize * 1.5);
					}
				}

				if (tickOpts.display && display) {
					// Don't bother fitting the ticks if we are not showing them
					if (!me.longestTextCache) {
						me.longestTextCache = {};
					}

					var largestTextWidth = helpers.longestText(me.ctx, tickLabelFont, me.ticks, me.longestTextCache);
					var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
					var lineSpace = tickFontSize * 0.5;

					if (isHorizontal) {
						// A horizontal axis is more constrained by the height.
						me.longestLabelWidth = largestTextWidth;

						// TODO - improve this calculation
						var labelHeight = (Math.sin(helpers.toRadians(me.labelRotation)) * me.longestLabelWidth) + (tickFontSize * tallestLabelHeightInLines) + (lineSpace * tallestLabelHeightInLines);

						minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
						me.ctx.font = tickLabelFont;

						var firstLabelWidth = me.ctx.measureText(me.ticks[0]).width;
						var lastLabelWidth = me.ctx.measureText(me.ticks[me.ticks.length - 1]).width;

						// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned which means that the right padding is dominated
						// by the font height
						var cosRotation = Math.cos(helpers.toRadians(me.labelRotation));
						var sinRotation = Math.sin(helpers.toRadians(me.labelRotation));
						me.paddingLeft = me.labelRotation !== 0 ? (cosRotation * firstLabelWidth) + 3 : firstLabelWidth / 2 + 3; // add 3 px to move away from canvas edges
						me.paddingRight = me.labelRotation !== 0 ? (sinRotation * (tickFontSize / 2)) + 3 : lastLabelWidth / 2 + 3; // when rotated
					} else {
						// A vertical axis is more constrained by the width. Labels are the dominant factor here, so get that length first
						var maxLabelWidth = me.maxWidth - minSize.width;

						// Account for padding
						var mirror = tickOpts.mirror;
						if (!mirror) {
							largestTextWidth += me.options.ticks.padding;
						} else {
							// If mirrored text is on the inside so don't expand
							largestTextWidth = 0;
						}

						if (largestTextWidth < maxLabelWidth) {
							// We don't need all the room
							minSize.width += largestTextWidth;
						} else {
							// Expand to max size
							minSize.width = me.maxWidth;
						}

						me.paddingTop = tickFontSize / 2;
						me.paddingBottom = tickFontSize / 2;
					}
				}

				if (me.margins) {
					me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
					me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
					me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
					me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
				}

				me.width = minSize.width;
				me.height = minSize.height;

			},
			afterFit: function() {
				helpers.callCallback(this.options.afterFit, [this]);
			},

			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},
			isFullWidth: function() {
				return (this.options.fullWidth);
			},

			// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
			getRightValue: function(rawValue) {
				// Null and undefined values first
				if (rawValue === null || typeof(rawValue) === 'undefined') {
					return NaN;
				}
				// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
				if (typeof(rawValue) === 'number' && !isFinite(rawValue)) {
					return NaN;
				}
				// If it is in fact an object, dive in one more level
				if (typeof(rawValue) === 'object') {
					if ((rawValue instanceof Date) || (rawValue.isValid)) {
						return rawValue;
					}
					return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
				}

				// Value is good, return it
				return rawValue;
			},

			// Used to get the value to display in the tooltip for the data at the given index
			// function getLabelForIndex(index, datasetIndex)
			getLabelForIndex: helpers.noop,

			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: helpers.noop,

			// Used to get the data value from a given pixel. This is the inverse of getPixelForValue
			getValueForPixel: helpers.noop,

			// Used for tick location, should
			getPixelForTick: function(index, includeOffset) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var tickWidth = innerWidth / Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
					var pixel = (tickWidth * index) + me.paddingLeft;

					if (includeOffset) {
						pixel += tickWidth / 2;
					}

					var finalVal = me.left + Math.round(pixel);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
				return me.top + (index * (innerHeight / (me.ticks.length - 1)));
			},

			// Utility for getting the pixel location of a percentage of scale
			getPixelForDecimal: function(decimal /* , includeOffset*/) {
				var me = this;
				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var valueOffset = (innerWidth * decimal) + me.paddingLeft;

					var finalVal = me.left + Math.round(valueOffset);
					finalVal += me.isFullWidth() ? me.margins.left : 0;
					return finalVal;
				}
				return me.top + (decimal * me.height);
			},

			getBasePixel: function() {
				var me = this;
				var min = me.min;
				var max = me.max;

				return me.getPixelForValue(
					me.beginAtZero? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0);
			},

			// Actualy draw the scale on the canvas
			// @param {rectangle} chartArea : the area of the chart to draw full grid lines on
			draw: function(chartArea) {
				var me = this;
				var options = me.options;
				if (!options.display) {
					return;
				}

				var context = me.ctx;
				var globalDefaults = Chart.defaults.global;
				var optionTicks = options.ticks;
				var gridLines = options.gridLines;
				var scaleLabel = options.scaleLabel;

				var isRotated = me.labelRotation !== 0;
				var skipRatio;
				var useAutoskipper = optionTicks.autoSkip;
				var isHorizontal = me.isHorizontal();

				// figure out the maximum number of gridlines to show
				var maxTicks;
				if (optionTicks.maxTicksLimit) {
					maxTicks = optionTicks.maxTicksLimit;
				}

				var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
				var tickFontSize = helpers.getValueOrDefault(optionTicks.fontSize, globalDefaults.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(optionTicks.fontStyle, globalDefaults.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(optionTicks.fontFamily, globalDefaults.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				var tl = gridLines.tickMarkLength;
				var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
				var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);

				var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
				var scaleLabelFontSize = helpers.getValueOrDefault(scaleLabel.fontSize, globalDefaults.defaultFontSize);
				var scaleLabelFontStyle = helpers.getValueOrDefault(scaleLabel.fontStyle, globalDefaults.defaultFontStyle);
				var scaleLabelFontFamily = helpers.getValueOrDefault(scaleLabel.fontFamily, globalDefaults.defaultFontFamily);
				var scaleLabelFont = helpers.fontString(scaleLabelFontSize, scaleLabelFontStyle, scaleLabelFontFamily);

				var labelRotationRadians = helpers.toRadians(me.labelRotation);
				var cosRotation = Math.cos(labelRotationRadians);
				var longestRotatedLabel = me.longestLabelWidth * cosRotation;

				// Make sure we draw text in the correct color and font
				context.fillStyle = tickFontColor;

				var itemsToDraw = [];

				if (isHorizontal) {
					skipRatio = false;

					// Only calculate the skip ratio with the half width of longestRotateLabel if we got an actual rotation
					// See #2584
					if (isRotated) {
						longestRotatedLabel /= 2;
					}

					if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > (me.width - (me.paddingLeft + me.paddingRight))) {
						skipRatio = 1 + Math.floor(((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length) / (me.width - (me.paddingLeft + me.paddingRight)));
					}

					// if they defined a max number of optionTicks,
					// increase skipRatio until that number is met
					if (maxTicks && me.ticks.length > maxTicks) {
						while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
							if (!skipRatio) {
								skipRatio = 1;
							}
							skipRatio += 1;
						}
					}

					if (!useAutoskipper) {
						skipRatio = false;
					}
				}


				var xTickStart = options.position === 'right' ? me.left : me.right - tl;
				var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
				var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
				var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;

				helpers.each(me.ticks, function(label, index) {
					// If the callback returned a null or undefined value, do not draw this line
					if (label === undefined || label === null) {
						return;
					}

					var isLastTick = me.ticks.length === index + 1;

					// Since we always show the last tick,we need may need to hide the last shown one before
					var shouldSkip = (skipRatio > 1 && index % skipRatio > 0) || (index % skipRatio === 0 && index + skipRatio >= me.ticks.length);
					if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
						return;
					}

					var lineWidth, lineColor;
					if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
						// Draw the first index specially
						lineWidth = gridLines.zeroLineWidth;
						lineColor = gridLines.zeroLineColor;
					} else {
						lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
						lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
					}

					// Common properties
					var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
					var textAlign = 'middle';
					var textBaseline = 'middle';

					if (isHorizontal) {
						if (!isRotated) {
							textBaseline = options.position === 'top' ? 'bottom' : 'top';
						}

						textAlign = isRotated ? 'right' : 'center';

						var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth); // xvalues for grid lines
						labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset; // x values for optionTicks (need to consider offsetLabel option)
						labelY = (isRotated) ? me.top + 12 : options.position === 'top' ? me.bottom - tl : me.top + tl;

						tx1 = tx2 = x1 = x2 = xLineValue;
						ty1 = yTickStart;
						ty2 = yTickEnd;
						y1 = chartArea.top;
						y2 = chartArea.bottom;
					} else {
						if (options.position === 'left') {
							if (optionTicks.mirror) {
								labelX = me.right + optionTicks.padding;
								textAlign = 'left';
							} else {
								labelX = me.right - optionTicks.padding;
								textAlign = 'right';
							}
						// right side
						} else if (optionTicks.mirror) {
							labelX = me.left - optionTicks.padding;
							textAlign = 'right';
						} else {
							labelX = me.left + optionTicks.padding;
							textAlign = 'left';
						}

						var yLineValue = me.getPixelForTick(index); // xvalues for grid lines
						yLineValue += helpers.aliasPixel(lineWidth);
						labelY = me.getPixelForTick(index, gridLines.offsetGridLines);

						tx1 = xTickStart;
						tx2 = xTickEnd;
						x1 = chartArea.left;
						x2 = chartArea.right;
						ty1 = ty2 = y1 = y2 = yLineValue;
					}

					itemsToDraw.push({
						tx1: tx1,
						ty1: ty1,
						tx2: tx2,
						ty2: ty2,
						x1: x1,
						y1: y1,
						x2: x2,
						y2: y2,
						labelX: labelX,
						labelY: labelY,
						glWidth: lineWidth,
						glColor: lineColor,
						glBorderDash: borderDash,
						glBorderDashOffset: borderDashOffset,
						rotation: -1 * labelRotationRadians,
						label: label,
						textBaseline: textBaseline,
						textAlign: textAlign
					});
				});

				// Draw all of the tick labels, tick marks, and grid lines at the correct places
				helpers.each(itemsToDraw, function(itemToDraw) {
					if (gridLines.display) {
						context.save();
						context.lineWidth = itemToDraw.glWidth;
						context.strokeStyle = itemToDraw.glColor;
						if (context.setLineDash) {
							context.setLineDash(itemToDraw.glBorderDash);
							context.lineDashOffset = itemToDraw.glBorderDashOffset;
						}

						context.beginPath();

						if (gridLines.drawTicks) {
							context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
							context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
						}

						if (gridLines.drawOnChartArea) {
							context.moveTo(itemToDraw.x1, itemToDraw.y1);
							context.lineTo(itemToDraw.x2, itemToDraw.y2);
						}

						context.stroke();
						context.restore();
					}

					if (optionTicks.display) {
						context.save();
						context.translate(itemToDraw.labelX, itemToDraw.labelY);
						context.rotate(itemToDraw.rotation);
						context.font = tickLabelFont;
						context.textBaseline = itemToDraw.textBaseline;
						context.textAlign = itemToDraw.textAlign;

						var label = itemToDraw.label;
						if (helpers.isArray(label)) {
							for (var i = 0, y = -(label.length - 1)*tickFontSize*0.75; i < label.length; ++i) {
								// We just make sure the multiline element is a string here..
								context.fillText('' + label[i], 0, y);
								// apply same lineSpacing as calculated @ L#320
								y += (tickFontSize * 1.5);
							}
						} else {
							context.fillText(label, 0, 0);
						}
						context.restore();
					}
				});

				if (scaleLabel.display) {
					// Draw the scale label
					var scaleLabelX;
					var scaleLabelY;
					var rotation = 0;

					if (isHorizontal) {
						scaleLabelX = me.left + ((me.right - me.left) / 2); // midpoint of the width
						scaleLabelY = options.position === 'bottom' ? me.bottom - (scaleLabelFontSize / 2) : me.top + (scaleLabelFontSize / 2);
					} else {
						var isLeft = options.position === 'left';
						scaleLabelX = isLeft ? me.left + (scaleLabelFontSize / 2) : me.right - (scaleLabelFontSize / 2);
						scaleLabelY = me.top + ((me.bottom - me.top) / 2);
						rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
					}

					context.save();
					context.translate(scaleLabelX, scaleLabelY);
					context.rotate(rotation);
					context.textAlign = 'center';
					context.textBaseline = 'middle';
					context.fillStyle = scaleLabelFontColor; // render in correct colour
					context.font = scaleLabelFont;
					context.fillText(scaleLabel.labelString, 0, 0);
					context.restore();
				}

				if (gridLines.drawBorder) {
					// Draw the line at the edge of the axis
					context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
					context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
					var x1 = me.left,
						x2 = me.right,
						y1 = me.top,
						y2 = me.bottom;

					var aliasPixel = helpers.aliasPixel(context.lineWidth);
					if (isHorizontal) {
						y1 = y2 = options.position === 'top' ? me.bottom : me.top;
						y1 += aliasPixel;
						y2 += aliasPixel;
					} else {
						x1 = x2 = options.position === 'left' ? me.right : me.left;
						x1 += aliasPixel;
						x2 += aliasPixel;
					}

					context.beginPath();
					context.moveTo(x1, y1);
					context.lineTo(x2, y2);
					context.stroke();
				}
			}
		});
	};


/***/ },
/* 193 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.global.title = {
			display: false,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)

			fontStyle: 'bold',
			padding: 10,

			// actual title
			text: ''
		};

		var noop = helpers.noop;
		Chart.Title = Chart.Element.extend({

			initialize: function(config) {
				var me = this;
				helpers.extend(me, config);
				me.options = helpers.configMerge(Chart.defaults.global.title, config.options);

				// Contains hit boxes for each dataset (in dataset order)
				me.legendHitBoxes = [];
			},

			// These methods are ordered by lifecyle. Utilities then follow.

			beforeUpdate: function() {
				var chartOpts = this.chart.options;
				if (chartOpts && chartOpts.title) {
					this.options = helpers.configMerge(Chart.defaults.global.title, chartOpts.title);
				}
			},
			update: function(maxWidth, maxHeight, margins) {
				var me = this;

				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();

				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;

				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();

				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();

				return me.minSize;

			},
			afterUpdate: noop,

			//

			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;

					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}

				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;

				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,

			//

			beforeBuildLabels: noop,
			buildLabels: noop,
			afterBuildLabels: noop,

			//

			beforeFit: noop,
			fit: function() {
				var me = this,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global,
					display = opts.display,
					fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
					minSize = me.minSize;

				if (me.isHorizontal()) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? fontSize + (opts.padding * 2) : 0;
				} else {
					minSize.width = display ? fontSize + (opts.padding * 2) : 0;
					minSize.height = me.maxHeight; // fill all the height
				}

				me.width = minSize.width;
				me.height = minSize.height;

			},
			afterFit: noop,

			// Shared Methods
			isHorizontal: function() {
				var pos = this.options.position;
				return pos === 'top' || pos === 'bottom';
			},

			// Actualy draw the title block on the canvas
			draw: function() {
				var me = this,
					ctx = me.ctx,
					valueOrDefault = helpers.getValueOrDefault,
					opts = me.options,
					globalDefaults = Chart.defaults.global;

				if (opts.display) {
					var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize),
						fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle),
						fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily),
						titleFont = helpers.fontString(fontSize, fontStyle, fontFamily),
						rotation = 0,
						titleX,
						titleY,
						top = me.top,
						left = me.left,
						bottom = me.bottom,
						right = me.right,
						maxWidth;

					ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor); // render in correct colour
					ctx.font = titleFont;

					// Horizontal
					if (me.isHorizontal()) {
						titleX = left + ((right - left) / 2); // midpoint of the width
						titleY = top + ((bottom - top) / 2); // midpoint of the height
						maxWidth = right - left;
					} else {
						titleX = opts.position === 'left' ? left + (fontSize / 2) : right - (fontSize / 2);
						titleY = top + ((bottom - top) / 2);
						maxWidth = bottom - top;
						rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
					}

					ctx.save();
					ctx.translate(titleX, titleY);
					ctx.rotate(rotation);
					ctx.textAlign = 'center';
					ctx.textBaseline = 'middle';
					ctx.fillText(opts.text, 0, 0, maxWidth);
					ctx.restore();
				}
			}
		});

		// Register the title plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var opts = chartInstance.options;
				var titleOpts = opts.title;

				if (titleOpts) {
					chartInstance.titleBlock = new Chart.Title({
						ctx: chartInstance.chart.ctx,
						options: titleOpts,
						chart: chartInstance
					});

					Chart.layoutService.addBox(chartInstance, chartInstance.titleBlock);
				}
			}
		});
	};


/***/ },
/* 194 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;
		var noop = helpers.noop;

		Chart.defaults.global.legend = {

			display: true,
			position: 'top',
			fullWidth: true, // marks that this box should take the full width of the canvas (pushing down other boxes)
			reverse: false,

			// a callback that will handle
			onClick: function(e, legendItem) {
				var index = legendItem.datasetIndex;
				var ci = this.chart;
				var meta = ci.getDatasetMeta(index);

				// See controller.isDatasetVisible comment
				meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;

				// We hid a dataset ... rerender the chart
				ci.update();
			},

			onHover: null,

			labels: {
				boxWidth: 40,
				padding: 10,
				// Generates labels shown in the legend
				// Valid properties to return:
				// text : text to display
				// fillStyle : fill of coloured box
				// strokeStyle: stroke of coloured box
				// hidden : if this legend item refers to a hidden item
				// lineCap : cap style for line
				// lineDash
				// lineDashOffset :
				// lineJoin :
				// lineWidth :
				generateLabels: function(chart) {
					var data = chart.data;
					return helpers.isArray(data.datasets) ? data.datasets.map(function(dataset, i) {
						return {
							text: dataset.label,
							fillStyle: (!helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0]),
							hidden: !chart.isDatasetVisible(i),
							lineCap: dataset.borderCapStyle,
							lineDash: dataset.borderDash,
							lineDashOffset: dataset.borderDashOffset,
							lineJoin: dataset.borderJoinStyle,
							lineWidth: dataset.borderWidth,
							strokeStyle: dataset.borderColor,
							pointStyle: dataset.pointStyle,

							// Below is extra data used for toggling the datasets
							datasetIndex: i
						};
					}, this) : [];
				}
			}
		};

		/**
		 * Helper function to get the box width based on the usePointStyle option
		 * @param labelopts {Object} the label options on the legend
		 * @param fontSize {Number} the label font size
		 * @return {Number} width of the color box area
		 */
		function getBoxWidth(labelOpts, fontSize) {
			return labelOpts.usePointStyle ?
				fontSize * Math.SQRT2 :
				labelOpts.boxWidth;
		}

		Chart.Legend = Chart.Element.extend({

			initialize: function(config) {
				helpers.extend(this, config);

				// Contains hit boxes for each dataset (in dataset order)
				this.legendHitBoxes = [];

				// Are we in doughnut mode which has a different data type
				this.doughnutMode = false;
			},

			// These methods are ordered by lifecyle. Utilities then follow.
			// Any function defined here is inherited by all legend types.
			// Any function can be extended by the legend type

			beforeUpdate: noop,
			update: function(maxWidth, maxHeight, margins) {
				var me = this;

				// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
				me.beforeUpdate();

				// Absorb the master measurements
				me.maxWidth = maxWidth;
				me.maxHeight = maxHeight;
				me.margins = margins;

				// Dimensions
				me.beforeSetDimensions();
				me.setDimensions();
				me.afterSetDimensions();
				// Labels
				me.beforeBuildLabels();
				me.buildLabels();
				me.afterBuildLabels();

				// Fit
				me.beforeFit();
				me.fit();
				me.afterFit();
				//
				me.afterUpdate();

				return me.minSize;
			},
			afterUpdate: noop,

			//

			beforeSetDimensions: noop,
			setDimensions: function() {
				var me = this;
				// Set the unconstrained dimension before label rotation
				if (me.isHorizontal()) {
					// Reset position before calculating rotation
					me.width = me.maxWidth;
					me.left = 0;
					me.right = me.width;
				} else {
					me.height = me.maxHeight;

					// Reset position before calculating rotation
					me.top = 0;
					me.bottom = me.height;
				}

				// Reset padding
				me.paddingLeft = 0;
				me.paddingTop = 0;
				me.paddingRight = 0;
				me.paddingBottom = 0;

				// Reset minSize
				me.minSize = {
					width: 0,
					height: 0
				};
			},
			afterSetDimensions: noop,

			//

			beforeBuildLabels: noop,
			buildLabels: function() {
				var me = this;
				me.legendItems = me.options.labels.generateLabels.call(me, me.chart);
				if (me.options.reverse) {
					me.legendItems.reverse();
				}
			},
			afterBuildLabels: noop,

			//

			beforeFit: noop,
			fit: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var display = opts.display;

				var ctx = me.ctx;

				var globalDefault = Chart.defaults.global,
					itemOrDefault = helpers.getValueOrDefault,
					fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
					fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
					fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
					labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);

				// Reset hit boxes
				var hitboxes = me.legendHitBoxes = [];

				var minSize = me.minSize;
				var isHorizontal = me.isHorizontal();

				if (isHorizontal) {
					minSize.width = me.maxWidth; // fill all the width
					minSize.height = display ? 10 : 0;
				} else {
					minSize.width = display ? 10 : 0;
					minSize.height = me.maxHeight; // fill all the height
				}

				// Increase sizes here
				if (display) {
					ctx.font = labelFont;

					if (isHorizontal) {
						// Labels

						// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
						var lineWidths = me.lineWidths = [0];
						var totalHeight = me.legendItems.length ? fontSize + (labelOpts.padding) : 0;

						ctx.textAlign = 'left';
						ctx.textBaseline = 'top';

						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

							if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
								totalHeight += fontSize + (labelOpts.padding);
								lineWidths[lineWidths.length] = me.left;
							}

							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: width,
								height: fontSize
							};

							lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
						});

						minSize.height += totalHeight;

					} else {
						var vPadding = labelOpts.padding;
						var columnWidths = me.columnWidths = [];
						var totalWidth = labelOpts.padding;
						var currentColWidth = 0;
						var currentColHeight = 0;
						var itemHeight = fontSize + vPadding;

						helpers.each(me.legendItems, function(legendItem, i) {
							var boxWidth = getBoxWidth(labelOpts, fontSize);
							var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

							// If too tall, go to new column
							if (currentColHeight + itemHeight > minSize.height) {
								totalWidth += currentColWidth + labelOpts.padding;
								columnWidths.push(currentColWidth); // previous column width

								currentColWidth = 0;
								currentColHeight = 0;
							}

							// Get max width
							currentColWidth = Math.max(currentColWidth, itemWidth);
							currentColHeight += itemHeight;

							// Store the hitbox width and height here. Final position will be updated in `draw`
							hitboxes[i] = {
								left: 0,
								top: 0,
								width: itemWidth,
								height: fontSize
							};
						});

						totalWidth += currentColWidth;
						columnWidths.push(currentColWidth);
						minSize.width += totalWidth;
					}
				}

				me.width = minSize.width;
				me.height = minSize.height;
			},
			afterFit: noop,

			// Shared Methods
			isHorizontal: function() {
				return this.options.position === 'top' || this.options.position === 'bottom';
			},

			// Actualy draw the legend on the canvas
			draw: function() {
				var me = this;
				var opts = me.options;
				var labelOpts = opts.labels;
				var globalDefault = Chart.defaults.global,
					lineDefault = globalDefault.elements.line,
					legendWidth = me.width,
					lineWidths = me.lineWidths;

				if (opts.display) {
					var ctx = me.ctx,
						cursor,
						itemOrDefault = helpers.getValueOrDefault,
						fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor),
						fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize),
						fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle),
						fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily),
						labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);

					// Canvas setup
					ctx.textAlign = 'left';
					ctx.textBaseline = 'top';
					ctx.lineWidth = 0.5;
					ctx.strokeStyle = fontColor; // for strikethrough effect
					ctx.fillStyle = fontColor; // render in correct colour
					ctx.font = labelFont;

					var boxWidth = getBoxWidth(labelOpts, fontSize),
						hitboxes = me.legendHitBoxes;

					// current position
					var drawLegendBox = function(x, y, legendItem) {
						if (isNaN(boxWidth) || boxWidth <= 0) {
							return;
						}

						// Set the ctx for the box
						ctx.save();

						ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
						ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
						ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
						ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
						ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
						ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
						var isLineWidthZero = (itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0);

						if (ctx.setLineDash) {
							// IE 9 and 10 do not support line dash
							ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
						}

						if (opts.labels && opts.labels.usePointStyle) {
							// Recalulate x and y for drawPoint() because its expecting
							// x and y to be center of figure (instead of top left)
							var radius = fontSize * Math.SQRT2 / 2;
							var offSet = radius / Math.SQRT2;
							var centerX = x + offSet;
							var centerY = y + offSet;

							// Draw pointStyle as legend symbol
							Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
						} else {
							// Draw box as legend symbol
							if (!isLineWidthZero) {
								ctx.strokeRect(x, y, boxWidth, fontSize);
							}
							ctx.fillRect(x, y, boxWidth, fontSize);
						}

						ctx.restore();
					};
					var fillText = function(x, y, legendItem, textWidth) {
						ctx.fillText(legendItem.text, boxWidth + (fontSize / 2) + x, y);

						if (legendItem.hidden) {
							// Strikethrough the text if hidden
							ctx.beginPath();
							ctx.lineWidth = 2;
							ctx.moveTo(boxWidth + (fontSize / 2) + x, y + (fontSize / 2));
							ctx.lineTo(boxWidth + (fontSize / 2) + x + textWidth, y + (fontSize / 2));
							ctx.stroke();
						}
					};

					// Horizontal
					var isHorizontal = me.isHorizontal();
					if (isHorizontal) {
						cursor = {
							x: me.left + ((legendWidth - lineWidths[0]) / 2),
							y: me.top + labelOpts.padding,
							line: 0
						};
					} else {
						cursor = {
							x: me.left + labelOpts.padding,
							y: me.top + labelOpts.padding,
							line: 0
						};
					}

					var itemHeight = fontSize + labelOpts.padding;
					helpers.each(me.legendItems, function(legendItem, i) {
						var textWidth = ctx.measureText(legendItem.text).width,
							width = boxWidth + (fontSize / 2) + textWidth,
							x = cursor.x,
							y = cursor.y;

						if (isHorizontal) {
							if (x + width >= legendWidth) {
								y = cursor.y += itemHeight;
								cursor.line++;
								x = cursor.x = me.left + ((legendWidth - lineWidths[cursor.line]) / 2);
							}
						} else if (y + itemHeight > me.bottom) {
							x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
							y = cursor.y = me.top;
							cursor.line++;
						}

						drawLegendBox(x, y, legendItem);

						hitboxes[i].left = x;
						hitboxes[i].top = y;

						// Fill the actual label
						fillText(x, y, legendItem, textWidth);

						if (isHorizontal) {
							cursor.x += width + (labelOpts.padding);
						} else {
							cursor.y += itemHeight;
						}

					});
				}
			},

			/**
			 * Handle an event
			 * @private
			 * @param e {Event} the event to handle
			 * @return {Boolean} true if a change occured
			 */
			handleEvent: function(e) {
				var me = this;
				var opts = me.options;
				var type = e.type === 'mouseup' ? 'click' : e.type;
				var changed = false;

				if (type === 'mousemove') {
					if (!opts.onHover) {
						return;
					}
				} else if (type === 'click') {
					if (!opts.onClick) {
						return;
					}
				} else {
					return;
				}

				var position = helpers.getRelativePosition(e, me.chart.chart),
					x = position.x,
					y = position.y;

				if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
					// See if we are touching one of the dataset boxes
					var lh = me.legendHitBoxes;
					for (var i = 0; i < lh.length; ++i) {
						var hitBox = lh[i];

						if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
							// Touching an element
							if (type === 'click') {
								opts.onClick.call(me, e, me.legendItems[i]);
								changed = true;
								break;
							} else if (type === 'mousemove') {
								opts.onHover.call(me, e, me.legendItems[i]);
								changed = true;
								break;
							}
						}
					}
				}

				return changed;
			}
		});

		// Register the legend plugin
		Chart.plugins.register({
			beforeInit: function(chartInstance) {
				var opts = chartInstance.options;
				var legendOpts = opts.legend;

				if (legendOpts) {
					chartInstance.legend = new Chart.Legend({
						ctx: chartInstance.chart.ctx,
						options: legendOpts,
						chart: chartInstance
					});

					Chart.layoutService.addBox(chartInstance, chartInstance.legend);
				}
			}
		});
	};


/***/ },
/* 195 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {
		var helpers = Chart.helpers;

		/**
		 * Helper function to traverse all of the visible elements in the chart
		 * @param chart {chart} the chart
		 * @param handler {Function} the callback to execute for each visible item
		 */
		function parseVisibleItems(chart, handler) {
			var datasets = chart.data.datasets;
			var meta, i, j, ilen, jlen;

			for (i = 0, ilen = datasets.length; i < ilen; ++i) {
				if (!chart.isDatasetVisible(i)) {
					continue;
				}

				meta = chart.getDatasetMeta(i);
				for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
					var element = meta.data[j];
					if (!element._view.skip) {
						handler(element);
					}
				}
			}
		}

		/**
		 * Helper function to get the items that intersect the event position
		 * @param items {ChartElement[]} elements to filter
		 * @param position {Point} the point to be nearest to
		 * @return {ChartElement[]} the nearest items
		 */
		function getIntersectItems(chart, position) {
			var elements = [];

			parseVisibleItems(chart, function(element) {
				if (element.inRange(position.x, position.y)) {
					elements.push(element);
				}
			});

			return elements;
		}

		/**
		 * Helper function to get the items nearest to the event position considering all visible items in teh chart
		 * @param chart {Chart} the chart to look at elements from
		 * @param position {Point} the point to be nearest to
		 * @param intersect {Boolean} if true, only consider items that intersect the position
		 * @param distanceMetric {Function} Optional function to provide the distance between
		 * @return {ChartElement[]} the nearest items
		 */
		function getNearestItems(chart, position, intersect, distanceMetric) {
			var minDistance = Number.POSITIVE_INFINITY;
			var nearestItems = [];

			if (!distanceMetric) {
				distanceMetric = helpers.distanceBetweenPoints;
			}

			parseVisibleItems(chart, function(element) {
				if (intersect && !element.inRange(position.x, position.y)) {
					return;
				}

				var center = element.getCenterPoint();
				var distance = distanceMetric(position, center);

				if (distance < minDistance) {
					nearestItems = [element];
					minDistance = distance;
				} else if (distance === minDistance) {
					// Can have multiple items at the same distance in which case we sort by size
					nearestItems.push(element);
				}
			});

			return nearestItems;
		}

		function indexMode(chart, e, options) {
			var position = helpers.getRelativePosition(e, chart.chart);
			var distanceMetric = function(pt1, pt2) {
				return Math.abs(pt1.x - pt2.x);
			};
			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
			var elements = [];

			if (!items.length) {
				return [];
			}

			chart.data.datasets.forEach(function(dataset, datasetIndex) {
				if (chart.isDatasetVisible(datasetIndex)) {
					var meta = chart.getDatasetMeta(datasetIndex),
						element = meta.data[items[0]._index];

					// don't count items that are skipped (null data)
					if (element && !element._view.skip) {
						elements.push(element);
					}
				}
			});

			return elements;
		}

		/**
		 * @interface IInteractionOptions
		 */
		/**
		 * If true, only consider items that intersect the point
		 * @name IInterfaceOptions#boolean
		 * @type Boolean
		 */

		/**
		 * @namespace Chart.Interaction
		 * Contains interaction related functions
		 */
		Chart.Interaction = {
			// Helper function for different modes
			modes: {
				single: function(chart, e) {
					var position = helpers.getRelativePosition(e, chart.chart);
					var elements = [];

					parseVisibleItems(chart, function(element) {
						if (element.inRange(position.x, position.y)) {
							elements.push(element);
							return elements;
						}
					});

					return elements.slice(0, 1);
				},

				/**
				 * @function Chart.Interaction.modes.label
				 * @deprecated since version 2.4.0
				 */
				label: indexMode,

				/**
				 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
				 * @function Chart.Interaction.modes.index
				 * @since v2.4.0
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				index: indexMode,

				/**
				 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
				 * If the options.intersect is false, we find the nearest item and return the items in that dataset
				 * @function Chart.Interaction.modes.dataset
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use during interaction
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				dataset: function(chart, e, options) {
					var position = helpers.getRelativePosition(e, chart.chart);
					var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);

					if (items.length > 0) {
						items = chart.getDatasetMeta(items[0]._datasetIndex).data;
					}

					return items;
				},

				/**
				 * @function Chart.Interaction.modes.x-axis
				 * @deprecated since version 2.4.0. Use index mode and intersect == true
				 */
				'x-axis': function(chart, e) {
					return indexMode(chart, e, true);
				},

				/**
				 * Point mode returns all elements that hit test based on the event position
				 * of the event
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				point: function(chart, e) {
					var position = helpers.getRelativePosition(e, chart.chart);
					return getIntersectItems(chart, position);
				},

				/**
				 * nearest mode returns the element closest to the point
				 * @function Chart.Interaction.modes.intersect
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				nearest: function(chart, e, options) {
					var position = helpers.getRelativePosition(e, chart.chart);
					var nearestItems = getNearestItems(chart, position, options.intersect);

					// We have multiple items at the same distance from the event. Now sort by smallest
					if (nearestItems.length > 1) {
						nearestItems.sort(function(a, b) {
							var sizeA = a.getArea();
							var sizeB = b.getArea();
							var ret = sizeA - sizeB;

							if (ret === 0) {
								// if equal sort by dataset index
								ret = a._datasetIndex - b._datasetIndex;
							}

							return ret;
						});
					}

					// Return only 1 item
					return nearestItems.slice(0, 1);
				},

				/**
				 * x mode returns the elements that hit-test at the current x coordinate
				 * @function Chart.Interaction.modes.x
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				x: function(chart, e) {
					var position = helpers.getRelativePosition(e, chart.chart);
					var items = [];
					parseVisibleItems(chart, function(element) {
						if (element.inXRange(position.x)) {
							items.push(element);
						}
					});
					return items;
				},

				/**
				 * y mode returns the elements that hit-test at the current y coordinate
				 * @function Chart.Interaction.modes.y
				 * @param chart {chart} the chart we are returning items from
				 * @param e {Event} the event we are find things at
				 * @param options {IInteractionOptions} options to use
				 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
				 */
				y: function(chart, e) {
					var position = helpers.getRelativePosition(e, chart.chart);
					var items = [];
					parseVisibleItems(chart, function(element) {
						if (element.inYRange(position.y)) {
							items.push(element);
						}
					});
					return items;
				}
			}
		};
	};


/***/ },
/* 196 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		/**
	 	 * Helper method to merge the opacity into a color
	 	 */
		function mergeOpacity(colorString, opacity) {
			var color = helpers.color(colorString);
			return color.alpha(opacity * color.alpha()).rgbaString();
		}

		Chart.defaults.global.tooltips = {
			enabled: true,
			custom: null,
			mode: 'nearest',
			position: 'average',
			intersect: true,
			backgroundColor: 'rgba(0,0,0,0.8)',
			titleFontStyle: 'bold',
			titleSpacing: 2,
			titleMarginBottom: 6,
			titleFontColor: '#fff',
			titleAlign: 'left',
			bodySpacing: 2,
			bodyFontColor: '#fff',
			bodyAlign: 'left',
			footerFontStyle: 'bold',
			footerSpacing: 2,
			footerMarginTop: 6,
			footerFontColor: '#fff',
			footerAlign: 'left',
			yPadding: 6,
			xPadding: 6,
			caretSize: 5,
			cornerRadius: 6,
			multiKeyBackground: '#fff',
			displayColors: true,
			callbacks: {
				// Args are: (tooltipItems, data)
				beforeTitle: helpers.noop,
				title: function(tooltipItems, data) {
					// Pick first xLabel for now
					var title = '';
					var labels = data.labels;
					var labelCount = labels ? labels.length : 0;

					if (tooltipItems.length > 0) {
						var item = tooltipItems[0];

						if (item.xLabel) {
							title = item.xLabel;
						} else if (labelCount > 0 && item.index < labelCount) {
							title = labels[item.index];
						}
					}

					return title;
				},
				afterTitle: helpers.noop,

				// Args are: (tooltipItems, data)
				beforeBody: helpers.noop,

				// Args are: (tooltipItem, data)
				beforeLabel: helpers.noop,
				label: function(tooltipItem, data) {
					var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
					return datasetLabel + ': ' + tooltipItem.yLabel;
				},
				labelColor: function(tooltipItem, chartInstance) {
					var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
					var activeElement = meta.data[tooltipItem.index];
					var view = activeElement._view;
					return {
						borderColor: view.borderColor,
						backgroundColor: view.backgroundColor
					};
				},
				afterLabel: helpers.noop,

				// Args are: (tooltipItems, data)
				afterBody: helpers.noop,

				// Args are: (tooltipItems, data)
				beforeFooter: helpers.noop,
				footer: helpers.noop,
				afterFooter: helpers.noop
			}
		};

		// Helper to push or concat based on if the 2nd parameter is an array or not
		function pushOrConcat(base, toPush) {
			if (toPush) {
				if (helpers.isArray(toPush)) {
					// base = base.concat(toPush);
					Array.prototype.push.apply(base, toPush);
				} else {
					base.push(toPush);
				}
			}

			return base;
		}

		// Private helper to create a tooltip iteam model
		// @param element : the chart element (point, arc, bar) to create the tooltip item for
		// @return : new tooltip item
		function createTooltipItem(element) {
			var xScale = element._xScale;
			var yScale = element._yScale || element._scale; // handle radar || polarArea charts
			var index = element._index,
				datasetIndex = element._datasetIndex;

			return {
				xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
				yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
				index: index,
				datasetIndex: datasetIndex,
				x: element._model.x,
				y: element._model.y
			};
		}

		/**
		 * Helper to get the reset model for the tooltip
		 * @param tooltipOpts {Object} the tooltip options
		 */
		function getBaseModel(tooltipOpts) {
			var globalDefaults = Chart.defaults.global;
			var getValueOrDefault = helpers.getValueOrDefault;

			return {
				// Positioning
				xPadding: tooltipOpts.xPadding,
				yPadding: tooltipOpts.yPadding,
				xAlign: tooltipOpts.xAlign,
				yAlign: tooltipOpts.yAlign,

				// Body
				bodyFontColor: tooltipOpts.bodyFontColor,
				_bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
				_bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
				_bodyAlign: tooltipOpts.bodyAlign,
				bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
				bodySpacing: tooltipOpts.bodySpacing,

				// Title
				titleFontColor: tooltipOpts.titleFontColor,
				_titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
				_titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
				titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
				_titleAlign: tooltipOpts.titleAlign,
				titleSpacing: tooltipOpts.titleSpacing,
				titleMarginBottom: tooltipOpts.titleMarginBottom,

				// Footer
				footerFontColor: tooltipOpts.footerFontColor,
				_footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
				_footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
				footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
				_footerAlign: tooltipOpts.footerAlign,
				footerSpacing: tooltipOpts.footerSpacing,
				footerMarginTop: tooltipOpts.footerMarginTop,

				// Appearance
				caretSize: tooltipOpts.caretSize,
				cornerRadius: tooltipOpts.cornerRadius,
				backgroundColor: tooltipOpts.backgroundColor,
				opacity: 0,
				legendColorBackground: tooltipOpts.multiKeyBackground,
				displayColors: tooltipOpts.displayColors
			};
		}

		/**
		 * Get the size of the tooltip
		 */
		function getTooltipSize(tooltip, model) {
			var ctx = tooltip._chart.ctx;

			var height = model.yPadding * 2; // Tooltip Padding
			var width = 0;

			// Count of all lines in the body
			var body = model.body;
			var combinedBodyLength = body.reduce(function(count, bodyItem) {
				return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
			}, 0);
			combinedBodyLength += model.beforeBody.length + model.afterBody.length;

			var titleLineCount = model.title.length;
			var footerLineCount = model.footer.length;
			var titleFontSize = model.titleFontSize,
				bodyFontSize = model.bodyFontSize,
				footerFontSize = model.footerFontSize;

			height += titleLineCount * titleFontSize; // Title Lines
			height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
			height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
			height += combinedBodyLength * bodyFontSize; // Body Lines
			height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
			height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
			height += footerLineCount * (footerFontSize); // Footer Lines
			height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

			// Title width
			var widthPadding = 0;
			var maxLineWidth = function(line) {
				width = Math.max(width, ctx.measureText(line).width + widthPadding);
			};

			ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
			helpers.each(model.title, maxLineWidth);

			// Body width
			ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
			helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

			// Body lines may include some extra width due to the color box
			widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
			helpers.each(body, function(bodyItem) {
				helpers.each(bodyItem.before, maxLineWidth);
				helpers.each(bodyItem.lines, maxLineWidth);
				helpers.each(bodyItem.after, maxLineWidth);
			});

			// Reset back to 0
			widthPadding = 0;

			// Footer width
			ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
			helpers.each(model.footer, maxLineWidth);

			// Add padding
			width += 2 * model.xPadding;

			return {
				width: width,
				height: height
			};
		}

		/**
		 * Helper to get the alignment of a tooltip given the size
		 */
		function determineAlignment(tooltip, size) {
			var model = tooltip._model;
			var chart = tooltip._chart;
			var chartArea = tooltip._chartInstance.chartArea;
			var xAlign = 'center';
			var yAlign = 'center';

			if (model.y < size.height) {
				yAlign = 'top';
			} else if (model.y > (chart.height - size.height)) {
				yAlign = 'bottom';
			}

			var lf, rf; // functions to determine left, right alignment
			var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
			var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
			var midX = (chartArea.left + chartArea.right) / 2;
			var midY = (chartArea.top + chartArea.bottom) / 2;

			if (yAlign === 'center') {
				lf = function(x) {
					return x <= midX;
				};
				rf = function(x) {
					return x > midX;
				};
			} else {
				lf = function(x) {
					return x <= (size.width / 2);
				};
				rf = function(x) {
					return x >= (chart.width - (size.width / 2));
				};
			}

			olf = function(x) {
				return x + size.width > chart.width;
			};
			orf = function(x) {
				return x - size.width < 0;
			};
			yf = function(y) {
				return y <= midY ? 'top' : 'bottom';
			};

			if (lf(model.x)) {
				xAlign = 'left';

				// Is tooltip too wide and goes over the right side of the chart.?
				if (olf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			} else if (rf(model.x)) {
				xAlign = 'right';

				// Is tooltip too wide and goes outside left edge of canvas?
				if (orf(model.x)) {
					xAlign = 'center';
					yAlign = yf(model.y);
				}
			}

			var opts = tooltip._options;
			return {
				xAlign: opts.xAlign ? opts.xAlign : xAlign,
				yAlign: opts.yAlign ? opts.yAlign : yAlign
			};
		}

		/**
		 * @Helper to get the location a tooltiop needs to be placed at given the initial position (via the vm) and the size and alignment
		 */
		function getBackgroundPoint(vm, size, alignment) {
			// Background Position
			var x = vm.x;
			var y = vm.y;

			var caretSize = vm.caretSize,
				caretPadding = vm.caretPadding,
				cornerRadius = vm.cornerRadius,
				xAlign = alignment.xAlign,
				yAlign = alignment.yAlign,
				paddingAndSize = caretSize + caretPadding,
				radiusAndPadding = cornerRadius + caretPadding;

			if (xAlign === 'right') {
				x -= size.width;
			} else if (xAlign === 'center') {
				x -= (size.width / 2);
			}

			if (yAlign === 'top') {
				y += paddingAndSize;
			} else if (yAlign === 'bottom') {
				y -= size.height + paddingAndSize;
			} else {
				y -= (size.height / 2);
			}

			if (yAlign === 'center') {
				if (xAlign === 'left') {
					x += paddingAndSize;
				} else if (xAlign === 'right') {
					x -= paddingAndSize;
				}
			} else if (xAlign === 'left') {
				x -= radiusAndPadding;
			} else if (xAlign === 'right') {
				x += radiusAndPadding;
			}

			return {
				x: x,
				y: y
			};
		}

		Chart.Tooltip = Chart.Element.extend({
			initialize: function() {
				this._model = getBaseModel(this._options);
			},

			// Get the title
			// Args are: (tooltipItem, data)
			getTitle: function() {
				var me = this;
				var opts = me._options;
				var callbacks = opts.callbacks;

				var beforeTitle = callbacks.beforeTitle.apply(me, arguments),
					title = callbacks.title.apply(me, arguments),
					afterTitle = callbacks.afterTitle.apply(me, arguments);

				var lines = [];
				lines = pushOrConcat(lines, beforeTitle);
				lines = pushOrConcat(lines, title);
				lines = pushOrConcat(lines, afterTitle);

				return lines;
			},

			// Args are: (tooltipItem, data)
			getBeforeBody: function() {
				var lines = this._options.callbacks.beforeBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},

			// Args are: (tooltipItem, data)
			getBody: function(tooltipItems, data) {
				var me = this;
				var callbacks = me._options.callbacks;
				var bodyItems = [];

				helpers.each(tooltipItems, function(tooltipItem) {
					var bodyItem = {
						before: [],
						lines: [],
						after: []
					};
					pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
					pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));

					bodyItems.push(bodyItem);
				});

				return bodyItems;
			},

			// Args are: (tooltipItem, data)
			getAfterBody: function() {
				var lines = this._options.callbacks.afterBody.apply(this, arguments);
				return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
			},

			// Get the footer and beforeFooter and afterFooter lines
			// Args are: (tooltipItem, data)
			getFooter: function() {
				var me = this;
				var callbacks = me._options.callbacks;

				var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
				var footer = callbacks.footer.apply(me, arguments);
				var afterFooter = callbacks.afterFooter.apply(me, arguments);

				var lines = [];
				lines = pushOrConcat(lines, beforeFooter);
				lines = pushOrConcat(lines, footer);
				lines = pushOrConcat(lines, afterFooter);

				return lines;
			},

			update: function(changed) {
				var me = this;
				var opts = me._options;

				// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
				// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
				// which breaks any animations.
				var existingModel = me._model;
				var model = me._model = getBaseModel(opts);
				var active = me._active;

				var data = me._data;
				var chartInstance = me._chartInstance;

				// In the case where active.length === 0 we need to keep these at existing values for good animations
				var alignment = {
					xAlign: existingModel.xAlign,
					yAlign: existingModel.yAlign
				};
				var backgroundPoint = {
					x: existingModel.x,
					y: existingModel.y
				};
				var tooltipSize = {
					width: existingModel.width,
					height: existingModel.height
				};
				var tooltipPosition = {
					x: existingModel.caretX,
					y: existingModel.caretY
				};

				var i, len;

				if (active.length) {
					model.opacity = 1;

					var labelColors = [];
					tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);

					var tooltipItems = [];
					for (i = 0, len = active.length; i < len; ++i) {
						tooltipItems.push(createTooltipItem(active[i]));
					}

					// If the user provided a filter function, use it to modify the tooltip items
					if (opts.filter) {
						tooltipItems = tooltipItems.filter(function(a) {
							return opts.filter(a, data);
						});
					}

					// If the user provided a sorting function, use it to modify the tooltip items
					if (opts.itemSort) {
						tooltipItems = tooltipItems.sort(function(a, b) {
							return opts.itemSort(a, b, data);
						});
					}

					// Determine colors for boxes
					helpers.each(tooltipItems, function(tooltipItem) {
						labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
					});

					// Build the Text Lines
					model.title = me.getTitle(tooltipItems, data);
					model.beforeBody = me.getBeforeBody(tooltipItems, data);
					model.body = me.getBody(tooltipItems, data);
					model.afterBody = me.getAfterBody(tooltipItems, data);
					model.footer = me.getFooter(tooltipItems, data);

					// Initial positioning and colors
					model.x = Math.round(tooltipPosition.x);
					model.y = Math.round(tooltipPosition.y);
					model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
					model.labelColors = labelColors;

					// data points
					model.dataPoints = tooltipItems;

					// We need to determine alignment of the tooltip
					tooltipSize = getTooltipSize(this, model);
					alignment = determineAlignment(this, tooltipSize);
					// Final Size and Position
					backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
				} else {
					model.opacity = 0;
				}

				model.xAlign = alignment.xAlign;
				model.yAlign = alignment.yAlign;
				model.x = backgroundPoint.x;
				model.y = backgroundPoint.y;
				model.width = tooltipSize.width;
				model.height = tooltipSize.height;

				// Point where the caret on the tooltip points to
				model.caretX = tooltipPosition.x;
				model.caretY = tooltipPosition.y;

				me._model = model;

				if (changed && opts.custom) {
					opts.custom.call(me, model);
				}

				return me;
			},
			drawCaret: function(tooltipPoint, size, opacity) {
				var vm = this._view;
				var ctx = this._chart.ctx;
				var x1, x2, x3;
				var y1, y2, y3;
				var caretSize = vm.caretSize;
				var cornerRadius = vm.cornerRadius;
				var xAlign = vm.xAlign,
					yAlign = vm.yAlign;
				var ptX = tooltipPoint.x,
					ptY = tooltipPoint.y;
				var width = size.width,
					height = size.height;

				if (yAlign === 'center') {
					// Left or right side
					if (xAlign === 'left') {
						x1 = ptX;
						x2 = x1 - caretSize;
						x3 = x1;
					} else {
						x1 = ptX + width;
						x2 = x1 + caretSize;
						x3 = x1;
					}

					y2 = ptY + (height / 2);
					y1 = y2 - caretSize;
					y3 = y2 + caretSize;
				} else {
					if (xAlign === 'left') {
						x1 = ptX + cornerRadius;
						x2 = x1 + caretSize;
						x3 = x2 + caretSize;
					} else if (xAlign === 'right') {
						x1 = ptX + width - cornerRadius;
						x2 = x1 - caretSize;
						x3 = x2 - caretSize;
					} else {
						x2 = ptX + (width / 2);
						x1 = x2 - caretSize;
						x3 = x2 + caretSize;
					}

					if (yAlign === 'top') {
						y1 = ptY;
						y2 = y1 - caretSize;
						y3 = y1;
					} else {
						y1 = ptY + height;
						y2 = y1 + caretSize;
						y3 = y1;
					}
				}

				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				ctx.beginPath();
				ctx.moveTo(x1, y1);
				ctx.lineTo(x2, y2);
				ctx.lineTo(x3, y3);
				ctx.closePath();
				ctx.fill();
			},
			drawTitle: function(pt, vm, ctx, opacity) {
				var title = vm.title;

				if (title.length) {
					ctx.textAlign = vm._titleAlign;
					ctx.textBaseline = 'top';

					var titleFontSize = vm.titleFontSize,
						titleSpacing = vm.titleSpacing;

					ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
					ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

					var i, len;
					for (i = 0, len = title.length; i < len; ++i) {
						ctx.fillText(title[i], pt.x, pt.y);
						pt.y += titleFontSize + titleSpacing; // Line Height and spacing

						if (i + 1 === title.length) {
							pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
						}
					}
				}
			},
			drawBody: function(pt, vm, ctx, opacity) {
				var bodyFontSize = vm.bodyFontSize;
				var bodySpacing = vm.bodySpacing;
				var body = vm.body;

				ctx.textAlign = vm._bodyAlign;
				ctx.textBaseline = 'top';

				var textColor = mergeOpacity(vm.bodyFontColor, opacity);
				ctx.fillStyle = textColor;
				ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

				// Before Body
				var xLinePadding = 0;
				var fillLineOfText = function(line) {
					ctx.fillText(line, pt.x + xLinePadding, pt.y);
					pt.y += bodyFontSize + bodySpacing;
				};

				// Before body lines
				helpers.each(vm.beforeBody, fillLineOfText);

				var drawColorBoxes = vm.displayColors;
				xLinePadding = drawColorBoxes ? (bodyFontSize + 2) : 0;

				// Draw body lines now
				helpers.each(body, function(bodyItem, i) {
					helpers.each(bodyItem.before, fillLineOfText);

					helpers.each(bodyItem.lines, function(line) {
						// Draw Legend-like boxes if needed
						if (drawColorBoxes) {
							// Fill a white rect so that colours merge nicely if the opacity is < 1
							ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
							ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);

							// Border
							ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
							ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);

							// Inner square
							ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
							ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);

							ctx.fillStyle = textColor;
						}

						fillLineOfText(line);
					});

					helpers.each(bodyItem.after, fillLineOfText);
				});

				// Reset back to 0 for after body
				xLinePadding = 0;

				// After body lines
				helpers.each(vm.afterBody, fillLineOfText);
				pt.y -= bodySpacing; // Remove last body spacing
			},
			drawFooter: function(pt, vm, ctx, opacity) {
				var footer = vm.footer;

				if (footer.length) {
					pt.y += vm.footerMarginTop;

					ctx.textAlign = vm._footerAlign;
					ctx.textBaseline = 'top';

					ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
					ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

					helpers.each(footer, function(line) {
						ctx.fillText(line, pt.x, pt.y);
						pt.y += vm.footerFontSize + vm.footerSpacing;
					});
				}
			},
			drawBackground: function(pt, vm, ctx, tooltipSize, opacity) {
				ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
				helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
				ctx.fill();
			},
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;

				if (vm.opacity === 0) {
					return;
				}

				var tooltipSize = {
					width: vm.width,
					height: vm.height
				};
				var pt = {
					x: vm.x,
					y: vm.y
				};

				// IE11/Edge does not like very small opacities, so snap to 0
				var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

				if (this._options.enabled) {
					// Draw Background
					this.drawBackground(pt, vm, ctx, tooltipSize, opacity);

					// Draw Caret
					this.drawCaret(pt, tooltipSize, opacity);

					// Draw Title, Body, and Footer
					pt.x += vm.xPadding;
					pt.y += vm.yPadding;

					// Titles
					this.drawTitle(pt, vm, ctx, opacity);

					// Body
					this.drawBody(pt, vm, ctx, opacity);

					// Footer
					this.drawFooter(pt, vm, ctx, opacity);
				}
			},

			/**
			 * Handle an event
			 * @private
			 * @param e {Event} the event to handle
			 * @returns {Boolean} true if the tooltip changed
			 */
			handleEvent: function(e) {
				var me = this;
				var options = me._options;
				var changed = false;

				me._lastActive = me._lastActive || [];

				// Find Active Elements for tooltips
				if (e.type === 'mouseout') {
					me._active = [];
				} else {
					me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
				}

				// Remember Last Actives
				changed = !helpers.arrayEquals(me._active, me._lastActive);
				me._lastActive = me._active;

				if (options.enabled || options.custom) {
					me._eventPosition = helpers.getRelativePosition(e, me._chart);

					var model = me._model;
					me.update(true);
					me.pivot();

					// See if our tooltip position changed
					changed |= (model.x !== me._model.x) || (model.y !== me._model.y);
				}

				return changed;
			}
		});

		/**
		 * @namespace Chart.Tooltip.positioners
		 */
		Chart.Tooltip.positioners = {
			/**
			 * Average mode places the tooltip at the average position of the elements shown
			 * @function Chart.Tooltip.positioners.average
			 * @param elements {ChartElement[]} the elements being displayed in the tooltip
			 * @returns {Point} tooltip position
			 */
			average: function(elements) {
				if (!elements.length) {
					return false;
				}

				var i, len;
				var x = 0;
				var y = 0;
				var count = 0;

				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var pos = el.tooltipPosition();
						x += pos.x;
						y += pos.y;
						++count;
					}
				}

				return {
					x: Math.round(x / count),
					y: Math.round(y / count)
				};
			},

			/**
			 * Gets the tooltip position nearest of the item nearest to the event position
			 * @function Chart.Tooltip.positioners.nearest
			 * @param elements {Chart.Element[]} the tooltip elements
			 * @param eventPosition {Point} the position of the event in canvas coordinates
			 * @returns {Point} the tooltip position
			 */
			nearest: function(elements, eventPosition) {
				var x = eventPosition.x;
				var y = eventPosition.y;

				var nearestElement;
				var minDistance = Number.POSITIVE_INFINITY;
				var i, len;
				for (i = 0, len = elements.length; i < len; ++i) {
					var el = elements[i];
					if (el && el.hasValue()) {
						var center = el.getCenterPoint();
						var d = helpers.distanceBetweenPoints(eventPosition, center);

						if (d < minDistance) {
							minDistance = d;
							nearestElement = el;
						}
					}
				}

				if (nearestElement) {
					var tp = nearestElement.tooltipPosition();
					x = tp.x;
					y = tp.y;
				}

				return {
					x: x,
					y: y
				};
			}
		};
	};


/***/ },
/* 197 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global;

		globalOpts.elements.arc = {
			backgroundColor: globalOpts.defaultColor,
			borderColor: '#fff',
			borderWidth: 2
		};

		Chart.elements.Arc = Chart.Element.extend({
			inLabelRange: function(mouseX) {
				var vm = this._view;

				if (vm) {
					return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
				}
				return false;
			},
			inRange: function(chartX, chartY) {
				var vm = this._view;

				if (vm) {
					var pointRelativePosition = helpers.getAngleFromPoint(vm, {
							x: chartX,
							y: chartY
						}),
						angle = pointRelativePosition.angle,
						distance = pointRelativePosition.distance;

					// Sanitise angle range
					var startAngle = vm.startAngle;
					var endAngle = vm.endAngle;
					while (endAngle < startAngle) {
						endAngle += 2.0 * Math.PI;
					}
					while (angle > endAngle) {
						angle -= 2.0 * Math.PI;
					}
					while (angle < startAngle) {
						angle += 2.0 * Math.PI;
					}

					// Check if within the range of the open/close angle
					var betweenAngles = (angle >= startAngle && angle <= endAngle),
						withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

					return (betweenAngles && withinRadius);
				}
				return false;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var halfAngle = (vm.startAngle + vm.endAngle) / 2;
				var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
				return {
					x: vm.x + Math.cos(halfAngle) * halfRadius,
					y: vm.y + Math.sin(halfAngle) * halfRadius
				};
			},
			getArea: function() {
				var vm = this._view;
				return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
			},
			tooltipPosition: function() {
				var vm = this._view;

				var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2),
					rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
				return {
					x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
					y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
				};
			},
			draw: function() {

				var ctx = this._chart.ctx,
					vm = this._view,
					sA = vm.startAngle,
					eA = vm.endAngle;

				ctx.beginPath();

				ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
				ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);

				ctx.closePath();
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = vm.borderWidth;

				ctx.fillStyle = vm.backgroundColor;

				ctx.fill();
				ctx.lineJoin = 'bevel';

				if (vm.borderWidth) {
					ctx.stroke();
				}
			}
		});
	};


/***/ },
/* 198 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;

		Chart.defaults.global.elements.line = {
			tension: 0.4,
			backgroundColor: globalDefaults.defaultColor,
			borderWidth: 3,
			borderColor: globalDefaults.defaultColor,
			borderCapStyle: 'butt',
			borderDash: [],
			borderDashOffset: 0.0,
			borderJoinStyle: 'miter',
			capBezierPoints: true,
			fill: true, // do we fill in the area between the line and its base axis
		};

		Chart.elements.Line = Chart.Element.extend({
			draw: function() {
				var me = this;
				var vm = me._view;
				var spanGaps = vm.spanGaps;
				var fillPoint = vm.scaleZero;
				var loop = me._loop;

				// Handle different fill modes for cartesian lines
				if (!loop) {
					if (vm.fill === 'top') {
						fillPoint = vm.scaleTop;
					} else if (vm.fill === 'bottom') {
						fillPoint = vm.scaleBottom;
					}
				}

				var ctx = me._chart.ctx;
				ctx.save();

				// Helper function to draw a line to a point
				function lineToPoint(previousPoint, point) {
					var pointVM = point._view;
					if (point._view.steppedLine === true) {
						ctx.lineTo(pointVM.x, previousPoint._view.y);
						ctx.lineTo(pointVM.x, pointVM.y);
					} else if (point._view.tension === 0) {
						ctx.lineTo(pointVM.x, pointVM.y);
					} else {
						ctx.bezierCurveTo(
							previousPoint._view.controlPointNextX,
							previousPoint._view.controlPointNextY,
							pointVM.controlPointPreviousX,
							pointVM.controlPointPreviousY,
							pointVM.x,
							pointVM.y
						);
					}
				}

				var points = me._children.slice(); // clone array
				var lastDrawnIndex = -1;

				// If we are looping, adding the first point again
				if (loop && points.length) {
					points.push(points[0]);
				}

				var index, current, previous, currentVM;

				// Fill Line
				if (points.length && vm.fill) {
					ctx.beginPath();

					for (index = 0; index < points.length; ++index) {
						current = points[index];
						previous = helpers.previousItem(points, index);
						currentVM = current._view;

						// First point moves to it's starting position no matter what
						if (index === 0) {
							if (loop) {
								ctx.moveTo(fillPoint.x, fillPoint.y);
							} else {
								ctx.moveTo(currentVM.x, fillPoint);
							}

							if (!currentVM.skip) {
								lastDrawnIndex = index;
								ctx.lineTo(currentVM.x, currentVM.y);
							}
						} else {
							previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

							if (currentVM.skip) {
								// Only do this if this is the first point that is skipped
								if (!spanGaps && lastDrawnIndex === (index - 1)) {
									if (loop) {
										ctx.lineTo(fillPoint.x, fillPoint.y);
									} else {
										ctx.lineTo(previous._view.x, fillPoint);
									}
								}
							} else {
								if (lastDrawnIndex !== (index - 1)) {
									// There was a gap and this is the first point after the gap. If we've never drawn a point, this is a special case.
									// If the first data point is NaN, then there is no real gap to skip
									if (spanGaps && lastDrawnIndex !== -1) {
										// We are spanning the gap, so simple draw a line to this point
										lineToPoint(previous, current);
									} else if (loop) {
										ctx.lineTo(currentVM.x, currentVM.y);
									} else {
										ctx.lineTo(currentVM.x, fillPoint);
										ctx.lineTo(currentVM.x, currentVM.y);
									}
								} else {
									// Line to next point
									lineToPoint(previous, current);
								}
								lastDrawnIndex = index;
							}
						}
					}

					if (!loop && lastDrawnIndex !== -1) {
						ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
					}

					ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
					ctx.closePath();
					ctx.fill();
				}

				// Stroke Line Options
				var globalOptionLineElements = globalDefaults.elements.line;
				ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

				// IE 9 and 10 do not support line dash
				if (ctx.setLineDash) {
					ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
				}

				ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
				ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
				ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
				ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

				// Stroke Line
				ctx.beginPath();
				lastDrawnIndex = -1;

				for (index = 0; index < points.length; ++index) {
					current = points[index];
					previous = helpers.previousItem(points, index);
					currentVM = current._view;

					// First point moves to it's starting position no matter what
					if (index === 0) {
						if (!currentVM.skip) {
							ctx.moveTo(currentVM.x, currentVM.y);
							lastDrawnIndex = index;
						}
					} else {
						previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];

						if (!currentVM.skip) {
							if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
								// There was a gap and this is the first point after the gap
								ctx.moveTo(currentVM.x, currentVM.y);
							} else {
								// Line to next point
								lineToPoint(previous, current);
							}
							lastDrawnIndex = index;
						}
					}
				}

				ctx.stroke();
				ctx.restore();
			}
		});
	};


/***/ },
/* 199 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers,
			globalOpts = Chart.defaults.global,
			defaultColor = globalOpts.defaultColor;

		globalOpts.elements.point = {
			radius: 3,
			pointStyle: 'circle',
			backgroundColor: defaultColor,
			borderWidth: 1,
			borderColor: defaultColor,
			// Hover
			hitRadius: 1,
			hoverRadius: 4,
			hoverBorderWidth: 1
		};

		function xRange(mouseX) {
			var vm = this._view;
			return vm ? (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}

		function yRange(mouseY) {
			var vm = this._view;
			return vm ? (Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2)) : false;
		}

		Chart.elements.Point = Chart.Element.extend({
			inRange: function(mouseX, mouseY) {
				var vm = this._view;
				return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
			},

			inLabelRange: xRange,
			inXRange: xRange,
			inYRange: yRange,

			getCenterPoint: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			},
			getArea: function() {
				return Math.PI * Math.pow(this._view.radius, 2);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y,
					padding: vm.radius + vm.borderWidth
				};
			},
			draw: function() {
				var vm = this._view;
				var ctx = this._chart.ctx;
				var pointStyle = vm.pointStyle;
				var radius = vm.radius;
				var x = vm.x;
				var y = vm.y;

				if (vm.skip) {
					return;
				}

				ctx.strokeStyle = vm.borderColor || defaultColor;
				ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
				ctx.fillStyle = vm.backgroundColor || defaultColor;

				Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
			}
		});
	};


/***/ },
/* 200 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var globalOpts = Chart.defaults.global;

		globalOpts.elements.rectangle = {
			backgroundColor: globalOpts.defaultColor,
			borderWidth: 0,
			borderColor: globalOpts.defaultColor,
			borderSkipped: 'bottom'
		};

		function isVertical(bar) {
			return bar._view.width !== undefined;
		}

		/**
		 * Helper function to get the bounds of the bar regardless of the orientation
		 * @private
		 * @param bar {Chart.Element.Rectangle} the bar
		 * @return {Bounds} bounds of the bar
		 */
		function getBarBounds(bar) {
			var vm = bar._view;
			var x1, x2, y1, y2;

			if (isVertical(bar)) {
				// vertical
				var halfWidth = vm.width / 2;
				x1 = vm.x - halfWidth;
				x2 = vm.x + halfWidth;
				y1 = Math.min(vm.y, vm.base);
				y2 = Math.max(vm.y, vm.base);
			} else {
				// horizontal bar
				var halfHeight = vm.height / 2;
				x1 = Math.min(vm.x, vm.base);
				x2 = Math.max(vm.x, vm.base);
				y1 = vm.y - halfHeight;
				y2 = vm.y + halfHeight;
			}

			return {
				left: x1,
				top: y1,
				right: x2,
				bottom: y2
			};
		}

		Chart.elements.Rectangle = Chart.Element.extend({
			draw: function() {
				var ctx = this._chart.ctx;
				var vm = this._view;

				var halfWidth = vm.width / 2,
					leftX = vm.x - halfWidth,
					rightX = vm.x + halfWidth,
					top = vm.base - (vm.base - vm.y),
					halfStroke = vm.borderWidth / 2;

				// Canvas doesn't allow us to stroke inside the width so we can
				// adjust the sizes to fit if we're setting a stroke on the line
				if (vm.borderWidth) {
					leftX += halfStroke;
					rightX -= halfStroke;
					top += halfStroke;
				}

				ctx.beginPath();
				ctx.fillStyle = vm.backgroundColor;
				ctx.strokeStyle = vm.borderColor;
				ctx.lineWidth = vm.borderWidth;

				// Corner points, from bottom-left to bottom-right clockwise
				// | 1 2 |
				// | 0 3 |
				var corners = [
					[leftX, vm.base],
					[leftX, top],
					[rightX, top],
					[rightX, vm.base]
				];

				// Find first (starting) corner with fallback to 'bottom'
				var borders = ['bottom', 'left', 'top', 'right'];
				var startCorner = borders.indexOf(vm.borderSkipped, 0);
				if (startCorner === -1) {
					startCorner = 0;
				}

				function cornerAt(index) {
					return corners[(startCorner + index) % 4];
				}

				// Draw rectangle from 'startCorner'
				var corner = cornerAt(0);
				ctx.moveTo(corner[0], corner[1]);

				for (var i = 1; i < 4; i++) {
					corner = cornerAt(i);
					ctx.lineTo(corner[0], corner[1]);
				}

				ctx.fill();
				if (vm.borderWidth) {
					ctx.stroke();
				}
			},
			height: function() {
				var vm = this._view;
				return vm.base - vm.y;
			},
			inRange: function(mouseX, mouseY) {
				var inRange = false;

				if (this._view) {
					var bounds = getBarBounds(this);
					inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
				}

				return inRange;
			},
			inLabelRange: function(mouseX, mouseY) {
				var me = this;
				if (!me._view) {
					return false;
				}

				var inRange = false;
				var bounds = getBarBounds(me);

				if (isVertical(me)) {
					inRange = mouseX >= bounds.left && mouseX <= bounds.right;
				} else {
					inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
				}

				return inRange;
			},
			inXRange: function(mouseX) {
				var bounds = getBarBounds(this);
				return mouseX >= bounds.left && mouseX <= bounds.right;
			},
			inYRange: function(mouseY) {
				var bounds = getBarBounds(this);
				return mouseY >= bounds.top && mouseY <= bounds.bottom;
			},
			getCenterPoint: function() {
				var vm = this._view;
				var x, y;
				if (isVertical(this)) {
					x = vm.x;
					y = (vm.y + vm.base) / 2;
				} else {
					x = (vm.x + vm.base) / 2;
					y = vm.y;
				}

				return {x: x, y: y};
			},
			getArea: function() {
				var vm = this._view;
				return vm.width * Math.abs(vm.y - vm.base);
			},
			tooltipPosition: function() {
				var vm = this._view;
				return {
					x: vm.x,
					y: vm.y
				};
			}
		});

	};


/***/ },
/* 201 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers,
			noop = helpers.noop;

		Chart.LinearScaleBase = Chart.Scale.extend({
			handleTickRangeOptions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;

				// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
				// do nothing since that would make the chart weird. If the user really wants a weird chart
				// axis, they can manually override it
				if (tickOpts.beginAtZero) {
					var minSign = helpers.sign(me.min);
					var maxSign = helpers.sign(me.max);

					if (minSign < 0 && maxSign < 0) {
						// move the top up to 0
						me.max = 0;
					} else if (minSign > 0 && maxSign > 0) {
						// move the botttom down to 0
						me.min = 0;
					}
				}

				if (tickOpts.min !== undefined) {
					me.min = tickOpts.min;
				} else if (tickOpts.suggestedMin !== undefined) {
					me.min = Math.min(me.min, tickOpts.suggestedMin);
				}

				if (tickOpts.max !== undefined) {
					me.max = tickOpts.max;
				} else if (tickOpts.suggestedMax !== undefined) {
					me.max = Math.max(me.max, tickOpts.suggestedMax);
				}

				if (me.min === me.max) {
					me.max++;

					if (!tickOpts.beginAtZero) {
						me.min--;
					}
				}
			},
			getTickLimit: noop,
			handleDirectionalChanges: noop,

			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;

				// Figure out what the max number of ticks we can support it is based on the size of
				// the axis area. For now, we say that the minimum tick spacing in pixels must be 50
				// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
				// the graph. Make sure we always have at least 2 ticks
				var maxTicks = me.getTickLimit();
				maxTicks = Math.max(2, maxTicks);

				var numericGeneratorOptions = {
					maxTicks: maxTicks,
					min: tickOpts.min,
					max: tickOpts.max,
					stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
				};
				var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);

				me.handleDirectionalChanges();

				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);

				if (tickOpts.reverse) {
					ticks.reverse();

					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				var me = this;
				me.ticksAsNumbers = me.ticks.slice();
				me.zeroLineIndex = me.ticks.indexOf(0);

				Chart.Scale.prototype.convertTicksToLabels.call(me);
			}
		});
	};


/***/ },
/* 202 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;
		// Default config for a category scale
		var defaultConfig = {
			position: 'bottom'
		};

		var DatasetScale = Chart.Scale.extend({
			/**
			* Internal function to get the correct labels. If data.xLabels or data.yLabels are defined, use tose
			* else fall back to data.labels
			* @private
			*/
			getLabels: function() {
				var data = this.chart.data;
				return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
			},
			// Implement this so that
			determineDataLimits: function() {
				var me = this;
				var labels = me.getLabels();
				me.minIndex = 0;
				me.maxIndex = labels.length - 1;
				var findIndex;

				if (me.options.ticks.min !== undefined) {
					// user specified min value
					findIndex = helpers.indexOf(labels, me.options.ticks.min);
					me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
				}

				if (me.options.ticks.max !== undefined) {
					// user specified max value
					findIndex = helpers.indexOf(labels, me.options.ticks.max);
					me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
				}

				me.min = labels[me.minIndex];
				me.max = labels[me.maxIndex];
			},

			buildTicks: function() {
				var me = this;
				var labels = me.getLabels();
				// If we are viewing some subset of labels, slice the original array
				me.ticks = (me.minIndex === 0 && me.maxIndex === labels.length - 1) ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
			},

			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var data = me.chart.data;
				var isHorizontal = me.isHorizontal();

				if ((data.xLabels && isHorizontal) || (data.yLabels && !isHorizontal)) {
					return me.getRightValue(data.datasets[datasetIndex].data[index]);
				}
				return me.ticks[index];
			},

			// Used to get data value locations.  Value can either be an index or a numerical value
			getPixelForValue: function(value, index, datasetIndex, includeOffset) {
				var me = this;
				// 1 is added because we need the length but we have the indexes
				var offsetAmt = Math.max((me.maxIndex + 1 - me.minIndex - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);

				if (value !== undefined && isNaN(index)) {
					var labels = me.getLabels();
					var idx = labels.indexOf(value);
					index = idx !== -1 ? idx : index;
				}

				if (me.isHorizontal()) {
					var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
					var valueWidth = innerWidth / offsetAmt;
					var widthOffset = (valueWidth * (index - me.minIndex)) + me.paddingLeft;

					if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
						widthOffset += (valueWidth / 2);
					}

					return me.left + Math.round(widthOffset);
				}
				var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
				var valueHeight = innerHeight / offsetAmt;
				var heightOffset = (valueHeight * (index - me.minIndex)) + me.paddingTop;

				if (me.options.gridLines.offsetGridLines && includeOffset) {
					heightOffset += (valueHeight / 2);
				}

				return me.top + Math.round(heightOffset);
			},
			getPixelForTick: function(index, includeOffset) {
				return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var value;
				var offsetAmt = Math.max((me.ticks.length - ((me.options.gridLines.offsetGridLines) ? 0 : 1)), 1);
				var horz = me.isHorizontal();
				var innerDimension = horz ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.paddingBottom);
				var valueDimension = innerDimension / offsetAmt;

				pixel -= horz ? me.left : me.top;

				if (me.options.gridLines.offsetGridLines) {
					pixel -= (valueDimension / 2);
				}
				pixel -= horz ? me.paddingLeft : me.paddingTop;

				if (pixel <= 0) {
					value = 0;
				} else {
					value = Math.round(pixel / valueDimension);
				}

				return value;
			},
			getBasePixel: function() {
				return this.bottom;
			}
		});

		Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);

	};


/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		var defaultConfig = {
			position: 'left',
			ticks: {
				callback: Chart.Ticks.formatters.linear
			}
		};

		var LinearScale = Chart.LinearScaleBase.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var isHorizontal = me.isHorizontal();

				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}

				// First Calculate the range
				me.min = null;
				me.max = null;

				if (opts.stacked) {
					var valuesPerType = {};

					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (valuesPerType[meta.type] === undefined) {
							valuesPerType[meta.type] = {
								positiveValues: [],
								negativeValues: []
							};
						}

						// Store these per type
						var positiveValues = valuesPerType[meta.type].positiveValues;
						var negativeValues = valuesPerType[meta.type].negativeValues;

						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}

								positiveValues[index] = positiveValues[index] || 0;
								negativeValues[index] = negativeValues[index] || 0;

								if (opts.relativePoints) {
									positiveValues[index] = 100;
								} else if (value < 0) {
									negativeValues[index] += value;
								} else {
									positiveValues[index] += value;
								}
							});
						}
					});

					helpers.each(valuesPerType, function(valuesForType) {
						var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
						var minVal = helpers.min(values);
						var maxVal = helpers.max(values);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});

				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}

								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}

								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}
							});
						}
					});
				}

				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				this.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var maxTicks;
				var me = this;
				var tickOpts = me.options.ticks;

				if (me.isHorizontal()) {
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
				} else {
					// The factor of 2 used to scale the font size has been experimentally determined.
					var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
					maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
				}

				return maxTicks;
			},
			// Called after the ticks are built. We need
			handleDirectionalChanges: function() {
				if (!this.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					this.ticks.reverse();
				}
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			// Utils
			getPixelForValue: function(value) {
				// This must be called after fit has been run so that
				// this.left, this.top, this.right, and this.bottom have been defined
				var me = this;
				var paddingLeft = me.paddingLeft;
				var paddingBottom = me.paddingBottom;
				var start = me.start;

				var rightValue = +me.getRightValue(value);
				var pixel;
				var innerDimension;
				var range = me.end - start;

				if (me.isHorizontal()) {
					innerDimension = me.width - (paddingLeft + me.paddingRight);
					pixel = me.left + (innerDimension / range * (rightValue - start));
					return Math.round(pixel + paddingLeft);
				}
				innerDimension = me.height - (me.paddingTop + paddingBottom);
				pixel = (me.bottom - paddingBottom) - (innerDimension / range * (rightValue - start));
				return Math.round(pixel);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var isHorizontal = me.isHorizontal();
				var paddingLeft = me.paddingLeft;
				var paddingBottom = me.paddingBottom;
				var innerDimension = isHorizontal ? me.width - (paddingLeft + me.paddingRight) : me.height - (me.paddingTop + paddingBottom);
				var offset = (isHorizontal ? pixel - me.left - paddingLeft : me.bottom - paddingBottom - pixel) / innerDimension;
				return me.start + ((me.end - me.start) * offset);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.ticksAsNumbers[index]);
			}
		});
		Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);

	};


/***/ },
/* 204 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		var defaultConfig = {
			position: 'left',

			// label settings
			ticks: {
				callback: Chart.Ticks.formatters.logarithmic
			}
		};

		var LogarithmicScale = Chart.Scale.extend({
			determineDataLimits: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				var chart = me.chart;
				var data = chart.data;
				var datasets = data.datasets;
				var getValueOrDefault = helpers.getValueOrDefault;
				var isHorizontal = me.isHorizontal();
				function IDMatches(meta) {
					return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
				}

				// Calculate Range
				me.min = null;
				me.max = null;
				me.minNotZero = null;

				if (opts.stacked) {
					var valuesPerType = {};

					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							if (valuesPerType[meta.type] === undefined) {
								valuesPerType[meta.type] = [];
							}

							helpers.each(dataset.data, function(rawValue, index) {
								var values = valuesPerType[meta.type];
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}

								values[index] = values[index] || 0;

								if (opts.relativePoints) {
									values[index] = 100;
								} else {
									// Don't need to split positive and negative since the log scale can't handle a 0 crossing
									values[index] += value;
								}
							});
						}
					});

					helpers.each(valuesPerType, function(valuesForType) {
						var minVal = helpers.min(valuesForType);
						var maxVal = helpers.max(valuesForType);
						me.min = me.min === null ? minVal : Math.min(me.min, minVal);
						me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
					});

				} else {
					helpers.each(datasets, function(dataset, datasetIndex) {
						var meta = chart.getDatasetMeta(datasetIndex);
						if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
							helpers.each(dataset.data, function(rawValue, index) {
								var value = +me.getRightValue(rawValue);
								if (isNaN(value) || meta.data[index].hidden) {
									return;
								}

								if (me.min === null) {
									me.min = value;
								} else if (value < me.min) {
									me.min = value;
								}

								if (me.max === null) {
									me.max = value;
								} else if (value > me.max) {
									me.max = value;
								}

								if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
									me.minNotZero = value;
								}
							});
						}
					});
				}

				me.min = getValueOrDefault(tickOpts.min, me.min);
				me.max = getValueOrDefault(tickOpts.max, me.max);

				if (me.min === me.max) {
					if (me.min !== 0 && me.min !== null) {
						me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
						me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
					} else {
						me.min = 1;
						me.max = 10;
					}
				}
			},
			buildTicks: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;

				var generationOptions = {
					min: tickOpts.min,
					max: tickOpts.max
				};
				var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);

				if (!me.isHorizontal()) {
					// We are in a vertical orientation. The top value is the highest. So reverse the array
					ticks.reverse();
				}

				// At this point, we need to update our max and min given the tick values since we have expanded the
				// range of the scale
				me.max = helpers.max(ticks);
				me.min = helpers.min(ticks);

				if (tickOpts.reverse) {
					ticks.reverse();

					me.start = me.max;
					me.end = me.min;
				} else {
					me.start = me.min;
					me.end = me.max;
				}
			},
			convertTicksToLabels: function() {
				this.tickValues = this.ticks.slice();

				Chart.Scale.prototype.convertTicksToLabels.call(this);
			},
			// Get the correct tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickValues[index]);
			},
			getPixelForValue: function(value) {
				var me = this;
				var innerDimension;
				var pixel;

				var start = me.start;
				var newVal = +me.getRightValue(value);
				var range;
				var paddingTop = me.paddingTop;
				var paddingBottom = me.paddingBottom;
				var paddingLeft = me.paddingLeft;
				var opts = me.options;
				var tickOpts = opts.ticks;

				if (me.isHorizontal()) {
					range = helpers.log10(me.end) - helpers.log10(start); // todo: if start === 0
					if (newVal === 0) {
						pixel = me.left + paddingLeft;
					} else {
						innerDimension = me.width - (paddingLeft + me.paddingRight);
						pixel = me.left + (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
						pixel += paddingLeft;
					}
				} else {
					// Bottom - top since pixels increase downard on a screen
					innerDimension = me.height - (paddingTop + paddingBottom);
					if (start === 0 && !tickOpts.reverse) {
						range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
						if (newVal === start) {
							pixel = me.bottom - paddingBottom;
						} else if (newVal === me.minNotZero) {
							pixel = me.bottom - paddingBottom - innerDimension * 0.02;
						} else {
							pixel = me.bottom - paddingBottom - innerDimension * 0.02 - (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else if (me.end === 0 && tickOpts.reverse) {
						range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
						if (newVal === me.end) {
							pixel = me.top + paddingTop;
						} else if (newVal === me.minNotZero) {
							pixel = me.top + paddingTop + innerDimension * 0.02;
						} else {
							pixel = me.top + paddingTop + innerDimension * 0.02 + (innerDimension * 0.98/ range * (helpers.log10(newVal)-helpers.log10(me.minNotZero)));
						}
					} else {
						range = helpers.log10(me.end) - helpers.log10(start);
						innerDimension = me.height - (paddingTop + paddingBottom);
						pixel = (me.bottom - paddingBottom) - (innerDimension / range * (helpers.log10(newVal) - helpers.log10(start)));
					}
				}
				return pixel;
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var range = helpers.log10(me.end) - helpers.log10(me.start);
				var value, innerDimension;

				if (me.isHorizontal()) {
					innerDimension = me.width - (me.paddingLeft + me.paddingRight);
					value = me.start * Math.pow(10, (pixel - me.left - me.paddingLeft) * range / innerDimension);
				} else {  // todo: if start === 0
					innerDimension = me.height - (me.paddingTop + me.paddingBottom);
					value = Math.pow(10, (me.bottom - me.paddingBottom - pixel) * range / innerDimension) / me.start;
				}
				return value;
			}
		});
		Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);

	};


/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;
		var globalDefaults = Chart.defaults.global;

		var defaultConfig = {
			display: true,

			// Boolean - Whether to animate scaling the chart from the centre
			animate: true,
			lineArc: false,
			position: 'chartArea',

			angleLines: {
				display: true,
				color: 'rgba(0, 0, 0, 0.1)',
				lineWidth: 1
			},

			// label settings
			ticks: {
				// Boolean - Show a backdrop to the scale label
				showLabelBackdrop: true,

				// String - The colour of the label backdrop
				backdropColor: 'rgba(255,255,255,0.75)',

				// Number - The backdrop padding above & below the label in pixels
				backdropPaddingY: 2,

				// Number - The backdrop padding to the side of the label in pixels
				backdropPaddingX: 2,

				callback: Chart.Ticks.formatters.linear
			},

			pointLabels: {
				// Number - Point label font size in pixels
				fontSize: 10,

				// Function - Used to convert point labels
				callback: function(label) {
					return label;
				}
			}
		};

		var LinearRadialScale = Chart.LinearScaleBase.extend({
			getValueCount: function() {
				return this.chart.data.labels.length;
			},
			setDimensions: function() {
				var me = this;
				var opts = me.options;
				var tickOpts = opts.ticks;
				// Set the unconstrained dimension before label rotation
				me.width = me.maxWidth;
				me.height = me.maxHeight;
				me.xCenter = Math.round(me.width / 2);
				me.yCenter = Math.round(me.height / 2);

				var minSize = helpers.min([me.height, me.width]);
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				me.drawingArea = opts.display ? (minSize / 2) - (tickFontSize / 2 + tickOpts.backdropPaddingY) : (minSize / 2);
			},
			determineDataLimits: function() {
				var me = this;
				var chart = me.chart;
				me.min = null;
				me.max = null;


				helpers.each(chart.data.datasets, function(dataset, datasetIndex) {
					if (chart.isDatasetVisible(datasetIndex)) {
						var meta = chart.getDatasetMeta(datasetIndex);

						helpers.each(dataset.data, function(rawValue, index) {
							var value = +me.getRightValue(rawValue);
							if (isNaN(value) || meta.data[index].hidden) {
								return;
							}

							if (me.min === null) {
								me.min = value;
							} else if (value < me.min) {
								me.min = value;
							}

							if (me.max === null) {
								me.max = value;
							} else if (value > me.max) {
								me.max = value;
							}
						});
					}
				});

				// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
				me.handleTickRangeOptions();
			},
			getTickLimit: function() {
				var tickOpts = this.options.ticks;
				var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
				return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
			},
			convertTicksToLabels: function() {
				var me = this;
				Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);

				// Point labels
				me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
			},
			getLabelForIndex: function(index, datasetIndex) {
				return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
			},
			fit: function() {
				/*
				 * Right, this is really confusing and there is a lot of maths going on here
				 * The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
				 *
				 * Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
				 *
				 * Solution:
				 *
				 * We assume the radius of the polygon is half the size of the canvas at first
				 * at each index we check if the text overlaps.
				 *
				 * Where it does, we store that angle and that index.
				 *
				 * After finding the largest index and angle we calculate how much we need to remove
				 * from the shape radius to move the point inwards by that x.
				 *
				 * We average the left and right distances to get the maximum shape radius that can fit in the box
				 * along with labels.
				 *
				 * Once we have that, we can find the centre point for the chart, by taking the x text protrusion
				 * on each side, removing that from the size, halving it and adding the left x protrusion width.
				 *
				 * This will mean we have a shape fitted to the canvas, as large as it can be with the labels
				 * and position it in the most space efficient manner
				 *
				 * https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif
				 */

				var pointLabels = this.options.pointLabels;
				var pointLabelFontSize = helpers.getValueOrDefault(pointLabels.fontSize, globalDefaults.defaultFontSize);
				var pointLabeFontStyle = helpers.getValueOrDefault(pointLabels.fontStyle, globalDefaults.defaultFontStyle);
				var pointLabeFontFamily = helpers.getValueOrDefault(pointLabels.fontFamily, globalDefaults.defaultFontFamily);
				var pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);

				// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
				// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
				var largestPossibleRadius = helpers.min([(this.height / 2 - pointLabelFontSize - 5), this.width / 2]),
					pointPosition,
					i,
					textWidth,
					halfTextWidth,
					furthestRight = this.width,
					furthestRightIndex,
					furthestRightAngle,
					furthestLeft = 0,
					furthestLeftIndex,
					furthestLeftAngle,
					xProtrusionLeft,
					xProtrusionRight,
					radiusReductionRight,
					radiusReductionLeft;
				this.ctx.font = pointLabeFont;

				for (i = 0; i < this.getValueCount(); i++) {
					// 5px to space the text slightly out - similar to what we do in the draw function.
					pointPosition = this.getPointPosition(i, largestPossibleRadius);
					textWidth = this.ctx.measureText(this.pointLabels[i] ? this.pointLabels[i] : '').width + 5;

					// Add quarter circle to make degree 0 mean top of circle
					var angleRadians = this.getIndexAngle(i) + (Math.PI / 2);
					var angle = (angleRadians * 360 / (2 * Math.PI)) % 360;

					if (angle === 0 || angle === 180) {
						// At angle 0 and 180, we're at exactly the top/bottom
						// of the radar chart, so text will be aligned centrally, so we'll half it and compare
						// w/left and right text sizes
						halfTextWidth = textWidth / 2;
						if (pointPosition.x + halfTextWidth > furthestRight) {
							furthestRight = pointPosition.x + halfTextWidth;
							furthestRightIndex = i;
						}
						if (pointPosition.x - halfTextWidth < furthestLeft) {
							furthestLeft = pointPosition.x - halfTextWidth;
							furthestLeftIndex = i;
						}
					} else if (angle < 180) {
						// Less than half the values means we'll left align the text
						if (pointPosition.x + textWidth > furthestRight) {
							furthestRight = pointPosition.x + textWidth;
							furthestRightIndex = i;
						}
					// More than half the values means we'll right align the text
					} else if (pointPosition.x - textWidth < furthestLeft) {
						furthestLeft = pointPosition.x - textWidth;
						furthestLeftIndex = i;
					}
				}

				xProtrusionLeft = furthestLeft;
				xProtrusionRight = Math.ceil(furthestRight - this.width);

				furthestRightAngle = this.getIndexAngle(furthestRightIndex);
				furthestLeftAngle = this.getIndexAngle(furthestLeftIndex);

				radiusReductionRight = xProtrusionRight / Math.sin(furthestRightAngle + Math.PI / 2);
				radiusReductionLeft = xProtrusionLeft / Math.sin(furthestLeftAngle + Math.PI / 2);

				// Ensure we actually need to reduce the size of the chart
				radiusReductionRight = (helpers.isNumber(radiusReductionRight)) ? radiusReductionRight : 0;
				radiusReductionLeft = (helpers.isNumber(radiusReductionLeft)) ? radiusReductionLeft : 0;

				this.drawingArea = Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2);
				this.setCenterPoint(radiusReductionLeft, radiusReductionRight);
			},
			setCenterPoint: function(leftMovement, rightMovement) {
				var me = this;
				var maxRight = me.width - rightMovement - me.drawingArea,
					maxLeft = leftMovement + me.drawingArea;

				me.xCenter = Math.round(((maxLeft + maxRight) / 2) + me.left);
				// Always vertically in the centre as the text height doesn't change
				me.yCenter = Math.round((me.height / 2) + me.top);
			},

			getIndexAngle: function(index) {
				var angleMultiplier = (Math.PI * 2) / this.getValueCount();
				var startAngle = this.chart.options && this.chart.options.startAngle ?
					this.chart.options.startAngle :
					0;

				var startAngleRadians = startAngle * Math.PI * 2 / 360;

				// Start from the top instead of right, so remove a quarter of the circle
				return index * angleMultiplier - (Math.PI / 2) + startAngleRadians;
			},
			getDistanceFromCenterForValue: function(value) {
				var me = this;

				if (value === null) {
					return 0; // null always in center
				}

				// Take into account half font size + the yPadding of the top value
				var scalingFactor = me.drawingArea / (me.max - me.min);
				if (me.options.reverse) {
					return (me.max - value) * scalingFactor;
				}
				return (value - me.min) * scalingFactor;
			},
			getPointPosition: function(index, distanceFromCenter) {
				var me = this;
				var thisAngle = me.getIndexAngle(index);
				return {
					x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
					y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
				};
			},
			getPointPositionForValue: function(index, value) {
				return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
			},

			getBasePosition: function() {
				var me = this;
				var min = me.min;
				var max = me.max;

				return me.getPointPositionForValue(0,
					me.beginAtZero? 0:
					min < 0 && max < 0? max :
					min > 0 && max > 0? min :
					0);
			},

			draw: function() {
				var me = this;
				var opts = me.options;
				var gridLineOpts = opts.gridLines;
				var tickOpts = opts.ticks;
				var angleLineOpts = opts.angleLines;
				var pointLabelOpts = opts.pointLabels;
				var getValueOrDefault = helpers.getValueOrDefault;

				if (opts.display) {
					var ctx = me.ctx;

					// Tick Font
					var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
					var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
					var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
					var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);

					helpers.each(me.ticks, function(label, index) {
						// Don't draw a centre value (if it is minimum)
						if (index > 0 || opts.reverse) {
							var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
							var yHeight = me.yCenter - yCenterOffset;

							// Draw circular lines around the scale
							if (gridLineOpts.display && index !== 0) {
								ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
								ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);

								if (opts.lineArc) {
									// Draw circular arcs between the points
									ctx.beginPath();
									ctx.arc(me.xCenter, me.yCenter, yCenterOffset, 0, Math.PI * 2);
									ctx.closePath();
									ctx.stroke();
								} else {
									// Draw straight lines connecting each index
									ctx.beginPath();
									for (var i = 0; i < me.getValueCount(); i++) {
										var pointPosition = me.getPointPosition(i, yCenterOffset);
										if (i === 0) {
											ctx.moveTo(pointPosition.x, pointPosition.y);
										} else {
											ctx.lineTo(pointPosition.x, pointPosition.y);
										}
									}
									ctx.closePath();
									ctx.stroke();
								}
							}

							if (tickOpts.display) {
								var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
								ctx.font = tickLabelFont;

								if (tickOpts.showLabelBackdrop) {
									var labelWidth = ctx.measureText(label).width;
									ctx.fillStyle = tickOpts.backdropColor;
									ctx.fillRect(
										me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX,
										yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY,
										labelWidth + tickOpts.backdropPaddingX * 2,
										tickFontSize + tickOpts.backdropPaddingY * 2
									);
								}

								ctx.textAlign = 'center';
								ctx.textBaseline = 'middle';
								ctx.fillStyle = tickFontColor;
								ctx.fillText(label, me.xCenter, yHeight);
							}
						}
					});

					if (!opts.lineArc) {
						ctx.lineWidth = angleLineOpts.lineWidth;
						ctx.strokeStyle = angleLineOpts.color;

						var outerDistance = me.getDistanceFromCenterForValue(opts.reverse ? me.min : me.max);

						// Point Label Font
						var pointLabelFontSize = getValueOrDefault(pointLabelOpts.fontSize, globalDefaults.defaultFontSize);
						var pointLabeFontStyle = getValueOrDefault(pointLabelOpts.fontStyle, globalDefaults.defaultFontStyle);
						var pointLabeFontFamily = getValueOrDefault(pointLabelOpts.fontFamily, globalDefaults.defaultFontFamily);
						var pointLabeFont = helpers.fontString(pointLabelFontSize, pointLabeFontStyle, pointLabeFontFamily);

						for (var i = me.getValueCount() - 1; i >= 0; i--) {
							if (angleLineOpts.display) {
								var outerPosition = me.getPointPosition(i, outerDistance);
								ctx.beginPath();
								ctx.moveTo(me.xCenter, me.yCenter);
								ctx.lineTo(outerPosition.x, outerPosition.y);
								ctx.stroke();
								ctx.closePath();
							}
							// Extra 3px out for some label spacing
							var pointLabelPosition = me.getPointPosition(i, outerDistance + 5);

							// Keep this in loop since we may support array properties here
							var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
							ctx.font = pointLabeFont;
							ctx.fillStyle = pointLabelFontColor;

							var pointLabels = me.pointLabels;

							// Add quarter circle to make degree 0 mean top of circle
							var angleRadians = this.getIndexAngle(i) + (Math.PI / 2);
							var angle = (angleRadians * 360 / (2 * Math.PI)) % 360;

							if (angle === 0 || angle === 180) {
								ctx.textAlign = 'center';
							} else if (angle < 180) {
								ctx.textAlign = 'left';
							} else {
								ctx.textAlign = 'right';
							}

							// Set the correct text baseline based on outer positioning
							if (angle === 90 || angle === 270) {
								ctx.textBaseline = 'middle';
							} else if (angle > 270 || angle < 90) {
								ctx.textBaseline = 'bottom';
							} else {
								ctx.textBaseline = 'top';
							}

							ctx.fillText(pointLabels[i] ? pointLabels[i] : '', pointLabelPosition.x, pointLabelPosition.y);
						}
					}
				}
			}
		});
		Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);

	};


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* global window: false */
	'use strict';

	var moment = __webpack_require__(207);
	moment = typeof(moment) === 'function' ? moment : window.moment;

	module.exports = function(Chart) {

		var helpers = Chart.helpers;
		var time = {
			units: [{
				name: 'millisecond',
				steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
			}, {
				name: 'second',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'minute',
				steps: [1, 2, 5, 10, 30]
			}, {
				name: 'hour',
				steps: [1, 2, 3, 6, 12]
			}, {
				name: 'day',
				steps: [1, 2, 5]
			}, {
				name: 'week',
				maxStep: 4
			}, {
				name: 'month',
				maxStep: 3
			}, {
				name: 'quarter',
				maxStep: 4
			}, {
				name: 'year',
				maxStep: false
			}]
		};

		var defaultConfig = {
			position: 'bottom',

			time: {
				parser: false, // false == a pattern string from http://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
				format: false, // DEPRECATED false == date objects, moment object, callback or a pattern string from http://momentjs.com/docs/#/parsing/string-format/
				unit: false, // false == automatic or override with week, month, year, etc.
				round: false, // none, or override with week, month, year, etc.
				displayFormat: false, // DEPRECATED
				isoWeekday: false, // override week start day - see http://momentjs.com/docs/#/get-set/iso-weekday/
				minUnit: 'millisecond',

				// defaults to unit's corresponding unitFormat below or override using pattern string from http://momentjs.com/docs/#/displaying/format/
				displayFormats: {
					millisecond: 'h:mm:ss.SSS a', // 11:20:01.123 AM,
					second: 'h:mm:ss a', // 11:20:01 AM
					minute: 'h:mm:ss a', // 11:20:01 AM
					hour: 'MMM D, hA', // Sept 4, 5PM
					day: 'll', // Sep 4 2015
					week: 'll', // Week 46, or maybe "[W]WW - YYYY" ?
					month: 'MMM YYYY', // Sept 2015
					quarter: '[Q]Q - YYYY', // Q3
					year: 'YYYY' // 2015
				}
			},
			ticks: {
				autoSkip: false
			}
		};

		var TimeScale = Chart.Scale.extend({
			initialize: function() {
				if (!moment) {
					throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
				}

				Chart.Scale.prototype.initialize.call(this);
			},
			getLabelMoment: function(datasetIndex, index) {
				if (datasetIndex === null || index === null) {
					return null;
				}

				if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
					return this.labelMoments[datasetIndex][index];
				}

				return null;
			},
			getLabelDiff: function(datasetIndex, index) {
				var me = this;
				if (datasetIndex === null || index === null) {
					return null;
				}

				if (me.labelDiffs === undefined) {
					me.buildLabelDiffs();
				}

				if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
					return me.labelDiffs[datasetIndex][index];
				}

				return null;
			},
			getMomentStartOf: function(tick) {
				var me = this;
				if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
					return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
				}
				return tick.clone().startOf(me.tickUnit);
			},
			determineDataLimits: function() {
				var me = this;
				me.labelMoments = [];

				// Only parse these once. If the dataset does not have data as x,y pairs, we will use
				// these
				var scaleLabelMoments = [];
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);

						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelMoments.push(labelMoment);
						}
					}, me);

					me.firstTick = moment.min.call(me, scaleLabelMoments);
					me.lastTick = moment.max.call(me, scaleLabelMoments);
				} else {
					me.firstTick = null;
					me.lastTick = null;
				}

				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var momentsForDataset = [];
					var datasetVisible = me.chart.isDatasetVisible(datasetIndex);

					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));

							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								momentsForDataset.push(labelMoment);

								if (datasetVisible) {
									// May have gone outside the scale ranges, make sure we keep the first and last ticks updated
									me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
									me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
								}
							}
						}, me);
					} else {
						// We have no labels. Use the ones from the scale
						momentsForDataset = scaleLabelMoments;
					}

					me.labelMoments.push(momentsForDataset);
				}, me);

				// Set these after we've done all the data
				if (me.options.time.min) {
					me.firstTick = me.parseTime(me.options.time.min);
				}

				if (me.options.time.max) {
					me.lastTick = me.parseTime(me.options.time.max);
				}

				// We will modify these, so clone for later
				me.firstTick = (me.firstTick || moment()).clone();
				me.lastTick = (me.lastTick || moment()).clone();
			},
			buildLabelDiffs: function() {
				var me = this;
				me.labelDiffs = [];
				var scaleLabelDiffs = [];
				// Parse common labels once
				if (me.chart.data.labels && me.chart.data.labels.length > 0) {
					helpers.each(me.chart.data.labels, function(label) {
						var labelMoment = me.parseTime(label);

						if (labelMoment.isValid()) {
							if (me.options.time.round) {
								labelMoment.startOf(me.options.time.round);
							}
							scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
						}
					}, me);
				}

				helpers.each(me.chart.data.datasets, function(dataset) {
					var diffsForDataset = [];

					if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
						helpers.each(dataset.data, function(value) {
							var labelMoment = me.parseTime(me.getRightValue(value));

							if (labelMoment.isValid()) {
								if (me.options.time.round) {
									labelMoment.startOf(me.options.time.round);
								}
								diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
							}
						}, me);
					} else {
						// We have no labels. Use common ones
						diffsForDataset = scaleLabelDiffs;
					}

					me.labelDiffs.push(diffsForDataset);
				}, me);
			},
			buildTicks: function() {
				var me = this;

				me.ctx.save();
				var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
				var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
				var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
				var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
				me.ctx.font = tickLabelFont;

				me.ticks = [];
				me.unitScale = 1; // How much we scale the unit by, ie 2 means 2x unit per step
				me.scaleSizeInUnits = 0; // How large the scale is in the base unit (seconds, minutes, etc)

				// Set unit override if applicable
				if (me.options.time.unit) {
					me.tickUnit = me.options.time.unit || 'day';
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
				} else {
					// Determine the smallest needed unit of the time
					var innerWidth = me.isHorizontal() ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.paddingBottom);

					// Crude approximation of what the label length might be
					var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
					var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
					var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
					var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
					tickLabelWidth = (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation);
					var labelCapacity = innerWidth / (tickLabelWidth);

					// Start as small as possible
					me.tickUnit = me.options.time.minUnit;
					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					me.displayFormat = me.options.time.displayFormats[me.tickUnit];

					var unitDefinitionIndex = 0;
					var unitDefinition = time.units[unitDefinitionIndex];

					// While we aren't ideal and we don't have units left
					while (unitDefinitionIndex < time.units.length) {
						// Can we scale this unit. If `false` we can scale infinitely
						me.unitScale = 1;

						if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
							// Use one of the prefedined steps
							for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
								if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
									me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
									break;
								}
							}

							break;
						} else if ((unitDefinition.maxStep === false) || (Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep)) {
							// We have a max step. Scale this unit
							me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
							break;
						} else {
							// Move to the next unit up
							++unitDefinitionIndex;
							unitDefinition = time.units[unitDefinitionIndex];

							me.tickUnit = unitDefinition.name;
							var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
							var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
							me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
							me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
						}
					}
				}

				var roundedStart;

				// Only round the first tick if we have no hard minimum
				if (!me.options.time.min) {
					me.firstTick = me.getMomentStartOf(me.firstTick);
					roundedStart = me.firstTick;
				} else {
					roundedStart = me.getMomentStartOf(me.firstTick);
				}

				// Only round the last tick if we have no hard maximum
				if (!me.options.time.max) {
					var roundedEnd = me.getMomentStartOf(me.lastTick);
					var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
					if (delta < 0) {
						// Do not use end of because we need me to be in the next time unit
						me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
					} else if (delta >= 0) {
						me.lastTick = roundedEnd;
					}

					me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
				}

				// Tick displayFormat override
				if (me.options.time.displayFormat) {
					me.displayFormat = me.options.time.displayFormat;
				}

				// first tick. will have been rounded correctly if options.time.min is not specified
				me.ticks.push(me.firstTick.clone());

				// For every unit in between the first and last moment, create a moment and add it to the ticks tick
				for (var i = 1; i <= me.scaleSizeInUnits; ++i) {
					var newTick = roundedStart.clone().add(i, me.tickUnit);

					// Are we greater than the max time
					if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
						break;
					}

					if (i % me.unitScale === 0) {
						me.ticks.push(newTick);
					}
				}

				// Always show the right tick
				var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
				if (diff !== 0 || me.scaleSizeInUnits === 0) {
					// this is a weird case. If the <max> option is the same as the end option, we can't just diff the times because the tick was created from the roundedStart
					// but the last tick was not rounded.
					if (me.options.time.max) {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
					} else {
						me.ticks.push(me.lastTick.clone());
						me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
					}
				}

				me.ctx.restore();

				// Invalidate label diffs cache
				me.labelDiffs = undefined;
			},
			// Get tooltip label
			getLabelForIndex: function(index, datasetIndex) {
				var me = this;
				var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';

				if (typeof me.chart.data.datasets[datasetIndex].data[0] === 'object') {
					label = me.getRightValue(me.chart.data.datasets[datasetIndex].data[index]);
				}

				// Format nicely
				if (me.options.time.tooltipFormat) {
					label = me.parseTime(label).format(me.options.time.tooltipFormat);
				}

				return label;
			},
			// Function to format an individual tick mark
			tickFormatFunction: function(tick, index, ticks) {
				var formattedTick = tick.format(this.displayFormat);
				var tickOpts = this.options.ticks;
				var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);

				if (callback) {
					return callback(formattedTick, index, ticks);
				}
				return formattedTick;
			},
			convertTicksToLabels: function() {
				var me = this;
				me.tickMoments = me.ticks;
				me.ticks = me.ticks.map(me.tickFormatFunction, me);
			},
			getPixelForValue: function(value, index, datasetIndex) {
				var me = this;
				var offset = null;
				if (index !== undefined && datasetIndex !== undefined) {
					offset = me.getLabelDiff(datasetIndex, index);
				}

				if (offset === null) {
					if (!value || !value.isValid) {
						// not already a moment object
						value = me.parseTime(me.getRightValue(value));
					}
					if (value && value.isValid && value.isValid()) {
						offset = value.diff(me.firstTick, me.tickUnit, true);
					}
				}

				if (offset !== null) {
					var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;

					if (me.isHorizontal()) {
						var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
						var valueOffset = (innerWidth * decimal) + me.paddingLeft;

						return me.left + Math.round(valueOffset);
					}
					var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
					var heightOffset = (innerHeight * decimal) + me.paddingTop;

					return me.top + Math.round(heightOffset);
				}
			},
			getPixelForTick: function(index) {
				return this.getPixelForValue(this.tickMoments[index], null, null);
			},
			getValueForPixel: function(pixel) {
				var me = this;
				var innerDimension = me.isHorizontal() ? me.width - (me.paddingLeft + me.paddingRight) : me.height - (me.paddingTop + me.paddingBottom);
				var offset = (pixel - (me.isHorizontal() ? me.left + me.paddingLeft : me.top + me.paddingTop)) / innerDimension;
				offset *= me.scaleSizeInUnits;
				return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
			},
			parseTime: function(label) {
				var me = this;
				if (typeof me.options.time.parser === 'string') {
					return moment(label, me.options.time.parser);
				}
				if (typeof me.options.time.parser === 'function') {
					return me.options.time.parser(label);
				}
				// Date objects
				if (typeof label.getMonth === 'function' || typeof label === 'number') {
					return moment(label);
				}
				// Moment support
				if (label.isValid && label.isValid()) {
					return label;
				}
				// Custom parsing (return an instance of moment)
				if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
					console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
					return me.options.time.format(label);
				}
				// Moment format parsing
				return moment(label, me.options.time.format);
			}
		});
		Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);

	};


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {//! moment.js
	//! version : 2.15.1
	//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
	//! license : MIT
	//! momentjs.com

	;(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    global.moment = factory()
	}(this, function () { 'use strict';

	    var hookCallback;

	    function utils_hooks__hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }

	    function isObjectEmpty(obj) {
	        var k;
	        for (k in obj) {
	            // even if its not own property I'd still call it non-empty
	            return false;
	        }
	        return true;
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function create_utc__createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;

	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function valid__isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid = isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            }
	            else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function valid__createInvalid (flags) {
	        var m = create_utc__createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = utils_hooks__hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i in momentProperties) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            utils_hooks__hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function warn(msg) {
	        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (utils_hooks__hooks.deprecationHandler != null) {
	                utils_hooks__hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (utils_hooks__hooks.deprecationHandler != null) {
	            utils_hooks__hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    utils_hooks__hooks.suppressDeprecationWarnings = false;
	    utils_hooks__hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }

	    function locale_set__set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _ordinalParseLenient.
	        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) &&
	                    !hasOwnProp(childConfig, prop) &&
	                    isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function locale_calendar__calendar (key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({unit: u, priority: priorities[u]});
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                get_set__set(this, unit, value);
	                utils_hooks__hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get_set__get(this, unit);
	            }
	        };
	    }

	    function get_set__get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }

	    function get_set__set (mom, unit, value) {
	        if (mom.isValid()) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }

	    // MOMENTS

	    function stringGet (units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }


	    function stringSet (units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


	    var regexes = {};

	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (typeof callback === 'number') {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        if (!m) {
	            return this._months;
	        }
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        if (!m) {
	            return this._monthsShort;
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    function units_month__handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = create_utc__createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return units_month__handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (typeof value !== 'number') {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            utils_hooks__hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get_set__get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }

	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    utils_hooks__hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    function createDate (y, m, d, h, M, s, ms) {
	        //can't just apply() to create a date:
	        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
	        var date = new Date(y, m, d, h, M, s, ms);

	        //the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	            date.setFullYear(y);
	        }
	        return date;
	    }

	    function createUTCDate (y) {
	        var date = new Date(Date.UTC.apply(null, arguments));

	        //the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	            date.setUTCFullYear(y);
	        }
	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 1st is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        if (!m) {
	            return this._weekdays;
	        }
	        return isArray(this._weekdays) ? this._weekdays[m.day()] :
	            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }

	    function day_of_week__handleStrictParse(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = create_utc__createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = create_utc__createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }

	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }

	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }


	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = create_utc__createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour he wants. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        ordinalParse: defaultOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse
	    };

	    // internal storage for locale config files
	    var locales = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return null;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && (typeof module !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                __webpack_require__(209)("./" + name);
	                // because defineLocale currently also sets the global locale, we
	                // want to undo that for lazy loaded locales
	                locale_locales__getSetGlobalLocale(oldLocale);
	            } catch (e) { }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function locale_locales__getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = locale_locales__getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, config) {
	        if (config !== null) {
	            var parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    // treat as if there is no base config
	                    deprecateSimple('parentLocaleUndefined',
	                            'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale, parentConfig = baseConfig;
	            // MERGE
	            if (locales[name] != null) {
	                parentConfig = locales[name]._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;

	            // backwards compat for now: also set the locale
	            locale_locales__getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function locale_locales__getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function locale_locales__listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    utils_hooks__hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
	        'which is not reliable across all browsers and versions. Non ISO date formats are ' +
	        'discouraged and will be removed in an upcoming major release. Please refer to ' +
	        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(utils_hooks__hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse)) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
	            week = defaults(w.w, 1);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from begining of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to begining of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    utils_hooks__hooks.ISO_8601 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === utils_hooks__hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }

	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!valid__isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || locale_locales__getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return valid__createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (format) {
	            configFromStringAndFormat(config);
	        }  else {
	            configFromInput(config);
	        }

	        if (!valid__isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (input === undefined) {
	            config._d = new Date(utils_hooks__hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (typeof(input) === 'object') {
	            configFromObject(config);
	        } else if (typeof(input) === 'number') {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            utils_hooks__hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (typeof(locale) === 'boolean') {
	            strict = locale;
	            locale = undefined;
	        }

	        if ((isObject(input) && isObjectEmpty(input)) ||
	                (isArray(input) && input.length === 0)) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function local__createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other < this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = local__createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return valid__createInvalid();
	            }
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return local__createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = locale_locales__getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // FORMATTING

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = ((string || '').match(matcher) || []);
	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            utils_hooks__hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return local__createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    utils_hooks__hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	            } else if (Math.abs(input) < 16) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    utils_hooks__hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm) {
	            this.utcOffset(this._tzm);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);

	            if (tZone === 0) {
	                this.utcOffset(0, true);
	            } else {
	                this.utcOffset(offsetFromString(matchOffset, this._i));
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? local__createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

	    function create__createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (typeof input === 'number') {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])                         * sign,
	                h  : toInt(match[HOUR])                         * sign,
	                m  : toInt(match[MINUTE])                       * sign,
	                s  : toInt(match[SECOND])                       * sign,
	                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    create__createDuration.fn = Duration.prototype;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {milliseconds: 0, months: 0};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = create__createDuration(val, period);
	            add_subtract__addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (days) {
	            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
	        }
	        if (months) {
	            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
	        }
	        if (updateOffset) {
	            utils_hooks__hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add_subtract__add      = createAdder(1, 'add');
	    var add_subtract__subtract = createAdder(-1, 'subtract');

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	    }

	    function moment_calendar__calendar (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || local__createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween (from, to, units, inclusivity) {
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	    }

	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : local__createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units || 'millisecond');
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }

	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input,units);
	    }

	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input,units);
	    }

	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            delta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        if (units === 'year' || units === 'month' || units === 'quarter') {
	            output = monthDiff(this, that);
	            if (units === 'quarter') {
	                output = output / 3;
	            } else if (units === 'year') {
	                output = output / 12;
	            }
	        } else {
	            delta = this - that;
	            output = units === 'second' ? delta / 1e3 : // 1000
	                units === 'minute' ? delta / 6e4 : // 1000 * 60
	                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
	                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
	                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
	                delta;
	        }
	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function moment_format__toISOString () {
	        var m = this.clone().utc();
	        if (0 < m.year() && m.year() <= 9999) {
	            if (isFunction(Date.prototype.toISOString)) {
	                // native implementation is ~50x faster, use it when we can
	                return this.toDate().toISOString();
	            } else {
	                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	            }
	        } else {
	            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
	        }
	    }

	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(local__createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 local__createLocal(time).isValid())) {
	            return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow (withoutSuffix) {
	        return this.to(local__createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = locale_locales__getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    function startOf (units) {
	        units = normalizeUnits(units);
	        // the following switch intentionally omits break keywords
	        // to utilize falling through the cases.
	        switch (units) {
	            case 'year':
	                this.month(0);
	                /* falls through */
	            case 'quarter':
	            case 'month':
	                this.date(1);
	                /* falls through */
	            case 'week':
	            case 'isoWeek':
	            case 'day':
	            case 'date':
	                this.hours(0);
	                /* falls through */
	            case 'hour':
	                this.minutes(0);
	                /* falls through */
	            case 'minute':
	                this.seconds(0);
	                /* falls through */
	            case 'second':
	                this.milliseconds(0);
	        }

	        // weeks are a special case
	        if (units === 'week') {
	            this.weekday(0);
	        }
	        if (units === 'isoWeek') {
	            this.isoWeekday(1);
	        }

	        // quarters are also special
	        if (units === 'quarter') {
	            this.month(Math.floor(this.month() / 3) * 3);
	        }

	        return this;
	    }

	    function endOf (units) {
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond') {
	            return this;
	        }

	        // 'date' is an alias for 'day', so it should be considered as such.
	        if (units === 'date') {
	            units = 'day';
	        }

	        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	    }

	    function to_type__valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate () {
	        return new Date(this.valueOf());
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function moment_valid__isValid () {
	        return valid__isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);


	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }

	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIOROITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0], 10);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var momentPrototype__proto = Moment.prototype;

	    momentPrototype__proto.add               = add_subtract__add;
	    momentPrototype__proto.calendar          = moment_calendar__calendar;
	    momentPrototype__proto.clone             = clone;
	    momentPrototype__proto.diff              = diff;
	    momentPrototype__proto.endOf             = endOf;
	    momentPrototype__proto.format            = format;
	    momentPrototype__proto.from              = from;
	    momentPrototype__proto.fromNow           = fromNow;
	    momentPrototype__proto.to                = to;
	    momentPrototype__proto.toNow             = toNow;
	    momentPrototype__proto.get               = stringGet;
	    momentPrototype__proto.invalidAt         = invalidAt;
	    momentPrototype__proto.isAfter           = isAfter;
	    momentPrototype__proto.isBefore          = isBefore;
	    momentPrototype__proto.isBetween         = isBetween;
	    momentPrototype__proto.isSame            = isSame;
	    momentPrototype__proto.isSameOrAfter     = isSameOrAfter;
	    momentPrototype__proto.isSameOrBefore    = isSameOrBefore;
	    momentPrototype__proto.isValid           = moment_valid__isValid;
	    momentPrototype__proto.lang              = lang;
	    momentPrototype__proto.locale            = locale;
	    momentPrototype__proto.localeData        = localeData;
	    momentPrototype__proto.max               = prototypeMax;
	    momentPrototype__proto.min               = prototypeMin;
	    momentPrototype__proto.parsingFlags      = parsingFlags;
	    momentPrototype__proto.set               = stringSet;
	    momentPrototype__proto.startOf           = startOf;
	    momentPrototype__proto.subtract          = add_subtract__subtract;
	    momentPrototype__proto.toArray           = toArray;
	    momentPrototype__proto.toObject          = toObject;
	    momentPrototype__proto.toDate            = toDate;
	    momentPrototype__proto.toISOString       = moment_format__toISOString;
	    momentPrototype__proto.toJSON            = toJSON;
	    momentPrototype__proto.toString          = toString;
	    momentPrototype__proto.unix              = unix;
	    momentPrototype__proto.valueOf           = to_type__valueOf;
	    momentPrototype__proto.creationData      = creationData;

	    // Year
	    momentPrototype__proto.year       = getSetYear;
	    momentPrototype__proto.isLeapYear = getIsLeapYear;

	    // Week Year
	    momentPrototype__proto.weekYear    = getSetWeekYear;
	    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

	    // Quarter
	    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

	    // Month
	    momentPrototype__proto.month       = getSetMonth;
	    momentPrototype__proto.daysInMonth = getDaysInMonth;

	    // Week
	    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
	    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
	    momentPrototype__proto.weeksInYear    = getWeeksInYear;
	    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

	    // Day
	    momentPrototype__proto.date       = getSetDayOfMonth;
	    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
	    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
	    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
	    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

	    // Hour
	    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

	    // Minute
	    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

	    // Second
	    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

	    // Millisecond
	    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

	    // Offset
	    momentPrototype__proto.utcOffset            = getSetOffset;
	    momentPrototype__proto.utc                  = setOffsetToUTC;
	    momentPrototype__proto.local                = setOffsetToLocal;
	    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
	    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    momentPrototype__proto.isDST                = isDaylightSavingTime;
	    momentPrototype__proto.isLocal              = isLocal;
	    momentPrototype__proto.isUtcOffset          = isUtcOffset;
	    momentPrototype__proto.isUtc                = isUtc;
	    momentPrototype__proto.isUTC                = isUtc;

	    // Timezone
	    momentPrototype__proto.zoneAbbr = getZoneAbbr;
	    momentPrototype__proto.zoneName = getZoneName;

	    // Deprecations
	    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	    var momentPrototype = momentPrototype__proto;

	    function moment__createUnix (input) {
	        return local__createLocal(input * 1000);
	    }

	    function moment__createInZone () {
	        return local__createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var prototype__proto = Locale.prototype;

	    prototype__proto.calendar        = locale_calendar__calendar;
	    prototype__proto.longDateFormat  = longDateFormat;
	    prototype__proto.invalidDate     = invalidDate;
	    prototype__proto.ordinal         = ordinal;
	    prototype__proto.preparse        = preParsePostFormat;
	    prototype__proto.postformat      = preParsePostFormat;
	    prototype__proto.relativeTime    = relative__relativeTime;
	    prototype__proto.pastFuture      = pastFuture;
	    prototype__proto.set             = locale_set__set;

	    // Month
	    prototype__proto.months            =        localeMonths;
	    prototype__proto.monthsShort       =        localeMonthsShort;
	    prototype__proto.monthsParse       =        localeMonthsParse;
	    prototype__proto.monthsRegex       = monthsRegex;
	    prototype__proto.monthsShortRegex  = monthsShortRegex;

	    // Week
	    prototype__proto.week = localeWeek;
	    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
	    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

	    // Day of Week
	    prototype__proto.weekdays       =        localeWeekdays;
	    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
	    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
	    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

	    prototype__proto.weekdaysRegex       =        weekdaysRegex;
	    prototype__proto.weekdaysShortRegex  =        weekdaysShortRegex;
	    prototype__proto.weekdaysMinRegex    =        weekdaysMinRegex;

	    // Hours
	    prototype__proto.isPM = localeIsPM;
	    prototype__proto.meridiem = localeMeridiem;

	    function lists__get (format, index, field, setter) {
	        var locale = locale_locales__getLocale();
	        var utc = create_utc__createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl (format, index, field) {
	        if (typeof format === 'number') {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return lists__get(format, index, field, 'month');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = lists__get(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (typeof format === 'number') {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = locale_locales__getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;

	        if (index != null) {
	            return lists__get(format, (index + shift) % 7, field, 'day');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function lists__listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function lists__listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function lists__listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function lists__listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function lists__listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    locale_locales__getSetGlobalLocale('en', {
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports
	    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
	    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

	    var mathAbs = Math.abs;

	    function duration_abs__abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function duration_add_subtract__addSubtract (duration, input, value, direction) {
	        var other = create__createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function duration_add_subtract__add (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function duration_add_subtract__subtract (input, value) {
	        return duration_add_subtract__addSubtract(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'year') {
	            days   = this._days   + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            return units === 'month' ? months : months / 12;
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function duration_as__valueOf () {
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asYears        = makeAs('y');

	    function duration_get__get (units) {
	        units = normalizeUnits(units);
	        return this[units + 's']();
	    }

	    function makeGetter(name) {
	        return function () {
	            return this._data[name];
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        s: 45,  // seconds to minute
	        m: 45,  // minutes to hour
	        h: 22,  // hours to day
	        d: 26,  // days to month
	        M: 11   // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
	        var duration = create__createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds < thresholds.s && ['s', seconds]  ||
	                minutes <= 1           && ['m']           ||
	                minutes < thresholds.m && ['mm', minutes] ||
	                hours   <= 1           && ['h']           ||
	                hours   < thresholds.h && ['hh', hours]   ||
	                days    <= 1           && ['d']           ||
	                days    < thresholds.d && ['dd', days]    ||
	                months  <= 1           && ['M']           ||
	                months  < thresholds.M && ['MM', months]  ||
	                years   <= 1           && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function duration_humanize__getSetRelativeTimeRounding (roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof(roundingFunction) === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        return true;
	    }

	    function humanize (withSuffix) {
	        var locale = this.localeData();
	        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var iso_string__abs = Math.abs;

	    function iso_string__toISOString() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        var seconds = iso_string__abs(this._milliseconds) / 1000;
	        var days         = iso_string__abs(this._days);
	        var months       = iso_string__abs(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds;
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        return (total < 0 ? '-' : '') +
	            'P' +
	            (Y ? Y + 'Y' : '') +
	            (M ? M + 'M' : '') +
	            (D ? D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? h + 'H' : '') +
	            (m ? m + 'M' : '') +
	            (s ? s + 'S' : '');
	    }

	    var duration_prototype__proto = Duration.prototype;

	    duration_prototype__proto.abs            = duration_abs__abs;
	    duration_prototype__proto.add            = duration_add_subtract__add;
	    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
	    duration_prototype__proto.as             = as;
	    duration_prototype__proto.asMilliseconds = asMilliseconds;
	    duration_prototype__proto.asSeconds      = asSeconds;
	    duration_prototype__proto.asMinutes      = asMinutes;
	    duration_prototype__proto.asHours        = asHours;
	    duration_prototype__proto.asDays         = asDays;
	    duration_prototype__proto.asWeeks        = asWeeks;
	    duration_prototype__proto.asMonths       = asMonths;
	    duration_prototype__proto.asYears        = asYears;
	    duration_prototype__proto.valueOf        = duration_as__valueOf;
	    duration_prototype__proto._bubble        = bubble;
	    duration_prototype__proto.get            = duration_get__get;
	    duration_prototype__proto.milliseconds   = milliseconds;
	    duration_prototype__proto.seconds        = seconds;
	    duration_prototype__proto.minutes        = minutes;
	    duration_prototype__proto.hours          = hours;
	    duration_prototype__proto.days           = days;
	    duration_prototype__proto.weeks          = weeks;
	    duration_prototype__proto.months         = months;
	    duration_prototype__proto.years          = years;
	    duration_prototype__proto.humanize       = humanize;
	    duration_prototype__proto.toISOString    = iso_string__toISOString;
	    duration_prototype__proto.toString       = iso_string__toISOString;
	    duration_prototype__proto.toJSON         = iso_string__toISOString;
	    duration_prototype__proto.locale         = locale;
	    duration_prototype__proto.localeData     = localeData;

	    // Deprecations
	    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
	    duration_prototype__proto.lang = lang;

	    // Side effect imports

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    utils_hooks__hooks.version = '2.15.1';

	    setHookCallback(local__createLocal);

	    utils_hooks__hooks.fn                    = momentPrototype;
	    utils_hooks__hooks.min                   = min;
	    utils_hooks__hooks.max                   = max;
	    utils_hooks__hooks.now                   = now;
	    utils_hooks__hooks.utc                   = create_utc__createUTC;
	    utils_hooks__hooks.unix                  = moment__createUnix;
	    utils_hooks__hooks.months                = lists__listMonths;
	    utils_hooks__hooks.isDate                = isDate;
	    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
	    utils_hooks__hooks.invalid               = valid__createInvalid;
	    utils_hooks__hooks.duration              = create__createDuration;
	    utils_hooks__hooks.isMoment              = isMoment;
	    utils_hooks__hooks.weekdays              = lists__listWeekdays;
	    utils_hooks__hooks.parseZone             = moment__createInZone;
	    utils_hooks__hooks.localeData            = locale_locales__getLocale;
	    utils_hooks__hooks.isDuration            = isDuration;
	    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
	    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
	    utils_hooks__hooks.defineLocale          = defineLocale;
	    utils_hooks__hooks.updateLocale          = updateLocale;
	    utils_hooks__hooks.locales               = locale_locales__listLocales;
	    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
	    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
	    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
	    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
	    utils_hooks__hooks.calendarFormat        = getCalendarFormat;
	    utils_hooks__hooks.prototype             = momentPrototype;

	    var _moment = utils_hooks__hooks;

	    return _moment;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(208)(module)))

/***/ },
/* 208 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./af": 210,
		"./af.js": 210,
		"./ar": 211,
		"./ar-ly": 212,
		"./ar-ly.js": 212,
		"./ar-ma": 213,
		"./ar-ma.js": 213,
		"./ar-sa": 214,
		"./ar-sa.js": 214,
		"./ar-tn": 215,
		"./ar-tn.js": 215,
		"./ar.js": 211,
		"./az": 216,
		"./az.js": 216,
		"./be": 217,
		"./be.js": 217,
		"./bg": 218,
		"./bg.js": 218,
		"./bn": 219,
		"./bn.js": 219,
		"./bo": 220,
		"./bo.js": 220,
		"./br": 221,
		"./br.js": 221,
		"./bs": 222,
		"./bs.js": 222,
		"./ca": 223,
		"./ca.js": 223,
		"./cs": 224,
		"./cs.js": 224,
		"./cv": 225,
		"./cv.js": 225,
		"./cy": 226,
		"./cy.js": 226,
		"./da": 227,
		"./da.js": 227,
		"./de": 228,
		"./de-at": 229,
		"./de-at.js": 229,
		"./de.js": 228,
		"./dv": 230,
		"./dv.js": 230,
		"./el": 231,
		"./el.js": 231,
		"./en-au": 232,
		"./en-au.js": 232,
		"./en-ca": 233,
		"./en-ca.js": 233,
		"./en-gb": 234,
		"./en-gb.js": 234,
		"./en-ie": 235,
		"./en-ie.js": 235,
		"./en-nz": 236,
		"./en-nz.js": 236,
		"./eo": 237,
		"./eo.js": 237,
		"./es": 238,
		"./es-do": 239,
		"./es-do.js": 239,
		"./es.js": 238,
		"./et": 240,
		"./et.js": 240,
		"./eu": 241,
		"./eu.js": 241,
		"./fa": 242,
		"./fa.js": 242,
		"./fi": 243,
		"./fi.js": 243,
		"./fo": 244,
		"./fo.js": 244,
		"./fr": 245,
		"./fr-ca": 246,
		"./fr-ca.js": 246,
		"./fr-ch": 247,
		"./fr-ch.js": 247,
		"./fr.js": 245,
		"./fy": 248,
		"./fy.js": 248,
		"./gd": 249,
		"./gd.js": 249,
		"./gl": 250,
		"./gl.js": 250,
		"./he": 251,
		"./he.js": 251,
		"./hi": 252,
		"./hi.js": 252,
		"./hr": 253,
		"./hr.js": 253,
		"./hu": 254,
		"./hu.js": 254,
		"./hy-am": 255,
		"./hy-am.js": 255,
		"./id": 256,
		"./id.js": 256,
		"./is": 257,
		"./is.js": 257,
		"./it": 258,
		"./it.js": 258,
		"./ja": 259,
		"./ja.js": 259,
		"./jv": 260,
		"./jv.js": 260,
		"./ka": 261,
		"./ka.js": 261,
		"./kk": 262,
		"./kk.js": 262,
		"./km": 263,
		"./km.js": 263,
		"./ko": 264,
		"./ko.js": 264,
		"./ky": 265,
		"./ky.js": 265,
		"./lb": 266,
		"./lb.js": 266,
		"./lo": 267,
		"./lo.js": 267,
		"./lt": 268,
		"./lt.js": 268,
		"./lv": 269,
		"./lv.js": 269,
		"./me": 270,
		"./me.js": 270,
		"./mi": 271,
		"./mi.js": 271,
		"./mk": 272,
		"./mk.js": 272,
		"./ml": 273,
		"./ml.js": 273,
		"./mr": 274,
		"./mr.js": 274,
		"./ms": 275,
		"./ms-my": 276,
		"./ms-my.js": 276,
		"./ms.js": 275,
		"./my": 277,
		"./my.js": 277,
		"./nb": 278,
		"./nb.js": 278,
		"./ne": 279,
		"./ne.js": 279,
		"./nl": 280,
		"./nl.js": 280,
		"./nn": 281,
		"./nn.js": 281,
		"./pa-in": 282,
		"./pa-in.js": 282,
		"./pl": 283,
		"./pl.js": 283,
		"./pt": 284,
		"./pt-br": 285,
		"./pt-br.js": 285,
		"./pt.js": 284,
		"./ro": 286,
		"./ro.js": 286,
		"./ru": 287,
		"./ru.js": 287,
		"./se": 288,
		"./se.js": 288,
		"./si": 289,
		"./si.js": 289,
		"./sk": 290,
		"./sk.js": 290,
		"./sl": 291,
		"./sl.js": 291,
		"./sq": 292,
		"./sq.js": 292,
		"./sr": 293,
		"./sr-cyrl": 294,
		"./sr-cyrl.js": 294,
		"./sr.js": 293,
		"./ss": 295,
		"./ss.js": 295,
		"./sv": 296,
		"./sv.js": 296,
		"./sw": 297,
		"./sw.js": 297,
		"./ta": 298,
		"./ta.js": 298,
		"./te": 299,
		"./te.js": 299,
		"./th": 300,
		"./th.js": 300,
		"./tl-ph": 301,
		"./tl-ph.js": 301,
		"./tlh": 302,
		"./tlh.js": 302,
		"./tr": 303,
		"./tr.js": 303,
		"./tzl": 304,
		"./tzl.js": 304,
		"./tzm": 305,
		"./tzm-latn": 306,
		"./tzm-latn.js": 306,
		"./tzm.js": 305,
		"./uk": 307,
		"./uk.js": 307,
		"./uz": 308,
		"./uz.js": 308,
		"./vi": 309,
		"./vi.js": 309,
		"./x-pseudo": 310,
		"./x-pseudo.js": 310,
		"./zh-cn": 311,
		"./zh-cn.js": 311,
		"./zh-hk": 312,
		"./zh-hk.js": 312,
		"./zh-tw": 313,
		"./zh-tw.js": 313
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 209;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Afrikaans [af]
	//! author : Werner Mollentze : https://github.com/wernerm

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var af = moment.defineLocale('af', {
	        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
	        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
	        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
	        meridiemParse: /vm|nm/i,
	        isPM : function (input) {
	            return /^nm$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'vm' : 'VM';
	            } else {
	                return isLower ? 'nm' : 'NM';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Vandag om] LT',
	            nextDay : '[Môre om] LT',
	            nextWeek : 'dddd [om] LT',
	            lastDay : '[Gister om] LT',
	            lastWeek : '[Laas] dddd [om] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'oor %s',
	            past : '%s gelede',
	            s : '\'n paar sekondes',
	            m : '\'n minuut',
	            mm : '%d minute',
	            h : '\'n uur',
	            hh : '%d ure',
	            d : '\'n dag',
	            dd : '%d dae',
	            M : '\'n maand',
	            MM : '%d maande',
	            y : '\'n jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
	        },
	        week : {
	            dow : 1, // Maandag is die eerste dag van die week.
	            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
	        }
	    });

	    return af;

	}));

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic [ar]
	//! author : Abdel Said: https://github.com/abdelsaid
	//! author : Ahmed Elkhatib
	//! author : forabi https://github.com/forabi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'كانون الثاني يناير',
	        'شباط فبراير',
	        'آذار مارس',
	        'نيسان أبريل',
	        'أيار مايو',
	        'حزيران يونيو',
	        'تموز يوليو',
	        'آب أغسطس',
	        'أيلول سبتمبر',
	        'تشرين الأول أكتوبر',
	        'تشرين الثاني نوفمبر',
	        'كانون الأول ديسمبر'
	    ];

	    var ar = moment.defineLocale('ar', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar;

	}));

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Lybia) [ar-ly]
	//! author : Ali Hmer: https://github.com/kikoanis

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '1',
	        '2': '2',
	        '3': '3',
	        '4': '4',
	        '5': '5',
	        '6': '6',
	        '7': '7',
	        '8': '8',
	        '9': '9',
	        '0': '0'
	    }, pluralForm = function (n) {
	        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
	    }, plurals = {
	        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
	        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
	        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
	        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
	        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
	        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
	    }, pluralize = function (u) {
	        return function (number, withoutSuffix, string, isFuture) {
	            var f = pluralForm(number),
	                str = plurals[u][pluralForm(number)];
	            if (f === 2) {
	                str = str[withoutSuffix ? 0 : 1];
	            }
	            return str.replace(/%d/i, number);
	        };
	    }, months = [
	        'يناير',
	        'فبراير',
	        'مارس',
	        'أبريل',
	        'مايو',
	        'يونيو',
	        'يوليو',
	        'أغسطس',
	        'سبتمبر',
	        'أكتوبر',
	        'نوفمبر',
	        'ديسمبر'
	    ];

	    var ar_ly = moment.defineLocale('ar-ly', {
	        months : months,
	        monthsShort : months,
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/\u200FM/\u200FYYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم عند الساعة] LT',
	            nextDay: '[غدًا عند الساعة] LT',
	            nextWeek: 'dddd [عند الساعة] LT',
	            lastDay: '[أمس عند الساعة] LT',
	            lastWeek: 'dddd [عند الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'بعد %s',
	            past : 'منذ %s',
	            s : pluralize('s'),
	            m : pluralize('m'),
	            mm : pluralize('m'),
	            h : pluralize('h'),
	            hh : pluralize('h'),
	            d : pluralize('d'),
	            dd : pluralize('d'),
	            M : pluralize('M'),
	            MM : pluralize('M'),
	            y : pluralize('y'),
	            yy : pluralize('y')
	        },
	        preparse: function (string) {
	            return string.replace(/\u200f/g, '').replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_ly;

	}));

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Morocco) [ar-ma]
	//! author : ElFadili Yassine : https://github.com/ElFadiliY
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_ma = moment.defineLocale('ar-ma', {
	        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
	        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_ma;

	}));

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Arabic (Saudi Arabia) [ar-sa]
	//! author : Suhail Alkowaileet : https://github.com/xsoh

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '١',
	        '2': '٢',
	        '3': '٣',
	        '4': '٤',
	        '5': '٥',
	        '6': '٦',
	        '7': '٧',
	        '8': '٨',
	        '9': '٩',
	        '0': '٠'
	    }, numberMap = {
	        '١': '1',
	        '٢': '2',
	        '٣': '3',
	        '٤': '4',
	        '٥': '5',
	        '٦': '6',
	        '٧': '7',
	        '٨': '8',
	        '٩': '9',
	        '٠': '0'
	    };

	    var ar_sa = moment.defineLocale('ar-sa', {
	        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ص|م/,
	        isPM : function (input) {
	            return 'م' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ص';
	            } else {
	                return 'م';
	            }
	        },
	        calendar : {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'في %s',
	            past : 'منذ %s',
	            s : 'ثوان',
	            m : 'دقيقة',
	            mm : '%d دقائق',
	            h : 'ساعة',
	            hh : '%d ساعات',
	            d : 'يوم',
	            dd : '%d أيام',
	            M : 'شهر',
	            MM : '%d أشهر',
	            y : 'سنة',
	            yy : '%d سنوات'
	        },
	        preparse: function (string) {
	            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ar_sa;

	}));

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale  :  Arabic (Tunisia) [ar-tn]
	//! author : Nader Toukabri : https://github.com/naderio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ar_tn = moment.defineLocale('ar-tn', {
	        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
	        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
	        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
	        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[اليوم على الساعة] LT',
	            nextDay: '[غدا على الساعة] LT',
	            nextWeek: 'dddd [على الساعة] LT',
	            lastDay: '[أمس على الساعة] LT',
	            lastWeek: 'dddd [على الساعة] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'في %s',
	            past: 'منذ %s',
	            s: 'ثوان',
	            m: 'دقيقة',
	            mm: '%d دقائق',
	            h: 'ساعة',
	            hh: '%d ساعات',
	            d: 'يوم',
	            dd: '%d أيام',
	            M: 'شهر',
	            MM: '%d أشهر',
	            y: 'سنة',
	            yy: '%d سنوات'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ar_tn;

	}));

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Azerbaijani [az]
	//! author : topchiyev : https://github.com/topchiyev

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '-inci',
	        5: '-inci',
	        8: '-inci',
	        70: '-inci',
	        80: '-inci',
	        2: '-nci',
	        7: '-nci',
	        20: '-nci',
	        50: '-nci',
	        3: '-üncü',
	        4: '-üncü',
	        100: '-üncü',
	        6: '-ncı',
	        9: '-uncu',
	        10: '-uncu',
	        30: '-uncu',
	        60: '-ıncı',
	        90: '-ıncı'
	    };

	    var az = moment.defineLocale('az', {
	        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
	        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
	        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
	        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
	        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[sabah saat] LT',
	            nextWeek : '[gələn həftə] dddd [saat] LT',
	            lastDay : '[dünən] LT',
	            lastWeek : '[keçən həftə] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s əvvəl',
	            s : 'birneçə saniyyə',
	            m : 'bir dəqiqə',
	            mm : '%d dəqiqə',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir il',
	            yy : '%d il'
	        },
	        meridiemParse: /gecə|səhər|gündüz|axşam/,
	        isPM : function (input) {
	            return /^(gündüz|axşam)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'gecə';
	            } else if (hour < 12) {
	                return 'səhər';
	            } else if (hour < 17) {
	                return 'gündüz';
	            } else {
	                return 'axşam';
	            }
	        },
	        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '-ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return az;

	}));

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Belarusian [be]
	//! author : Dmitry Demidov : https://github.com/demidov91
	//! author: Praleska: http://praleska.pro/
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
	            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
	            'dd': 'дзень_дні_дзён',
	            'MM': 'месяц_месяцы_месяцаў',
	            'yy': 'год_гады_гадоў'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвіліна' : 'хвіліну';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'гадзіна' : 'гадзіну';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }

	    var be = moment.defineLocale('be', {
	        months : {
	            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
	            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
	        },
	        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
	        weekdays : {
	            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
	            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
	        },
	        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сёння ў] LT',
	            nextDay: '[Заўтра ў] LT',
	            lastDay: '[Учора ў] LT',
	            nextWeek: function () {
	                return '[У] dddd [ў] LT';
	            },
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return '[У мінулую] dddd [ў] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                        return '[У мінулы] dddd [ў] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'праз %s',
	            past : '%s таму',
	            s : 'некалькі секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithPlural,
	            hh : relativeTimeWithPlural,
	            d : 'дзень',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночы|раніцы|дня|вечара/,
	        isPM : function (input) {
	            return /^(дня|вечара)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночы';
	            } else if (hour < 12) {
	                return 'раніцы';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечара';
	            }
	        },
	        ordinalParse: /\d{1,2}-(і|ы|га)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
	                case 'D':
	                    return number + '-га';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return be;

	}));

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bulgarian [bg]
	//! author : Krasen Borisov : https://github.com/kraz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var bg = moment.defineLocale('bg', {
	        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Днес в] LT',
	            nextDay : '[Утре в] LT',
	            nextWeek : 'dddd [в] LT',
	            lastDay : '[Вчера в] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[В изминалата] dddd [в] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[В изминалия] dddd [в] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'след %s',
	            past : 'преди %s',
	            s : 'няколко секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дни',
	            M : 'месец',
	            MM : '%d месеца',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bg;

	}));

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bengali [bn]
	//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '১',
	        '2': '২',
	        '3': '৩',
	        '4': '৪',
	        '5': '৫',
	        '6': '৬',
	        '7': '৭',
	        '8': '৮',
	        '9': '৯',
	        '0': '০'
	    },
	    numberMap = {
	        '১': '1',
	        '২': '2',
	        '৩': '3',
	        '৪': '4',
	        '৫': '5',
	        '৬': '6',
	        '৭': '7',
	        '৮': '8',
	        '৯': '9',
	        '০': '0'
	    };

	    var bn = moment.defineLocale('bn', {
	        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
	        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
	        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
	        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
	        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm সময়',
	            LTS : 'A h:mm:ss সময়',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm সময়',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
	        },
	        calendar : {
	            sameDay : '[আজ] LT',
	            nextDay : '[আগামীকাল] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[গতকাল] LT',
	            lastWeek : '[গত] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s পরে',
	            past : '%s আগে',
	            s : 'কয়েক সেকেন্ড',
	            m : 'এক মিনিট',
	            mm : '%d মিনিট',
	            h : 'এক ঘন্টা',
	            hh : '%d ঘন্টা',
	            d : 'এক দিন',
	            dd : '%d দিন',
	            M : 'এক মাস',
	            MM : '%d মাস',
	            y : 'এক বছর',
	            yy : '%d বছর'
	        },
	        preparse: function (string) {
	            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'রাত' && hour >= 4) ||
	                    (meridiem === 'দুপুর' && hour < 5) ||
	                    meridiem === 'বিকাল') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'রাত';
	            } else if (hour < 10) {
	                return 'সকাল';
	            } else if (hour < 17) {
	                return 'দুপুর';
	            } else if (hour < 20) {
	                return 'বিকাল';
	            } else {
	                return 'রাত';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bn;

	}));

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tibetan [bo]
	//! author : Thupten N. Chakrishar : https://github.com/vajradog

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '༡',
	        '2': '༢',
	        '3': '༣',
	        '4': '༤',
	        '5': '༥',
	        '6': '༦',
	        '7': '༧',
	        '8': '༨',
	        '9': '༩',
	        '0': '༠'
	    },
	    numberMap = {
	        '༡': '1',
	        '༢': '2',
	        '༣': '3',
	        '༤': '4',
	        '༥': '5',
	        '༦': '6',
	        '༧': '7',
	        '༨': '8',
	        '༩': '9',
	        '༠': '0'
	    };

	    var bo = moment.defineLocale('bo', {
	        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
	        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
	        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[དི་རིང] LT',
	            nextDay : '[སང་ཉིན] LT',
	            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
	            lastDay : '[ཁ་སང] LT',
	            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ལ་',
	            past : '%s སྔན་ལ',
	            s : 'ལམ་སང',
	            m : 'སྐར་མ་གཅིག',
	            mm : '%d སྐར་མ',
	            h : 'ཆུ་ཚོད་གཅིག',
	            hh : '%d ཆུ་ཚོད',
	            d : 'ཉིན་གཅིག',
	            dd : '%d ཉིན་',
	            M : 'ཟླ་བ་གཅིག',
	            MM : '%d ཟླ་བ',
	            y : 'ལོ་གཅིག',
	            yy : '%d ལོ'
	        },
	        preparse: function (string) {
	            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
	                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
	                    meridiem === 'དགོང་དག') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'མཚན་མོ';
	            } else if (hour < 10) {
	                return 'ཞོགས་ཀས';
	            } else if (hour < 17) {
	                return 'ཉིན་གུང';
	            } else if (hour < 20) {
	                return 'དགོང་དག';
	            } else {
	                return 'མཚན་མོ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bo;

	}));

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Breton [br]
	//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithMutation(number, withoutSuffix, key) {
	        var format = {
	            'mm': 'munutenn',
	            'MM': 'miz',
	            'dd': 'devezh'
	        };
	        return number + ' ' + mutation(format[key], number);
	    }
	    function specialMutationForYears(number) {
	        switch (lastNumber(number)) {
	            case 1:
	            case 3:
	            case 4:
	            case 5:
	            case 9:
	                return number + ' bloaz';
	            default:
	                return number + ' vloaz';
	        }
	    }
	    function lastNumber(number) {
	        if (number > 9) {
	            return lastNumber(number % 10);
	        }
	        return number;
	    }
	    function mutation(text, number) {
	        if (number === 2) {
	            return softMutation(text);
	        }
	        return text;
	    }
	    function softMutation(text) {
	        var mutationTable = {
	            'm': 'v',
	            'b': 'v',
	            'd': 'z'
	        };
	        if (mutationTable[text.charAt(0)] === undefined) {
	            return text;
	        }
	        return mutationTable[text.charAt(0)] + text.substring(1);
	    }

	    var br = moment.defineLocale('br', {
	        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
	        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
	        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
	        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
	        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h[e]mm A',
	            LTS : 'h[e]mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [a viz] MMMM YYYY',
	            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
	            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
	        },
	        calendar : {
	            sameDay : '[Hiziv da] LT',
	            nextDay : '[Warc\'hoazh da] LT',
	            nextWeek : 'dddd [da] LT',
	            lastDay : '[Dec\'h da] LT',
	            lastWeek : 'dddd [paset da] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'a-benn %s',
	            past : '%s \'zo',
	            s : 'un nebeud segondennoù',
	            m : 'ur vunutenn',
	            mm : relativeTimeWithMutation,
	            h : 'un eur',
	            hh : '%d eur',
	            d : 'un devezh',
	            dd : relativeTimeWithMutation,
	            M : 'ur miz',
	            MM : relativeTimeWithMutation,
	            y : 'ur bloaz',
	            yy : specialMutationForYears
	        },
	        ordinalParse: /\d{1,2}(añ|vet)/,
	        ordinal : function (number) {
	            var output = (number === 1) ? 'añ' : 'vet';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return br;

	}));

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Bosnian [bs]
	//! author : Nedim Cholich : https://github.com/frontyard
	//! based on (hr) translation by Bojan Marković

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var bs = moment.defineLocale('bs', {
	        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return bs;

	}));

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Catalan [ca]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ca = moment.defineLocale('ca', {
	        months : 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
	        monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
	        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
	        weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextDay : function () {
	                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastDay : function () {
	                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'fa %s',
	            s : 'uns segons',
	            m : 'un minut',
	            mm : '%d minuts',
	            h : 'una hora',
	            hh : '%d hores',
	            d : 'un dia',
	            dd : '%d dies',
	            M : 'un mes',
	            MM : '%d mesos',
	            y : 'un any',
	            yy : '%d anys'
	        },
	        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
	        ordinal : function (number, period) {
	            var output = (number === 1) ? 'r' :
	                (number === 2) ? 'n' :
	                (number === 3) ? 'r' :
	                (number === 4) ? 't' : 'è';
	            if (period === 'w' || period === 'W') {
	                output = 'a';
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ca;

	}));

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Czech [cs]
	//! author : petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
	        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minuty' : 'minut');
	                } else {
	                    return result + 'minutami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodin');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dny' : 'dní');
	                } else {
	                    return result + 'dny';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'měsíce' : 'měsíců');
	                } else {
	                    return result + 'měsíci';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'let');
	                } else {
	                    return result + 'lety';
	                }
	                break;
	        }
	    }

	    var cs = moment.defineLocale('cs', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParse : (function (months, monthsShort) {
	            var i, _monthsParse = [];
	            for (i = 0; i < 12; i++) {
	                // use custom parser to solve problem with July (červenec)
	                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
	            }
	            return _monthsParse;
	        }(months, monthsShort)),
	        shortMonthsParse : (function (monthsShort) {
	            var i, _shortMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
	            }
	            return _shortMonthsParse;
	        }(monthsShort)),
	        longMonthsParse : (function (months) {
	            var i, _longMonthsParse = [];
	            for (i = 0; i < 12; i++) {
	                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
	            }
	            return _longMonthsParse;
	        }(months)),
	        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
	        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
	        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm',
	            l : 'D. M. YYYY'
	        },
	        calendar : {
	            sameDay: '[dnes v] LT',
	            nextDay: '[zítra v] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [v] LT';
	                    case 3:
	                        return '[ve středu v] LT';
	                    case 4:
	                        return '[ve čtvrtek v] LT';
	                    case 5:
	                        return '[v pátek v] LT';
	                    case 6:
	                        return '[v sobotu v] LT';
	                }
	            },
	            lastDay: '[včera v] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulou neděli v] LT';
	                    case 1:
	                    case 2:
	                        return '[minulé] dddd [v] LT';
	                    case 3:
	                        return '[minulou středu v] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [v] LT';
	                    case 6:
	                        return '[minulou sobotu v] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'před %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse : /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cs;

	}));

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chuvash [cv]
	//! author : Anatoly Mironov : https://github.com/mirontoli

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cv = moment.defineLocale('cv', {
	        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
	        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
	        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
	        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
	        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
	            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
	            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
	        },
	        calendar : {
	            sameDay: '[Паян] LT [сехетре]',
	            nextDay: '[Ыран] LT [сехетре]',
	            lastDay: '[Ӗнер] LT [сехетре]',
	            nextWeek: '[Ҫитес] dddd LT [сехетре]',
	            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (output) {
	                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
	                return output + affix;
	            },
	            past : '%s каялла',
	            s : 'пӗр-ик ҫеккунт',
	            m : 'пӗр минут',
	            mm : '%d минут',
	            h : 'пӗр сехет',
	            hh : '%d сехет',
	            d : 'пӗр кун',
	            dd : '%d кун',
	            M : 'пӗр уйӑх',
	            MM : '%d уйӑх',
	            y : 'пӗр ҫул',
	            yy : '%d ҫул'
	        },
	        ordinalParse: /\d{1,2}-мӗш/,
	        ordinal : '%d-мӗш',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return cv;

	}));

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Welsh [cy]
	//! author : Robert Allen : https://github.com/robgallen
	//! author : https://github.com/ryangreaves

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var cy = moment.defineLocale('cy', {
	        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
	        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
	        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
	        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
	        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
	        weekdaysParseExact : true,
	        // time formats are the same as en-gb
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[Heddiw am] LT',
	            nextDay: '[Yfory am] LT',
	            nextWeek: 'dddd [am] LT',
	            lastDay: '[Ddoe am] LT',
	            lastWeek: 'dddd [diwethaf am] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'mewn %s',
	            past: '%s yn ôl',
	            s: 'ychydig eiliadau',
	            m: 'munud',
	            mm: '%d munud',
	            h: 'awr',
	            hh: '%d awr',
	            d: 'diwrnod',
	            dd: '%d diwrnod',
	            M: 'mis',
	            MM: '%d mis',
	            y: 'blwyddyn',
	            yy: '%d flynedd'
	        },
	        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
	        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
	        ordinal: function (number) {
	            var b = number,
	                output = '',
	                lookup = [
	                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
	                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
	                ];
	            if (b > 20) {
	                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
	                    output = 'fed'; // not 30ain, 70ain or 90ain
	                } else {
	                    output = 'ain';
	                }
	            } else if (b > 0) {
	                output = lookup[b];
	            }
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return cy;

	}));

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Danish [da]
	//! author : Ulrik Nielsen : https://github.com/mrbase

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var da = moment.defineLocale('da', {
	        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[I dag kl.] LT',
	            nextDay : '[I morgen kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[I går kl.] LT',
	            lastWeek : '[sidste] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'få sekunder',
	            m : 'et minut',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dage',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'et år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return da;

	}));

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German [de]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de = moment.defineLocale('de', {
	        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de;

	}));

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : German (Austria) [de-at]
	//! author : lluchs : https://github.com/lluchs
	//! author: Menelion Elensúle: https://github.com/Oire
	//! author : Martin Groller : https://github.com/MadMG
	//! author : Mikolaj Dadela : https://github.com/mik01aj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eine Minute', 'einer Minute'],
	            'h': ['eine Stunde', 'einer Stunde'],
	            'd': ['ein Tag', 'einem Tag'],
	            'dd': [number + ' Tage', number + ' Tagen'],
	            'M': ['ein Monat', 'einem Monat'],
	            'MM': [number + ' Monate', number + ' Monaten'],
	            'y': ['ein Jahr', 'einem Jahr'],
	            'yy': [number + ' Jahre', number + ' Jahren']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }

	    var de_at = moment.defineLocale('de-at', {
	        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort : 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
	        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
	        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY HH:mm',
	            LLLL : 'dddd, D. MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[heute um] LT [Uhr]',
	            sameElse: 'L',
	            nextDay: '[morgen um] LT [Uhr]',
	            nextWeek: 'dddd [um] LT [Uhr]',
	            lastDay: '[gestern um] LT [Uhr]',
	            lastWeek: '[letzten] dddd [um] LT [Uhr]'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : 'vor %s',
	            s : 'ein paar Sekunden',
	            m : processRelativeTime,
	            mm : '%d Minuten',
	            h : processRelativeTime,
	            hh : '%d Stunden',
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return de_at;

	}));

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maldivian [dv]
	//! author : Jawish Hameed : https://github.com/jawish

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = [
	        'ޖެނުއަރީ',
	        'ފެބްރުއަރީ',
	        'މާރިޗު',
	        'އޭޕްރީލު',
	        'މޭ',
	        'ޖޫން',
	        'ޖުލައި',
	        'އޯގަސްޓު',
	        'ސެޕްޓެމްބަރު',
	        'އޮކްޓޯބަރު',
	        'ނޮވެމްބަރު',
	        'ޑިސެމްބަރު'
	    ], weekdays = [
	        'އާދިއްތަ',
	        'ހޯމަ',
	        'އަންގާރަ',
	        'ބުދަ',
	        'ބުރާސްފަތި',
	        'ހުކުރު',
	        'ހޮނިހިރު'
	    ];

	    var dv = moment.defineLocale('dv', {
	        months : months,
	        monthsShort : months,
	        weekdays : weekdays,
	        weekdaysShort : weekdays,
	        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
	        longDateFormat : {

	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'D/M/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /މކ|މފ/,
	        isPM : function (input) {
	            return 'މފ' === input;
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'މކ';
	            } else {
	                return 'މފ';
	            }
	        },
	        calendar : {
	            sameDay : '[މިއަދު] LT',
	            nextDay : '[މާދަމާ] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[އިއްޔެ] LT',
	            lastWeek : '[ފާއިތުވި] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ތެރޭގައި %s',
	            past : 'ކުރިން %s',
	            s : 'ސިކުންތުކޮޅެއް',
	            m : 'މިނިޓެއް',
	            mm : 'މިނިޓު %d',
	            h : 'ގަޑިއިރެއް',
	            hh : 'ގަޑިއިރު %d',
	            d : 'ދުވަހެއް',
	            dd : 'ދުވަސް %d',
	            M : 'މަހެއް',
	            MM : 'މަސް %d',
	            y : 'އަހަރެއް',
	            yy : 'އަހަރު %d'
	        },
	        preparse: function (string) {
	            return string.replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/,/g, '،');
	        },
	        week : {
	            dow : 7,  // Sunday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return dv;

	}));

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Greek [el]
	//! author : Aggelos Karalias : https://github.com/mehiel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }


	    var el = moment.defineLocale('el', {
	        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
	        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
	        months : function (momentToFormat, format) {
	            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
	                return this._monthsGenitiveEl[momentToFormat.month()];
	            } else {
	                return this._monthsNominativeEl[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
	        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
	        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
	        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'μμ' : 'ΜΜ';
	            } else {
	                return isLower ? 'πμ' : 'ΠΜ';
	            }
	        },
	        isPM : function (input) {
	            return ((input + '').toLowerCase()[0] === 'μ');
	        },
	        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendarEl : {
	            sameDay : '[Σήμερα {}] LT',
	            nextDay : '[Αύριο {}] LT',
	            nextWeek : 'dddd [{}] LT',
	            lastDay : '[Χθες {}] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 6:
	                        return '[το προηγούμενο] dddd [{}] LT';
	                    default:
	                        return '[την προηγούμενη] dddd [{}] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        calendar : function (key, mom) {
	            var output = this._calendarEl[key],
	                hours = mom && mom.hours();
	            if (isFunction(output)) {
	                output = output.apply(mom);
	            }
	            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
	        },
	        relativeTime : {
	            future : 'σε %s',
	            past : '%s πριν',
	            s : 'λίγα δευτερόλεπτα',
	            m : 'ένα λεπτό',
	            mm : '%d λεπτά',
	            h : 'μία ώρα',
	            hh : '%d ώρες',
	            d : 'μία μέρα',
	            dd : '%d μέρες',
	            M : 'ένας μήνας',
	            MM : '%d μήνες',
	            y : 'ένας χρόνος',
	            yy : '%d χρόνια'
	        },
	        ordinalParse: /\d{1,2}η/,
	        ordinal: '%dη',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4st is the first week of the year.
	        }
	    });

	    return el;

	}));

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Australia) [en-au]
	//! author : Jared Morse : https://github.com/jarcoal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_au = moment.defineLocale('en-au', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_au;

	}));

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Canada) [en-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_ca = moment.defineLocale('en-ca', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'YYYY-MM-DD',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY h:mm A',
	            LLLL : 'dddd, MMMM D, YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    return en_ca;

	}));

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (United Kingdom) [en-gb]
	//! author : Chris Gedrim : https://github.com/chrisgedrim

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_gb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_gb;

	}));

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (Ireland) [en-ie]
	//! author : Chris Cartlidge : https://github.com/chriscartlidge

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_ie = moment.defineLocale('en-ie', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_ie;

	}));

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : English (New Zealand) [en-nz]
	//! author : Luke McGregor : https://github.com/lukemcgregor

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var en_nz = moment.defineLocale('en-nz', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return en_nz;

	}));

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Esperanto [eo]
	//! author : Colin Dean : https://github.com/colindean
	//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
	//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eo = moment.defineLocale('eo', {
	        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
	        weekdays : 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
	        weekdaysShort : 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D[-an de] MMMM, YYYY',
	            LLL : 'D[-an de] MMMM, YYYY HH:mm',
	            LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
	        },
	        meridiemParse: /[ap]\.t\.m/i,
	        isPM: function (input) {
	            return input.charAt(0).toLowerCase() === 'p';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'p.t.m.' : 'P.T.M.';
	            } else {
	                return isLower ? 'a.t.m.' : 'A.T.M.';
	            }
	        },
	        calendar : {
	            sameDay : '[Hodiaŭ je] LT',
	            nextDay : '[Morgaŭ je] LT',
	            nextWeek : 'dddd [je] LT',
	            lastDay : '[Hieraŭ je] LT',
	            lastWeek : '[pasinta] dddd [je] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'je %s',
	            past : 'antaŭ %s',
	            s : 'sekundoj',
	            m : 'minuto',
	            mm : '%d minutoj',
	            h : 'horo',
	            hh : '%d horoj',
	            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
	            dd : '%d tagoj',
	            M : 'monato',
	            MM : '%d monatoj',
	            y : 'jaro',
	            yy : '%d jaroj'
	        },
	        ordinalParse: /\d{1,2}a/,
	        ordinal : '%da',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eo;

	}));

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish [es]
	//! author : Julio Napurí : https://github.com/julionc

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var es = moment.defineLocale('es', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es;

	}));

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Spanish (Dominican Republic) [es-do]

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
	        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

	    var es_do = moment.defineLocale('es-do', {
	        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShort[m.month()];
	            } else {
	                return monthsShortDot[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY h:mm A',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastDay : function () {
	                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            lastWeek : function () {
	                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'en %s',
	            past : 'hace %s',
	            s : 'unos segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'una hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un año',
	            yy : '%d años'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return es_do;

	}));

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Estonian [et]
	//! author : Henry Kehlmann : https://github.com/madhenry
	//! improvements : Illimar Tambek : https://github.com/ragulka

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
	            'm' : ['ühe minuti', 'üks minut'],
	            'mm': [number + ' minuti', number + ' minutit'],
	            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
	            'hh': [number + ' tunni', number + ' tundi'],
	            'd' : ['ühe päeva', 'üks päev'],
	            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
	            'MM': [number + ' kuu', number + ' kuud'],
	            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
	            'yy': [number + ' aasta', number + ' aastat']
	        };
	        if (withoutSuffix) {
	            return format[key][2] ? format[key][2] : format[key][1];
	        }
	        return isFuture ? format[key][0] : format[key][1];
	    }

	    var et = moment.defineLocale('et', {
	        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
	        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
	        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
	        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
	        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
	        longDateFormat : {
	            LT   : 'H:mm',
	            LTS : 'H:mm:ss',
	            L    : 'DD.MM.YYYY',
	            LL   : 'D. MMMM YYYY',
	            LLL  : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[Täna,] LT',
	            nextDay  : '[Homme,] LT',
	            nextWeek : '[Järgmine] dddd LT',
	            lastDay  : '[Eile,] LT',
	            lastWeek : '[Eelmine] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s pärast',
	            past   : '%s tagasi',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : '%d päeva',
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return et;

	}));

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Basque [eu]
	//! author : Eneko Illarramendi : https://github.com/eillarra

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var eu = moment.defineLocale('eu', {
	        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
	        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
	        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
	        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY[ko] MMMM[ren] D[a]',
	            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
	            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
	            l : 'YYYY-M-D',
	            ll : 'YYYY[ko] MMM D[a]',
	            lll : 'YYYY[ko] MMM D[a] HH:mm',
	            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
	        },
	        calendar : {
	            sameDay : '[gaur] LT[etan]',
	            nextDay : '[bihar] LT[etan]',
	            nextWeek : 'dddd LT[etan]',
	            lastDay : '[atzo] LT[etan]',
	            lastWeek : '[aurreko] dddd LT[etan]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s barru',
	            past : 'duela %s',
	            s : 'segundo batzuk',
	            m : 'minutu bat',
	            mm : '%d minutu',
	            h : 'ordu bat',
	            hh : '%d ordu',
	            d : 'egun bat',
	            dd : '%d egun',
	            M : 'hilabete bat',
	            MM : '%d hilabete',
	            y : 'urte bat',
	            yy : '%d urte'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return eu;

	}));

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Persian [fa]
	//! author : Ebrahim Byagowi : https://github.com/ebraminio

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '۱',
	        '2': '۲',
	        '3': '۳',
	        '4': '۴',
	        '5': '۵',
	        '6': '۶',
	        '7': '۷',
	        '8': '۸',
	        '9': '۹',
	        '0': '۰'
	    }, numberMap = {
	        '۱': '1',
	        '۲': '2',
	        '۳': '3',
	        '۴': '4',
	        '۵': '5',
	        '۶': '6',
	        '۷': '7',
	        '۸': '8',
	        '۹': '9',
	        '۰': '0'
	    };

	    var fa = moment.defineLocale('fa', {
	        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
	        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
	        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /قبل از ظهر|بعد از ظهر/,
	        isPM: function (input) {
	            return /بعد از ظهر/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'قبل از ظهر';
	            } else {
	                return 'بعد از ظهر';
	            }
	        },
	        calendar : {
	            sameDay : '[امروز ساعت] LT',
	            nextDay : '[فردا ساعت] LT',
	            nextWeek : 'dddd [ساعت] LT',
	            lastDay : '[دیروز ساعت] LT',
	            lastWeek : 'dddd [پیش] [ساعت] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'در %s',
	            past : '%s پیش',
	            s : 'چندین ثانیه',
	            m : 'یک دقیقه',
	            mm : '%d دقیقه',
	            h : 'یک ساعت',
	            hh : '%d ساعت',
	            d : 'یک روز',
	            dd : '%d روز',
	            M : 'یک ماه',
	            MM : '%d ماه',
	            y : 'یک سال',
	            yy : '%d سال'
	        },
	        preparse: function (string) {
	            return string.replace(/[۰-۹]/g, function (match) {
	                return numberMap[match];
	            }).replace(/،/g, ',');
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            }).replace(/,/g, '،');
	        },
	        ordinalParse: /\d{1,2}م/,
	        ordinal : '%dم',
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return fa;

	}));

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Finnish [fi]
	//! author : Tarmo Aidantausta : https://github.com/bleadof

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
	        numbersFuture = [
	            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
	            numbersPast[7], numbersPast[8], numbersPast[9]
	        ];
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = '';
	        switch (key) {
	            case 's':
	                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
	            case 'm':
	                return isFuture ? 'minuutin' : 'minuutti';
	            case 'mm':
	                result = isFuture ? 'minuutin' : 'minuuttia';
	                break;
	            case 'h':
	                return isFuture ? 'tunnin' : 'tunti';
	            case 'hh':
	                result = isFuture ? 'tunnin' : 'tuntia';
	                break;
	            case 'd':
	                return isFuture ? 'päivän' : 'päivä';
	            case 'dd':
	                result = isFuture ? 'päivän' : 'päivää';
	                break;
	            case 'M':
	                return isFuture ? 'kuukauden' : 'kuukausi';
	            case 'MM':
	                result = isFuture ? 'kuukauden' : 'kuukautta';
	                break;
	            case 'y':
	                return isFuture ? 'vuoden' : 'vuosi';
	            case 'yy':
	                result = isFuture ? 'vuoden' : 'vuotta';
	                break;
	        }
	        result = verbalNumber(number, isFuture) + ' ' + result;
	        return result;
	    }
	    function verbalNumber(number, isFuture) {
	        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
	    }

	    var fi = moment.defineLocale('fi', {
	        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
	        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
	        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
	        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'Do MMMM[ta] YYYY',
	            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
	            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
	            l : 'D.M.YYYY',
	            ll : 'Do MMM YYYY',
	            lll : 'Do MMM YYYY, [klo] HH.mm',
	            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
	        },
	        calendar : {
	            sameDay : '[tänään] [klo] LT',
	            nextDay : '[huomenna] [klo] LT',
	            nextWeek : 'dddd [klo] LT',
	            lastDay : '[eilen] [klo] LT',
	            lastWeek : '[viime] dddd[na] [klo] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s päästä',
	            past : '%s sitten',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fi;

	}));

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Faroese [fo]
	//! author : Ragnar Johannesen : https://github.com/ragnar123

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fo = moment.defineLocale('fo', {
	        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
	        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
	        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D. MMMM, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Í dag kl.] LT',
	            nextDay : '[Í morgin kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[Í gjár kl.] LT',
	            lastWeek : '[síðstu] dddd [kl] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'um %s',
	            past : '%s síðani',
	            s : 'fá sekund',
	            m : 'ein minutt',
	            mm : '%d minuttir',
	            h : 'ein tími',
	            hh : '%d tímar',
	            d : 'ein dagur',
	            dd : '%d dagar',
	            M : 'ein mánaði',
	            MM : '%d mánaðir',
	            y : 'eitt ár',
	            yy : '%d ár'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fo;

	}));

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French [fr]
	//! author : John Fischer : https://github.com/jfroffice

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr = moment.defineLocale('fr', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : '');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr;

	}));

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Canada) [fr-ca]
	//! author : Jonathan Abourbih : https://github.com/jonbca

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr_ca = moment.defineLocale('fr-ca', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        }
	    });

	    return fr_ca;

	}));

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : French (Switzerland) [fr-ch]
	//! author : Gaspard Bucher : https://github.com/gaspard

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var fr_ch = moment.defineLocale('fr-ch', {
	        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
	        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
	        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
	        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Aujourd\'hui à] LT',
	            nextDay: '[Demain à] LT',
	            nextWeek: 'dddd [à] LT',
	            lastDay: '[Hier à] LT',
	            lastWeek: 'dddd [dernier à] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dans %s',
	            past : 'il y a %s',
	            s : 'quelques secondes',
	            m : 'une minute',
	            mm : '%d minutes',
	            h : 'une heure',
	            hh : '%d heures',
	            d : 'un jour',
	            dd : '%d jours',
	            M : 'un mois',
	            MM : '%d mois',
	            y : 'un an',
	            yy : '%d ans'
	        },
	        ordinalParse: /\d{1,2}(er|e)/,
	        ordinal : function (number) {
	            return number + (number === 1 ? 'er' : 'e');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fr_ch;

	}));

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Frisian [fy]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

	    var fy = moment.defineLocale('fy', {
	        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },
	        monthsParseExact : true,
	        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
	        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
	        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[hjoed om] LT',
	            nextDay: '[moarn om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[juster om] LT',
	            lastWeek: '[ôfrûne] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'oer %s',
	            past : '%s lyn',
	            s : 'in pear sekonden',
	            m : 'ien minút',
	            mm : '%d minuten',
	            h : 'ien oere',
	            hh : '%d oeren',
	            d : 'ien dei',
	            dd : '%d dagen',
	            M : 'ien moanne',
	            MM : '%d moannen',
	            y : 'ien jier',
	            yy : '%d jierren'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return fy;

	}));

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Scottish Gaelic [gd]
	//! author : Jon Ashdown : https://github.com/jonashdown

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = [
	        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
	    ];

	    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

	    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

	    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

	    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

	    var gd = moment.defineLocale('gd', {
	        months : months,
	        monthsShort : monthsShort,
	        monthsParseExact : true,
	        weekdays : weekdays,
	        weekdaysShort : weekdaysShort,
	        weekdaysMin : weekdaysMin,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[An-diugh aig] LT',
	            nextDay : '[A-màireach aig] LT',
	            nextWeek : 'dddd [aig] LT',
	            lastDay : '[An-dè aig] LT',
	            lastWeek : 'dddd [seo chaidh] [aig] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ann an %s',
	            past : 'bho chionn %s',
	            s : 'beagan diogan',
	            m : 'mionaid',
	            mm : '%d mionaidean',
	            h : 'uair',
	            hh : '%d uairean',
	            d : 'latha',
	            dd : '%d latha',
	            M : 'mìos',
	            MM : '%d mìosan',
	            y : 'bliadhna',
	            yy : '%d bliadhna'
	        },
	        ordinalParse : /\d{1,2}(d|na|mh)/,
	        ordinal : function (number) {
	            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gd;

	}));

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Galician [gl]
	//! author : Juan G. Hurtado : https://github.com/juanghurtado

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var gl = moment.defineLocale('gl', {
	        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
	        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
	        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
	        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY H:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
	        },
	        calendar : {
	            sameDay : function () {
	                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextDay : function () {
	                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
	            },
	            nextWeek : function () {
	                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            lastDay : function () {
	                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
	            },
	            lastWeek : function () {
	                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (str) {
	                if (str.indexOf('un') === 0) {
	                    return 'n' + str;
	                }
	                return 'en ' + str;
	            },
	            past : 'hai %s',
	            s : 'uns segundos',
	            m : 'un minuto',
	            mm : '%d minutos',
	            h : 'unha hora',
	            hh : '%d horas',
	            d : 'un día',
	            dd : '%d días',
	            M : 'un mes',
	            MM : '%d meses',
	            y : 'un ano',
	            yy : '%d anos'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return gl;

	}));

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hebrew [he]
	//! author : Tomer Cohen : https://github.com/tomer
	//! author : Moshe Simantov : https://github.com/DevelopmentIL
	//! author : Tal Ater : https://github.com/TalAter

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var he = moment.defineLocale('he', {
	        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
	        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
	        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
	        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
	        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [ב]MMMM YYYY',
	            LLL : 'D [ב]MMMM YYYY HH:mm',
	            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
	            l : 'D/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[היום ב־]LT',
	            nextDay : '[מחר ב־]LT',
	            nextWeek : 'dddd [בשעה] LT',
	            lastDay : '[אתמול ב־]LT',
	            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'בעוד %s',
	            past : 'לפני %s',
	            s : 'מספר שניות',
	            m : 'דקה',
	            mm : '%d דקות',
	            h : 'שעה',
	            hh : function (number) {
	                if (number === 2) {
	                    return 'שעתיים';
	                }
	                return number + ' שעות';
	            },
	            d : 'יום',
	            dd : function (number) {
	                if (number === 2) {
	                    return 'יומיים';
	                }
	                return number + ' ימים';
	            },
	            M : 'חודש',
	            MM : function (number) {
	                if (number === 2) {
	                    return 'חודשיים';
	                }
	                return number + ' חודשים';
	            },
	            y : 'שנה',
	            yy : function (number) {
	                if (number === 2) {
	                    return 'שנתיים';
	                } else if (number % 10 === 0 && number !== 10) {
	                    return number + ' שנה';
	                }
	                return number + ' שנים';
	            }
	        },
	        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
	        isPM : function (input) {
	            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 5) {
	                return 'לפנות בוקר';
	            } else if (hour < 10) {
	                return 'בבוקר';
	            } else if (hour < 12) {
	                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
	            } else if (hour < 18) {
	                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
	            } else {
	                return 'בערב';
	            }
	        }
	    });

	    return he;

	}));

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hindi [hi]
	//! author : Mayank Singhal : https://github.com/mayanksinghal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var hi = moment.defineLocale('hi', {
	        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
	        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm बजे',
	            LTS : 'A h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[कल] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[कल] LT',
	            lastWeek : '[पिछले] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s में',
	            past : '%s पहले',
	            s : 'कुछ ही क्षण',
	            m : 'एक मिनट',
	            mm : '%d मिनट',
	            h : 'एक घंटा',
	            hh : '%d घंटे',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महीने',
	            MM : '%d महीने',
	            y : 'एक वर्ष',
	            yy : '%d वर्ष'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
	        meridiemParse: /रात|सुबह|दोपहर|शाम/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सुबह') {
	                return hour;
	            } else if (meridiem === 'दोपहर') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'शाम') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात';
	            } else if (hour < 10) {
	                return 'सुबह';
	            } else if (hour < 17) {
	                return 'दोपहर';
	            } else if (hour < 20) {
	                return 'शाम';
	            } else {
	                return 'रात';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hi;

	}));

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Croatian [hr]
	//! author : Bojan Marković : https://github.com/bmarkovic

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
	            case 'mm':
	                if (number === 1) {
	                    result += 'minuta';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'minute';
	                } else {
	                    result += 'minuta';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'jedan sat' : 'jednog sata';
	            case 'hh':
	                if (number === 1) {
	                    result += 'sat';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'sata';
	                } else {
	                    result += 'sati';
	                }
	                return result;
	            case 'dd':
	                if (number === 1) {
	                    result += 'dan';
	                } else {
	                    result += 'dana';
	                }
	                return result;
	            case 'MM':
	                if (number === 1) {
	                    result += 'mjesec';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'mjeseca';
	                } else {
	                    result += 'mjeseci';
	                }
	                return result;
	            case 'yy':
	                if (number === 1) {
	                    result += 'godina';
	                } else if (number === 2 || number === 3 || number === 4) {
	                    result += 'godine';
	                } else {
	                    result += 'godina';
	                }
	                return result;
	        }
	    }

	    var hr = moment.defineLocale('hr', {
	        months : {
	            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
	            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
	        },
	        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danas u] LT',
	            nextDay  : '[sutra u] LT',
	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[jučer u] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                        return '[prošlu] dddd [u] LT';
	                    case 6:
	                        return '[prošle] [subote] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prošli] dddd [u] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'par sekundi',
	            m      : translate,
	            mm     : translate,
	            h      : translate,
	            hh     : translate,
	            d      : 'dan',
	            dd     : translate,
	            M      : 'mjesec',
	            MM     : translate,
	            y      : 'godinu',
	            yy     : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hr;

	}));

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Hungarian [hu]
	//! author : Adam Brunner : https://github.com/adambrunner

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
	    function translate(number, withoutSuffix, key, isFuture) {
	        var num = number,
	            suffix;
	        switch (key) {
	            case 's':
	                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
	            case 'm':
	                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'mm':
	                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
	            case 'h':
	                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'hh':
	                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
	            case 'd':
	                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'dd':
	                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
	            case 'M':
	                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'MM':
	                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
	            case 'y':
	                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
	            case 'yy':
	                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
	        }
	        return '';
	    }
	    function week(isFuture) {
	        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
	    }

	    var hu = moment.defineLocale('hu', {
	        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
	        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
	        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
	        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
	        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY.MM.DD.',
	            LL : 'YYYY. MMMM D.',
	            LLL : 'YYYY. MMMM D. H:mm',
	            LLLL : 'YYYY. MMMM D., dddd H:mm'
	        },
	        meridiemParse: /de|du/i,
	        isPM: function (input) {
	            return input.charAt(1).toLowerCase() === 'u';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower === true ? 'de' : 'DE';
	            } else {
	                return isLower === true ? 'du' : 'DU';
	            }
	        },
	        calendar : {
	            sameDay : '[ma] LT[-kor]',
	            nextDay : '[holnap] LT[-kor]',
	            nextWeek : function () {
	                return week.call(this, true);
	            },
	            lastDay : '[tegnap] LT[-kor]',
	            lastWeek : function () {
	                return week.call(this, false);
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s múlva',
	            past : '%s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hu;

	}));

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Armenian [hy-am]
	//! author : Armendarabyan : https://github.com/armendarabyan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var hy_am = moment.defineLocale('hy-am', {
	        months : {
	            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
	            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
	        },
	        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
	        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
	        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY թ.',
	            LLL : 'D MMMM YYYY թ., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
	        },
	        calendar : {
	            sameDay: '[այսօր] LT',
	            nextDay: '[վաղը] LT',
	            lastDay: '[երեկ] LT',
	            nextWeek: function () {
	                return 'dddd [օրը ժամը] LT';
	            },
	            lastWeek: function () {
	                return '[անցած] dddd [օրը ժամը] LT';
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s հետո',
	            past : '%s առաջ',
	            s : 'մի քանի վայրկյան',
	            m : 'րոպե',
	            mm : '%d րոպե',
	            h : 'ժամ',
	            hh : '%d ժամ',
	            d : 'օր',
	            dd : '%d օր',
	            M : 'ամիս',
	            MM : '%d ամիս',
	            y : 'տարի',
	            yy : '%d տարի'
	        },
	        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
	        isPM: function (input) {
	            return /^(ցերեկվա|երեկոյան)$/.test(input);
	        },
	        meridiem : function (hour) {
	            if (hour < 4) {
	                return 'գիշերվա';
	            } else if (hour < 12) {
	                return 'առավոտվա';
	            } else if (hour < 17) {
	                return 'ցերեկվա';
	            } else {
	                return 'երեկոյան';
	            }
	        },
	        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'DDD':
	                case 'w':
	                case 'W':
	                case 'DDDo':
	                    if (number === 1) {
	                        return number + '-ին';
	                    }
	                    return number + '-րդ';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return hy_am;

	}));

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Indonesian [id]
	//! author : Mohammad Satrio Utomo : https://github.com/tyok
	//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var id = moment.defineLocale('id', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|siang|sore|malam/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'siang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sore' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'siang';
	            } else if (hours < 19) {
	                return 'sore';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Besok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kemarin pukul] LT',
	            lastWeek : 'dddd [lalu pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lalu',
	            s : 'beberapa detik',
	            m : 'semenit',
	            mm : '%d menit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return id;

	}));

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Icelandic [is]
	//! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(n) {
	        if (n % 100 === 11) {
	            return true;
	        } else if (n % 10 === 1) {
	            return false;
	        }
	        return true;
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
	            case 'm':
	                return withoutSuffix ? 'mínúta' : 'mínútu';
	            case 'mm':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
	                } else if (withoutSuffix) {
	                    return result + 'mínúta';
	                }
	                return result + 'mínútu';
	            case 'hh':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
	                }
	                return result + 'klukkustund';
	            case 'd':
	                if (withoutSuffix) {
	                    return 'dagur';
	                }
	                return isFuture ? 'dag' : 'degi';
	            case 'dd':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'dagar';
	                    }
	                    return result + (isFuture ? 'daga' : 'dögum');
	                } else if (withoutSuffix) {
	                    return result + 'dagur';
	                }
	                return result + (isFuture ? 'dag' : 'degi');
	            case 'M':
	                if (withoutSuffix) {
	                    return 'mánuður';
	                }
	                return isFuture ? 'mánuð' : 'mánuði';
	            case 'MM':
	                if (plural(number)) {
	                    if (withoutSuffix) {
	                        return result + 'mánuðir';
	                    }
	                    return result + (isFuture ? 'mánuði' : 'mánuðum');
	                } else if (withoutSuffix) {
	                    return result + 'mánuður';
	                }
	                return result + (isFuture ? 'mánuð' : 'mánuði');
	            case 'y':
	                return withoutSuffix || isFuture ? 'ár' : 'ári';
	            case 'yy':
	                if (plural(number)) {
	                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
	                }
	                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
	        }
	    }

	    var is = moment.defineLocale('is', {
	        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
	        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
	        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
	        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
	        },
	        calendar : {
	            sameDay : '[í dag kl.] LT',
	            nextDay : '[á morgun kl.] LT',
	            nextWeek : 'dddd [kl.] LT',
	            lastDay : '[í gær kl.] LT',
	            lastWeek : '[síðasta] dddd [kl.] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'eftir %s',
	            past : 'fyrir %s síðan',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : 'klukkustund',
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return is;

	}));

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Italian [it]
	//! author : Lorenzo : https://github.com/aliem
	//! author: Mattia Larentis: https://github.com/nostalgiaz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var it = moment.defineLocale('it', {
	        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
	        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
	        weekdays : 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
	        weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
	        weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Oggi alle] LT',
	            nextDay: '[Domani alle] LT',
	            nextWeek: 'dddd [alle] LT',
	            lastDay: '[Ieri alle] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[la scorsa] dddd [alle] LT';
	                    default:
	                        return '[lo scorso] dddd [alle] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
	            },
	            past : '%s fa',
	            s : 'alcuni secondi',
	            m : 'un minuto',
	            mm : '%d minuti',
	            h : 'un\'ora',
	            hh : '%d ore',
	            d : 'un giorno',
	            dd : '%d giorni',
	            M : 'un mese',
	            MM : '%d mesi',
	            y : 'un anno',
	            yy : '%d anni'
	        },
	        ordinalParse : /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return it;

	}));

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [ja]
	//! author : LI Long : https://github.com/baryon

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ja = moment.defineLocale('ja', {
	        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
	        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
	        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
	        longDateFormat : {
	            LT : 'Ah時m分',
	            LTS : 'Ah時m分s秒',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah時m分',
	            LLLL : 'YYYY年M月D日Ah時m分 dddd'
	        },
	        meridiemParse: /午前|午後/i,
	        isPM : function (input) {
	            return input === '午後';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return '午前';
	            } else {
	                return '午後';
	            }
	        },
	        calendar : {
	            sameDay : '[今日] LT',
	            nextDay : '[明日] LT',
	            nextWeek : '[来週]dddd LT',
	            lastDay : '[昨日] LT',
	            lastWeek : '[前週]dddd LT',
	            sameElse : 'L'
	        },
	        ordinalParse : /\d{1,2}日/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s後',
	            past : '%s前',
	            s : '数秒',
	            m : '1分',
	            mm : '%d分',
	            h : '1時間',
	            hh : '%d時間',
	            d : '1日',
	            dd : '%d日',
	            M : '1ヶ月',
	            MM : '%dヶ月',
	            y : '1年',
	            yy : '%d年'
	        }
	    });

	    return ja;

	}));

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Japanese [jv]
	//! author : Rony Lantip : https://github.com/lantip
	//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var jv = moment.defineLocale('jv', {
	        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
	        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
	        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
	        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /enjing|siyang|sonten|ndalu/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'enjing') {
	                return hour;
	            } else if (meridiem === 'siyang') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'enjing';
	            } else if (hours < 15) {
	                return 'siyang';
	            } else if (hours < 19) {
	                return 'sonten';
	            } else {
	                return 'ndalu';
	            }
	        },
	        calendar : {
	            sameDay : '[Dinten puniko pukul] LT',
	            nextDay : '[Mbenjang pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kala wingi pukul] LT',
	            lastWeek : 'dddd [kepengker pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'wonten ing %s',
	            past : '%s ingkang kepengker',
	            s : 'sawetawis detik',
	            m : 'setunggal menit',
	            mm : '%d menit',
	            h : 'setunggal jam',
	            hh : '%d jam',
	            d : 'sedinten',
	            dd : '%d dinten',
	            M : 'sewulan',
	            MM : '%d wulan',
	            y : 'setaun',
	            yy : '%d taun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return jv;

	}));

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Georgian [ka]
	//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ka = moment.defineLocale('ka', {
	        months : {
	            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
	            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
	        },
	        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
	        weekdays : {
	            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
	            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
	            isFormat: /(წინა|შემდეგ)/
	        },
	        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
	        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[დღეს] LT[-ზე]',
	            nextDay : '[ხვალ] LT[-ზე]',
	            lastDay : '[გუშინ] LT[-ზე]',
	            nextWeek : '[შემდეგ] dddd LT[-ზე]',
	            lastWeek : '[წინა] dddd LT-ზე',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : function (s) {
	                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
	                    s.replace(/ი$/, 'ში') :
	                    s + 'ში';
	            },
	            past : function (s) {
	                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
	                    return s.replace(/(ი|ე)$/, 'ის წინ');
	                }
	                if ((/წელი/).test(s)) {
	                    return s.replace(/წელი$/, 'წლის წინ');
	                }
	            },
	            s : 'რამდენიმე წამი',
	            m : 'წუთი',
	            mm : '%d წუთი',
	            h : 'საათი',
	            hh : '%d საათი',
	            d : 'დღე',
	            dd : '%d დღე',
	            M : 'თვე',
	            MM : '%d თვე',
	            y : 'წელი',
	            yy : '%d წელი'
	        },
	        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
	        ordinal : function (number) {
	            if (number === 0) {
	                return number;
	            }
	            if (number === 1) {
	                return number + '-ლი';
	            }
	            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
	                return 'მე-' + number;
	            }
	            return number + '-ე';
	        },
	        week : {
	            dow : 1,
	            doy : 7
	        }
	    });

	    return ka;

	}));

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kazakh [kk]
	//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        0: '-ші',
	        1: '-ші',
	        2: '-ші',
	        3: '-ші',
	        4: '-ші',
	        5: '-ші',
	        6: '-шы',
	        7: '-ші',
	        8: '-ші',
	        9: '-шы',
	        10: '-шы',
	        20: '-шы',
	        30: '-шы',
	        40: '-шы',
	        50: '-ші',
	        60: '-шы',
	        70: '-ші',
	        80: '-ші',
	        90: '-шы',
	        100: '-ші'
	    };

	    var kk = moment.defineLocale('kk', {
	        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
	        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
	        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
	        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
	        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгін сағат] LT',
	            nextDay : '[Ертең сағат] LT',
	            nextWeek : 'dddd [сағат] LT',
	            lastDay : '[Кеше сағат] LT',
	            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ішінде',
	            past : '%s бұрын',
	            s : 'бірнеше секунд',
	            m : 'бір минут',
	            mm : '%d минут',
	            h : 'бір сағат',
	            hh : '%d сағат',
	            d : 'бір күн',
	            dd : '%d күн',
	            M : 'бір ай',
	            MM : '%d ай',
	            y : 'бір жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(ші|шы)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return kk;

	}));

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Cambodian [km]
	//! author : Kruy Vanna : https://github.com/kruyvanna

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var km = moment.defineLocale('km', {
	        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
	        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
	            nextDay: '[ស្អែក ម៉ោង] LT',
	            nextWeek: 'dddd [ម៉ោង] LT',
	            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
	            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: '%sទៀត',
	            past: '%sមុន',
	            s: 'ប៉ុន្មានវិនាទី',
	            m: 'មួយនាទី',
	            mm: '%d នាទី',
	            h: 'មួយម៉ោង',
	            hh: '%d ម៉ោង',
	            d: 'មួយថ្ងៃ',
	            dd: '%d ថ្ងៃ',
	            M: 'មួយខែ',
	            MM: '%d ខែ',
	            y: 'មួយឆ្នាំ',
	            yy: '%d ឆ្នាំ'
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return km;

	}));

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Korean [ko]
	//! author : Kyungwook, Park : https://github.com/kyungw00k
	//! author : Jeeeyul Lee <jeeeyul@gmail.com>

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ko = moment.defineLocale('ko', {
	        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
	        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
	        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
	        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
	        longDateFormat : {
	            LT : 'A h시 m분',
	            LTS : 'A h시 m분 s초',
	            L : 'YYYY.MM.DD',
	            LL : 'YYYY년 MMMM D일',
	            LLL : 'YYYY년 MMMM D일 A h시 m분',
	            LLLL : 'YYYY년 MMMM D일 dddd A h시 m분'
	        },
	        calendar : {
	            sameDay : '오늘 LT',
	            nextDay : '내일 LT',
	            nextWeek : 'dddd LT',
	            lastDay : '어제 LT',
	            lastWeek : '지난주 dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s 후',
	            past : '%s 전',
	            s : '몇 초',
	            ss : '%d초',
	            m : '일분',
	            mm : '%d분',
	            h : '한 시간',
	            hh : '%d시간',
	            d : '하루',
	            dd : '%d일',
	            M : '한 달',
	            MM : '%d달',
	            y : '일 년',
	            yy : '%d년'
	        },
	        ordinalParse : /\d{1,2}일/,
	        ordinal : '%d일',
	        meridiemParse : /오전|오후/,
	        isPM : function (token) {
	            return token === '오후';
	        },
	        meridiem : function (hour, minute, isUpper) {
	            return hour < 12 ? '오전' : '오후';
	        }
	    });

	    return ko;

	}));

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Kyrgyz [ky]
	//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var suffixes = {
	        0: '-чү',
	        1: '-чи',
	        2: '-чи',
	        3: '-чү',
	        4: '-чү',
	        5: '-чи',
	        6: '-чы',
	        7: '-чи',
	        8: '-чи',
	        9: '-чу',
	        10: '-чу',
	        20: '-чы',
	        30: '-чу',
	        40: '-чы',
	        50: '-чү',
	        60: '-чы',
	        70: '-чи',
	        80: '-чи',
	        90: '-чу',
	        100: '-чү'
	    };

	    var ky = moment.defineLocale('ky', {
	        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
	        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
	        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
	        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бүгүн саат] LT',
	            nextDay : '[Эртең саат] LT',
	            nextWeek : 'dddd [саат] LT',
	            lastDay : '[Кече саат] LT',
	            lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ичинде',
	            past : '%s мурун',
	            s : 'бирнече секунд',
	            m : 'бир мүнөт',
	            mm : '%d мүнөт',
	            h : 'бир саат',
	            hh : '%d саат',
	            d : 'бир күн',
	            dd : '%d күн',
	            M : 'бир ай',
	            MM : '%d ай',
	            y : 'бир жыл',
	            yy : '%d жыл'
	        },
	        ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
	        ordinal : function (number) {
	            var a = number % 10,
	                b = number >= 100 ? 100 : null;
	            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ky;

	}));

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Luxembourgish [lb]
	//! author : mweimerskirch : https://github.com/mweimerskirch
	//! author : David Raison : https://github.com/kwisatz

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            'm': ['eng Minutt', 'enger Minutt'],
	            'h': ['eng Stonn', 'enger Stonn'],
	            'd': ['een Dag', 'engem Dag'],
	            'M': ['ee Mount', 'engem Mount'],
	            'y': ['ee Joer', 'engem Joer']
	        };
	        return withoutSuffix ? format[key][0] : format[key][1];
	    }
	    function processFutureTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'a ' + string;
	        }
	        return 'an ' + string;
	    }
	    function processPastTime(string) {
	        var number = string.substr(0, string.indexOf(' '));
	        if (eifelerRegelAppliesToNumber(number)) {
	            return 'viru ' + string;
	        }
	        return 'virun ' + string;
	    }
	    /**
	     * Returns true if the word before the given number loses the '-n' ending.
	     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
	     *
	     * @param number {integer}
	     * @returns {boolean}
	     */
	    function eifelerRegelAppliesToNumber(number) {
	        number = parseInt(number, 10);
	        if (isNaN(number)) {
	            return false;
	        }
	        if (number < 0) {
	            // Negative Number --> always true
	            return true;
	        } else if (number < 10) {
	            // Only 1 digit
	            if (4 <= number && number <= 7) {
	                return true;
	            }
	            return false;
	        } else if (number < 100) {
	            // 2 digits
	            var lastDigit = number % 10, firstDigit = number / 10;
	            if (lastDigit === 0) {
	                return eifelerRegelAppliesToNumber(firstDigit);
	            }
	            return eifelerRegelAppliesToNumber(lastDigit);
	        } else if (number < 10000) {
	            // 3 or 4 digits --> recursively check first digit
	            while (number >= 10) {
	                number = number / 10;
	            }
	            return eifelerRegelAppliesToNumber(number);
	        } else {
	            // Anything larger than 4 digits: recursively check first n-3 digits
	            number = number / 1000;
	            return eifelerRegelAppliesToNumber(number);
	        }
	    }

	    var lb = moment.defineLocale('lb', {
	        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
	        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
	        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
	        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm [Auer]',
	            LTS: 'H:mm:ss [Auer]',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm [Auer]',
	            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
	        },
	        calendar: {
	            sameDay: '[Haut um] LT',
	            sameElse: 'L',
	            nextDay: '[Muer um] LT',
	            nextWeek: 'dddd [um] LT',
	            lastDay: '[Gëschter um] LT',
	            lastWeek: function () {
	                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
	                switch (this.day()) {
	                    case 2:
	                    case 4:
	                        return '[Leschten] dddd [um] LT';
	                    default:
	                        return '[Leschte] dddd [um] LT';
	                }
	            }
	        },
	        relativeTime : {
	            future : processFutureTime,
	            past : processPastTime,
	            s : 'e puer Sekonnen',
	            m : processRelativeTime,
	            mm : '%d Minutten',
	            h : processRelativeTime,
	            hh : '%d Stonnen',
	            d : processRelativeTime,
	            dd : '%d Deeg',
	            M : processRelativeTime,
	            MM : '%d Méint',
	            y : processRelativeTime,
	            yy : '%d Joer'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal: '%d.',
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lb;

	}));

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lao [lo]
	//! author : Ryan Hart : https://github.com/ryanhart2

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var lo = moment.defineLocale('lo', {
	        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
	        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
	        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
	        },
	        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
	        isPM: function (input) {
	            return input === 'ຕອນແລງ';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ຕອນເຊົ້າ';
	            } else {
	                return 'ຕອນແລງ';
	            }
	        },
	        calendar : {
	            sameDay : '[ມື້ນີ້ເວລາ] LT',
	            nextDay : '[ມື້ອື່ນເວລາ] LT',
	            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
	            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
	            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'ອີກ %s',
	            past : '%sຜ່ານມາ',
	            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
	            m : '1 ນາທີ',
	            mm : '%d ນາທີ',
	            h : '1 ຊົ່ວໂມງ',
	            hh : '%d ຊົ່ວໂມງ',
	            d : '1 ມື້',
	            dd : '%d ມື້',
	            M : '1 ເດືອນ',
	            MM : '%d ເດືອນ',
	            y : '1 ປີ',
	            yy : '%d ປີ'
	        },
	        ordinalParse: /(ທີ່)\d{1,2}/,
	        ordinal : function (number) {
	            return 'ທີ່' + number;
	        }
	    });

	    return lo;

	}));

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Lithuanian [lt]
	//! author : Mindaugas Mozūras : https://github.com/mmozuras

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm' : 'minutė_minutės_minutę',
	        'mm': 'minutės_minučių_minutes',
	        'h' : 'valanda_valandos_valandą',
	        'hh': 'valandos_valandų_valandas',
	        'd' : 'diena_dienos_dieną',
	        'dd': 'dienos_dienų_dienas',
	        'M' : 'mėnuo_mėnesio_mėnesį',
	        'MM': 'mėnesiai_mėnesių_mėnesius',
	        'y' : 'metai_metų_metus',
	        'yy': 'metai_metų_metus'
	    };
	    function translateSeconds(number, withoutSuffix, key, isFuture) {
	        if (withoutSuffix) {
	            return 'kelios sekundės';
	        } else {
	            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
	        }
	    }
	    function translateSingular(number, withoutSuffix, key, isFuture) {
	        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
	    }
	    function special(number) {
	        return number % 10 === 0 || (number > 10 && number < 20);
	    }
	    function forms(key) {
	        return units[key].split('_');
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        if (number === 1) {
	            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
	        } else if (withoutSuffix) {
	            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
	        } else {
	            if (isFuture) {
	                return result + forms(key)[1];
	            } else {
	                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
	            }
	        }
	    }
	    var lt = moment.defineLocale('lt', {
	        months : {
	            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
	            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
	            isFormat: /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?|MMMM?(\[[^\[\]]*\]|\s+)+D[oD]?/
	        },
	        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
	        weekdays : {
	            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
	            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
	            isFormat: /dddd HH:mm/
	        },
	        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
	        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY [m.] MMMM D [d.]',
	            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY [m.] MMMM D [d.]',
	            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
	            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
	        },
	        calendar : {
	            sameDay : '[Šiandien] LT',
	            nextDay : '[Rytoj] LT',
	            nextWeek : 'dddd LT',
	            lastDay : '[Vakar] LT',
	            lastWeek : '[Praėjusį] dddd LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'po %s',
	            past : 'prieš %s',
	            s : translateSeconds,
	            m : translateSingular,
	            mm : translate,
	            h : translateSingular,
	            hh : translate,
	            d : translateSingular,
	            dd : translate,
	            M : translateSingular,
	            MM : translate,
	            y : translateSingular,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}-oji/,
	        ordinal : function (number) {
	            return number + '-oji';
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lt;

	}));

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Latvian [lv]
	//! author : Kristaps Karlsons : https://github.com/skakri
	//! author : Jānis Elmeris : https://github.com/JanisE

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var units = {
	        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
	        'h': 'stundas_stundām_stunda_stundas'.split('_'),
	        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
	        'd': 'dienas_dienām_diena_dienas'.split('_'),
	        'dd': 'dienas_dienām_diena_dienas'.split('_'),
	        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
	        'y': 'gada_gadiem_gads_gadi'.split('_'),
	        'yy': 'gada_gadiem_gads_gadi'.split('_')
	    };
	    /**
	     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
	     */
	    function format(forms, number, withoutSuffix) {
	        if (withoutSuffix) {
	            // E.g. "21 minūte", "3 minūtes".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
	        } else {
	            // E.g. "21 minūtes" as in "pēc 21 minūtes".
	            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
	            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
	        }
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        return number + ' ' + format(units[key], number, withoutSuffix);
	    }
	    function relativeTimeWithSingular(number, withoutSuffix, key) {
	        return format(units[key], number, withoutSuffix);
	    }
	    function relativeSeconds(number, withoutSuffix) {
	        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
	    }

	    var lv = moment.defineLocale('lv', {
	        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
	        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY.',
	            LL : 'YYYY. [gada] D. MMMM',
	            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
	            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
	        },
	        calendar : {
	            sameDay : '[Šodien pulksten] LT',
	            nextDay : '[Rīt pulksten] LT',
	            nextWeek : 'dddd [pulksten] LT',
	            lastDay : '[Vakar pulksten] LT',
	            lastWeek : '[Pagājušā] dddd [pulksten] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'pēc %s',
	            past : 'pirms %s',
	            s : relativeSeconds,
	            m : relativeTimeWithSingular,
	            mm : relativeTimeWithPlural,
	            h : relativeTimeWithSingular,
	            hh : relativeTimeWithPlural,
	            d : relativeTimeWithSingular,
	            dd : relativeTimeWithPlural,
	            M : relativeTimeWithSingular,
	            MM : relativeTimeWithPlural,
	            y : relativeTimeWithSingular,
	            yy : relativeTimeWithPlural
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return lv;

	}));

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Montenegrin [me]
	//! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jednog minuta'],
	            mm: ['minut', 'minuta', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mjesec', 'mjeseca', 'mjeseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var me = moment.defineLocale('me', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact : true,
	        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sjutra u] LT',

	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedjelju] [u] LT';
	                    case 3:
	                        return '[u] [srijedu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedjelje] [u] LT',
	                    '[prošlog] [ponedjeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srijede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'prije %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mjesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return me;

	}));

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Maori [mi]
	//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var mi = moment.defineLocale('mi', {
	        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
	        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
	        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
	        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
	        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
	        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY [i] HH:mm',
	            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
	        },
	        calendar: {
	            sameDay: '[i teie mahana, i] LT',
	            nextDay: '[apopo i] LT',
	            nextWeek: 'dddd [i] LT',
	            lastDay: '[inanahi i] LT',
	            lastWeek: 'dddd [whakamutunga i] LT',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'i roto i %s',
	            past: '%s i mua',
	            s: 'te hēkona ruarua',
	            m: 'he meneti',
	            mm: '%d meneti',
	            h: 'te haora',
	            hh: '%d haora',
	            d: 'he ra',
	            dd: '%d ra',
	            M: 'he marama',
	            MM: '%d marama',
	            y: 'he tau',
	            yy: '%d tau'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal: '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return mi;

	}));

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Macedonian [mk]
	//! author : Borislav Mickov : https://github.com/B0k0

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var mk = moment.defineLocale('mk', {
	        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
	        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
	        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
	        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
	        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'D.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay : '[Денес во] LT',
	            nextDay : '[Утре во] LT',
	            nextWeek : '[Во] dddd [во] LT',
	            lastDay : '[Вчера во] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 6:
	                        return '[Изминатата] dddd [во] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[Изминатиот] dddd [во] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'после %s',
	            past : 'пред %s',
	            s : 'неколку секунди',
	            m : 'минута',
	            mm : '%d минути',
	            h : 'час',
	            hh : '%d часа',
	            d : 'ден',
	            dd : '%d дена',
	            M : 'месец',
	            MM : '%d месеци',
	            y : 'година',
	            yy : '%d години'
	        },
	        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
	        ordinal : function (number) {
	            var lastDigit = number % 10,
	                last2Digits = number % 100;
	            if (number === 0) {
	                return number + '-ев';
	            } else if (last2Digits === 0) {
	                return number + '-ен';
	            } else if (last2Digits > 10 && last2Digits < 20) {
	                return number + '-ти';
	            } else if (lastDigit === 1) {
	                return number + '-ви';
	            } else if (lastDigit === 2) {
	                return number + '-ри';
	            } else if (lastDigit === 7 || lastDigit === 8) {
	                return number + '-ми';
	            } else {
	                return number + '-ти';
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mk;

	}));

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malayalam [ml]
	//! author : Floyd Pink : https://github.com/floydpink

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ml = moment.defineLocale('ml', {
	        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
	        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
	        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
	        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm -നു',
	            LTS : 'A h:mm:ss -നു',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm -നു',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
	        },
	        calendar : {
	            sameDay : '[ഇന്ന്] LT',
	            nextDay : '[നാളെ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ഇന്നലെ] LT',
	            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s കഴിഞ്ഞ്',
	            past : '%s മുൻപ്',
	            s : 'അൽപ നിമിഷങ്ങൾ',
	            m : 'ഒരു മിനിറ്റ്',
	            mm : '%d മിനിറ്റ്',
	            h : 'ഒരു മണിക്കൂർ',
	            hh : '%d മണിക്കൂർ',
	            d : 'ഒരു ദിവസം',
	            dd : '%d ദിവസം',
	            M : 'ഒരു മാസം',
	            MM : '%d മാസം',
	            y : 'ഒരു വർഷം',
	            yy : '%d വർഷം'
	        },
	        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if ((meridiem === 'രാത്രി' && hour >= 4) ||
	                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
	                    meridiem === 'വൈകുന്നേരം') {
	                return hour + 12;
	            } else {
	                return hour;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'രാത്രി';
	            } else if (hour < 12) {
	                return 'രാവിലെ';
	            } else if (hour < 17) {
	                return 'ഉച്ച കഴിഞ്ഞ്';
	            } else if (hour < 20) {
	                return 'വൈകുന്നേരം';
	            } else {
	                return 'രാത്രി';
	            }
	        }
	    });

	    return ml;

	}));

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Marathi [mr]
	//! author : Harshad Kale : https://github.com/kalehv
	//! author : Vivek Athalye : https://github.com/vnathalye

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    function relativeTimeMr(number, withoutSuffix, string, isFuture)
	    {
	        var output = '';
	        if (withoutSuffix) {
	            switch (string) {
	                case 's': output = 'काही सेकंद'; break;
	                case 'm': output = 'एक मिनिट'; break;
	                case 'mm': output = '%d मिनिटे'; break;
	                case 'h': output = 'एक तास'; break;
	                case 'hh': output = '%d तास'; break;
	                case 'd': output = 'एक दिवस'; break;
	                case 'dd': output = '%d दिवस'; break;
	                case 'M': output = 'एक महिना'; break;
	                case 'MM': output = '%d महिने'; break;
	                case 'y': output = 'एक वर्ष'; break;
	                case 'yy': output = '%d वर्षे'; break;
	            }
	        }
	        else {
	            switch (string) {
	                case 's': output = 'काही सेकंदां'; break;
	                case 'm': output = 'एका मिनिटा'; break;
	                case 'mm': output = '%d मिनिटां'; break;
	                case 'h': output = 'एका तासा'; break;
	                case 'hh': output = '%d तासां'; break;
	                case 'd': output = 'एका दिवसा'; break;
	                case 'dd': output = '%d दिवसां'; break;
	                case 'M': output = 'एका महिन्या'; break;
	                case 'MM': output = '%d महिन्यां'; break;
	                case 'y': output = 'एका वर्षा'; break;
	                case 'yy': output = '%d वर्षां'; break;
	            }
	        }
	        return output.replace(/%d/i, number);
	    }

	    var mr = moment.defineLocale('mr', {
	        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
	        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
	        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
	        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm वाजता',
	            LTS : 'A h:mm:ss वाजता',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm वाजता',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[उद्या] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[काल] LT',
	            lastWeek: '[मागील] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future: '%sमध्ये',
	            past: '%sपूर्वी',
	            s: relativeTimeMr,
	            m: relativeTimeMr,
	            mm: relativeTimeMr,
	            h: relativeTimeMr,
	            hh: relativeTimeMr,
	            d: relativeTimeMr,
	            dd: relativeTimeMr,
	            M: relativeTimeMr,
	            MM: relativeTimeMr,
	            y: relativeTimeMr,
	            yy: relativeTimeMr
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'रात्री') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'सकाळी') {
	                return hour;
	            } else if (meridiem === 'दुपारी') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'सायंकाळी') {
	                return hour + 12;
	            }
	        },
	        meridiem: function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'रात्री';
	            } else if (hour < 10) {
	                return 'सकाळी';
	            } else if (hour < 17) {
	                return 'दुपारी';
	            } else if (hour < 20) {
	                return 'सायंकाळी';
	            } else {
	                return 'रात्री';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return mr;

	}));

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms = moment.defineLocale('ms', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms;

	}));

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Malay [ms-my]
	//! note : DEPRECATED, the correct one is [ms]
	//! author : Weldan Jamili : https://github.com/weldan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var ms_my = moment.defineLocale('ms-my', {
	        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
	        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
	        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
	        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [pukul] HH.mm',
	            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
	        },
	        meridiemParse: /pagi|tengahari|petang|malam/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'pagi') {
	                return hour;
	            } else if (meridiem === 'tengahari') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'petang' || meridiem === 'malam') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'pagi';
	            } else if (hours < 15) {
	                return 'tengahari';
	            } else if (hours < 19) {
	                return 'petang';
	            } else {
	                return 'malam';
	            }
	        },
	        calendar : {
	            sameDay : '[Hari ini pukul] LT',
	            nextDay : '[Esok pukul] LT',
	            nextWeek : 'dddd [pukul] LT',
	            lastDay : '[Kelmarin pukul] LT',
	            lastWeek : 'dddd [lepas pukul] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'dalam %s',
	            past : '%s yang lepas',
	            s : 'beberapa saat',
	            m : 'seminit',
	            mm : '%d minit',
	            h : 'sejam',
	            hh : '%d jam',
	            d : 'sehari',
	            dd : '%d hari',
	            M : 'sebulan',
	            MM : '%d bulan',
	            y : 'setahun',
	            yy : '%d tahun'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ms_my;

	}));

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Burmese [my]
	//! author : Squar team, mysquar.com
	//! author : David Rossellat : https://github.com/gholadr
	//! author : Tin Aung Lin : https://github.com/thanyawzinmin

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '၁',
	        '2': '၂',
	        '3': '၃',
	        '4': '၄',
	        '5': '၅',
	        '6': '၆',
	        '7': '၇',
	        '8': '၈',
	        '9': '၉',
	        '0': '၀'
	    }, numberMap = {
	        '၁': '1',
	        '၂': '2',
	        '၃': '3',
	        '၄': '4',
	        '၅': '5',
	        '၆': '6',
	        '၇': '7',
	        '၈': '8',
	        '၉': '9',
	        '၀': '0'
	    };

	    var my = moment.defineLocale('my', {
	        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
	        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
	        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
	        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
	        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

	        longDateFormat: {
	            LT: 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L: 'DD/MM/YYYY',
	            LL: 'D MMMM YYYY',
	            LLL: 'D MMMM YYYY HH:mm',
	            LLLL: 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar: {
	            sameDay: '[ယနေ.] LT [မှာ]',
	            nextDay: '[မနက်ဖြန်] LT [မှာ]',
	            nextWeek: 'dddd LT [မှာ]',
	            lastDay: '[မနေ.က] LT [မှာ]',
	            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
	            sameElse: 'L'
	        },
	        relativeTime: {
	            future: 'လာမည့် %s မှာ',
	            past: 'လွန်ခဲ့သော %s က',
	            s: 'စက္ကန်.အနည်းငယ်',
	            m: 'တစ်မိနစ်',
	            mm: '%d မိနစ်',
	            h: 'တစ်နာရီ',
	            hh: '%d နာရီ',
	            d: 'တစ်ရက်',
	            dd: '%d ရက်',
	            M: 'တစ်လ',
	            MM: '%d လ',
	            y: 'တစ်နှစ်',
	            yy: '%d နှစ်'
	        },
	        preparse: function (string) {
	            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        week: {
	            dow: 1, // Monday is the first day of the week.
	            doy: 4 // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return my;

	}));

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Norwegian Bokmål [nb]
	//! authors : Espen Hovlandsdal : https://github.com/rexxars
	//!           Sigurd Gartmann : https://github.com/sigurdga

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nb = moment.defineLocale('nb', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
	        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
	        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[i dag kl.] LT',
	            nextDay: '[i morgen kl.] LT',
	            nextWeek: 'dddd [kl.] LT',
	            lastDay: '[i går kl.] LT',
	            lastWeek: '[forrige] dddd [kl.] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s siden',
	            s : 'noen sekunder',
	            m : 'ett minutt',
	            mm : '%d minutter',
	            h : 'en time',
	            hh : '%d timer',
	            d : 'en dag',
	            dd : '%d dager',
	            M : 'en måned',
	            MM : '%d måneder',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nb;

	}));

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nepalese [ne]
	//! author : suvash : https://github.com/suvash

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '१',
	        '2': '२',
	        '3': '३',
	        '4': '४',
	        '5': '५',
	        '6': '६',
	        '7': '७',
	        '8': '८',
	        '9': '९',
	        '0': '०'
	    },
	    numberMap = {
	        '१': '1',
	        '२': '2',
	        '३': '3',
	        '४': '4',
	        '५': '5',
	        '६': '6',
	        '७': '7',
	        '८': '8',
	        '९': '9',
	        '०': '0'
	    };

	    var ne = moment.defineLocale('ne', {
	        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
	        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
	        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
	        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'Aको h:mm बजे',
	            LTS : 'Aको h:mm:ss बजे',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, Aको h:mm बजे',
	            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
	        },
	        preparse: function (string) {
	            return string.replace(/[१२३४५६७८९०]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'राति') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'बिहान') {
	                return hour;
	            } else if (meridiem === 'दिउँसो') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'साँझ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 3) {
	                return 'राति';
	            } else if (hour < 12) {
	                return 'बिहान';
	            } else if (hour < 16) {
	                return 'दिउँसो';
	            } else if (hour < 20) {
	                return 'साँझ';
	            } else {
	                return 'राति';
	            }
	        },
	        calendar : {
	            sameDay : '[आज] LT',
	            nextDay : '[भोलि] LT',
	            nextWeek : '[आउँदो] dddd[,] LT',
	            lastDay : '[हिजो] LT',
	            lastWeek : '[गएको] dddd[,] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sमा',
	            past : '%s अगाडि',
	            s : 'केही क्षण',
	            m : 'एक मिनेट',
	            mm : '%d मिनेट',
	            h : 'एक घण्टा',
	            hh : '%d घण्टा',
	            d : 'एक दिन',
	            dd : '%d दिन',
	            M : 'एक महिना',
	            MM : '%d महिना',
	            y : 'एक बर्ष',
	            yy : '%d बर्ष'
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ne;

	}));

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Dutch [nl]
	//! author : Joris Röling : https://github.com/jorisroling
	//! author : Jacob Middag : https://github.com/middagj

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
	        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

	    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
	    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

	    var nl = moment.defineLocale('nl', {
	        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
	        monthsShort : function (m, format) {
	            if (/-MMM-/.test(format)) {
	                return monthsShortWithoutDots[m.month()];
	            } else {
	                return monthsShortWithDots[m.month()];
	            }
	        },

	        monthsRegex: monthsRegex,
	        monthsShortRegex: monthsRegex,
	        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
	        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
	        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
	        weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD-MM-YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[vandaag om] LT',
	            nextDay: '[morgen om] LT',
	            nextWeek: 'dddd [om] LT',
	            lastDay: '[gisteren om] LT',
	            lastWeek: '[afgelopen] dddd [om] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'over %s',
	            past : '%s geleden',
	            s : 'een paar seconden',
	            m : 'één minuut',
	            mm : '%d minuten',
	            h : 'één uur',
	            hh : '%d uur',
	            d : 'één dag',
	            dd : '%d dagen',
	            M : 'één maand',
	            MM : '%d maanden',
	            y : 'één jaar',
	            yy : '%d jaar'
	        },
	        ordinalParse: /\d{1,2}(ste|de)/,
	        ordinal : function (number) {
	            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nl;

	}));

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Nynorsk [nn]
	//! author : https://github.com/mechuwind

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var nn = moment.defineLocale('nn', {
	        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
	        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
	        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
	        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY [kl.] H:mm',
	            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[I dag klokka] LT',
	            nextDay: '[I morgon klokka] LT',
	            nextWeek: 'dddd [klokka] LT',
	            lastDay: '[I går klokka] LT',
	            lastWeek: '[Føregåande] dddd [klokka] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : '%s sidan',
	            s : 'nokre sekund',
	            m : 'eit minutt',
	            mm : '%d minutt',
	            h : 'ein time',
	            hh : '%d timar',
	            d : 'ein dag',
	            dd : '%d dagar',
	            M : 'ein månad',
	            MM : '%d månader',
	            y : 'eit år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return nn;

	}));

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Punjabi (India) [pa-in]
	//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '੧',
	        '2': '੨',
	        '3': '੩',
	        '4': '੪',
	        '5': '੫',
	        '6': '੬',
	        '7': '੭',
	        '8': '੮',
	        '9': '੯',
	        '0': '੦'
	    },
	    numberMap = {
	        '੧': '1',
	        '੨': '2',
	        '੩': '3',
	        '੪': '4',
	        '੫': '5',
	        '੬': '6',
	        '੭': '7',
	        '੮': '8',
	        '੯': '9',
	        '੦': '0'
	    };

	    var pa_in = moment.defineLocale('pa-in', {
	        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
	        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
	        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
	        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm ਵਜੇ',
	            LTS : 'A h:mm:ss ਵਜੇ',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
	        },
	        calendar : {
	            sameDay : '[ਅਜ] LT',
	            nextDay : '[ਕਲ] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[ਕਲ] LT',
	            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s ਵਿੱਚ',
	            past : '%s ਪਿਛਲੇ',
	            s : 'ਕੁਝ ਸਕਿੰਟ',
	            m : 'ਇਕ ਮਿੰਟ',
	            mm : '%d ਮਿੰਟ',
	            h : 'ਇੱਕ ਘੰਟਾ',
	            hh : '%d ਘੰਟੇ',
	            d : 'ਇੱਕ ਦਿਨ',
	            dd : '%d ਦਿਨ',
	            M : 'ਇੱਕ ਮਹੀਨਾ',
	            MM : '%d ਮਹੀਨੇ',
	            y : 'ਇੱਕ ਸਾਲ',
	            yy : '%d ਸਾਲ'
	        },
	        preparse: function (string) {
	            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
	        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
	        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ਰਾਤ') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ਸਵੇਰ') {
	                return hour;
	            } else if (meridiem === 'ਦੁਪਹਿਰ') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'ਸ਼ਾਮ') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ਰਾਤ';
	            } else if (hour < 10) {
	                return 'ਸਵੇਰ';
	            } else if (hour < 17) {
	                return 'ਦੁਪਹਿਰ';
	            } else if (hour < 20) {
	                return 'ਸ਼ਾਮ';
	            } else {
	                return 'ਰਾਤ';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return pa_in;

	}));

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Polish [pl]
	//! author : Rafal Hirsz : https://github.com/evoL

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
	        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
	    function plural(n) {
	        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
	    }
	    function translate(number, withoutSuffix, key) {
	        var result = number + ' ';
	        switch (key) {
	            case 'm':
	                return withoutSuffix ? 'minuta' : 'minutę';
	            case 'mm':
	                return result + (plural(number) ? 'minuty' : 'minut');
	            case 'h':
	                return withoutSuffix  ? 'godzina'  : 'godzinę';
	            case 'hh':
	                return result + (plural(number) ? 'godziny' : 'godzin');
	            case 'MM':
	                return result + (plural(number) ? 'miesiące' : 'miesięcy');
	            case 'yy':
	                return result + (plural(number) ? 'lata' : 'lat');
	        }
	    }

	    var pl = moment.defineLocale('pl', {
	        months : function (momentToFormat, format) {
	            if (format === '') {
	                // Hack: if format empty we know this is used to generate
	                // RegExp by moment. Give then back both valid forms of months
	                // in RegExp ready format.
	                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
	            } else if (/D MMMM/.test(format)) {
	                return monthsSubjective[momentToFormat.month()];
	            } else {
	                return monthsNominative[momentToFormat.month()];
	            }
	        },
	        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
	        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
	        weekdaysShort : 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
	        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Dziś o] LT',
	            nextDay: '[Jutro o] LT',
	            nextWeek: '[W] dddd [o] LT',
	            lastDay: '[Wczoraj o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[W zeszłą niedzielę o] LT';
	                    case 3:
	                        return '[W zeszłą środę o] LT';
	                    case 6:
	                        return '[W zeszłą sobotę o] LT';
	                    default:
	                        return '[W zeszły] dddd [o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : '%s temu',
	            s : 'kilka sekund',
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : '1 dzień',
	            dd : '%d dni',
	            M : 'miesiąc',
	            MM : translate,
	            y : 'rok',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pl;

	}));

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese [pt]
	//! author : Jefferson : https://github.com/jalex79

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt = moment.defineLocale('pt', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : 'há %s',
	            s : 'segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return pt;

	}));

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Portuguese (Brazil) [pt-br]
	//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var pt_br = moment.defineLocale('pt-br', {
	        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
	        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
	        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
	        weekdaysMin : 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D [de] MMMM [de] YYYY',
	            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
	            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hoje às] LT',
	            nextDay: '[Amanhã às] LT',
	            nextWeek: 'dddd [às] LT',
	            lastDay: '[Ontem às] LT',
	            lastWeek: function () {
	                return (this.day() === 0 || this.day() === 6) ?
	                    '[Último] dddd [às] LT' : // Saturday + Sunday
	                    '[Última] dddd [às] LT'; // Monday - Friday
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'em %s',
	            past : '%s atrás',
	            s : 'poucos segundos',
	            m : 'um minuto',
	            mm : '%d minutos',
	            h : 'uma hora',
	            hh : '%d horas',
	            d : 'um dia',
	            dd : '%d dias',
	            M : 'um mês',
	            MM : '%d meses',
	            y : 'um ano',
	            yy : '%d anos'
	        },
	        ordinalParse: /\d{1,2}º/,
	        ordinal : '%dº'
	    });

	    return pt_br;

	}));

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Romanian [ro]
	//! author : Vlad Gurdiga : https://github.com/gurdiga
	//! author : Valentin Agachi : https://github.com/avaly

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	                'mm': 'minute',
	                'hh': 'ore',
	                'dd': 'zile',
	                'MM': 'luni',
	                'yy': 'ani'
	            },
	            separator = ' ';
	        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
	            separator = ' de ';
	        }
	        return number + separator + format[key];
	    }

	    var ro = moment.defineLocale('ro', {
	        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
	        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
	        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
	        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY H:mm',
	            LLLL : 'dddd, D MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[azi la] LT',
	            nextDay: '[mâine la] LT',
	            nextWeek: 'dddd [la] LT',
	            lastDay: '[ieri la] LT',
	            lastWeek: '[fosta] dddd [la] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'peste %s',
	            past : '%s în urmă',
	            s : 'câteva secunde',
	            m : 'un minut',
	            mm : relativeTimeWithPlural,
	            h : 'o oră',
	            hh : relativeTimeWithPlural,
	            d : 'o zi',
	            dd : relativeTimeWithPlural,
	            M : 'o lună',
	            MM : relativeTimeWithPlural,
	            y : 'un an',
	            yy : relativeTimeWithPlural
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ro;

	}));

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Russian [ru]
	//! author : Viktorminator : https://github.com/Viktorminator
	//! Author : Menelion Elensúle : https://github.com/Oire
	//! author : Коренберг Марк : https://github.com/socketpair

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
	            'hh': 'час_часа_часов',
	            'dd': 'день_дня_дней',
	            'MM': 'месяц_месяца_месяцев',
	            'yy': 'год_года_лет'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'минута' : 'минуту';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

	    // http://new.gramota.ru/spravka/rules/139-prop : § 103
	    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
	    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
	    var ru = moment.defineLocale('ru', {
	        months : {
	            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
	            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
	        },
	        monthsShort : {
	            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
	            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
	            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
	        },
	        weekdays : {
	            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
	            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
	            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
	        },
	        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
	        monthsParse : monthsParse,
	        longMonthsParse : monthsParse,
	        shortMonthsParse : monthsParse,

	        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
	        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // копия предыдущего
	        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

	        // полные названия с падежами
	        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

	        // Выражение, которое соотвествует только сокращённым формам
	        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY г.',
	            LLL : 'D MMMM YYYY г., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
	        },
	        calendar : {
	            sameDay: '[Сегодня в] LT',
	            nextDay: '[Завтра в] LT',
	            lastDay: '[Вчера в] LT',
	            nextWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В следующее] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В следующий] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В следующую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            lastWeek: function (now) {
	                if (now.week() !== this.week()) {
	                    switch (this.day()) {
	                        case 0:
	                            return '[В прошлое] dddd [в] LT';
	                        case 1:
	                        case 2:
	                        case 4:
	                            return '[В прошлый] dddd [в] LT';
	                        case 3:
	                        case 5:
	                        case 6:
	                            return '[В прошлую] dddd [в] LT';
	                    }
	                } else {
	                    if (this.day() === 2) {
	                        return '[Во] dddd [в] LT';
	                    } else {
	                        return '[В] dddd [в] LT';
	                    }
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'через %s',
	            past : '%s назад',
	            s : 'несколько секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'час',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'месяц',
	            MM : relativeTimeWithPlural,
	            y : 'год',
	            yy : relativeTimeWithPlural
	        },
	        meridiemParse: /ночи|утра|дня|вечера/i,
	        isPM : function (input) {
	            return /^(дня|вечера)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночи';
	            } else if (hour < 12) {
	                return 'утра';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечера';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го|я)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                case 'w':
	                case 'W':
	                    return number + '-я';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ru;

	}));

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Northern Sami [se]
	//! authors : Bård Rolstad Henriksen : https://github.com/karamell

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var se = moment.defineLocale('se', {
	        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
	        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
	        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
	        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
	        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'MMMM D. [b.] YYYY',
	            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
	            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
	        },
	        calendar : {
	            sameDay: '[otne ti] LT',
	            nextDay: '[ihttin ti] LT',
	            nextWeek: 'dddd [ti] LT',
	            lastDay: '[ikte ti] LT',
	            lastWeek: '[ovddit] dddd [ti] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s geažes',
	            past : 'maŋit %s',
	            s : 'moadde sekunddat',
	            m : 'okta minuhta',
	            mm : '%d minuhtat',
	            h : 'okta diimmu',
	            hh : '%d diimmut',
	            d : 'okta beaivi',
	            dd : '%d beaivvit',
	            M : 'okta mánnu',
	            MM : '%d mánut',
	            y : 'okta jahki',
	            yy : '%d jagit'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return se;

	}));

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Sinhalese [si]
	//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    /*jshint -W100*/
	    var si = moment.defineLocale('si', {
	        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
	        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
	        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
	        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
	        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'a h:mm',
	            LTS : 'a h:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY MMMM D',
	            LLL : 'YYYY MMMM D, a h:mm',
	            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
	        },
	        calendar : {
	            sameDay : '[අද] LT[ට]',
	            nextDay : '[හෙට] LT[ට]',
	            nextWeek : 'dddd LT[ට]',
	            lastDay : '[ඊයේ] LT[ට]',
	            lastWeek : '[පසුගිය] dddd LT[ට]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%sකින්',
	            past : '%sකට පෙර',
	            s : 'තත්පර කිහිපය',
	            m : 'මිනිත්තුව',
	            mm : 'මිනිත්තු %d',
	            h : 'පැය',
	            hh : 'පැය %d',
	            d : 'දිනය',
	            dd : 'දින %d',
	            M : 'මාසය',
	            MM : 'මාස %d',
	            y : 'වසර',
	            yy : 'වසර %d'
	        },
	        ordinalParse: /\d{1,2} වැනි/,
	        ordinal : function (number) {
	            return number + ' වැනි';
	        },
	        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
	        isPM : function (input) {
	            return input === 'ප.ව.' || input === 'පස් වරු';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'ප.ව.' : 'පස් වරු';
	            } else {
	                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
	            }
	        }
	    });

	    return si;

	}));

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovak [sk]
	//! author : Martin Minka : https://github.com/k2s
	//! based on work of petrbela : https://github.com/petrbela

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
	        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
	    function plural(n) {
	        return (n > 1) && (n < 5);
	    }
	    function translate(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':  // a few seconds / in a few seconds / a few seconds ago
	                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
	            case 'm':  // a minute / in a minute / a minute ago
	                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
	            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'minúty' : 'minút');
	                } else {
	                    return result + 'minútami';
	                }
	                break;
	            case 'h':  // an hour / in an hour / an hour ago
	                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
	            case 'hh': // 9 hours / in 9 hours / 9 hours ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'hodiny' : 'hodín');
	                } else {
	                    return result + 'hodinami';
	                }
	                break;
	            case 'd':  // a day / in a day / a day ago
	                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
	            case 'dd': // 9 days / in 9 days / 9 days ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'dni' : 'dní');
	                } else {
	                    return result + 'dňami';
	                }
	                break;
	            case 'M':  // a month / in a month / a month ago
	                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
	            case 'MM': // 9 months / in 9 months / 9 months ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
	                } else {
	                    return result + 'mesiacmi';
	                }
	                break;
	            case 'y':  // a year / in a year / a year ago
	                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
	            case 'yy': // 9 years / in 9 years / 9 years ago
	                if (withoutSuffix || isFuture) {
	                    return result + (plural(number) ? 'roky' : 'rokov');
	                } else {
	                    return result + 'rokmi';
	                }
	                break;
	        }
	    }

	    var sk = moment.defineLocale('sk', {
	        months : months,
	        monthsShort : monthsShort,
	        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
	        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
	        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
	        longDateFormat : {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay: '[dnes o] LT',
	            nextDay: '[zajtra o] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[v] dddd [o] LT';
	                    case 3:
	                        return '[v stredu o] LT';
	                    case 4:
	                        return '[vo štvrtok o] LT';
	                    case 5:
	                        return '[v piatok o] LT';
	                    case 6:
	                        return '[v sobotu o] LT';
	                }
	            },
	            lastDay: '[včera o] LT',
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[minulú nedeľu o] LT';
	                    case 1:
	                    case 2:
	                        return '[minulý] dddd [o] LT';
	                    case 3:
	                        return '[minulú stredu o] LT';
	                    case 4:
	                    case 5:
	                        return '[minulý] dddd [o] LT';
	                    case 6:
	                        return '[minulú sobotu o] LT';
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past : 'pred %s',
	            s : translate,
	            m : translate,
	            mm : translate,
	            h : translate,
	            hh : translate,
	            d : translate,
	            dd : translate,
	            M : translate,
	            MM : translate,
	            y : translate,
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sk;

	}));

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Slovenian [sl]
	//! author : Robert Sedovšek : https://github.com/sedovsek

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var result = number + ' ';
	        switch (key) {
	            case 's':
	                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
	            case 'm':
	                return withoutSuffix ? 'ena minuta' : 'eno minuto';
	            case 'mm':
	                if (number === 1) {
	                    result += withoutSuffix ? 'minuta' : 'minuto';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
	                }
	                return result;
	            case 'h':
	                return withoutSuffix ? 'ena ura' : 'eno uro';
	            case 'hh':
	                if (number === 1) {
	                    result += withoutSuffix ? 'ura' : 'uro';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
	                } else {
	                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
	                }
	                return result;
	            case 'd':
	                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
	            case 'dd':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
	                } else {
	                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
	                }
	                return result;
	            case 'M':
	                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
	            case 'MM':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
	                } else {
	                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
	                }
	                return result;
	            case 'y':
	                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
	            case 'yy':
	                if (number === 1) {
	                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
	                } else if (number === 2) {
	                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
	                } else if (number < 5) {
	                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
	                } else {
	                    result += withoutSuffix || isFuture ? 'let' : 'leti';
	                }
	                return result;
	        }
	    }

	    var sl = moment.defineLocale('sl', {
	        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
	        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
	        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM YYYY',
	            LLL : 'D. MMMM YYYY H:mm',
	            LLLL : 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar : {
	            sameDay  : '[danes ob] LT',
	            nextDay  : '[jutri ob] LT',

	            nextWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[v] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[v] [sredo] [ob] LT';
	                    case 6:
	                        return '[v] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[v] dddd [ob] LT';
	                }
	            },
	            lastDay  : '[včeraj ob] LT',
	            lastWeek : function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[prejšnjo] [nedeljo] [ob] LT';
	                    case 3:
	                        return '[prejšnjo] [sredo] [ob] LT';
	                    case 6:
	                        return '[prejšnjo] [soboto] [ob] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[prejšnji] dddd [ob] LT';
	                }
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'čez %s',
	            past   : 'pred %s',
	            s      : processRelativeTime,
	            m      : processRelativeTime,
	            mm     : processRelativeTime,
	            h      : processRelativeTime,
	            hh     : processRelativeTime,
	            d      : processRelativeTime,
	            dd     : processRelativeTime,
	            M      : processRelativeTime,
	            MM     : processRelativeTime,
	            y      : processRelativeTime,
	            yy     : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sl;

	}));

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Albanian [sq]
	//! author : Flakërim Ismani : https://github.com/flakerimi
	//! author : Menelion Elensúle : https://github.com/Oire
	//! author : Oerd Cukalla : https://github.com/oerd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sq = moment.defineLocale('sq', {
	        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
	        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
	        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
	        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
	        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /PD|MD/,
	        isPM: function (input) {
	            return input.charAt(0) === 'M';
	        },
	        meridiem : function (hours, minutes, isLower) {
	            return hours < 12 ? 'PD' : 'MD';
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Sot në] LT',
	            nextDay : '[Nesër në] LT',
	            nextWeek : 'dddd [në] LT',
	            lastDay : '[Dje në] LT',
	            lastWeek : 'dddd [e kaluar në] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'në %s',
	            past : '%s më parë',
	            s : 'disa sekonda',
	            m : 'një minutë',
	            mm : '%d minuta',
	            h : 'një orë',
	            hh : '%d orë',
	            d : 'një ditë',
	            dd : '%d ditë',
	            M : 'një muaj',
	            MM : '%d muaj',
	            y : 'një vit',
	            yy : '%d vite'
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sq;

	}));

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian [sr]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['jedan minut', 'jedne minute'],
	            mm: ['minut', 'minute', 'minuta'],
	            h: ['jedan sat', 'jednog sata'],
	            hh: ['sat', 'sata', 'sati'],
	            dd: ['dan', 'dana', 'dana'],
	            MM: ['mesec', 'meseca', 'meseci'],
	            yy: ['godina', 'godine', 'godina']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr = moment.defineLocale('sr', {
	        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
	        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
	        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
	        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[danas u] LT',
	            nextDay: '[sutra u] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[u] [nedelju] [u] LT';
	                    case 3:
	                        return '[u] [sredu] [u] LT';
	                    case 6:
	                        return '[u] [subotu] [u] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[u] dddd [u] LT';
	                }
	            },
	            lastDay  : '[juče u] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[prošle] [nedelje] [u] LT',
	                    '[prošlog] [ponedeljka] [u] LT',
	                    '[prošlog] [utorka] [u] LT',
	                    '[prošle] [srede] [u] LT',
	                    '[prošlog] [četvrtka] [u] LT',
	                    '[prošlog] [petka] [u] LT',
	                    '[prošle] [subote] [u] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'za %s',
	            past   : 'pre %s',
	            s      : 'nekoliko sekundi',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'dan',
	            dd     : translator.translate,
	            M      : 'mesec',
	            MM     : translator.translate,
	            y      : 'godinu',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr;

	}));

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Serbian Cyrillic [sr-cyrl]
	//! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var translator = {
	        words: { //Different grammatical cases
	            m: ['један минут', 'једне минуте'],
	            mm: ['минут', 'минуте', 'минута'],
	            h: ['један сат', 'једног сата'],
	            hh: ['сат', 'сата', 'сати'],
	            dd: ['дан', 'дана', 'дана'],
	            MM: ['месец', 'месеца', 'месеци'],
	            yy: ['година', 'године', 'година']
	        },
	        correctGrammaticalCase: function (number, wordKey) {
	            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
	        },
	        translate: function (number, withoutSuffix, key) {
	            var wordKey = translator.words[key];
	            if (key.length === 1) {
	                return withoutSuffix ? wordKey[0] : wordKey[1];
	            } else {
	                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
	            }
	        }
	    };

	    var sr_cyrl = moment.defineLocale('sr-cyrl', {
	        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
	        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
	        monthsParseExact: true,
	        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
	        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
	        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat: {
	            LT: 'H:mm',
	            LTS : 'H:mm:ss',
	            L: 'DD.MM.YYYY',
	            LL: 'D. MMMM YYYY',
	            LLL: 'D. MMMM YYYY H:mm',
	            LLLL: 'dddd, D. MMMM YYYY H:mm'
	        },
	        calendar: {
	            sameDay: '[данас у] LT',
	            nextDay: '[сутра у] LT',
	            nextWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                        return '[у] [недељу] [у] LT';
	                    case 3:
	                        return '[у] [среду] [у] LT';
	                    case 6:
	                        return '[у] [суботу] [у] LT';
	                    case 1:
	                    case 2:
	                    case 4:
	                    case 5:
	                        return '[у] dddd [у] LT';
	                }
	            },
	            lastDay  : '[јуче у] LT',
	            lastWeek : function () {
	                var lastWeekDays = [
	                    '[прошле] [недеље] [у] LT',
	                    '[прошлог] [понедељка] [у] LT',
	                    '[прошлог] [уторка] [у] LT',
	                    '[прошле] [среде] [у] LT',
	                    '[прошлог] [четвртка] [у] LT',
	                    '[прошлог] [петка] [у] LT',
	                    '[прошле] [суботе] [у] LT'
	                ];
	                return lastWeekDays[this.day()];
	            },
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past   : 'пре %s',
	            s      : 'неколико секунди',
	            m      : translator.translate,
	            mm     : translator.translate,
	            h      : translator.translate,
	            hh     : translator.translate,
	            d      : 'дан',
	            dd     : translator.translate,
	            M      : 'месец',
	            MM     : translator.translate,
	            y      : 'годину',
	            yy     : translator.translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sr_cyrl;

	}));

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : siSwati [ss]
	//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';



	    var ss = moment.defineLocale('ss', {
	        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
	        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
	        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
	        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
	        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'h:mm A',
	            LTS : 'h:mm:ss A',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY h:mm A',
	            LLLL : 'dddd, D MMMM YYYY h:mm A'
	        },
	        calendar : {
	            sameDay : '[Namuhla nga] LT',
	            nextDay : '[Kusasa nga] LT',
	            nextWeek : 'dddd [nga] LT',
	            lastDay : '[Itolo nga] LT',
	            lastWeek : 'dddd [leliphelile] [nga] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'nga %s',
	            past : 'wenteka nga %s',
	            s : 'emizuzwana lomcane',
	            m : 'umzuzu',
	            mm : '%d emizuzu',
	            h : 'lihora',
	            hh : '%d emahora',
	            d : 'lilanga',
	            dd : '%d emalanga',
	            M : 'inyanga',
	            MM : '%d tinyanga',
	            y : 'umnyaka',
	            yy : '%d iminyaka'
	        },
	        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 11) {
	                return 'ekuseni';
	            } else if (hours < 15) {
	                return 'emini';
	            } else if (hours < 19) {
	                return 'entsambama';
	            } else {
	                return 'ebusuku';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'ekuseni') {
	                return hour;
	            } else if (meridiem === 'emini') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
	                if (hour === 0) {
	                    return 0;
	                }
	                return hour + 12;
	            }
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : '%d',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return ss;

	}));

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swedish [sv]
	//! author : Jens Alm : https://github.com/ulmus

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sv = moment.defineLocale('sv', {
	        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
	        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
	        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
	        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
	        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY-MM-DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY [kl.] HH:mm',
	            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Idag] LT',
	            nextDay: '[Imorgon] LT',
	            lastDay: '[Igår] LT',
	            nextWeek: '[På] dddd LT',
	            lastWeek: '[I] dddd[s] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'om %s',
	            past : 'för %s sedan',
	            s : 'några sekunder',
	            m : 'en minut',
	            mm : '%d minuter',
	            h : 'en timme',
	            hh : '%d timmar',
	            d : 'en dag',
	            dd : '%d dagar',
	            M : 'en månad',
	            MM : '%d månader',
	            y : 'ett år',
	            yy : '%d år'
	        },
	        ordinalParse: /\d{1,2}(e|a)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'e' :
	                (b === 1) ? 'a' :
	                (b === 2) ? 'a' :
	                (b === 3) ? 'e' : 'e';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return sv;

	}));

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Swahili [sw]
	//! author : Fahad Kassim : https://github.com/fadsel

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var sw = moment.defineLocale('sw', {
	        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
	        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
	        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
	        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
	        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[leo saa] LT',
	            nextDay : '[kesho saa] LT',
	            nextWeek : '[wiki ijayo] dddd [saat] LT',
	            lastDay : '[jana] LT',
	            lastWeek : '[wiki iliyopita] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s baadaye',
	            past : 'tokea %s',
	            s : 'hivi punde',
	            m : 'dakika moja',
	            mm : 'dakika %d',
	            h : 'saa limoja',
	            hh : 'masaa %d',
	            d : 'siku moja',
	            dd : 'masiku %d',
	            M : 'mwezi mmoja',
	            MM : 'miezi %d',
	            y : 'mwaka mmoja',
	            yy : 'miaka %d'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return sw;

	}));

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tamil [ta]
	//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var symbolMap = {
	        '1': '௧',
	        '2': '௨',
	        '3': '௩',
	        '4': '௪',
	        '5': '௫',
	        '6': '௬',
	        '7': '௭',
	        '8': '௮',
	        '9': '௯',
	        '0': '௦'
	    }, numberMap = {
	        '௧': '1',
	        '௨': '2',
	        '௩': '3',
	        '௪': '4',
	        '௫': '5',
	        '௬': '6',
	        '௭': '7',
	        '௮': '8',
	        '௯': '9',
	        '௦': '0'
	    };

	    var ta = moment.defineLocale('ta', {
	        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
	        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
	        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
	        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, HH:mm',
	            LLLL : 'dddd, D MMMM YYYY, HH:mm'
	        },
	        calendar : {
	            sameDay : '[இன்று] LT',
	            nextDay : '[நாளை] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[நேற்று] LT',
	            lastWeek : '[கடந்த வாரம்] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s இல்',
	            past : '%s முன்',
	            s : 'ஒரு சில விநாடிகள்',
	            m : 'ஒரு நிமிடம்',
	            mm : '%d நிமிடங்கள்',
	            h : 'ஒரு மணி நேரம்',
	            hh : '%d மணி நேரம்',
	            d : 'ஒரு நாள்',
	            dd : '%d நாட்கள்',
	            M : 'ஒரு மாதம்',
	            MM : '%d மாதங்கள்',
	            y : 'ஒரு வருடம்',
	            yy : '%d ஆண்டுகள்'
	        },
	        ordinalParse: /\d{1,2}வது/,
	        ordinal : function (number) {
	            return number + 'வது';
	        },
	        preparse: function (string) {
	            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
	                return numberMap[match];
	            });
	        },
	        postformat: function (string) {
	            return string.replace(/\d/g, function (match) {
	                return symbolMap[match];
	            });
	        },
	        // refer http://ta.wikipedia.org/s/1er1
	        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 2) {
	                return ' யாமம்';
	            } else if (hour < 6) {
	                return ' வைகறை';  // வைகறை
	            } else if (hour < 10) {
	                return ' காலை'; // காலை
	            } else if (hour < 14) {
	                return ' நண்பகல்'; // நண்பகல்
	            } else if (hour < 18) {
	                return ' எற்பாடு'; // எற்பாடு
	            } else if (hour < 22) {
	                return ' மாலை'; // மாலை
	            } else {
	                return ' யாமம்';
	            }
	        },
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'யாமம்') {
	                return hour < 2 ? hour : hour + 12;
	            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
	                return hour;
	            } else if (meridiem === 'நண்பகல்') {
	                return hour >= 10 ? hour : hour + 12;
	            } else {
	                return hour + 12;
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return ta;

	}));

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Telugu [te]
	//! author : Krishna Chaitanya Thota : https://github.com/kcthota

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var te = moment.defineLocale('te', {
	        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
	        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
	        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
	        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
	        longDateFormat : {
	            LT : 'A h:mm',
	            LTS : 'A h:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY, A h:mm',
	            LLLL : 'dddd, D MMMM YYYY, A h:mm'
	        },
	        calendar : {
	            sameDay : '[నేడు] LT',
	            nextDay : '[రేపు] LT',
	            nextWeek : 'dddd, LT',
	            lastDay : '[నిన్న] LT',
	            lastWeek : '[గత] dddd, LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s లో',
	            past : '%s క్రితం',
	            s : 'కొన్ని క్షణాలు',
	            m : 'ఒక నిమిషం',
	            mm : '%d నిమిషాలు',
	            h : 'ఒక గంట',
	            hh : '%d గంటలు',
	            d : 'ఒక రోజు',
	            dd : '%d రోజులు',
	            M : 'ఒక నెల',
	            MM : '%d నెలలు',
	            y : 'ఒక సంవత్సరం',
	            yy : '%d సంవత్సరాలు'
	        },
	        ordinalParse : /\d{1,2}వ/,
	        ordinal : '%dవ',
	        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === 'రాత్రి') {
	                return hour < 4 ? hour : hour + 12;
	            } else if (meridiem === 'ఉదయం') {
	                return hour;
	            } else if (meridiem === 'మధ్యాహ్నం') {
	                return hour >= 10 ? hour : hour + 12;
	            } else if (meridiem === 'సాయంత్రం') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'రాత్రి';
	            } else if (hour < 10) {
	                return 'ఉదయం';
	            } else if (hour < 17) {
	                return 'మధ్యాహ్నం';
	            } else if (hour < 20) {
	                return 'సాయంత్రం';
	            } else {
	                return 'రాత్రి';
	            }
	        },
	        week : {
	            dow : 0, // Sunday is the first day of the week.
	            doy : 6  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return te;

	}));

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Thai [th]
	//! author : Kridsada Thanabulpong : https://github.com/sirn

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var th = moment.defineLocale('th', {
	        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
	        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
	        monthsParseExact: true,
	        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
	        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
	        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'H:mm',
	            LTS : 'H:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY เวลา H:mm',
	            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
	        },
	        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
	        isPM: function (input) {
	            return input === 'หลังเที่ยง';
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 12) {
	                return 'ก่อนเที่ยง';
	            } else {
	                return 'หลังเที่ยง';
	            }
	        },
	        calendar : {
	            sameDay : '[วันนี้ เวลา] LT',
	            nextDay : '[พรุ่งนี้ เวลา] LT',
	            nextWeek : 'dddd[หน้า เวลา] LT',
	            lastDay : '[เมื่อวานนี้ เวลา] LT',
	            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'อีก %s',
	            past : '%sที่แล้ว',
	            s : 'ไม่กี่วินาที',
	            m : '1 นาที',
	            mm : '%d นาที',
	            h : '1 ชั่วโมง',
	            hh : '%d ชั่วโมง',
	            d : '1 วัน',
	            dd : '%d วัน',
	            M : '1 เดือน',
	            MM : '%d เดือน',
	            y : '1 ปี',
	            yy : '%d ปี'
	        }
	    });

	    return th;

	}));

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Tagalog (Philippines) [tl-ph]
	//! author : Dan Hagman : https://github.com/hagmandan

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tl_ph = moment.defineLocale('tl-ph', {
	        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
	        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
	        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
	        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
	        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'MM/D/YYYY',
	            LL : 'MMMM D, YYYY',
	            LLL : 'MMMM D, YYYY HH:mm',
	            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Ngayon sa] LT',
	            nextDay: '[Bukas sa] LT',
	            nextWeek: 'dddd [sa] LT',
	            lastDay: '[Kahapon sa] LT',
	            lastWeek: 'dddd [huling linggo] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'sa loob ng %s',
	            past : '%s ang nakalipas',
	            s : 'ilang segundo',
	            m : 'isang minuto',
	            mm : '%d minuto',
	            h : 'isang oras',
	            hh : '%d oras',
	            d : 'isang araw',
	            dd : '%d araw',
	            M : 'isang buwan',
	            MM : '%d buwan',
	            y : 'isang taon',
	            yy : '%d taon'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tl_ph;

	}));

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Klingon [tlh]
	//! author : Dominika Kruk : https://github.com/amaranthrose

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

	    function translateFuture(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'leS' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'waQ' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'nem' :
	        time + ' pIq';
	        return time;
	    }

	    function translatePast(output) {
	        var time = output;
	        time = (output.indexOf('jaj') !== -1) ?
	        time.slice(0, -3) + 'Hu’' :
	        (output.indexOf('jar') !== -1) ?
	        time.slice(0, -3) + 'wen' :
	        (output.indexOf('DIS') !== -1) ?
	        time.slice(0, -3) + 'ben' :
	        time + ' ret';
	        return time;
	    }

	    function translate(number, withoutSuffix, string, isFuture) {
	        var numberNoun = numberAsNoun(number);
	        switch (string) {
	            case 'mm':
	                return numberNoun + ' tup';
	            case 'hh':
	                return numberNoun + ' rep';
	            case 'dd':
	                return numberNoun + ' jaj';
	            case 'MM':
	                return numberNoun + ' jar';
	            case 'yy':
	                return numberNoun + ' DIS';
	        }
	    }

	    function numberAsNoun(number) {
	        var hundred = Math.floor((number % 1000) / 100),
	        ten = Math.floor((number % 100) / 10),
	        one = number % 10,
	        word = '';
	        if (hundred > 0) {
	            word += numbersNouns[hundred] + 'vatlh';
	        }
	        if (ten > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
	        }
	        if (one > 0) {
	            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
	        }
	        return (word === '') ? 'pagh' : word;
	    }

	    var tlh = moment.defineLocale('tlh', {
	        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
	        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[DaHjaj] LT',
	            nextDay: '[wa’leS] LT',
	            nextWeek: 'LLL',
	            lastDay: '[wa’Hu’] LT',
	            lastWeek: 'LLL',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : translateFuture,
	            past : translatePast,
	            s : 'puS lup',
	            m : 'wa’ tup',
	            mm : translate,
	            h : 'wa’ rep',
	            hh : translate,
	            d : 'wa’ jaj',
	            dd : translate,
	            M : 'wa’ jar',
	            MM : translate,
	            y : 'wa’ DIS',
	            yy : translate
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return tlh;

	}));

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Turkish [tr]
	//! authors : Erhan Gundogan : https://github.com/erhangundogan,
	//!           Burak Yiğit Kaya: https://github.com/BYK

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var suffixes = {
	        1: '\'inci',
	        5: '\'inci',
	        8: '\'inci',
	        70: '\'inci',
	        80: '\'inci',
	        2: '\'nci',
	        7: '\'nci',
	        20: '\'nci',
	        50: '\'nci',
	        3: '\'üncü',
	        4: '\'üncü',
	        100: '\'üncü',
	        6: '\'ncı',
	        9: '\'uncu',
	        10: '\'uncu',
	        30: '\'uncu',
	        60: '\'ıncı',
	        90: '\'ıncı'
	    };

	    var tr = moment.defineLocale('tr', {
	        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
	        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
	        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
	        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
	        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[bugün saat] LT',
	            nextDay : '[yarın saat] LT',
	            nextWeek : '[haftaya] dddd [saat] LT',
	            lastDay : '[dün] LT',
	            lastWeek : '[geçen hafta] dddd [saat] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : '%s sonra',
	            past : '%s önce',
	            s : 'birkaç saniye',
	            m : 'bir dakika',
	            mm : '%d dakika',
	            h : 'bir saat',
	            hh : '%d saat',
	            d : 'bir gün',
	            dd : '%d gün',
	            M : 'bir ay',
	            MM : '%d ay',
	            y : 'bir yıl',
	            yy : '%d yıl'
	        },
	        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
	        ordinal : function (number) {
	            if (number === 0) {  // special case for zero
	                return number + '\'ıncı';
	            }
	            var a = number % 10,
	                b = number % 100 - a,
	                c = number >= 100 ? 100 : null;
	            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tr;

	}));

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Talossan [tzl]
	//! author : Robin van der Vliet : https://github.com/robin0van0der0v
	//! author : Iustì Canun

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
	    // This is currently too difficult (maybe even impossible) to add.
	    var tzl = moment.defineLocale('tzl', {
	        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
	        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
	        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
	        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
	        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
	        longDateFormat : {
	            LT : 'HH.mm',
	            LTS : 'HH.mm.ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D. MMMM [dallas] YYYY',
	            LLL : 'D. MMMM [dallas] YYYY HH.mm',
	            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
	        },
	        meridiemParse: /d\'o|d\'a/i,
	        isPM : function (input) {
	            return 'd\'o' === input.toLowerCase();
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours > 11) {
	                return isLower ? 'd\'o' : 'D\'O';
	            } else {
	                return isLower ? 'd\'a' : 'D\'A';
	            }
	        },
	        calendar : {
	            sameDay : '[oxhi à] LT',
	            nextDay : '[demà à] LT',
	            nextWeek : 'dddd [à] LT',
	            lastDay : '[ieiri à] LT',
	            lastWeek : '[sür el] dddd [lasteu à] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'osprei %s',
	            past : 'ja%s',
	            s : processRelativeTime,
	            m : processRelativeTime,
	            mm : processRelativeTime,
	            h : processRelativeTime,
	            hh : processRelativeTime,
	            d : processRelativeTime,
	            dd : processRelativeTime,
	            M : processRelativeTime,
	            MM : processRelativeTime,
	            y : processRelativeTime,
	            yy : processRelativeTime
	        },
	        ordinalParse: /\d{1,2}\./,
	        ordinal : '%d.',
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    function processRelativeTime(number, withoutSuffix, key, isFuture) {
	        var format = {
	            's': ['viensas secunds', '\'iensas secunds'],
	            'm': ['\'n míut', '\'iens míut'],
	            'mm': [number + ' míuts', '' + number + ' míuts'],
	            'h': ['\'n þora', '\'iensa þora'],
	            'hh': [number + ' þoras', '' + number + ' þoras'],
	            'd': ['\'n ziua', '\'iensa ziua'],
	            'dd': [number + ' ziuas', '' + number + ' ziuas'],
	            'M': ['\'n mes', '\'iens mes'],
	            'MM': [number + ' mesen', '' + number + ' mesen'],
	            'y': ['\'n ar', '\'iens ar'],
	            'yy': [number + ' ars', '' + number + ' ars']
	        };
	        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
	    }

	    return tzl;

	}));

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight [tzm]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm = moment.defineLocale('tzm', {
	        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
	        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS: 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
	            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
	            nextWeek: 'dddd [ⴴ] LT',
	            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
	            lastWeek: 'dddd [ⴴ] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
	            past : 'ⵢⴰⵏ %s',
	            s : 'ⵉⵎⵉⴽ',
	            m : 'ⵎⵉⵏⵓⴺ',
	            mm : '%d ⵎⵉⵏⵓⴺ',
	            h : 'ⵙⴰⵄⴰ',
	            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
	            d : 'ⴰⵙⵙ',
	            dd : '%d oⵙⵙⴰⵏ',
	            M : 'ⴰⵢoⵓⵔ',
	            MM : '%d ⵉⵢⵢⵉⵔⵏ',
	            y : 'ⴰⵙⴳⴰⵙ',
	            yy : '%d ⵉⵙⴳⴰⵙⵏ'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm;

	}));

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Central Atlas Tamazight Latin [tzm-latn]
	//! author : Abdel Said : https://github.com/abdelsaid

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var tzm_latn = moment.defineLocale('tzm-latn', {
	        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
	        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[asdkh g] LT',
	            nextDay: '[aska g] LT',
	            nextWeek: 'dddd [g] LT',
	            lastDay: '[assant g] LT',
	            lastWeek: 'dddd [g] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'dadkh s yan %s',
	            past : 'yan %s',
	            s : 'imik',
	            m : 'minuḍ',
	            mm : '%d minuḍ',
	            h : 'saɛa',
	            hh : '%d tassaɛin',
	            d : 'ass',
	            dd : '%d ossan',
	            M : 'ayowr',
	            MM : '%d iyyirn',
	            y : 'asgas',
	            yy : '%d isgasn'
	        },
	        week : {
	            dow : 6, // Saturday is the first day of the week.
	            doy : 12  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return tzm_latn;

	}));

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Ukrainian [uk]
	//! author : zemlanin : https://github.com/zemlanin
	//! Author : Menelion Elensúle : https://github.com/Oire

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    function plural(word, num) {
	        var forms = word.split('_');
	        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
	    }
	    function relativeTimeWithPlural(number, withoutSuffix, key) {
	        var format = {
	            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
	            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
	            'dd': 'день_дні_днів',
	            'MM': 'місяць_місяці_місяців',
	            'yy': 'рік_роки_років'
	        };
	        if (key === 'm') {
	            return withoutSuffix ? 'хвилина' : 'хвилину';
	        }
	        else if (key === 'h') {
	            return withoutSuffix ? 'година' : 'годину';
	        }
	        else {
	            return number + ' ' + plural(format[key], +number);
	        }
	    }
	    function weekdaysCaseReplace(m, format) {
	        var weekdays = {
	            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
	            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
	            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
	        },
	        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
	            'accusative' :
	            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
	                'genitive' :
	                'nominative');
	        return weekdays[nounCase][m.day()];
	    }
	    function processHoursFunction(str) {
	        return function () {
	            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
	        };
	    }

	    var uk = moment.defineLocale('uk', {
	        months : {
	            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
	            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
	        },
	        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
	        weekdays : weekdaysCaseReplace,
	        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD.MM.YYYY',
	            LL : 'D MMMM YYYY р.',
	            LLL : 'D MMMM YYYY р., HH:mm',
	            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
	        },
	        calendar : {
	            sameDay: processHoursFunction('[Сьогодні '),
	            nextDay: processHoursFunction('[Завтра '),
	            lastDay: processHoursFunction('[Вчора '),
	            nextWeek: processHoursFunction('[У] dddd ['),
	            lastWeek: function () {
	                switch (this.day()) {
	                    case 0:
	                    case 3:
	                    case 5:
	                    case 6:
	                        return processHoursFunction('[Минулої] dddd [').call(this);
	                    case 1:
	                    case 2:
	                    case 4:
	                        return processHoursFunction('[Минулого] dddd [').call(this);
	                }
	            },
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : 'за %s',
	            past : '%s тому',
	            s : 'декілька секунд',
	            m : relativeTimeWithPlural,
	            mm : relativeTimeWithPlural,
	            h : 'годину',
	            hh : relativeTimeWithPlural,
	            d : 'день',
	            dd : relativeTimeWithPlural,
	            M : 'місяць',
	            MM : relativeTimeWithPlural,
	            y : 'рік',
	            yy : relativeTimeWithPlural
	        },
	        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
	        meridiemParse: /ночі|ранку|дня|вечора/,
	        isPM: function (input) {
	            return /^(дня|вечора)$/.test(input);
	        },
	        meridiem : function (hour, minute, isLower) {
	            if (hour < 4) {
	                return 'ночі';
	            } else if (hour < 12) {
	                return 'ранку';
	            } else if (hour < 17) {
	                return 'дня';
	            } else {
	                return 'вечора';
	            }
	        },
	        ordinalParse: /\d{1,2}-(й|го)/,
	        ordinal: function (number, period) {
	            switch (period) {
	                case 'M':
	                case 'd':
	                case 'DDD':
	                case 'w':
	                case 'W':
	                    return number + '-й';
	                case 'D':
	                    return number + '-го';
	                default:
	                    return number;
	            }
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 1st is the first week of the year.
	        }
	    });

	    return uk;

	}));

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Uzbek [uz]
	//! author : Sardor Muminov : https://github.com/muminoff

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var uz = moment.defineLocale('uz', {
	        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
	        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
	        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
	        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
	        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'D MMMM YYYY, dddd HH:mm'
	        },
	        calendar : {
	            sameDay : '[Бугун соат] LT [да]',
	            nextDay : '[Эртага] LT [да]',
	            nextWeek : 'dddd [куни соат] LT [да]',
	            lastDay : '[Кеча соат] LT [да]',
	            lastWeek : '[Утган] dddd [куни соат] LT [да]',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'Якин %s ичида',
	            past : 'Бир неча %s олдин',
	            s : 'фурсат',
	            m : 'бир дакика',
	            mm : '%d дакика',
	            h : 'бир соат',
	            hh : '%d соат',
	            d : 'бир кун',
	            dd : '%d кун',
	            M : 'бир ой',
	            MM : '%d ой',
	            y : 'бир йил',
	            yy : '%d йил'
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 7  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return uz;

	}));

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Vietnamese [vi]
	//! author : Bang Nguyen : https://github.com/bangnk

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var vi = moment.defineLocale('vi', {
	        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
	        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
	        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
	        weekdaysParseExact : true,
	        meridiemParse: /sa|ch/i,
	        isPM : function (input) {
	            return /^ch$/i.test(input);
	        },
	        meridiem : function (hours, minutes, isLower) {
	            if (hours < 12) {
	                return isLower ? 'sa' : 'SA';
	            } else {
	                return isLower ? 'ch' : 'CH';
	            }
	        },
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM [năm] YYYY',
	            LLL : 'D MMMM [năm] YYYY HH:mm',
	            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
	            l : 'DD/M/YYYY',
	            ll : 'D MMM YYYY',
	            lll : 'D MMM YYYY HH:mm',
	            llll : 'ddd, D MMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay: '[Hôm nay lúc] LT',
	            nextDay: '[Ngày mai lúc] LT',
	            nextWeek: 'dddd [tuần tới lúc] LT',
	            lastDay: '[Hôm qua lúc] LT',
	            lastWeek: 'dddd [tuần rồi lúc] LT',
	            sameElse: 'L'
	        },
	        relativeTime : {
	            future : '%s tới',
	            past : '%s trước',
	            s : 'vài giây',
	            m : 'một phút',
	            mm : '%d phút',
	            h : 'một giờ',
	            hh : '%d giờ',
	            d : 'một ngày',
	            dd : '%d ngày',
	            M : 'một tháng',
	            MM : '%d tháng',
	            y : 'một năm',
	            yy : '%d năm'
	        },
	        ordinalParse: /\d{1,2}/,
	        ordinal : function (number) {
	            return number;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return vi;

	}));

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Pseudo [x-pseudo]
	//! author : Andrew Hood : https://github.com/andrewhood125

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var x_pseudo = moment.defineLocale('x-pseudo', {
	        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
	        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
	        monthsParseExact : true,
	        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
	        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
	        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
	        weekdaysParseExact : true,
	        longDateFormat : {
	            LT : 'HH:mm',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[T~ódá~ý át] LT',
	            nextDay : '[T~ómó~rró~w át] LT',
	            nextWeek : 'dddd [át] LT',
	            lastDay : '[Ý~ést~érdá~ý át] LT',
	            lastWeek : '[L~ást] dddd [át] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'í~ñ %s',
	            past : '%s á~gó',
	            s : 'á ~féw ~sécó~ñds',
	            m : 'á ~míñ~úté',
	            mm : '%d m~íñú~tés',
	            h : 'á~ñ hó~úr',
	            hh : '%d h~óúrs',
	            d : 'á ~dáý',
	            dd : '%d d~áýs',
	            M : 'á ~móñ~th',
	            MM : '%d m~óñt~hs',
	            y : 'á ~ýéár',
	            yy : '%d ý~éárs'
	        },
	        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return x_pseudo;

	}));

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (China) [zh-cn]
	//! author : suupic : https://github.com/suupic
	//! author : Zeno Zeng : https://github.com/zenozeng

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_cn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah点mm分',
	            LTS : 'Ah点m分s秒',
	            L : 'YYYY-MM-DD',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah点mm分',
	            LLLL : 'YYYY年MMMD日ddddAh点mm分',
	            l : 'YYYY-MM-DD',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah点mm分',
	            llll : 'YYYY年MMMD日ddddAh点mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : function () {
	                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
	            },
	            nextDay : function () {
	                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
	            },
	            lastDay : function () {
	                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
	            },
	            nextWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.diff(startOfWeek, 'days') >= 7 ? '[下]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            lastWeek : function () {
	                var startOfWeek, prefix;
	                startOfWeek = moment().startOf('week');
	                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
	                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
	            },
	            sameElse : 'LL'
	        },
	        ordinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return zh_cn;

	}));

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Hong Kong) [zh-hk]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris
	//! author : Konstantin : https://github.com/skfd

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_hk = moment.defineLocale('zh-hk', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zh_hk;

	}));

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	//! moment.js locale configuration
	//! locale : Chinese (Taiwan) [zh-tw]
	//! author : Ben : https://github.com/ben-lin
	//! author : Chris Lam : https://github.com/hehachris

	;(function (global, factory) {
	    true ? factory(__webpack_require__(207)) :
	   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
	   factory(global.moment)
	}(this, function (moment) { 'use strict';


	    var zh_tw = moment.defineLocale('zh-tw', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'Ah點mm分',
	            LTS : 'Ah點m分s秒',
	            L : 'YYYY年MMMD日',
	            LL : 'YYYY年MMMD日',
	            LLL : 'YYYY年MMMD日Ah點mm分',
	            LLLL : 'YYYY年MMMD日ddddAh點mm分',
	            l : 'YYYY年MMMD日',
	            ll : 'YYYY年MMMD日',
	            lll : 'YYYY年MMMD日Ah點mm分',
	            llll : 'YYYY年MMMD日ddddAh點mm分'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour : function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '中午') {
	                return hour >= 11 ? hour : hour + 12;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        ordinalParse: /\d{1,2}(日|月|週)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd' :
	                case 'D' :
	                case 'DDD' :
	                    return number + '日';
	                case 'M' :
	                    return number + '月';
	                case 'w' :
	                case 'W' :
	                    return number + '週';
	                default :
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s內',
	            past : '%s前',
	            s : '幾秒',
	            m : '1 分鐘',
	            mm : '%d 分鐘',
	            h : '1 小時',
	            hh : '%d 小時',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 個月',
	            MM : '%d 個月',
	            y : '1 年',
	            yy : '%d 年'
	        }
	    });

	    return zh_tw;

	}));

/***/ },
/* 314 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.bar = {
			hover: {
				mode: 'label'
			},

			scales: {
				xAxes: [{
					type: 'category',

					// Specific to Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,

					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}],
				yAxes: [{
					type: 'linear'
				}]
			}
		};

		Chart.controllers.bar = Chart.DatasetController.extend({

			dataElementType: Chart.elements.Rectangle,

			initialize: function(chart, datasetIndex) {
				Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);

				// Use this to indicate that this is a bar dataset.
				this.getMeta().bar = true;
			},

			// Get the number of datasets that display bars. We use this to correctly calculate the bar width
			getBarCount: function() {
				var me = this;
				var barCount = 0;
				helpers.each(me.chart.data.datasets, function(dataset, datasetIndex) {
					var meta = me.chart.getDatasetMeta(datasetIndex);
					if (meta.bar && me.chart.isDatasetVisible(datasetIndex)) {
						++barCount;
					}
				}, me);
				return barCount;
			},

			update: function(reset) {
				var me = this;
				helpers.each(me.getMeta().data, function(rectangle, index) {
					me.updateElement(rectangle, index, reset);
				}, me);
			},

			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = yScale.getBasePixel();
				var rectangleElementOptions = me.chart.options.elements.rectangle;
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();

				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;

				var ruler = me.getRuler(index);
				rectangle._model = {
					x: me.calculateBarX(index, me.index, ruler),
					y: reset ? scaleBase : me.calculateBarY(index, me.index),

					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,

					// Appearance
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					width: me.calculateBarWidth(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};

				rectangle.pivot();
			},

			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var base = 0;

				if (yScale.options.stacked) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);

					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, 0) : Math.max(currentVal, 0);
						}
					}

					return yScale.getPixelForValue(base);
				}

				return yScale.getBasePixel();
			},

			getRuler: function(index) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var datasetCount = me.getBarCount();

				var tickWidth;

				if (xScale.options.type === 'category') {
					tickWidth = xScale.getPixelForTick(index + 1) - xScale.getPixelForTick(index);
				} else {
					// Average width
					tickWidth = xScale.width / xScale.ticks.length;
				}
				var categoryWidth = tickWidth * xScale.options.categoryPercentage;
				var categorySpacing = (tickWidth - (tickWidth * xScale.options.categoryPercentage)) / 2;
				var fullBarWidth = categoryWidth / datasetCount;

				if (xScale.ticks.length !== me.chart.data.labels.length) {
					var perc = xScale.ticks.length / me.chart.data.labels.length;
					fullBarWidth = fullBarWidth * perc;
				}

				var barWidth = fullBarWidth * xScale.options.barPercentage;
				var barSpacing = fullBarWidth - (fullBarWidth * xScale.options.barPercentage);

				return {
					datasetCount: datasetCount,
					tickWidth: tickWidth,
					categoryWidth: categoryWidth,
					categorySpacing: categorySpacing,
					fullBarWidth: fullBarWidth,
					barWidth: barWidth,
					barSpacing: barSpacing
				};
			},

			calculateBarWidth: function(ruler) {
				var xScale = this.getScaleForId(this.getMeta().xAxisID);
				if (xScale.options.barThickness) {
					return xScale.options.barThickness;
				}
				return xScale.options.stacked ? ruler.categoryWidth : ruler.barWidth;
			},

			// Get bar index from the given dataset index accounting for the fact that not all bars are visible
			getBarIndex: function(datasetIndex) {
				var barIndex = 0;
				var meta, j;

				for (j = 0; j < datasetIndex; ++j) {
					meta = this.chart.getDatasetMeta(j);
					if (meta.bar && this.chart.isDatasetVisible(j)) {
						++barIndex;
					}
				}

				return barIndex;
			},

			calculateBarX: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var barIndex = me.getBarIndex(datasetIndex);
				var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				leftTick -= me.chart.isCombo ? (ruler.tickWidth / 2) : 0;

				if (xScale.options.stacked) {
					return leftTick + (ruler.categoryWidth / 2) + ruler.categorySpacing;
				}

				return leftTick +
					(ruler.barWidth / 2) +
					ruler.categorySpacing +
					(ruler.barWidth * barIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * barIndex);
			},

			calculateBarY: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var value = Number(me.getDataset().data[index]);

				if (yScale.options.stacked) {

					var sumPos = 0,
						sumNeg = 0;

					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i)) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}

					if (value < 0) {
						return yScale.getPixelForValue(sumNeg + value);
					}
					return yScale.getPixelForValue(sumPos + value);
				}

				return yScale.getPixelForValue(value);
			},

			draw: function(ease) {
				var me = this;
				var easingDecimal = ease || 1;
				var metaData = me.getMeta().data;
				var dataset = me.getDataset();
				var i, len;

				for (i = 0, len = metaData.length; i < len; ++i) {
					var d = dataset.data[i];
					if (d !== null && d !== undefined && !isNaN(d)) {
						metaData[i].transition(easingDecimal).draw();
					}
				}
			},

			setHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;

				var custom = rectangle.custom || {};
				var model = rectangle._model;
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
			},

			removeHoverStyle: function(rectangle) {
				var dataset = this.chart.data.datasets[rectangle._datasetIndex];
				var index = rectangle._index;
				var custom = rectangle.custom || {};
				var model = rectangle._model;
				var rectangleElementOptions = this.chart.options.elements.rectangle;

				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
			}

		});


		// including horizontalBar in the bar file, instead of a file of its own
		// it extends bar (like pie extends doughnut)
		Chart.defaults.horizontalBar = {
			hover: {
				mode: 'label'
			},

			scales: {
				xAxes: [{
					type: 'linear',
					position: 'bottom'
				}],
				yAxes: [{
					position: 'left',
					type: 'category',

					// Specific to Horizontal Bar Controller
					categoryPercentage: 0.8,
					barPercentage: 0.9,

					// grid line settings
					gridLines: {
						offsetGridLines: true
					}
				}]
			},
			elements: {
				rectangle: {
					borderSkipped: 'left'
				}
			},
			tooltips: {
				callbacks: {
					title: function(tooltipItems, data) {
						// Pick first xLabel for now
						var title = '';

						if (tooltipItems.length > 0) {
							if (tooltipItems[0].yLabel) {
								title = tooltipItems[0].yLabel;
							} else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
								title = data.labels[tooltipItems[0].index];
							}
						}

						return title;
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						return datasetLabel + ': ' + tooltipItem.xLabel;
					}
				}
			}
		};

		Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
			updateElement: function(rectangle, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);
				var scaleBase = xScale.getBasePixel();
				var custom = rectangle.custom || {};
				var dataset = me.getDataset();
				var rectangleElementOptions = me.chart.options.elements.rectangle;

				rectangle._xScale = xScale;
				rectangle._yScale = yScale;
				rectangle._datasetIndex = me.index;
				rectangle._index = index;

				var ruler = me.getRuler(index);
				rectangle._model = {
					x: reset ? scaleBase : me.calculateBarX(index, me.index),
					y: me.calculateBarY(index, me.index, ruler),

					// Tooltip
					label: me.chart.data.labels[index],
					datasetLabel: dataset.label,

					// Appearance
					base: reset ? scaleBase : me.calculateBarBase(me.index, index),
					height: me.calculateBarHeight(ruler),
					backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
					borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
					borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
					borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
				};
				rectangle.draw = function() {
					var ctx = this._chart.ctx;
					var vm = this._view;

					var halfHeight = vm.height / 2,
						topY = vm.y - halfHeight,
						bottomY = vm.y + halfHeight,
						right = vm.base - (vm.base - vm.x),
						halfStroke = vm.borderWidth / 2;

					// Canvas doesn't allow us to stroke inside the width so we can
					// adjust the sizes to fit if we're setting a stroke on the line
					if (vm.borderWidth) {
						topY += halfStroke;
						bottomY -= halfStroke;
						right += halfStroke;
					}

					ctx.beginPath();

					ctx.fillStyle = vm.backgroundColor;
					ctx.strokeStyle = vm.borderColor;
					ctx.lineWidth = vm.borderWidth;

					// Corner points, from bottom-left to bottom-right clockwise
					// | 1 2 |
					// | 0 3 |
					var corners = [
						[vm.base, bottomY],
						[vm.base, topY],
						[right, topY],
						[right, bottomY]
					];

					// Find first (starting) corner with fallback to 'bottom'
					var borders = ['bottom', 'left', 'top', 'right'];
					var startCorner = borders.indexOf(vm.borderSkipped, 0);
					if (startCorner === -1) {
						startCorner = 0;
					}

					function cornerAt(cornerIndex) {
						return corners[(startCorner + cornerIndex) % 4];
					}

					// Draw rectangle from 'startCorner'
					ctx.moveTo.apply(ctx, cornerAt(0));
					for (var i = 1; i < 4; i++) {
						ctx.lineTo.apply(ctx, cornerAt(i));
					}

					ctx.fill();
					if (vm.borderWidth) {
						ctx.stroke();
					}
				};

				rectangle.pivot();
			},

			calculateBarBase: function(datasetIndex, index) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var base = 0;

				if (xScale.options.stacked) {
					var chart = me.chart;
					var datasets = chart.data.datasets;
					var value = Number(datasets[datasetIndex].data[index]);

					for (var i = 0; i < datasetIndex; i++) {
						var currentDs = datasets[i];
						var currentDsMeta = chart.getDatasetMeta(i);
						if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i)) {
							var currentVal = Number(currentDs.data[index]);
							base += value < 0 ? Math.min(currentVal, 0) : Math.max(currentVal, 0);
						}
					}

					return xScale.getPixelForValue(base);
				}

				return xScale.getBasePixel();
			},

			getRuler: function(index) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var datasetCount = me.getBarCount();

				var tickHeight;
				if (yScale.options.type === 'category') {
					tickHeight = yScale.getPixelForTick(index + 1) - yScale.getPixelForTick(index);
				} else {
					// Average width
					tickHeight = yScale.width / yScale.ticks.length;
				}
				var categoryHeight = tickHeight * yScale.options.categoryPercentage;
				var categorySpacing = (tickHeight - (tickHeight * yScale.options.categoryPercentage)) / 2;
				var fullBarHeight = categoryHeight / datasetCount;

				if (yScale.ticks.length !== me.chart.data.labels.length) {
					var perc = yScale.ticks.length / me.chart.data.labels.length;
					fullBarHeight = fullBarHeight * perc;
				}

				var barHeight = fullBarHeight * yScale.options.barPercentage;
				var barSpacing = fullBarHeight - (fullBarHeight * yScale.options.barPercentage);

				return {
					datasetCount: datasetCount,
					tickHeight: tickHeight,
					categoryHeight: categoryHeight,
					categorySpacing: categorySpacing,
					fullBarHeight: fullBarHeight,
					barHeight: barHeight,
					barSpacing: barSpacing
				};
			},

			calculateBarHeight: function(ruler) {
				var me = this;
				var yScale = me.getScaleForId(me.getMeta().yAxisID);
				if (yScale.options.barThickness) {
					return yScale.options.barThickness;
				}
				return yScale.options.stacked ? ruler.categoryHeight : ruler.barHeight;
			},

			calculateBarX: function(index, datasetIndex) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var value = Number(me.getDataset().data[index]);

				if (xScale.options.stacked) {

					var sumPos = 0,
						sumNeg = 0;

					for (var i = 0; i < datasetIndex; i++) {
						var ds = me.chart.data.datasets[i];
						var dsMeta = me.chart.getDatasetMeta(i);
						if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i)) {
							var stackedVal = Number(ds.data[index]);
							if (stackedVal < 0) {
								sumNeg += stackedVal || 0;
							} else {
								sumPos += stackedVal || 0;
							}
						}
					}

					if (value < 0) {
						return xScale.getPixelForValue(sumNeg + value);
					}
					return xScale.getPixelForValue(sumPos + value);
				}

				return xScale.getPixelForValue(value);
			},

			calculateBarY: function(index, datasetIndex, ruler) {
				var me = this;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var barIndex = me.getBarIndex(datasetIndex);
				var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
				topTick -= me.chart.isCombo ? (ruler.tickHeight / 2) : 0;

				if (yScale.options.stacked) {
					return topTick + (ruler.categoryHeight / 2) + ruler.categorySpacing;
				}

				return topTick +
					(ruler.barHeight / 2) +
					ruler.categorySpacing +
					(ruler.barHeight * barIndex) +
					(ruler.barSpacing / 2) +
					(ruler.barSpacing * barIndex);
			}
		});
	};


/***/ },
/* 315 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.bubble = {
			hover: {
				mode: 'single'
			},

			scales: {
				xAxes: [{
					type: 'linear', // bubble should probably use a linear scale by default
					position: 'bottom',
					id: 'x-axis-0' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-0'
				}]
			},

			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem, data) {
						var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
						var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
						return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
					}
				}
			}
		};

		Chart.controllers.bubble = Chart.DatasetController.extend({

			dataElementType: Chart.elements.Point,

			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data;

				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				});
			},

			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var xScale = me.getScaleForId(meta.xAxisID);
				var yScale = me.getScaleForId(meta.yAxisID);

				var custom = point.custom || {};
				var dataset = me.getDataset();
				var data = dataset.data[index];
				var pointElementOptions = me.chart.options.elements.point;
				var dsIndex = me.index;

				helpers.extend(point, {
					// Utility
					_xScale: xScale,
					_yScale: yScale,
					_datasetIndex: dsIndex,
					_index: index,

					// Desired view properties
					_model: {
						x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
						y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
						// Appearance
						radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),

						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});

				// Trick to reset the styles of the point
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);

				var model = point._model;
				model.skip = custom.skip ? custom.skip : (isNaN(model.x) || isNaN(model.y));

				point.pivot();
			},

			getRadius: function(value) {
				return value.r || this.chart.options.elements.point.radius;
			},

			setHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.setHoverStyle.call(me, point);

				// Radius
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;
				model.radius = custom.hoverRadius ? custom.hoverRadius : (helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius)) + me.getRadius(dataset.data[index]);
			},

			removeHoverStyle: function(point) {
				var me = this;
				Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);

				var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
				var custom = point.custom || {};
				var model = point._model;

				model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
			}
		});
	};


/***/ },
/* 316 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers,
			defaults = Chart.defaults;

		defaults.doughnut = {
			animation: {
				// Boolean - Whether we animate the rotation of the Doughnut
				animateRotate: true,
				// Boolean - Whether we animate scaling the Doughnut from the centre
				animateScale: false
			},
			aspectRatio: 1,
			hover: {
				mode: 'single'
			},
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');

				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;

				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}

				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc && arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);

								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},

				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;

					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						// toggle visibility of index if exists
						if (meta.data[index]) {
							meta.data[index].hidden = !meta.data[index].hidden;
						}
					}

					chart.update();
				}
			},

			// The percentage of the chart that we cut out of the middle.
			cutoutPercentage: 50,

			// The rotation of the chart, where the first data arc begins.
			rotation: Math.PI * -0.5,

			// The total circumference of the chart.
			circumference: Math.PI * 2.0,

			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						var dataLabel = data.labels[tooltipItem.index];
						var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

						if (helpers.isArray(dataLabel)) {
							// show value on first line of multiline label
							// need to clone because we are changing the value
							dataLabel = dataLabel.slice();
							dataLabel[0] += value;
						} else {
							dataLabel += value;
						}

						return dataLabel;
					}
				}
			}
		};

		defaults.pie = helpers.clone(defaults.doughnut);
		helpers.extend(defaults.pie, {
			cutoutPercentage: 0
		});


		Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({

			dataElementType: Chart.elements.Arc,

			linkScales: helpers.noop,

			// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
			getRingIndex: function(datasetIndex) {
				var ringIndex = 0;

				for (var j = 0; j < datasetIndex; ++j) {
					if (this.chart.isDatasetVisible(j)) {
						++ringIndex;
					}
				}

				return ringIndex;
			},

			update: function(reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					arcOpts = opts.elements.arc,
					availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth,
					availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth,
					minSize = Math.min(availableWidth, availableHeight),
					offset = {
						x: 0,
						y: 0
					},
					meta = me.getMeta(),
					cutoutPercentage = opts.cutoutPercentage,
					circumference = opts.circumference;

				// If the chart's circumference isn't a full circle, calculate minSize as a ratio of the width/height of the arc
				if (circumference < Math.PI * 2.0) {
					var startAngle = opts.rotation % (Math.PI * 2.0);
					startAngle += Math.PI * 2.0 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
					var endAngle = startAngle + circumference;
					var start = {x: Math.cos(startAngle), y: Math.sin(startAngle)};
					var end = {x: Math.cos(endAngle), y: Math.sin(endAngle)};
					var contains0 = (startAngle <= 0 && 0 <= endAngle) || (startAngle <= Math.PI * 2.0 && Math.PI * 2.0 <= endAngle);
					var contains90 = (startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle);
					var contains180 = (startAngle <= -Math.PI && -Math.PI <= endAngle) || (startAngle <= Math.PI && Math.PI <= endAngle);
					var contains270 = (startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle) || (startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle);
					var cutout = cutoutPercentage / 100.0;
					var min = {x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)), y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))};
					var max = {x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)), y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))};
					var size = {width: (max.x - min.x) * 0.5, height: (max.y - min.y) * 0.5};
					minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
					offset = {x: (max.x + min.x) * -0.5, y: (max.y + min.y) * -0.5};
				}

				chart.borderWidth = me.getMaxBorderWidth(meta.data);
				chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
				chart.innerRadius = Math.max(cutoutPercentage ? (chart.outerRadius / 100) * (cutoutPercentage) : 1, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
				chart.offsetX = offset.x * chart.outerRadius;
				chart.offsetY = offset.y * chart.outerRadius;

				meta.total = me.calculateTotal();

				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.getRingIndex(me.index));
				me.innerRadius = me.outerRadius - chart.radiusLength;

				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},

			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart,
					chartArea = chart.chartArea,
					opts = chart.options,
					animationOpts = opts.animation,
					centerX = (chartArea.left + chartArea.right) / 2,
					centerY = (chartArea.top + chartArea.bottom) / 2,
					startAngle = opts.rotation, // non reset case handled later
					endAngle = opts.rotation, // non reset case handled later
					dataset = me.getDataset(),
					circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2.0 * Math.PI)),
					innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius,
					outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius,
					valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;

				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,

					// Desired view properties
					_model: {
						x: centerX + chart.offsetX,
						y: centerY + chart.offsetY,
						startAngle: startAngle,
						endAngle: endAngle,
						circumference: circumference,
						outerRadius: outerRadius,
						innerRadius: innerRadius,
						label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
					}
				});

				var model = arc._model;
				// Resets the visual styles
				this.removeHoverStyle(arc);

				// Set correct angles if not resetting
				if (!reset || !animationOpts.animateRotate) {
					if (index === 0) {
						model.startAngle = opts.rotation;
					} else {
						model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
					}

					model.endAngle = model.startAngle + model.circumference;
				}

				arc.pivot();
			},

			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},

			calculateTotal: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var total = 0;
				var value;

				helpers.each(meta.data, function(element, index) {
					value = dataset.data[index];
					if (!isNaN(value) && !element.hidden) {
						total += Math.abs(value);
					}
				});

				/* if (total === 0) {
					total = NaN;
				}*/

				return total;
			},

			calculateCircumference: function(value) {
				var total = this.getMeta().total;
				if (total > 0 && !isNaN(value)) {
					return (Math.PI * 2.0) * (value / total);
				}
				return 0;
			},

			// gets the max border or hover width to properly scale pie charts
			getMaxBorderWidth: function(elements) {
				var max = 0,
					index = this.index,
					length = elements.length,
					borderWidth,
					hoverWidth;

				for (var i = 0; i < length; i++) {
					borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
					hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;

					max = borderWidth > max ? borderWidth : max;
					max = hoverWidth > max ? hoverWidth : max;
				}
				return max;
			}
		});
	};


/***/ },
/* 317 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.line = {
			showLines: true,
			spanGaps: false,

			hover: {
				mode: 'label'
			},

			scales: {
				xAxes: [{
					type: 'category',
					id: 'x-axis-0'
				}],
				yAxes: [{
					type: 'linear',
					id: 'y-axis-0'
				}]
			}
		};

		function lineEnabled(dataset, options) {
			return helpers.getValueOrDefault(dataset.showLine, options.showLines);
		}

		Chart.controllers.line = Chart.DatasetController.extend({

			datasetElementType: Chart.elements.Line,

			dataElementType: Chart.elements.Point,

			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data || [];
				var options = me.chart.options;
				var lineElementOptions = options.elements.line;
				var scale = me.getScaleForId(meta.yAxisID);
				var i, ilen, custom;
				var dataset = me.getDataset();
				var showLine = lineEnabled(dataset, options);

				// Update Line
				if (showLine) {
					custom = line.custom || {};

					// Compatibility: If the properties are defined with only the old name, use those values
					if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
						dataset.lineTension = dataset.tension;
					}

					// Utility
					line._scale = scale;
					line._datasetIndex = me.index;
					// Data
					line._children = points;
					// Model
					line._model = {
						// Appearance
						// The default behavior of lines is to break at null values, according
						// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
						// This option gives linse the ability to span gaps
						spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
						cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePixel()
					};

					line.pivot();
				}

				// Update Points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					me.updateElement(points[i], i, reset);
				}

				if (showLine && line._model.tension !== 0) {
					me.updateBezierControlPoints();
				}

				// Now pivot the point for animation
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].pivot();
				}
			},

			getPointBackgroundColor: function(point, index) {
				var backgroundColor = this.chart.options.elements.point.backgroundColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};

				if (custom.backgroundColor) {
					backgroundColor = custom.backgroundColor;
				} else if (dataset.pointBackgroundColor) {
					backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
				} else if (dataset.backgroundColor) {
					backgroundColor = dataset.backgroundColor;
				}

				return backgroundColor;
			},

			getPointBorderColor: function(point, index) {
				var borderColor = this.chart.options.elements.point.borderColor;
				var dataset = this.getDataset();
				var custom = point.custom || {};

				if (custom.borderColor) {
					borderColor = custom.borderColor;
				} else if (dataset.pointBorderColor) {
					borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
				} else if (dataset.borderColor) {
					borderColor = dataset.borderColor;
				}

				return borderColor;
			},

			getPointBorderWidth: function(point, index) {
				var borderWidth = this.chart.options.elements.point.borderWidth;
				var dataset = this.getDataset();
				var custom = point.custom || {};

				if (custom.borderWidth) {
					borderWidth = custom.borderWidth;
				} else if (dataset.pointBorderWidth) {
					borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
				} else if (dataset.borderWidth) {
					borderWidth = dataset.borderWidth;
				}

				return borderWidth;
			},

			updateElement: function(point, index, reset) {
				var me = this;
				var meta = me.getMeta();
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var datasetIndex = me.index;
				var value = dataset.data[index];
				var yScale = me.getScaleForId(meta.yAxisID);
				var xScale = me.getScaleForId(meta.xAxisID);
				var pointOptions = me.chart.options.elements.point;
				var x, y;
				var labels = me.chart.data.labels || [];
				var includeOffset = (labels.length === 1 || dataset.data.length === 1) || me.chart.isCombo;

				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}
				if ((dataset.hitRadius !== undefined) && (dataset.pointHitRadius === undefined)) {
					dataset.pointHitRadius = dataset.hitRadius;
				}

				x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
				y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

				// Utility
				point._xScale = xScale;
				point._yScale = yScale;
				point._datasetIndex = datasetIndex;
				point._index = index;

				// Desired view properties
				point._model = {
					x: x,
					y: y,
					skip: custom.skip || isNaN(x) || isNaN(y),
					// Appearance
					radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
					pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
					backgroundColor: me.getPointBackgroundColor(point, index),
					borderColor: me.getPointBorderColor(point, index),
					borderWidth: me.getPointBorderWidth(point, index),
					tension: meta.dataset._model ? meta.dataset._model.tension : 0,
					steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
					// Tooltip
					hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
				};
			},

			calculatePointY: function(value, index, datasetIndex) {
				var me = this;
				var chart = me.chart;
				var meta = me.getMeta();
				var yScale = me.getScaleForId(meta.yAxisID);
				var sumPos = 0;
				var sumNeg = 0;
				var i, ds, dsMeta;

				if (yScale.options.stacked) {
					for (i = 0; i < datasetIndex; i++) {
						ds = chart.data.datasets[i];
						dsMeta = chart.getDatasetMeta(i);
						if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
							var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
							if (stackedRightValue < 0) {
								sumNeg += stackedRightValue || 0;
							} else {
								sumPos += stackedRightValue || 0;
							}
						}
					}

					var rightValue = Number(yScale.getRightValue(value));
					if (rightValue < 0) {
						return yScale.getPixelForValue(sumNeg + rightValue);
					}
					return yScale.getPixelForValue(sumPos + rightValue);
				}

				return yScale.getPixelForValue(value);
			},

			updateBezierControlPoints: function() {
				var me = this;
				var meta = me.getMeta();
				var area = me.chart.chartArea;
				var points = (meta.data || []);
				var i, ilen, point, model, controlPoints;

				// Only consider points that are drawn in case the spanGaps option is used
				if (meta.dataset._model.spanGaps) {
					points = points.filter(function(pt) {
						return !pt._model.skip;
					});
				}

				function capControlPoint(pt, min, max) {
					return Math.max(Math.min(pt, max), min);
				}

				if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
					helpers.splineCurveMonotone(points);
				} else {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						point = points[i];
						model = point._model;
						controlPoints = helpers.splineCurve(
							helpers.previousItem(points, i)._model,
							model,
							helpers.nextItem(points, i)._model,
							meta.dataset._model.tension
						);
						model.controlPointPreviousX = controlPoints.previous.x;
						model.controlPointPreviousY = controlPoints.previous.y;
						model.controlPointNextX = controlPoints.next.x;
						model.controlPointNextY = controlPoints.next.y;
					}
				}

				if (me.chart.options.elements.line.capBezierPoints) {
					for (i = 0, ilen = points.length; i < ilen; ++i) {
						model = points[i]._model;
						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
					}
				}
			},

			draw: function(ease) {
				var me = this;
				var meta = me.getMeta();
				var points = meta.data || [];
				var easingDecimal = ease || 1;
				var i, ilen;

				// Transition Point Locations
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].transition(easingDecimal);
				}

				// Transition and Draw the line
				if (lineEnabled(me.getDataset(), me.chart.options)) {
					meta.dataset.transition(easingDecimal).draw();
				}

				// Draw the points
				for (i=0, ilen=points.length; i<ilen; ++i) {
					points[i].draw();
				}
			},

			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;

				model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},

			removeHoverStyle: function(point) {
				var me = this;
				var dataset = me.chart.data.datasets[point._datasetIndex];
				var index = point._index;
				var custom = point.custom || {};
				var model = point._model;

				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.radius !== undefined) && (dataset.pointRadius === undefined)) {
					dataset.pointRadius = dataset.radius;
				}

				model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
				model.backgroundColor = me.getPointBackgroundColor(point, index);
				model.borderColor = me.getPointBorderColor(point, index);
				model.borderWidth = me.getPointBorderWidth(point, index);
			}
		});
	};


/***/ },
/* 318 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.polarArea = {

			scale: {
				type: 'radialLinear',
				lineArc: true, // so that lines are circular
				ticks: {
					beginAtZero: true
				}
			},

			// Boolean - Whether to animate the rotation of the chart
			animation: {
				animateRotate: true,
				animateScale: true
			},

			startAngle: -0.5 * Math.PI,
			aspectRatio: 1,
			legendCallback: function(chart) {
				var text = [];
				text.push('<ul class="' + chart.id + '-legend">');

				var data = chart.data;
				var datasets = data.datasets;
				var labels = data.labels;

				if (datasets.length) {
					for (var i = 0; i < datasets[0].data.length; ++i) {
						text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
						if (labels[i]) {
							text.push(labels[i]);
						}
						text.push('</li>');
					}
				}

				text.push('</ul>');
				return text.join('');
			},
			legend: {
				labels: {
					generateLabels: function(chart) {
						var data = chart.data;
						if (data.labels.length && data.datasets.length) {
							return data.labels.map(function(label, i) {
								var meta = chart.getDatasetMeta(0);
								var ds = data.datasets[0];
								var arc = meta.data[i];
								var custom = arc.custom || {};
								var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
								var arcOpts = chart.options.elements.arc;
								var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
								var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
								var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);

								return {
									text: label,
									fillStyle: fill,
									strokeStyle: stroke,
									lineWidth: bw,
									hidden: isNaN(ds.data[i]) || meta.data[i].hidden,

									// Extra data used for toggling the correct item
									index: i
								};
							});
						}
						return [];
					}
				},

				onClick: function(e, legendItem) {
					var index = legendItem.index;
					var chart = this.chart;
					var i, ilen, meta;

					for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
						meta = chart.getDatasetMeta(i);
						meta.data[index].hidden = !meta.data[index].hidden;
					}

					chart.update();
				}
			},

			// Need to override these to give a nice default
			tooltips: {
				callbacks: {
					title: function() {
						return '';
					},
					label: function(tooltipItem, data) {
						return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
					}
				}
			}
		};

		Chart.controllers.polarArea = Chart.DatasetController.extend({

			dataElementType: Chart.elements.Arc,

			linkScales: helpers.noop,

			update: function(reset) {
				var me = this;
				var chart = me.chart;
				var chartArea = chart.chartArea;
				var meta = me.getMeta();
				var opts = chart.options;
				var arcOpts = opts.elements.arc;
				var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
				chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
				chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
				chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

				me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
				me.innerRadius = me.outerRadius - chart.radiusLength;

				meta.count = me.countVisibleElements();

				helpers.each(meta.data, function(arc, index) {
					me.updateElement(arc, index, reset);
				});
			},

			updateElement: function(arc, index, reset) {
				var me = this;
				var chart = me.chart;
				var dataset = me.getDataset();
				var opts = chart.options;
				var animationOpts = opts.animation;
				var scale = chart.scale;
				var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
				var labels = chart.data.labels;

				var circumference = me.calculateCircumference(dataset.data[index]);
				var centerX = scale.xCenter;
				var centerY = scale.yCenter;

				// If there is NaN data before us, we need to calculate the starting angle correctly.
				// We could be way more efficient here, but its unlikely that the polar area chart will have a lot of data
				var visibleCount = 0;
				var meta = me.getMeta();
				for (var i = 0; i < index; ++i) {
					if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
						++visibleCount;
					}
				}

				// var negHalfPI = -0.5 * Math.PI;
				var datasetStartAngle = opts.startAngle;
				var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
				var startAngle = datasetStartAngle + (circumference * visibleCount);
				var endAngle = startAngle + (arc.hidden ? 0 : circumference);

				var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);

				helpers.extend(arc, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,

					// Desired view properties
					_model: {
						x: centerX,
						y: centerY,
						innerRadius: 0,
						outerRadius: reset ? resetRadius : distance,
						startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
						endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
						label: getValueAtIndexOrDefault(labels, index, labels[index])
					}
				});

				// Apply border and fill style
				me.removeHoverStyle(arc);

				arc.pivot();
			},

			removeHoverStyle: function(arc) {
				Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
			},

			countVisibleElements: function() {
				var dataset = this.getDataset();
				var meta = this.getMeta();
				var count = 0;

				helpers.each(meta.data, function(element, index) {
					if (!isNaN(dataset.data[index]) && !element.hidden) {
						count++;
					}
				});

				return count;
			},

			calculateCircumference: function(value) {
				var count = this.getMeta().count;
				if (count > 0 && !isNaN(value)) {
					return (2 * Math.PI) / count;
				}
				return 0;
			}
		});
	};


/***/ },
/* 319 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var helpers = Chart.helpers;

		Chart.defaults.radar = {
			aspectRatio: 1,
			scale: {
				type: 'radialLinear'
			},
			elements: {
				line: {
					tension: 0 // no bezier in radar
				}
			}
		};

		Chart.controllers.radar = Chart.DatasetController.extend({

			datasetElementType: Chart.elements.Line,

			dataElementType: Chart.elements.Point,

			linkScales: helpers.noop,

			update: function(reset) {
				var me = this;
				var meta = me.getMeta();
				var line = meta.dataset;
				var points = meta.data;
				var custom = line.custom || {};
				var dataset = me.getDataset();
				var lineElementOptions = me.chart.options.elements.line;
				var scale = me.chart.scale;

				// Compatibility: If the properties are defined with only the old name, use those values
				if ((dataset.tension !== undefined) && (dataset.lineTension === undefined)) {
					dataset.lineTension = dataset.tension;
				}

				helpers.extend(meta.dataset, {
					// Utility
					_datasetIndex: me.index,
					// Data
					_children: points,
					_loop: true,
					// Model
					_model: {
						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : (dataset.backgroundColor || lineElementOptions.backgroundColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : (dataset.borderWidth || lineElementOptions.borderWidth),
						borderColor: custom.borderColor ? custom.borderColor : (dataset.borderColor || lineElementOptions.borderColor),
						fill: custom.fill ? custom.fill : (dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill),
						borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : (dataset.borderCapStyle || lineElementOptions.borderCapStyle),
						borderDash: custom.borderDash ? custom.borderDash : (dataset.borderDash || lineElementOptions.borderDash),
						borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : (dataset.borderDashOffset || lineElementOptions.borderDashOffset),
						borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : (dataset.borderJoinStyle || lineElementOptions.borderJoinStyle),

						// Scale
						scaleTop: scale.top,
						scaleBottom: scale.bottom,
						scaleZero: scale.getBasePosition()
					}
				});

				meta.dataset.pivot();

				// Update Points
				helpers.each(points, function(point, index) {
					me.updateElement(point, index, reset);
				}, me);

				// Update bezier control points
				me.updateBezierControlPoints();
			},
			updateElement: function(point, index, reset) {
				var me = this;
				var custom = point.custom || {};
				var dataset = me.getDataset();
				var scale = me.chart.scale;
				var pointElementOptions = me.chart.options.elements.point;
				var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);

				helpers.extend(point, {
					// Utility
					_datasetIndex: me.index,
					_index: index,
					_scale: scale,

					// Desired view properties
					_model: {
						x: reset ? scale.xCenter : pointPosition.x, // value not used in dataset scale, but we want a consistent API between scales
						y: reset ? scale.yCenter : pointPosition.y,

						// Appearance
						tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.tension, me.chart.options.elements.line.tension),
						radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
						backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
						borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
						borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
						pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),

						// Tooltip
						hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
					}
				});

				point._model.skip = custom.skip ? custom.skip : (isNaN(point._model.x) || isNaN(point._model.y));
			},
			updateBezierControlPoints: function() {
				var chartArea = this.chart.chartArea;
				var meta = this.getMeta();

				helpers.each(meta.data, function(point, index) {
					var model = point._model;
					var controlPoints = helpers.splineCurve(
						helpers.previousItem(meta.data, index, true)._model,
						model,
						helpers.nextItem(meta.data, index, true)._model,
						model.tension
					);

					// Prevent the bezier going outside of the bounds of the graph
					model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
					model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);

					model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
					model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);

					// Now pivot the point for animation
					point.pivot();
				});
			},

			draw: function(ease) {
				var meta = this.getMeta();
				var easingDecimal = ease || 1;

				// Transition Point Locations
				helpers.each(meta.data, function(point) {
					point.transition(easingDecimal);
				});

				// Transition and Draw the line
				meta.dataset.transition(easingDecimal).draw();

				// Draw the points
				helpers.each(meta.data, function(point) {
					point.draw();
				});
			},

			setHoverStyle: function(point) {
				// Point
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;

				model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
				model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
				model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
				model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
			},

			removeHoverStyle: function(point) {
				var dataset = this.chart.data.datasets[point._datasetIndex];
				var custom = point.custom || {};
				var index = point._index;
				var model = point._model;
				var pointElementOptions = this.chart.options.elements.point;

				model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
				model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
				model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
				model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
			}
		});
	};


/***/ },
/* 320 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.Bar = function(context, config) {
			config.type = 'bar';

			return new Chart(context, config);
		};

	};


/***/ },
/* 321 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.Bubble = function(context, config) {
			config.type = 'bubble';
			return new Chart(context, config);
		};

	};


/***/ },
/* 322 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.Doughnut = function(context, config) {
			config.type = 'doughnut';

			return new Chart(context, config);
		};

	};


/***/ },
/* 323 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.Line = function(context, config) {
			config.type = 'line';

			return new Chart(context, config);
		};

	};


/***/ },
/* 324 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.PolarArea = function(context, config) {
			config.type = 'polarArea';

			return new Chart(context, config);
		};

	};


/***/ },
/* 325 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		Chart.Radar = function(context, config) {
			config.type = 'radar';

			return new Chart(context, config);
		};

	};


/***/ },
/* 326 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function(Chart) {

		var defaultConfig = {
			hover: {
				mode: 'single'
			},

			scales: {
				xAxes: [{
					type: 'linear', // scatter should not use a category axis
					position: 'bottom',
					id: 'x-axis-1' // need an ID so datasets can reference the scale
				}],
				yAxes: [{
					type: 'linear',
					position: 'left',
					id: 'y-axis-1'
				}]
			},

			tooltips: {
				callbacks: {
					title: function() {
						// Title doesn't make sense for scatter since we format the data as a point
						return '';
					},
					label: function(tooltipItem) {
						return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
					}
				}
			}
		};

		// Register the default config for this type
		Chart.defaults.scatter = defaultConfig;

		// Scatter charts use line controllers
		Chart.controllers.scatter = Chart.controllers.line;

		Chart.Scatter = function(context, config) {
			config.type = 'scatter';
			return new Chart(context, config);
		};

	};


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var title_content_1 = __webpack_require__(328);
	var collapsable_title_1 = __webpack_require__(329);
	/**
	 * 手风琴控件。它有多个页面，在每一时刻只展开一个。
	 */
	var Accordion = (function (_super) {
	    __extends(Accordion, _super);
	    function Accordion() {
	        _super.call(this, Accordion.TYPE);
	    }
	    Object.defineProperty(Accordion.prototype, "titleH", {
	        get: function () {
	            return this._titleHeight;
	        },
	        /**
	         * titleH 标题控件的高度。
	         */
	        set: function (value) {
	            this._titleHeight = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 增加一个页面。
	     * @param title 标题文本。
	     * @param contentH 内容控件。
	     * @returns 返回新增加的TitleContent。
	     */
	    Accordion.prototype.addPage = function (title, contentWidget) {
	        var me = this;
	        var titleWidget = collapsable_title_1.CollapsableTitle.create({ text: title });
	        var titleContent = title_content_1.TitleContent.create({
	            collapsed: true,
	            titleWidget: titleWidget,
	            contentWidget: contentWidget,
	            titleH: this.titleH
	        });
	        titleWidget.onClickTrigger = function (collapsed) {
	            me.setActivePage(titleContent, collapsed, 300);
	        };
	        this.addChild(titleContent);
	        return titleContent;
	    };
	    /**
	     * 展开或折叠指定的页面。
	     * @param titleContent 要展开或折叠的页面。
	     * @param collapsed 展开或折叠。
	     * @param duration 动画的时间。
	     * @returns 返回当前控件。
	     */
	    Accordion.prototype.setActivePage = function (titleContent, collapsed, duration) {
	        var _this = this;
	        this.children.forEach(function (child) {
	            if (titleContent === child) {
	                child.triggerCollapsed(duration, function (evt) {
	                    _this.relayoutChildren();
	                });
	            }
	            else {
	                if (!child.collapsed) {
	                    child.triggerCollapsed(duration, function (evt) {
	                        _this.relayoutChildren();
	                    });
	                }
	            }
	        });
	        this.relayoutChildren();
	        return this;
	    };
	    Accordion.prototype.relayoutChildren = function () {
	        var r = this.getLayoutRect();
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var w = this.clientW;
	        var n = this.children.length;
	        var titleH = this.titleH;
	        var contentH = this.clientH - n * this.titleH;
	        this.children.forEach(function (child) {
	            child.titleH = titleH;
	            child.contentH = contentH;
	            child.moveResizeTo(x, y, w, child.h, 0);
	            child.relayoutChildren();
	            y += child.h;
	        });
	        return r;
	    };
	    Accordion.prototype.getDefProps = function () {
	        return Accordion.defProps;
	    };
	    Accordion.create = function (options) {
	        return Accordion.recycleBin.create(options);
	    };
	    Accordion.defProps = Object.assign({}, widget_1.Widget.defProps, { _titleHeight: 30 });
	    Accordion.TYPE = "accordion";
	    Accordion.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Accordion);
	    return Accordion;
	}(widget_1.Widget));
	exports.Accordion = Accordion;
	;
	widget_factory_1.WidgetFactory.register(Accordion.TYPE, Accordion.create);


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var Events = __webpack_require__(10);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 一个用来显示标题和内容的控件。通常用于Accordion和PropertySheets的子控件。
	 */
	var TitleContent = (function (_super) {
	    __extends(TitleContent, _super);
	    function TitleContent() {
	        _super.call(this, TitleContent.TYPE);
	    }
	    Object.defineProperty(TitleContent.prototype, "titleH", {
	        get: function () {
	            return this._th;
	        },
	        set: function (value) {
	            this._th = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleContent.prototype, "contentH", {
	        get: function () {
	            return this._ch;
	        },
	        set: function (value) {
	            this._ch = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleContent.prototype, "movable", {
	        get: function () {
	            return this._movable;
	        },
	        set: function (value) {
	            this._movable = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 折叠或展开控件。
	     * @param duration 动画时间(可选)。
	     * @param onStep 动画执行期间单步的回调函数(可选)。
	     * @returns 返回控件本身。
	     */
	    TitleContent.prototype.triggerCollapsed = function (duration, onStep) {
	        var _this = this;
	        var value = !this._collapsed;
	        if (this._inited) {
	            if (duration > 0) {
	                var minH = this.topPadding + this.bottomPadding + this.titleH;
	                var maxH = minH + this.contentH;
	                var h = value ? minH : maxH;
	                this._collapsed = false;
	                this.relayoutChildren();
	                this._animating = true;
	                this.h = value ? maxH : minH;
	                this.resizeTo(this.w, h, duration).onComplete(function (evt) {
	                    _this.collapsed = value;
	                    _this._animating = false;
	                }).onUpdate(function () {
	                    if (onStep) {
	                        onStep();
	                    }
	                });
	            }
	            else {
	                this.collapsed = value;
	                this.relayoutChildren();
	            }
	        }
	        else {
	            this._collapsed = value;
	        }
	        return this;
	    };
	    Object.defineProperty(TitleContent.prototype, "collapsed", {
	        get: function () {
	            return this._collapsed;
	        },
	        /**
	         * collapsed 控件当前折叠或展开的状态。
	         */
	        set: function (value) {
	            if (this._inited) {
	                if (this._collapsed !== value) {
	                    this._collapsed = value;
	                    if (value) {
	                        this.dispatchEvent(Events.createAnyEvent(Events.COLLAPSE));
	                    }
	                    else {
	                        this.dispatchEvent(Events.createAnyEvent(Events.EXPAND));
	                    }
	                }
	            }
	            else {
	                this._collapsed = value;
	            }
	            this.reComputeH();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleContent.prototype, "titleWidget", {
	        /**
	         * 标题控件。
	         */
	        get: function () {
	            return this._titleWidget;
	        },
	        set: function (value) {
	            if (this._titleWidget) {
	                this.removeChild(this._titleWidget);
	            }
	            if (value) {
	                this.addChild(value);
	                if (!this.titleH) {
	                    this.titleH = value.h;
	                }
	            }
	            this._titleWidget = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TitleContent.prototype, "contentWidget", {
	        /**
	         * 内容控件。
	         */
	        get: function () {
	            return this._contentWidget;
	        },
	        set: function (value) {
	            if (this._contentWidget) {
	                this.removeChild(this._contentWidget);
	            }
	            if (value) {
	                this.addChild(value);
	                if (!this.contentH) {
	                    this.contentH = value.h;
	                }
	            }
	            this._contentWidget = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TitleContent.prototype.drawChildren = function (ctx) {
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(0, 0, this.w, this.h);
	        ctx.clip();
	        _super.prototype.drawChildren.call(this, ctx);
	        ctx.restore();
	        return this;
	    };
	    TitleContent.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        if (this._movable) {
	            this._titleWidget.useBehavior("movable", { moveParent: true });
	        }
	    };
	    TitleContent.prototype.reComputeH = function () {
	        var contentH = (!this._collapsed ? this.contentH : 0);
	        this.h = contentH + this.titleH + this.topPadding + this.bottomPadding;
	    };
	    TitleContent.prototype.relayoutChildren = function () {
	        this.requestRedraw();
	        if (this._animating) {
	            return this.getLayoutRect();
	        }
	        if (this.contentH < 1) {
	            this.contentH = this.h - this.topPadding - this.bottomPadding - this.titleH;
	        }
	        this.reComputeH();
	        var r = this.getLayoutRect();
	        var titleWidget = this._titleWidget;
	        var contentWidget = this._contentWidget;
	        if (titleWidget) {
	            titleWidget.moveResizeTo(r.x, r.y, r.w, this.titleH);
	            titleWidget.relayoutChildren();
	        }
	        if (contentWidget) {
	            if (this._collapsed) {
	                contentWidget.visible = false;
	            }
	            else {
	                var y = r.y + this.titleH;
	                contentWidget.visible = true;
	                contentWidget.moveResizeTo(r.x, y, r.w, this.contentH);
	                contentWidget.relayoutChildren();
	            }
	        }
	        return r;
	    };
	    TitleContent.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._movable = false;
	        this._collapsed = false;
	        this._titleWidget = null;
	        this._contentWidget = null;
	    };
	    TitleContent.prototype.getDefProps = function () {
	        return TitleContent.defProps;
	    };
	    TitleContent.create = function (options) {
	        return TitleContent.rBin.create(options);
	    };
	    TitleContent.defProps = Object.assign({}, widget_1.Widget.defProps, { _movable: false, _th: 30, _ch: 0 });
	    TitleContent.TYPE = "title-content";
	    TitleContent.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TitleContent);
	    return TitleContent;
	}(widget_1.Widget));
	exports.TitleContent = TitleContent;
	;
	widget_factory_1.WidgetFactory.register(TitleContent.TYPE, TitleContent.create);


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var widget_1 = __webpack_require__(23);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 可折叠的标题控件，点击折叠图片或双击时折叠或展开。
	 * 只能用于TitleContent的titleWidget。
	 *
	 */
	var CollapsableTitle = (function (_super) {
	    __extends(CollapsableTitle, _super);
	    function CollapsableTitle() {
	        _super.call(this, CollapsableTitle.TYPE);
	    }
	    Object.defineProperty(CollapsableTitle.prototype, "collapsed", {
	        get: function () {
	            var titleContent = this.parent;
	            return titleContent.collapsed;
	        },
	        set: function (value) {
	            var titleContent = this.parent;
	            titleContent.collapsed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CollapsableTitle.prototype.trigger = function () {
	        var titleContent = this.parent;
	        var collapsed = !titleContent.collapsed;
	        if (this.onClickTrigger) {
	            this.onClickTrigger(collapsed);
	        }
	    };
	    CollapsableTitle.prototype.getFgImageRect = function (style) {
	        var w = this.clientH;
	        return rect_1.Rect.rect.init(this.leftPadding, this.topPadding, w, w);
	    };
	    CollapsableTitle.prototype.getTextRect = function (style) {
	        var w = this.clientH;
	        return rect_1.Rect.rect.init(this.leftPadding + w, this.topPadding, this.clientW - w, this.clientH);
	    };
	    CollapsableTitle.prototype.getStyleType = function () {
	        return this._styleType || this.collapsed ? "collapsable-title.collapsed" : "collapsable-title.expanded";
	    };
	    CollapsableTitle.prototype.dispatchDblClick = function (evt) {
	        _super.prototype.dispatchDblClick.call(this, evt);
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        this.trigger();
	    };
	    CollapsableTitle.prototype.dispatchClick = function (evt) {
	        _super.prototype.dispatchClick.call(this, evt);
	        if (!this._enable || !this._sensitive) {
	            return;
	        }
	        var p = this.toLocalPoint(point_1.Point.point.copy(evt));
	        if (p.x < this.h) {
	            this.trigger();
	        }
	    };
	    CollapsableTitle.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this.onClickTrigger = null;
	    };
	    CollapsableTitle.create = function (options) {
	        return CollapsableTitle.rBin.create(options);
	    };
	    CollapsableTitle.TYPE = "collapsable-title";
	    CollapsableTitle.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(CollapsableTitle);
	    return CollapsableTitle;
	}(widget_1.Widget));
	exports.CollapsableTitle = CollapsableTitle;
	;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var recyclable_creator_1 = __webpack_require__(87);
	var Ruler = (function (_super) {
	    __extends(Ruler, _super);
	    function Ruler(type) {
	        _super.call(this, type);
	        this.scale = 1;
	        this.originX = 0;
	        this.originY = 0;
	        this.pointerX = 0;
	        this.pointerY = 0;
	    }
	    Object.defineProperty(Ruler.prototype, "originX", {
	        get: function () {
	            return this._originX;
	        },
	        set: function (value) {
	            this._originX = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ruler.prototype, "originY", {
	        get: function () {
	            return this._originY;
	        },
	        set: function (value) {
	            this._originY = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ruler.prototype, "scale", {
	        get: function () {
	            return this._scale;
	        },
	        set: function (value) {
	            this._scale = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ruler.prototype, "pointerX", {
	        get: function () {
	            return this._pointerX;
	        },
	        set: function (value) {
	            this._pointerX = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ruler.prototype, "pointerY", {
	        get: function () {
	            return this._pointerY;
	        },
	        set: function (value) {
	            this._pointerY = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ruler.prototype.setPointer = function (x, y) {
	        this._pointerX = x;
	        this._pointerY = y;
	        this.requestRedraw();
	        return this;
	    };
	    Ruler.prototype.setOrigin = function (x, y) {
	        this._originX = x;
	        this._originY = y;
	        this.requestRedraw();
	        return this;
	    };
	    Ruler.prototype.drawBackground = function (ctx, style) {
	        ctx.lineWidth = 1;
	        ctx.font = style.font;
	        ctx.textAlign = "left";
	        ctx.textBaseline = "middle";
	        ctx.strokeStyle = style.lineColor;
	        ctx.fillStyle = style.textColor;
	        ctx.beginPath();
	        this.drawColorBackground(ctx, style);
	        return this;
	    };
	    Ruler.SIZE = 10;
	    return Ruler;
	}(widget_1.Widget));
	exports.Ruler = Ruler;
	;
	var VRuler = (function (_super) {
	    __extends(VRuler, _super);
	    function VRuler() {
	        _super.call(this, VRuler.TYPE);
	    }
	    VRuler.prototype.drawColorBackground = function (ctx, style) {
	        var h = this.w;
	        var w = this.h;
	        var ox = this.originX;
	        var oy = this.originY;
	        var i = 0;
	        var x = 0;
	        var y = 0;
	        var fh = h;
	        var th = h / 3;
	        var hh = h / 2;
	        var scale = this.scale;
	        var rs = Ruler.SIZE;
	        var pixels = Math.floor(10 / scale);
	        var scaledPixels = pixels * scale;
	        ctx.translate(0, oy);
	        ctx.rotate(Math.PI * 0.5);
	        ctx.translate(0, -h);
	        function getH(i) {
	            if (i % 10 === 0) {
	                return fh;
	            }
	            else if (i % 5 === 0) {
	                return hh;
	            }
	            else {
	                return th;
	            }
	        }
	        ox = oy;
	        /////////////////////////////////	
	        ctx.beginPath();
	        var n = Math.floor((w - ox) / scaledPixels);
	        for (i = 0; i < n; i++) {
	            h = getH(i);
	            x = i * scaledPixels;
	            if ((x + ox) < 0)
	                continue;
	            ctx.moveTo(x + 0.5, 0);
	            ctx.lineTo(x + 0.5, h);
	        }
	        ctx.stroke();
	        for (i = 0; i < n; i++) {
	            x = i * scaledPixels;
	            if ((x + ox) < 0)
	                continue;
	            if (i % 10 === 0) {
	                var str = i * pixels;
	                x = x;
	                y = fh;
	                ctx.save();
	                ctx.translate(x, y);
	                ctx.rotate(Math.PI);
	                ctx.fillText(str, 5, th);
	                ctx.restore();
	            }
	        }
	        /////////////////////////////////	
	        ctx.beginPath();
	        var n = Math.floor((ox - rs) / scaledPixels);
	        for (i = 1; i < n; i++) {
	            h = getH(i);
	            x = -i * scaledPixels;
	            ctx.moveTo(x + 0.5, 0);
	            ctx.lineTo(x + 0.5, h);
	        }
	        ctx.stroke();
	        for (i = 1; i < n; i++) {
	            x = -i * scaledPixels;
	            if (i % 10 === 0) {
	                var str = -i * pixels;
	                x = x;
	                y = fh;
	                ctx.save();
	                ctx.translate(x, y);
	                ctx.rotate(Math.PI);
	                ctx.fillText(str, 5, th);
	                ctx.restore();
	            }
	        }
	        /////////////////////////////////	
	        h = fh;
	        x = this.pointerY - oy;
	        ctx.fillStyle = style.foreGroundColor;
	        ctx.beginPath();
	        ctx.moveTo(x - th, hh);
	        ctx.lineTo(x + th, hh);
	        ctx.lineTo(x, 0);
	        ctx.lineTo(x - th, hh);
	        ctx.fill();
	        return this;
	    };
	    VRuler.prototype.relayout = function () {
	        this.moveTo(0, 0, 0);
	        this.resizeTo(this.w, this.parent.h, 0);
	    };
	    VRuler.create = function (options) {
	        return VRuler.recycleBin.create().reset(VRuler.TYPE, options);
	    };
	    VRuler.TYPE = "vruler";
	    VRuler.recycleBin = new recyclable_creator_1.RecyclableCreator(function () { return new VRuler(); });
	    return VRuler;
	}(Ruler));
	exports.VRuler = VRuler;
	;
	widget_factory_1.WidgetFactory.register(VRuler.TYPE, VRuler.create);
	var HRuler = (function (_super) {
	    __extends(HRuler, _super);
	    function HRuler() {
	        _super.call(this, HRuler.TYPE);
	    }
	    HRuler.prototype.drawColorBackground = function (ctx, style) {
	        var w = this.w;
	        var h = this.h;
	        var ox = this.originX;
	        var oy = this.originY;
	        var i = 0;
	        var x = 0;
	        var fh = h;
	        var th = h / 3;
	        var hh = h / 2;
	        var scale = this.scale;
	        var rs = Ruler.SIZE;
	        var pixels = Math.floor(10 / scale);
	        var scaledPixels = pixels * scale;
	        ctx.translate(ox, h);
	        function getH(i) {
	            if (i % 10 === 0) {
	                return fh;
	            }
	            else if (i % 5 === 0) {
	                return hh;
	            }
	            else {
	                return th;
	            }
	        }
	        /////////////////////////////////	
	        ctx.beginPath();
	        var n = Math.floor((w - ox) / scaledPixels);
	        for (i = 0; i < n; i++) {
	            h = getH(i);
	            x = i * scaledPixels;
	            if ((x + ox) < 0)
	                continue;
	            ctx.moveTo(x + 0.5, 0);
	            ctx.lineTo(x + 0.5, -h);
	        }
	        ctx.stroke();
	        for (i = 0; i < n; i++) {
	            x = i * scaledPixels;
	            if ((x + ox) < 0)
	                continue;
	            if (i % 10 === 0) {
	                var str = i * pixels;
	                ctx.fillText(str, x + 5, -hh);
	            }
	        }
	        /////////////////////////////////	
	        ctx.beginPath();
	        var n = Math.floor((ox - rs) / scaledPixels);
	        for (i = 1; i < n; i++) {
	            h = getH(i);
	            x = -i * scaledPixels;
	            ctx.moveTo(x + 0.5, 0);
	            ctx.lineTo(x + 0.5, -h);
	        }
	        ctx.stroke();
	        for (i = 1; i < n; i++) {
	            x = -i * scaledPixels;
	            if (i % 10 === 0) {
	                var str = -i * pixels;
	                ctx.fillText(str, x + 5, -hh);
	            }
	        }
	        /////////////////////////////////	
	        h = fh;
	        x = this.pointerX - ox;
	        ctx.fillStyle = style.foreGroundColor;
	        ctx.beginPath();
	        ctx.moveTo(x - th, -hh);
	        ctx.lineTo(x + th, -hh);
	        ctx.lineTo(x, 0);
	        ctx.lineTo(x - th, -hh);
	        ctx.fill();
	        return this;
	    };
	    HRuler.prototype.relayout = function () {
	        this.moveTo(0, 0, 0);
	        this.resizeTo(this.parent.w, this.h, 0);
	    };
	    HRuler.create = function (options) {
	        return HRuler.recycleBin.create().reset(HRuler.TYPE, options);
	    };
	    HRuler.TYPE = "hruler";
	    HRuler.recycleBin = new recyclable_creator_1.RecyclableCreator(function () { return new HRuler(); });
	    return HRuler;
	}(Ruler));
	exports.HRuler = HRuler;
	;
	widget_factory_1.WidgetFactory.register(HRuler.TYPE, HRuler.create);


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var scroll_view_1 = __webpack_require__(104);
	var widget_factory_1 = __webpack_require__(27);
	var title_content_1 = __webpack_require__(328);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var collapsable_title_1 = __webpack_require__(329);
	/**
	 * 管理多个页面，每个页面可以展开或折叠。
	 */
	var PropertySheets = (function (_super) {
	    __extends(PropertySheets, _super);
	    function PropertySheets() {
	        _super.call(this, PropertySheets.TYPE);
	    }
	    Object.defineProperty(PropertySheets.prototype, "titleH", {
	        get: function () {
	            return this._titleHeight;
	        },
	        /**
	         * titleH 标题控件的高度。
	         */
	        set: function (value) {
	            this._titleHeight = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PropertySheets.prototype, "childrenLayouter", {
	        get: function () {
	            return this._childrenLayouter;
	        },
	        set: function (layouter) {
	            console.log("set childrenLayouter not work for me.");
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 增加一个页面。
	     * @param title 标题文本。
	     * @param contentH 内容控件。
	     * @returns 返回新增加的TitleContent。
	     */
	    PropertySheets.prototype.addPage = function (title, contentWidget) {
	        var me = this;
	        var titleWidget = collapsable_title_1.CollapsableTitle.create({ text: title });
	        var titleContent = title_content_1.TitleContent.create({
	            collapsed: true,
	            titleWidget: titleWidget,
	            contentWidget: contentWidget,
	            titleH: this.titleH
	        });
	        titleWidget.onClickTrigger = function (collapsed) {
	            titleContent.collapsed = !titleContent.collapsed;
	            me.relayoutChildren();
	        };
	        this.addChild(titleContent);
	        return titleContent;
	    };
	    PropertySheets.prototype.computeDesireContentHeight = function () {
	        var h = 0;
	        this.children.forEach(function (child) {
	            if (child.visible) {
	                h += child.h;
	            }
	        });
	        return h;
	    };
	    PropertySheets.prototype.relayoutChildren = function () {
	        this.contentH = this.computeDesireContentHeight();
	        var r = this.getLayoutRect();
	        var w = r.w;
	        var x = r.x;
	        var y = r.y;
	        this.children.forEach(function (child) {
	            child.moveResizeTo(x, y, w, 0, 0);
	            child.relayoutChildren();
	            y += child.h;
	        });
	        this.contentW = r.w + this.leftPadding + this.rightPadding;
	        this.contentH = y + this.bottomPadding + 10;
	        return r;
	    };
	    PropertySheets.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._titleHeight = 30;
	        this.dragToScroll = true;
	        this.slideToScroll = true;
	        this.scrollerOptions.scrollingX = false;
	    };
	    PropertySheets.create = function (options) {
	        return PropertySheets.rBin.create(options);
	    };
	    PropertySheets.TYPE = "property-sheets";
	    PropertySheets.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(PropertySheets);
	    return PropertySheets;
	}(scroll_view_1.ScrollView));
	exports.PropertySheets = PropertySheets;
	;
	widget_factory_1.WidgetFactory.register(PropertySheets.TYPE, PropertySheets.create);


/***/ },
/* 332 */
/***/ function(module, exports) {

	"use strict";
	var DelegateCommand = (function () {
	    function DelegateCommand(execute, canExecute) {
	        this._execute = execute;
	        this._canExecute = canExecute;
	    }
	    DelegateCommand.prototype.canExecute = function () {
	        return this._canExecute ? this._canExecute() : true;
	    };
	    DelegateCommand.prototype.execute = function (args) {
	        return this._execute(args);
	    };
	    DelegateCommand.create = function (execute, canExecute) {
	        return new DelegateCommand(execute, canExecute);
	    };
	    return DelegateCommand;
	}());
	exports.DelegateCommand = DelegateCommand;
	;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var delegate_command_1 = __webpack_require__(332);
	var ivalidation_rule_1 = __webpack_require__(162);
	var iview_model_1 = __webpack_require__(85);
	var view_model_default_1 = __webpack_require__(159);
	/**
	 * 集合ViewModel。delProp/getProp/setProp操作当前的项。
	 */
	var CollectionViewModel = (function (_super) {
	    __extends(CollectionViewModel, _super);
	    function CollectionViewModel(data) {
	        _super.call(this, data);
	        this.isCollection = true;
	        this.filters = {};
	        this.comparators = {};
	        this._current = 0;
	        this._collection = data;
	        this.needUpdateViewModelItems = true;
	    }
	    Object.defineProperty(CollectionViewModel.prototype, "collection", {
	        /**
	         * 原始的数据。
	         */
	        get: function () {
	            return this._collection;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CollectionViewModel.prototype, "current", {
	        get: function () {
	            return this._current;
	        },
	        /**
	         * 当前数据项的序号。
	         */
	        set: function (value) {
	            var viewModelItems = this.viewModelItems;
	            this._current = Math.min(viewModelItems.length - 1, Math.max(0, value));
	            this.notifyChange(Events.PROP_CHANGE, "/", value);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CollectionViewModel.prototype, "total", {
	        get: function () {
	            return this.viewModelItems.length;
	        },
	        /**
	         * 过滤之后总的项数。
	         */
	        set: function (value) {
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CollectionViewModel.prototype, "viewModelItems", {
	        /**
	         * 子项目的ViewModel
	         */
	        get: function () {
	            if (this.needUpdateViewModelItems) {
	                this.updateViewModelItems();
	            }
	            return this._viewModelItems;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /*
	     * 对于属性操作，都是针对当前项的ViewModel的操作。
	     */
	    CollectionViewModel.prototype.getProp = function (path, converterName) {
	        var vm = this.currentViewModel;
	        return vm ? vm.getProp(path, converterName) : null;
	    };
	    CollectionViewModel.prototype.delProp = function (path) {
	        var vm = this.currentViewModel;
	        return vm ? vm.delProp(path) : this;
	    };
	    CollectionViewModel.prototype.setProp = function (path, value, converterName, validationRule) {
	        var vm = this.currentViewModel;
	        return vm ? vm.setProp(path, value, converterName, validationRule) : ivalidation_rule_1.ValidationResult.invalidResult;
	    };
	    Object.defineProperty(CollectionViewModel.prototype, "currentViewModel", {
	        /**
	         * 当前项的ViewModel
	         */
	        get: function () {
	            return this.viewModelItems[this._current];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 注册子项的增加删除的变化事件。
	     */
	    CollectionViewModel.prototype.onItemsChange = function (callback) {
	        this.on(Events.ITEMS_CHANGE, callback);
	        return this;
	    };
	    /**
	     * 注销子项的增加删除的变化事件。
	     */
	    CollectionViewModel.prototype.offItemsChange = function (callback) {
	        this.off(Events.ITEMS_CHANGE, callback);
	        return this;
	    };
	    /**
	     * 增加一个数据项。
	     */
	    CollectionViewModel.prototype.addItem = function (data, index) {
	        var n = this._collection.length;
	        var index = index < n ? index : n;
	        this._collection.splice(index, 0, data);
	        this.updateViewModelItems(true);
	        return this;
	    };
	    /**
	     * 删除一个数据项。
	     */
	    CollectionViewModel.prototype.removeItem = function (index) {
	        this._collection.splice(index, 1);
	        this.updateViewModelItems(true);
	        return this;
	    };
	    /**
	     * 删除指定规则的数据项。
	     */
	    CollectionViewModel.prototype.removeItems = function (func) {
	        var _this = this;
	        var collection = this._collection.filter(function (item, index, arr) {
	            return !func(item, index, arr);
	        });
	        this._collection.length = 0;
	        collection.forEach(function (item) {
	            _this._collection.push(item);
	        });
	        this.updateViewModelItems(true);
	        return this;
	    };
	    /**
	     * 是否存在指定条件的项。
	     */
	    CollectionViewModel.prototype.hasItems = function (func, filtered) {
	        var arr = filtered ? this._filteredSortedCollection : this._collection;
	        return arr.some(func);
	    };
	    /**
	     * 获取指定序号的子ViewModel
	     */
	    CollectionViewModel.prototype.getItemViewModel = function (index) {
	        var i = (index >= 0 && index < this.total) ? index : this._current;
	        return this.viewModelItems[i];
	    };
	    CollectionViewModel.prototype.getItemData = function (index) {
	        var i = (index >= 0 && index < this.total) ? index : this._current;
	        return this._filteredSortedCollection[i];
	    };
	    /*
	     * 获取过滤并排序之后的集合。
	     */
	    CollectionViewModel.prototype.getFilteredSortedCollection = function () {
	        var collection = this._collection;
	        var filteredSortedCollection = null;
	        var filter = this.filters && this.filter ? this.filters[this.filter] : null;
	        if (filter) {
	            filteredSortedCollection = collection.filter(function (item) {
	                return filter.check(item);
	            });
	        }
	        else {
	            filteredSortedCollection = collection.slice();
	        }
	        var comparator = this.comparators && this.comparator ? this.comparators[this.comparator] : null;
	        if (comparator) {
	            filteredSortedCollection.sort(function (a, b) {
	                return comparator.compare(a, b);
	            });
	        }
	        this._filteredSortedCollection = filteredSortedCollection;
	        return filteredSortedCollection;
	    };
	    /**
	     * 获取排序过滤集合中的序数对应于原始集合中的序数。
	     */
	    CollectionViewModel.prototype.getRawIndexOf = function (index) {
	        if ((this.comparators && this.comparator) || (this.filters && this.filter)) {
	            var obj = this._filteredSortedCollection[index];
	            return this.collection.indexOf(obj);
	        }
	        else {
	            return index;
	        }
	    };
	    /*
	     * 创建一个子ViewModel。
	     */
	    CollectionViewModel.prototype.createItemViewModel = function (index, data) {
	        return ItemViewModel.create(this, index, data);
	    };
	    /*
	     * 重新创建ViewModelItems。
	     */
	    CollectionViewModel.prototype.updateViewModelItems = function (force) {
	        var _this = this;
	        if (force || this.needUpdateViewModelItems) {
	            this.needUpdateViewModelItems = false;
	            console.time("filter and sort");
	            var collection = this.getFilteredSortedCollection();
	            var n = collection.length;
	            if (this.current >= n) {
	                this._current = n - 1;
	            }
	            if (this._viewModelItems) {
	                this._viewModelItems.forEach(function (item) {
	                    item.dispose();
	                });
	            }
	            this._viewModelItems = collection.map(function (data, i) {
	                return _this.createItemViewModel(i, data);
	            });
	            console.timeEnd("filter and sort");
	            console.time("notify ITEMS_CHANGE");
	            this.notifyChange(Events.PROP_CHANGE, "/", null);
	            this.notifyChange(Events.ITEMS_CHANGE, "/", null);
	            console.timeEnd("notify ITEMS_CHANGE");
	        }
	    };
	    /**
	     * 注册过滤器。
	     */
	    CollectionViewModel.prototype.registerFilter = function (name, filter) {
	        this.filters[name] = filter;
	        return this;
	    };
	    /**
	     * 注销过滤器。
	     */
	    CollectionViewModel.prototype.unregisterFilter = function (name) {
	        delete this.filters[name];
	        return this;
	    };
	    Object.defineProperty(CollectionViewModel.prototype, "filter", {
	        get: function () {
	            return this._filter;
	        },
	        /**
	         * 当前的过滤器器。
	         */
	        set: function (name) {
	            this._filter = name;
	            this.needUpdateViewModelItems = true;
	            this.updateViewModelItems();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 注册排序用的比较器。
	     */
	    CollectionViewModel.prototype.registerComparator = function (name, comparator) {
	        this.comparators[name] = comparator;
	        return this;
	    };
	    /**
	     * 注销排序用的比较器。
	     */
	    CollectionViewModel.prototype.unregisterComparator = function (name) {
	        delete this.comparators[name];
	        return this;
	    };
	    Object.defineProperty(CollectionViewModel.prototype, "comparator", {
	        get: function () {
	            return this._comparator;
	        },
	        /**
	         * 设置当前的比较器。
	         */
	        set: function (name) {
	            this._comparator = name;
	            this.needUpdateViewModelItems = true;
	            this.updateViewModelItems();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CollectionViewModel.create = function (data) {
	        var viewModel = new CollectionViewModel(data);
	        return viewModel;
	    };
	    return CollectionViewModel;
	}(view_model_default_1.ViewModelDefault));
	exports.CollectionViewModel = CollectionViewModel;
	;
	/**
	 * 表示集合ViewModel中的单项ViewModel。
	 *
	 */
	var ItemViewModel = (function (_super) {
	    __extends(ItemViewModel, _super);
	    function ItemViewModel() {
	        _super.call(this, null);
	        this.isCollection = false;
	        this.initCommands();
	    }
	    ItemViewModel.prototype.getCommand = function (name) {
	        var cmd = _super.prototype.getCommand.call(this, name);
	        if (!cmd) {
	            cmd = this.collectionViewModel.getCommand(name);
	        }
	        return cmd;
	    };
	    ItemViewModel.prototype.canExecute = function (name) {
	        if (_super.prototype.canExecute.call(this, name)) {
	            return true;
	        }
	        else {
	            return this.collectionViewModel.canExecute(name);
	        }
	    };
	    ItemViewModel.prototype.execCommand = function (name, args) {
	        var cmd = _super.prototype.getCommand.call(this, name);
	        if (cmd) {
	            return _super.prototype.execCommand.call(this, name, args);
	        }
	        else {
	            if (args) {
	                args.$index = this.index;
	            }
	            else {
	                args = { $index: this.index };
	            }
	            return this.collectionViewModel.execCommand(name, args);
	        }
	    };
	    ItemViewModel.prototype.convert = function (converterName, value) {
	        return this.collectionViewModel.convert(converterName, value);
	    };
	    ItemViewModel.prototype.convertBack = function (converterName, value) {
	        return this.collectionViewModel.convertBack(converterName, value);
	    };
	    ItemViewModel.prototype.isValueValid = function (ruleName, value) {
	        return this.collectionViewModel.isValueValid(ruleName, value);
	    };
	    ItemViewModel.prototype.getValueConverter = function (name) {
	        return this.collectionViewModel.getValueConverter(name);
	    };
	    ItemViewModel.prototype.getValidationRule = function (name) {
	        return this.collectionViewModel.getValidationRule(name);
	    };
	    ItemViewModel.prototype.isCurrent = function () {
	        return this.collectionViewModel.current === this.index;
	    };
	    ItemViewModel.prototype.notifyChange = function (type, path, value) {
	        var collectionViewModel = this.collectionViewModel;
	        if (collectionViewModel.bindingMode === iview_model_1.BindingMode.ONE_WAY) {
	            return;
	        }
	        if (collectionViewModel.comparator || collectionViewModel.filter) {
	            collectionViewModel.updateViewModelItems(true);
	        }
	        else {
	            if (this.isCurrent) {
	                collectionViewModel.notifyChange(type, path, value);
	            }
	            _super.prototype.notifyChange.call(this, type, path, value);
	        }
	    };
	    ItemViewModel.prototype.initCommands = function () {
	        var _this = this;
	        this.registerCommand("activate", delegate_command_1.DelegateCommand.create(function (args) {
	            _this.collectionViewModel.current = _this.index;
	        }));
	        this.registerCommand("remove", delegate_command_1.DelegateCommand.create(function (args) {
	            _this.collectionViewModel.removeItem(_this.collectionViewModel.getRawIndexOf(_this.index));
	        }));
	    };
	    ItemViewModel.prototype.init = function (collectionViewModel, index, data) {
	        this.collectionViewModel = collectionViewModel;
	        this.index = index;
	        this.setData(data, false);
	        this.bindingMode = collectionViewModel.bindingMode;
	        return this;
	    };
	    ItemViewModel.prototype.dispose = function () {
	        this.index = -1;
	        this.removeAllListeners();
	        this.collectionViewModel = null;
	        ItemViewModel.cache.push(this);
	    };
	    ItemViewModel.create = function (collectionViewModel, index, data) {
	        var vm = ItemViewModel.cache.length > 0 ? ItemViewModel.cache.pop() : (new ItemViewModel());
	        return vm.init(collectionViewModel, index, data);
	    };
	    ItemViewModel.cache = [];
	    return ItemViewModel;
	}(view_model_default_1.ViewModelDefault));
	exports.ItemViewModel = ItemViewModel;


/***/ },
/* 334 */
/***/ function(module, exports) {

	"use strict";
	var DelegateValueConverter = (function () {
	    function DelegateValueConverter(convert, convertBack) {
	        this._convert = convert;
	        this._convertBack = convertBack;
	    }
	    DelegateValueConverter.prototype.convert = function (data) {
	        return this._convert(data);
	    };
	    DelegateValueConverter.prototype.convertBack = function (data) {
	        return this._convertBack(data);
	    };
	    DelegateValueConverter.create = function (convert, convertBack) {
	        return new DelegateValueConverter(convert, convertBack);
	    };
	    return DelegateValueConverter;
	}());
	exports.DelegateValueConverter = DelegateValueConverter;
	;


/***/ },
/* 335 */
/***/ function(module, exports) {

	"use strict";
	var DelegateValidationRule = (function () {
	    function DelegateValidationRule(validate) {
	        this._validate = validate;
	    }
	    DelegateValidationRule.prototype.validate = function (value) {
	        return this._validate(value);
	    };
	    DelegateValidationRule.create = function (validate) {
	        return new DelegateValidationRule(validate);
	    };
	    return DelegateValidationRule;
	}());
	exports.DelegateValidationRule = DelegateValidationRule;
	;


/***/ },
/* 336 */
/***/ function(module, exports) {

	"use strict";
	var ToastInfo = (function () {
	    function ToastInfo(text, duration, w) {
	        this.text = text;
	        this.duration = duration || 2000;
	        this.w = w;
	    }
	    ToastInfo.create = function (text, duration, w) {
	        return new ToastInfo(text, duration, w);
	    };
	    return ToastInfo;
	}());
	exports.ToastInfo = ToastInfo;
	;


/***/ },
/* 337 */
/***/ function(module, exports) {

	"use strict";
	var InputInfo = (function () {
	    function InputInfo(title, value, inputTips, inputType, w) {
	        this.w = w;
	        this.value = value;
	        this.title = title;
	        this.inputTips = inputTips;
	        this.inputType = inputType;
	        this.isValueValid = function (value) {
	            return !!value;
	        };
	    }
	    InputInfo.create = function (title, value, inputTips, inputType, w) {
	        return new InputInfo(title, value, inputTips, inputType, w);
	    };
	    return InputInfo;
	}());
	exports.InputInfo = InputInfo;
	;


/***/ },
/* 338 */
/***/ function(module, exports) {

	"use strict";
	var PropsInfo = (function () {
	    function PropsInfo(pagePropsDesc, data, mutable, w) {
	        this.w = w;
	        this.data = data;
	        this.mutable = mutable;
	        this.pagePropsDesc = pagePropsDesc;
	    }
	    PropsInfo.create = function (pagePropsDesc, data, mutable, w) {
	        return new PropsInfo(pagePropsDesc, data, mutable, w);
	    };
	    return PropsInfo;
	}());
	exports.PropsInfo = PropsInfo;
	;


/***/ },
/* 339 */
/***/ function(module, exports) {

	"use strict";
	var ChoiceOption = (function () {
	    function ChoiceOption(text, iconURL) {
	        this.text = text;
	        this.iconURL = iconURL || null;
	    }
	    ChoiceOption.create = function (text, iconURL) {
	        return new ChoiceOption(text, iconURL);
	    };
	    return ChoiceOption;
	}());
	exports.ChoiceOption = ChoiceOption;
	;
	var ChoiceInfo = (function () {
	    function ChoiceInfo(title, multiple, w, h) {
	        this.w = w;
	        this.h = h;
	        this.title = title;
	        this.multiple = multiple;
	        this.resetOptions();
	    }
	    ChoiceInfo.prototype.resetOptions = function () {
	        this.options = [];
	    };
	    ChoiceInfo.prototype.addOption = function (text, iconURL) {
	        this.options.push(ChoiceOption.create(text, iconURL));
	    };
	    ChoiceInfo.create = function (title, multiple, w, h) {
	        return new ChoiceInfo(title, multiple, w, h);
	    };
	    return ChoiceInfo;
	}());
	exports.ChoiceInfo = ChoiceInfo;
	;


/***/ },
/* 340 */
/***/ function(module, exports) {

	"use strict";
	var ProgressInfo = (function () {
	    function ProgressInfo(title, runTask, w) {
	        this.w = w;
	        this.title = title;
	        this.runTask = runTask;
	    }
	    ProgressInfo.create = function (title, runTask, w) {
	        return new ProgressInfo(title, runTask, w);
	    };
	    return ProgressInfo;
	}());
	exports.ProgressInfo = ProgressInfo;
	;


/***/ },
/* 341 */
/***/ function(module, exports) {

	"use strict";
	var ConfirmationInfo = (function () {
	    function ConfirmationInfo(content, w) {
	        this.w = w;
	        this.content = content;
	        this.confirmed = false;
	    }
	    ConfirmationInfo.create = function (content, w) {
	        return new ConfirmationInfo(content, w);
	    };
	    return ConfirmationInfo;
	}());
	exports.ConfirmationInfo = ConfirmationInfo;
	;


/***/ },
/* 342 */
/***/ function(module, exports) {

	"use strict";
	var NotificationInfo = (function () {
	    function NotificationInfo(content, w) {
	        this.w = w;
	        this.content = content;
	    }
	    NotificationInfo.create = function (content, w) {
	        return new NotificationInfo(content, w);
	    };
	    return NotificationInfo;
	}());
	exports.NotificationInfo = NotificationInfo;
	;


/***/ },
/* 343 */
/***/ function(module, exports) {

	"use strict";
	var ItemsStorage = (function () {
	    function ItemsStorage(prefix) {
	        this._prefix = prefix + ".";
	    }
	    ItemsStorage.prototype.getKey = function (name) {
	        return this._prefix + name;
	    };
	    ItemsStorage.prototype.set = function (name, data) {
	        var key = this.getKey(name);
	        localStorage.setItem(key, data);
	    };
	    ItemsStorage.prototype.remove = function (name) {
	        var key = this.getKey(name);
	        localStorage.removeItem(key);
	        return true;
	    };
	    ItemsStorage.prototype.get = function (name) {
	        var key = this.getKey(name);
	        return localStorage.getItem(key);
	    };
	    ItemsStorage.prototype.getItems = function () {
	        var n = localStorage.length;
	        var items = [];
	        var prefix = this._prefix;
	        for (var i = 0; i < n; i++) {
	            var key = localStorage.key(i);
	            if (key.indexOf(prefix) === 0) {
	                items.push(key.substr(prefix.length));
	            }
	        }
	        return items;
	    };
	    ItemsStorage.create = function (prefix) {
	        return new ItemsStorage(prefix);
	    };
	    return ItemsStorage;
	}());
	exports.ItemsStorage = ItemsStorage;
	;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格中的一行。
	 */
	var TableRow = (function (_super) {
	    __extends(TableRow, _super);
	    function TableRow() {
	        _super.call(this, TableRow.TYPE);
	    }
	    TableRow.prototype.relayoutChildren = function () {
	        var tableClient = (this.parent);
	        if (!this.w || !this.h || !tableClient) {
	            return;
	        }
	        var h = this.clientH;
	        var x = this.leftPadding;
	        var y = this.rightPadding;
	        var colsWidth = tableClient.colsWidth;
	        this.children.forEach(function (child, index) {
	            var w = colsWidth[index] || 100;
	            child.moveResizeTo(x, y, w, h);
	            x += w;
	        });
	        this.w = x + this.rightPadding;
	        return null;
	    };
	    TableRow.create = function (options) {
	        return TableRow.recycleBin.create(options);
	    };
	    TableRow.TYPE = "table-row";
	    TableRow.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableRow);
	    return TableRow;
	}(widget_1.Widget));
	exports.TableRow = TableRow;
	;
	widget_factory_1.WidgetFactory.register(TableRow.TYPE, TableRow.create);


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var point_1 = __webpack_require__(6);
	var range_1 = __webpack_require__(346);
	var list_view_1 = __webpack_require__(116);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格内容区域
	 */
	var TableClient = (function (_super) {
	    __extends(TableClient, _super);
	    function TableClient() {
	        _super.call(this, TableClient.TYPE);
	    }
	    Object.defineProperty(TableClient.prototype, "colsWidth", {
	        get: function () {
	            return this._colsWidth;
	        },
	        /**
	         * 记录每一列的宽度，从TableHeader获取。
	         */
	        set: function (value) {
	            this._colsWidth = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableClient.prototype, "selectedRows", {
	        get: function () {
	            return this._selectedRows;
	        },
	        /**
	         * 当前选择的行的范围。
	         */
	        set: function (value) {
	            this._selectedRows.first = value.first;
	            this._selectedRows.second = value.second;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableClient.prototype, "selectedCols", {
	        get: function () {
	            return this._selectedCols;
	        },
	        /**
	         * 当前选择的列的范围。
	         */
	        set: function (value) {
	            this._selectedCols.first = value.first;
	            this._selectedCols.second = value.second;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /*
	     * 把X坐标转换成对应的列数。
	     */
	    TableClient.prototype.xToCol = function (x) {
	        var xx = x;
	        var col = -1;
	        this.colsWidth.some(function (w, index) {
	            xx -= w;
	            col = index;
	            return xx <= 0;
	        });
	        return col;
	    };
	    /*
	     * 把Y坐标转换成对应的行数。
	     */
	    TableClient.prototype.yToRow = function (y) {
	        return Math.floor(y / this.itemH);
	    };
	    /**
	     * 计算选中的行列数对应的像素范围。
	     */
	    TableClient.prototype.calcSelectRect = function () {
	        var left = 0;
	        var right = 0;
	        var selectedCols = this._selectedCols;
	        var selectedRows = this._selectedRows;
	        this.colsWidth.some(function (width, index) {
	            if (index < selectedCols.first) {
	                left += width;
	            }
	            if (index <= selectedCols.second) {
	                right += width;
	                return false;
	            }
	            else {
	                return true;
	            }
	        });
	        var x = left - this.offsetX;
	        var w = right - left;
	        var y = selectedRows.first * this.itemH - this.offsetY;
	        var h = (selectedRows.second - selectedRows.first + 1) * this.itemH;
	        var maxW = Math.min(this.getViewWidth(), this.contentW);
	        var maxH = Math.min(this.getViewHeight(), this.contentH);
	        if (x < 0) {
	            w += x;
	            x = 0;
	        }
	        if ((x + w) >= maxW) {
	            w = maxW - x - 1;
	        }
	        if (y < 0) {
	            h += y;
	            y = 0;
	        }
	        if ((y + h) >= this.contentH) {
	            h = maxH - y - 1;
	        }
	        return rect_1.Rect.rect.init(x, y, w, h);
	    };
	    TableClient.prototype.setSelectedRows = function (first, second) {
	        this._selectedRows.first = Math.min(first, second);
	        this._selectedRows.second = Math.max(first, second);
	        return this;
	    };
	    TableClient.prototype.setSelectedCols = function (first, second) {
	        this._selectedCols.first = Math.min(first, second);
	        this._selectedCols.second = Math.max(first, second);
	        return this;
	    };
	    TableClient.prototype.updateSelection = function (x, y, updateFirst, updateSecond) {
	        var p = this.toLocalPoint(point_1.Point.point.init(this.offsetX + x, this.offsetY + y));
	        var col = this.xToCol(p.x);
	        var row = this.yToRow(p.y);
	        var firstCol = col;
	        var secondCol = col;
	        var firstRow = row;
	        var secondRow = row;
	        if (!updateFirst) {
	            firstCol = this._selectedCols.first;
	            firstRow = this._selectedRows.first;
	        }
	        if (!updateSecond) {
	            secondCol = this._selectedCols.second;
	            secondRow = this._selectedRows.second;
	        }
	        this.setSelectedCols(firstCol, secondCol);
	        this.setSelectedRows(firstRow, secondRow);
	    };
	    TableClient.prototype.dispatchPointerDown = function (evt, ctx) {
	        _super.prototype.dispatchPointerDown.call(this, evt, ctx);
	        if (!this._pointerInBar) {
	            this.updateSelection(evt.x, evt.y, true, true);
	        }
	    };
	    TableClient.prototype.dispatchPointerMove = function (evt, ctx) {
	        _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	        if (!this._pointerInBar && evt.pointerDown) {
	            this.updateSelection(evt.x, evt.y, false, true);
	        }
	    };
	    TableClient.prototype.drawVLine = function (ctx, x, yStart, yEnd) {
	        if (x >= this.w) {
	            return;
	        }
	        ctx.moveTo(x, yStart);
	        ctx.lineTo(x, yEnd);
	    };
	    TableClient.prototype.drawVLines = function (ctx) {
	        var _this = this;
	        var startCol = 0;
	        var ox = this.offsetX;
	        this.colsWidth.some(function (width, index) {
	            if (ox > width) {
	                ox -= width;
	                return false;
	            }
	            else {
	                startCol = index;
	                ox = width - ox;
	                return true;
	            }
	        });
	        var y = this.topPadding;
	        var x = this.leftPadding + ox;
	        var b = this.topPadding + this.clientH;
	        this.drawVLine(ctx, x, y, b);
	        this.colsWidth.forEach(function (width, index) {
	            if (index <= startCol) {
	                return;
	            }
	            x += width;
	            _this.drawVLine(ctx, x, y, b);
	        });
	    };
	    TableClient.prototype.drawHLines = function (ctx) {
	        var oy = this.offsetY;
	        var itemH = this.itemH;
	        var x = this.leftPadding;
	        var b = this.topPadding + this.clientH;
	        var r = this.leftPadding + this.clientW;
	        var y = this.topPadding + (itemH - oy % itemH);
	        while (y < b) {
	            ctx.moveTo(x, y);
	            ctx.lineTo(r, y);
	            y += itemH;
	        }
	    };
	    TableClient.prototype.drawGrid = function (ctx, style) {
	        ctx.beginPath();
	        this.drawVLines(ctx);
	        this.drawHLines(ctx);
	        ctx.lineWidth = 1;
	        ctx.strokeStyle = style.lineColor;
	        ctx.stroke();
	    };
	    TableClient.prototype.drawSelection = function (ctx, style) {
	        var r = this.calcSelectRect();
	        if (r.w > 0 && r.h > 0) {
	            ctx.beginPath();
	            ctx.rect(r.x, r.y, r.w, r.h);
	            ctx.lineWidth = 2;
	            ctx.strokeStyle = style.lineColor;
	            ctx.stroke();
	        }
	    };
	    TableClient.prototype.afterDrawChildren = function (ctx) {
	        _super.prototype.afterDrawChildren.call(this, ctx);
	        this.drawGrid(ctx, this.getStyleOfState(widget_1.WidgetState.NORMAL));
	        this.drawSelection(ctx, this.getStyleOfState(widget_1.WidgetState.ACTIVE));
	    };
	    TableClient.prototype.getLayoutWidth = function () {
	        var w = 0;
	        this.colsWidth.forEach(function (width) {
	            w += width;
	        });
	        return Math.max(w, this.clientW);
	    };
	    TableClient.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.dragToScroll = true;
	        this.scrollerOptions.scrollingX = true;
	        this._selectedCols = range_1.Range.create(0, 0);
	        this._selectedRows = range_1.Range.create(0, 0);
	    };
	    TableClient.create = function (options) {
	        return TableClient.rBin.create(options);
	    };
	    TableClient.TYPE = "table-client";
	    TableClient.rBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableClient);
	    return TableClient;
	}(list_view_1.ListView));
	exports.TableClient = TableClient;
	;
	widget_factory_1.WidgetFactory.register(TableClient.TYPE, TableClient.create);


/***/ },
/* 346 */
/***/ function(module, exports) {

	"use strict";
	var Range = (function () {
	    function Range(first, second) {
	        this.first = first;
	        this.second = second;
	    }
	    Range.prototype.dispose = function () {
	    };
	    Range.prototype.init = function (first, second) {
	        this.first = first;
	        this.second = second;
	        return this;
	    };
	    Range.create = function (first, second) {
	        return new Range(first, second);
	    };
	    Range.range = Range.create(0, 0);
	    return Range;
	}());
	exports.Range = Range;
	;


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_factory_1 = __webpack_require__(27);
	var passive_scrollable_group_1 = __webpack_require__(348);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格左边的行序数。
	 */
	var TableIndex = (function (_super) {
	    __extends(TableIndex, _super);
	    function TableIndex() {
	        _super.call(this, TableIndex.TYPE);
	    }
	    TableIndex.create = function (options) {
	        return TableIndex.recycleBin.create(options);
	    };
	    TableIndex.TYPE = "table-index";
	    TableIndex.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableIndex);
	    return TableIndex;
	}(passive_scrollable_group_1.PassiveScrollableGroup));
	exports.TableIndex = TableIndex;
	;
	widget_factory_1.WidgetFactory.register(TableIndex.TYPE, TableIndex.create);


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	/**
	 * 被动式可滚分组。滚动区域由外面设置。
	 */
	var PassiveScrollableGroup = (function (_super) {
	    __extends(PassiveScrollableGroup, _super);
	    function PassiveScrollableGroup(type) {
	        _super.call(this, type);
	    }
	    Object.defineProperty(PassiveScrollableGroup.prototype, "offsetX", {
	        get: function () {
	            return this._ox;
	        },
	        /**
	         * X的偏移。
	         */
	        set: function (value) {
	            this._ox = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PassiveScrollableGroup.prototype, "offsetY", {
	        get: function () {
	            return this._oy;
	        },
	        /**
	         * Y的偏移。
	         */
	        set: function (value) {
	            this._oy = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PassiveScrollableGroup.prototype.relayoutChildren = function () {
	        if (!this.w || !this.h) {
	            return null;
	        }
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        if (this.w > this.h) {
	            var h = this.clientH;
	            this.children.forEach(function (child) {
	                child.moveResizeTo(x, y, child.w, h);
	                child.relayoutChildren();
	                x += child.w;
	            });
	        }
	        else {
	            var w = this.clientW;
	            this.children.forEach(function (child) {
	                child.moveResizeTo(x, y, w, child.h);
	                child.relayoutChildren();
	                y += child.h;
	            });
	        }
	        return this.getLayoutRect();
	    };
	    PassiveScrollableGroup.prototype.doDrawChildren = function (ctx) {
	        _super.prototype.drawChildren.call(this, ctx);
	    };
	    PassiveScrollableGroup.prototype.drawChildren = function (ctx) {
	        var ox = this._ox;
	        var oy = this._oy;
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var w = this.w - x - this.rightPadding;
	        var h = this.h - y - this.bottomPadding;
	        ctx.save();
	        ctx.beginPath();
	        ctx.rect(x, y, w, h);
	        ctx.clip();
	        ctx.translate(-ox, -oy);
	        this.doDrawChildren(ctx);
	        ctx.restore();
	        return this;
	    };
	    /*
	     * 在处理指针事件前，先加上滚动的偏移。
	     */
	    PassiveScrollableGroup.prototype.offsetPointerEvent = function (evt) {
	        evt.x += this._ox;
	        evt.y += this._oy;
	    };
	    /*
	     * 在处理指针事件后，再减去滚动的偏移。
	     */
	    PassiveScrollableGroup.prototype.unOffsetPointerEvent = function (evt) {
	        evt.y -= this._oy;
	    };
	    PassiveScrollableGroup.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._ox = 0;
	        this._oy = 0;
	    };
	    PassiveScrollableGroup.prototype.dispatchClick = function (evt) {
	        this.offsetPointerEvent(evt);
	        _super.prototype.dispatchClick.call(this, evt);
	        this.unOffsetPointerEvent(evt);
	    };
	    PassiveScrollableGroup.prototype.dispatchDblClick = function (evt) {
	        this.offsetPointerEvent(evt);
	        _super.prototype.dispatchDblClick.call(this, evt);
	        this.unOffsetPointerEvent(evt);
	    };
	    PassiveScrollableGroup.prototype.dispatchPointerDown = function (evt, ctx) {
	        this.offsetPointerEvent(evt);
	        _super.prototype.dispatchPointerDown.call(this, evt, ctx);
	        this.unOffsetPointerEvent(evt);
	    };
	    PassiveScrollableGroup.prototype.dispatchPointerMove = function (evt, ctx) {
	        this.offsetPointerEvent(evt);
	        _super.prototype.dispatchPointerMove.call(this, evt, ctx);
	        this.unOffsetPointerEvent(evt);
	    };
	    PassiveScrollableGroup.prototype.dispatchPointerUp = function (evt) {
	        this.offsetPointerEvent(evt);
	        _super.prototype.dispatchPointerUp.call(this, evt);
	        this.unOffsetPointerEvent(evt);
	    };
	    return PassiveScrollableGroup;
	}(widget_1.Widget));
	exports.PassiveScrollableGroup = PassiveScrollableGroup;
	;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_factory_1 = __webpack_require__(27);
	var passive_scrollable_group_1 = __webpack_require__(348);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格头
	 */
	var TableHeader = (function (_super) {
	    __extends(TableHeader, _super);
	    function TableHeader() {
	        _super.call(this, TableHeader.TYPE);
	    }
	    TableHeader.create = function (options) {
	        return TableHeader.recycleBin.create(options);
	    };
	    TableHeader.TYPE = "table-header";
	    TableHeader.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableHeader);
	    return TableHeader;
	}(passive_scrollable_group_1.PassiveScrollableGroup));
	exports.TableHeader = TableHeader;
	;
	widget_factory_1.WidgetFactory.register(TableHeader.TYPE, TableHeader.create);


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Events = __webpack_require__(10);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	var table_row_1 = __webpack_require__(344);
	var table_index_1 = __webpack_require__(347);
	var table_client_1 = __webpack_require__(345);
	var table_header_1 = __webpack_require__(349);
	var table_index_item_1 = __webpack_require__(351);
	var table_header_item_1 = __webpack_require__(352);
	/**
	 * 描述表格中某列的信息。
	 */
	var TableColInfo = (function () {
	    function TableColInfo(title, widgetType, w, options, sortKey) {
	        this.w = w;
	        this.title = title;
	        this.sortKey = sortKey;
	        this.options = options || {};
	        this.widgetType = widgetType || "label";
	    }
	    TableColInfo.create = function (title, widgetType, w, options, sortKey) {
	        return new TableColInfo(title, widgetType, w, options, sortKey);
	    };
	    return TableColInfo;
	}());
	exports.TableColInfo = TableColInfo;
	;
	/**
	 * 表格。表格由三部分组成：
	 * 1.表头(TableHeader):  在最上方，显示每一列的标题，可以点击触发按该列进行排序。
	 * 2.行序号(TableIndex): 在左边，显示每一行的序号。
	 * 3.客户区(TableClient):占据表的主体部分，显示表格的内容。
	 */
	var Table = (function (_super) {
	    __extends(Table, _super);
	    function Table() {
	        _super.call(this, Table.TYPE);
	    }
	    Object.defineProperty(Table.prototype, "headerBar", {
	        /**
	         * 表头
	         */
	        get: function () {
	            return this._headerBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "indexBar", {
	        /**
	         * 行序号
	         */
	        get: function () {
	            return this._indexBar;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "client", {
	        /**
	         * 客户区
	         */
	        get: function () {
	            return this._client;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "rowH", {
	        get: function () {
	            return this._rowH;
	        },
	        /**
	         * 每行的高度(在绑定数据之前设置才有效)。
	         */
	        set: function (value) {
	            this._rowH = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "indexBarW", {
	        get: function () {
	            return this._ibW;
	        },
	        /**
	         * 行序号的宽度(在绑定数据之前设置才有效)。
	         */
	        set: function (value) {
	            this._ibW = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "headerBarH", {
	        get: function () {
	            return this._hbH;
	        },
	        /**
	         * 表头的高度(在绑定数据之前设置才有效)。
	         */
	        set: function (value) {
	            this._hbH = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Table.prototype, "showIndexBar", {
	        get: function () {
	            return this._siB;
	        },
	        /**
	         * 是否显示行序号(在绑定数据之前设置才有效)。
	         */
	        set: function (value) {
	            this._siB = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * 清除所有列。
	     */
	    Table.prototype.resetColumns = function () {
	        this._colsInfo = [];
	        return this;
	    };
	    /**
	     * 增加一列。
	     */
	    Table.prototype.addColumn = function (colInfo) {
	        this._colsInfo.push(colInfo);
	        return this;
	    };
	    /**
	     * 获取所有列。
	     */
	    Table.prototype.getColumns = function () {
	        return this._colsInfo;
	    };
	    Table.prototype.getTemplateRow = function () {
	        if (!this._templateRow) {
	            var row = table_row_1.TableRow.create({ w: this.w, h: this.rowH, app: this.app });
	            this._colsInfo.forEach(function (item) {
	                var widget = widget_factory_1.WidgetFactory.create(item.widgetType, item.options);
	                widget.styleType = widget.type + ".table";
	                row.addChild(widget, true);
	            });
	            this._templateRow = row;
	        }
	        return this._templateRow;
	    };
	    Table.prototype.bindData = function (viewModel) {
	        this.prepareUI();
	        var client = this._client;
	        if (client) {
	            client.templateItem = this.getTemplateRow();
	            client.removeAllChildren();
	            client.bindData(viewModel);
	        }
	        var itemH = this.rowH;
	        var indexBar = this._indexBar;
	        if (indexBar) {
	            indexBar.removeAllChildren();
	            client.children.forEach(function (item, index) {
	                indexBar.addChild(table_index_item_1.TableIndexItem.create({ text: index, h: itemH }), true);
	            });
	            indexBar.relayoutChildren();
	        }
	        return this;
	    };
	    Table.prototype.onHeaderItemResized = function () {
	        var client = this.client;
	        var colsWidth = this.headerBar.children.map(function (item) {
	            return item.w;
	        });
	        client.colsWidth = colsWidth;
	        client.relayoutChildren();
	        this.headerBar.relayoutChildren();
	    };
	    Table.prototype.onHeaderItemResizing = function () {
	        this.headerBar.relayoutChildren();
	    };
	    Table.prototype.prepareUI = function () {
	        var _this = this;
	        var itemH = this.rowH;
	        this.removeAllChildren();
	        var showIndexBar = this.showIndexBar;
	        this._headerBar = table_header_1.TableHeader.create({ h: this.headerBarH, w: this.w });
	        this._client = table_client_1.TableClient.create({ itemH: itemH, w: this.w - this.indexBarW, h: this.h - this.headerBarH });
	        this.addChild(this._client, false);
	        this.addChild(this._headerBar, false);
	        if (showIndexBar) {
	            this._indexBar = table_index_1.TableIndex.create({ w: this.indexBarW, h: this.h });
	            this.addChild(this._indexBar, false);
	        }
	        var headerBar = this._headerBar;
	        this._colsInfo.forEach(function (item) {
	            var headerItem = table_header_item_1.TableHeaderItem.create({ w: item.w, text: item.title, sortKey: item.sortKey });
	            headerBar.addChild(headerItem);
	            headerItem.on(Events.RESIZE_END, function (evt) {
	                _this.onHeaderItemResized();
	            });
	            headerItem.on(Events.RESIZE_CANCEL, function (evt) {
	                _this.onHeaderItemResized();
	            });
	            headerItem.on(Events.RESIZING, function (evt) {
	                _this.onHeaderItemResizing();
	            });
	            headerItem.on(Events.SORT, function (evt) {
	                _this.dispatchEvent(evt);
	            });
	        });
	        var client = this._client;
	        var indexBar = this._indexBar;
	        var headerBar = this._headerBar;
	        client.on(Events.SCROLL, function (evt) {
	            if (indexBar) {
	                indexBar.offsetY = evt.offsetY;
	            }
	            headerBar.offsetX = evt.offsetX;
	            _this.requestRedraw();
	        });
	        this.relayoutChildren();
	    };
	    Table.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	    };
	    Table.prototype.relayoutChildren = function () {
	        if (!this.w || !this.h) {
	            return null;
	        }
	        var w = 0;
	        var h = 0;
	        var x = this.leftPadding;
	        var y = this.topPadding;
	        var client = this._client;
	        var indexBar = this._indexBar;
	        var headerBar = this._headerBar;
	        var indexBarW = this.indexBarW;
	        var headerBarH = this.headerBarH;
	        var yy = y + headerBarH;
	        var xx = this.showIndexBar ? x + indexBarW : x;
	        w = this.w - xx - this.rightPadding;
	        h = this.h - yy - this.bottomPadding;
	        var colsWidth = null;
	        if (headerBar) {
	            headerBar.moveResizeTo(xx, y, w, headerBarH);
	            headerBar.relayoutChildren();
	            colsWidth = headerBar.children.map(function (item) {
	                return item.w;
	            });
	        }
	        if (indexBar) {
	            indexBar.moveResizeTo(x, yy, indexBarW, h);
	            indexBar.relayoutChildren();
	        }
	        if (client) {
	            client.colsWidth = colsWidth;
	            client.moveResizeTo(xx, yy, w, h);
	            client.relayoutChildren();
	        }
	        return this.getLayoutRect();
	    };
	    Table.prototype.dispatchWheel = function (evt) {
	        if (this.client) {
	            this.client.dispatchWheel(evt);
	        }
	    };
	    Table.prototype.dispose = function () {
	        _super.prototype.dispose.call(this);
	        this._templateRow = null;
	        this._headerBar = null;
	        this._indexBar = null;
	        this._client = null;
	        this.resetColumns();
	    };
	    Table.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this.resetColumns();
	    };
	    Table.prototype.getDefProps = function () {
	        return Table.defProps;
	    };
	    Table.create = function (options) {
	        return Table.recycleBin.create(options);
	    };
	    Table.defProps = Object.assign({}, widget_1.Widget.defProps, { _rowH: 30, _ibW: 30, _hbH: 30, _siB: true });
	    Table.TYPE = "table";
	    Table.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(Table);
	    return Table;
	}(widget_1.Widget));
	exports.Table = Table;
	;
	widget_factory_1.WidgetFactory.register(Table.TYPE, Table.create);


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格左边的行序数项。
	 */
	var TableIndexItem = (function (_super) {
	    __extends(TableIndexItem, _super);
	    function TableIndexItem() {
	        _super.call(this, TableIndexItem.TYPE);
	    }
	    TableIndexItem.create = function (options) {
	        return TableIndexItem.recycleBin.create(options);
	    };
	    TableIndexItem.TYPE = "table-index-item";
	    TableIndexItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableIndexItem);
	    return TableIndexItem;
	}(widget_1.Widget));
	exports.TableIndexItem = TableIndexItem;
	;
	widget_factory_1.WidgetFactory.register(TableIndexItem.TYPE, TableIndexItem.create);


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var rect_1 = __webpack_require__(5);
	var Events = __webpack_require__(10);
	var widget_1 = __webpack_require__(23);
	var widget_factory_1 = __webpack_require__(27);
	var widget_recyclable_creator_1 = __webpack_require__(86);
	/**
	 * 表格头的一项。
	 */
	var TableHeaderItem = (function (_super) {
	    __extends(TableHeaderItem, _super);
	    function TableHeaderItem() {
	        _super.call(this, TableHeaderItem.TYPE);
	        this._sortEvent = Events.SortEvent.create(null, false);
	    }
	    Object.defineProperty(TableHeaderItem.prototype, "sortKey", {
	        get: function () {
	            return this._sortKey;
	        },
	        /**
	         * 是否点击时按该列排序。
	         */
	        set: function (value) {
	            this._sortKey = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TableHeaderItem.prototype, "sortStatus", {
	        /**
	         * 当前的排序状态。
	         */
	        get: function () {
	            return this._sortStatus;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TableHeaderItem.prototype.getFgImageRect = function (style) {
	        var x = this.w - this.h;
	        var y = this.topPadding;
	        var w = this.clientH;
	        var h = this.clientH;
	        return rect_1.Rect.rect.init(x, y, w, h);
	    };
	    TableHeaderItem.prototype.getStyleType = function () {
	        var styleType = this._styleType || this.type;
	        if (!this._sortKey || !this._sortStatus) {
	            return styleType;
	        }
	        return styleType + "." + this._sortStatus;
	    };
	    TableHeaderItem.prototype.onReset = function () {
	        _super.prototype.onReset.call(this);
	        this._sortStatus = null;
	        this.on(Events.CLICK, this.triggerSortStatus.bind(this));
	    };
	    TableHeaderItem.prototype.onInit = function () {
	        _super.prototype.onInit.call(this);
	        this.useBehavior("resizable", { east: true, animateDuration: 0 });
	    };
	    TableHeaderItem.prototype.triggerSortStatus = function () {
	        var _this = this;
	        var isDec = false;
	        if (this._sortKey) {
	            if (this._sortStatus === TableHeaderItem.SORT_INC) {
	                isDec = true;
	                this._sortStatus = TableHeaderItem.SORT_DEC;
	            }
	            else {
	                this._sortStatus = TableHeaderItem.SORT_INC;
	            }
	            this.dispatchEvent(this._sortEvent.init(this._sortKey, isDec));
	            this.parent.children.forEach(function (child) {
	                if (child !== _this && child.type === _this.type) {
	                    child._sortStatus = null;
	                }
	            });
	        }
	    };
	    TableHeaderItem.create = function (options) {
	        return TableHeaderItem.recycleBin.create(options);
	    };
	    TableHeaderItem.SORT_INC = "inc";
	    TableHeaderItem.SORT_DEC = "dec";
	    TableHeaderItem.TYPE = "table-header-item";
	    TableHeaderItem.recycleBin = widget_recyclable_creator_1.WidgetRecyclableCreator.create(TableHeaderItem);
	    return TableHeaderItem;
	}(widget_1.Widget));
	exports.TableHeaderItem = TableHeaderItem;
	;
	widget_factory_1.WidgetFactory.register(TableHeaderItem.TYPE, TableHeaderItem.create);


/***/ },
/* 353 */
/***/ function(module, exports) {

	"use strict";
	var DelegateFilter = (function () {
	    function DelegateFilter(check) {
	        this._check = check;
	    }
	    DelegateFilter.prototype.check = function (data) {
	        return this._check(data);
	    };
	    DelegateFilter.create = function (check) {
	        return new DelegateFilter(check);
	    };
	    return DelegateFilter;
	}());
	exports.DelegateFilter = DelegateFilter;
	;


/***/ },
/* 354 */
/***/ function(module, exports) {

	"use strict";
	var DelegateComparator = (function () {
	    function DelegateComparator(compare) {
	        this._compare = compare;
	    }
	    DelegateComparator.prototype.compare = function (a, b) {
	        return this._compare(a, b);
	    };
	    DelegateComparator.create = function (compare) {
	        return new DelegateComparator(compare);
	    };
	    return DelegateComparator;
	}());
	exports.DelegateComparator = DelegateComparator;
	;


/***/ },
/* 355 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * 数值比较器。
	 */
	var NumberComparator = (function () {
	    function NumberComparator() {
	    }
	    NumberComparator.prototype.compare = function (a, b) {
	        return a - b;
	    };
	    NumberComparator.create = function () {
	        return new NumberComparator();
	    };
	    return NumberComparator;
	}());
	exports.NumberComparator = NumberComparator;
	;
	/**
	 * 字符串比较器。
	 */
	var StringComparator = (function () {
	    function StringComparator() {
	    }
	    StringComparator.prototype.compare = function (a, b) {
	        if (a > b) {
	            return 1;
	        }
	        else if (a == b) {
	            return 0;
	        }
	        else {
	            return -1;
	        }
	    };
	    StringComparator.create = function () {
	        return new StringComparator();
	    };
	    return StringComparator;
	}());
	exports.StringComparator = StringComparator;
	;
	/**
	 * 反向比较器。
	 */
	var RevertComparator = (function () {
	    function RevertComparator(comparator) {
	        this.comparator = comparator;
	    }
	    RevertComparator.prototype.compare = function (a, b) {
	        var ret = this.comparator.compare(a, b);
	        if (ret) {
	            ret = -ret;
	        }
	        return ret;
	    };
	    RevertComparator.create = function (comparator) {
	        return new RevertComparator(comparator);
	    };
	    return RevertComparator;
	}());
	exports.RevertComparator = RevertComparator;
	;
	/**
	 * 对象属性比较器。
	 */
	var ObjectPropComparator = (function () {
	    function ObjectPropComparator(comparator, prop) {
	        this.prop = prop;
	        this.comparator = comparator;
	    }
	    ObjectPropComparator.prototype.compare = function (a, b) {
	        var prop = this.prop;
	        return this.comparator.compare(a[prop], b[prop]);
	    };
	    ObjectPropComparator.create = function (comparator, prop) {
	        return new ObjectPropComparator(comparator, prop);
	    };
	    return ObjectPropComparator;
	}());
	exports.ObjectPropComparator = ObjectPropComparator;
	;


/***/ },
/* 356 */
/***/ function(module, exports) {

	"use strict";
	var RangeFixer = (function () {
	    function RangeFixer(firstMin, firstMax, secondMin, secondMax, secondMustGreater) {
	        this._value = { first: 0, second: 0 };
	        this._firstMin = firstMin;
	        this._firstMax = firstMax;
	        this._secondMin = secondMin;
	        this._secondMax = secondMax;
	        this._secondMustGreater = secondMustGreater || false;
	    }
	    RangeFixer.prototype.convertBack = function (value) {
	        var first = Math.min(this._firstMax, Math.max(this._firstMin, +value.first));
	        var second = Math.min(this._secondMax, Math.max(this._secondMin, +value.second));
	        if (this._secondMustGreater) {
	            this._value.first = Math.min(first, second);
	            this._value.second = Math.max(first, second);
	        }
	        else {
	            this._value.first = first;
	            this._value.second = second;
	        }
	        return this._value;
	    };
	    RangeFixer.prototype.convert = function (value) {
	        return value;
	    };
	    RangeFixer.create = function (firstMin, firstMax, secondMin, secondMax, secondMustGreater) {
	        return new RangeFixer(firstMin, firstMax, secondMin, secondMax, secondMustGreater);
	    };
	    return RangeFixer;
	}());
	exports.RangeFixer = RangeFixer;
	;


/***/ },
/* 357 */
/***/ function(module, exports) {

	"use strict";
	var NumberFixer = (function () {
	    function NumberFixer(vMin, vMax) {
	        this.vMin = vMin;
	        this.vMax = vMax;
	    }
	    NumberFixer.prototype.convertBack = function (value) {
	        return Math.min(this.vMax, Math.max(this.vMin, +value));
	    };
	    NumberFixer.prototype.convert = function (value) {
	        return value;
	    };
	    NumberFixer.create = function (vMin, vMax) {
	        return new NumberFixer(vMin, vMax);
	    };
	    return NumberFixer;
	}());
	exports.NumberFixer = NumberFixer;


/***/ },
/* 358 */
/***/ function(module, exports) {

	"use strict";
	var Vector2Fixer = (function () {
	    function Vector2Fixer(xMin, xMax, yMin, yMax) {
	        this._value = { x: 0, y: 0 };
	        this._xMin = xMin;
	        this._xMax = xMax;
	        this._yMin = yMin;
	        this._yMax = yMax;
	    }
	    Vector2Fixer.prototype.convertBack = function (value) {
	        this._value.x = Math.min(this._xMax, Math.max(this._xMin, +value.x));
	        this._value.y = Math.min(this._yMax, Math.max(this._yMin, +value.y));
	        return this._value;
	    };
	    Vector2Fixer.prototype.convert = function (value) {
	        return value;
	    };
	    Vector2Fixer.create = function (xMin, xMax, yMin, yMax) {
	        return new Vector2Fixer(xMin, xMax, yMin, yMax);
	    };
	    return Vector2Fixer;
	}());
	exports.Vector2Fixer = Vector2Fixer;


/***/ },
/* 359 */
/***/ function(module, exports) {

	"use strict";
	var Vector3Fixer = (function () {
	    function Vector3Fixer(xMin, xMax, yMin, yMax, zMin, zMax) {
	        this._value = { x: 0, y: 0, z: 0 };
	        this._xMin = xMin;
	        this._xMax = xMax;
	        this._yMin = yMin;
	        this._yMax = yMax;
	        this._zMin = zMin;
	        this._zMax = zMax;
	    }
	    Vector3Fixer.prototype.convertBack = function (value) {
	        this._value.x = Math.min(this._xMax, Math.max(this._xMin, +value.x));
	        this._value.y = Math.min(this._yMax, Math.max(this._yMin, +value.y));
	        this._value.z = Math.min(this._zMax, Math.max(this._zMin, +value.z));
	        return this._value;
	    };
	    Vector3Fixer.prototype.convert = function (value) {
	        return value;
	    };
	    Vector3Fixer.create = function (xMin, xMax, yMin, yMax, zMin, zMax) {
	        return new Vector3Fixer(xMin, xMax, yMin, yMax, zMin, zMax);
	    };
	    return Vector3Fixer;
	}());
	exports.Vector3Fixer = Vector3Fixer;


/***/ },
/* 360 */
/***/ function(module, exports) {

	"use strict";
	var DrawInfo = (function () {
	    function DrawInfo() {
	    }
	    DrawInfo.prototype.init = function (ctx, rect) {
	        this.ctx = ctx;
	        this.rect = rect;
	    };
	    DrawInfo.create = function () {
	        return new DrawInfo();
	    };
	    return DrawInfo;
	}());
	exports.DrawInfo = DrawInfo;
	;
	//# sourceMappingURL=draw-info.js.map

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var main_window_1 = __webpack_require__(362);
	var qtk_1 = __webpack_require__(4);
	var iparticles_view_model_1 = __webpack_require__(366);
	var themeDataURL = "https://qtoolkit.github.io/demos/assets/theme/default/theme.json";
	var ParticlesEditor = (function (_super) {
	    __extends(ParticlesEditor, _super);
	    function ParticlesEditor(appName, viewModelName) {
	        _super.call(this, appName);
	        this._viewModelName = viewModelName;
	    }
	    ParticlesEditor.prototype.getViewModelName = function () {
	        return this._viewModelName;
	    };
	    ParticlesEditor.prototype.createViewModel = function () {
	        var name = this.getViewModelName();
	        var storage = qtk_1.ItemsStorage.create(name);
	        return iparticles_view_model_1.ParticlesViewModelFactory.create(name, { storage: storage });
	    };
	    ParticlesEditor.prototype.onReady = function () {
	        var vp = this.getViewPort();
	        var viewModel = this.createViewModel();
	        this.mainWindow = main_window_1.MainWindow.create({ w: vp.w, h: vp.h, app: this, viewModel: viewModel });
	    };
	    ParticlesEditor.run = function (appName, viewModelName) {
	        var app = new ParticlesEditor(appName, viewModelName);
	        app.init({ sysThemeDataURL: themeDataURL });
	        app.run();
	        return app;
	    };
	    return ParticlesEditor;
	}(qtk_1.Application));
	exports.ParticlesEditor = ParticlesEditor;
	;
	//# sourceMappingURL=particles-editor.js.map

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var qtk_1 = __webpack_require__(4);
	var main_menu_bar_1 = __webpack_require__(363);
	var particles_view_1 = __webpack_require__(364);
	var particle_properties_1 = __webpack_require__(365);
	var qtk_2 = __webpack_require__(4);
	var MainWindow = (function (_super) {
	    __extends(MainWindow, _super);
	    function MainWindow() {
	        _super.apply(this, arguments);
	    }
	    MainWindow.prototype.onCreated = function () {
	        _super.prototype.onCreated.call(this);
	        var viewModel = this.viewModel;
	        this.childrenLayouter = qtk_2.DockLayouter.create();
	        this.addChild(main_menu_bar_1.MainMenuBar.create({ viewModel: viewModel,
	            layoutParam: qtk_2.DockLayouterParam.create({ position: qtk_1.Direction.TOP, size: 30 })
	        }));
	        this.addChild(particles_view_1.ParticlesView.create({ viewModel: viewModel,
	            layoutParam: qtk_2.DockLayouterParam.create({ position: qtk_1.Direction.LEFT, size: "70%" })
	        }));
	        this.addChild(particle_properties_1.ParticleProperties.create({ viewModel: viewModel,
	            layoutParam: qtk_2.DockLayouterParam.create({ position: qtk_1.Direction.LEFT, size: "100%" })
	        }));
	    };
	    MainWindow.create = function (options) {
	        var win = new MainWindow();
	        win.reset("main-window", options);
	        win.open();
	        return win;
	    };
	    return MainWindow;
	}(qtk_2.WindowNormal));
	exports.MainWindow = MainWindow;
	;
	//# sourceMappingURL=main-window.js.map

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var qtk_1 = __webpack_require__(4);
	var MainMenuBar = (function (_super) {
	    __extends(MainMenuBar, _super);
	    function MainMenuBar() {
	        _super.apply(this, arguments);
	    }
	    MainMenuBar.prototype.onFileMenu = function (menu) {
	        menu.w = 128;
	        menu.addItem("New", null).set({ dataBindingRule: { click: { command: "new" } } });
	        menu.addItem("Open", null).set({ dataBindingRule: { click: { command: "open" } } });
	        menu.addItem("Save", null).set({ dataBindingRule: { click: { command: "save" } } });
	        menu.addItem("Save As", null).set({ dataBindingRule: { click: { command: "save-as" } } });
	        menu.addItem("Remove", null).set({ dataBindingRule: { click: { command: "remove" } } });
	        menu.addSpace();
	        menu.addItem("Export", null).set({ dataBindingRule: { click: { command: "export" } } });
	        menu.bindData(this.viewModel);
	    };
	    MainMenuBar.prototype.onHelpMenu = function (menu) {
	        menu.w = 128;
	        menu.addItem("Content", null).set({ dataBindingRule: { click: { command: "content" } } });
	        menu.addItem("About", null).set({ dataBindingRule: { click: { command: "about" } } });
	        menu.bindData(this.viewModel);
	    };
	    MainMenuBar.prototype.onCreated = function () {
	        _super.prototype.onCreated.call(this);
	        this.addLogo("https://qtoolkit.github.io/demos/assets/icons/@density/apple.png");
	        this.addItem("File", this.onFileMenu.bind(this));
	        this.addItem("Help", this.onHelpMenu.bind(this));
	    };
	    MainMenuBar.create = function (options) {
	        var menuBar = new MainMenuBar();
	        menuBar.reset("menu-bar", options);
	        return menuBar;
	    };
	    return MainMenuBar;
	}(qtk_1.MenuBar));
	exports.MainMenuBar = MainMenuBar;
	;
	//# sourceMappingURL=main-menu-bar.js.map

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var draw_info_1 = __webpack_require__(360);
	var qtk_1 = __webpack_require__(4);
	var ParticlesView = (function (_super) {
	    __extends(ParticlesView, _super);
	    function ParticlesView() {
	        _super.call(this, ParticlesView.TYPE);
	        this._drawInfo = draw_info_1.DrawInfo.create();
	        this._style = qtk_1.Style.create();
	    }
	    ParticlesView.prototype.drawBackground = function (ctx, style) {
	        var viewModel = this.viewModel;
	        ctx.fillStyle = viewModel.getProp("/backGroundColor") || "#F6F6F6";
	        ctx.fillRect(0, 0, this.w, this.h);
	        this._drawInfo.init(ctx, qtk_1.Rect.rect.init(0, 0, this.w, this.h));
	        viewModel.execCommand("draw", this._drawInfo);
	        this.requestRedraw();
	        return this;
	    };
	    ParticlesView.prototype.getStyle = function () {
	        return this._style;
	    };
	    ParticlesView.create = function (options) {
	        var view = new ParticlesView();
	        return view.reset(ParticlesView.TYPE, options);
	    };
	    ParticlesView.TYPE = "particles-view";
	    return ParticlesView;
	}(qtk_1.Widget));
	exports.ParticlesView = ParticlesView;
	;
	//# sourceMappingURL=particles-view.js.map

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var qtk_1 = __webpack_require__(4);
	var ParticleProperties = (function (_super) {
	    __extends(ParticleProperties, _super);
	    function ParticleProperties() {
	        _super.apply(this, arguments);
	    }
	    ParticleProperties.prototype.getStyle = function () {
	        return this._style;
	    };
	    ParticleProperties.prototype.createUI = function () {
	        var _this = this;
	        var viewModel = this.viewModel;
	        var propsDesc = viewModel.getPropsDesc();
	        this._style = qtk_1.Style.create();
	        var titleW = viewModel.getPropTitleWidth();
	        this.removeAllChildren();
	        propsDesc.forEach(function (pageDesc) {
	            var page = qtk_1.PropertyPage.create({ titleW: titleW });
	            page.initWithPropsDesc(pageDesc.propsDesc);
	            var titlePage = _this.addPage(pageDesc.title, page);
	            page.bindData(viewModel);
	            titlePage.collapsed = false;
	        });
	    };
	    ParticleProperties.prototype.onCreated = function () {
	        var _this = this;
	        var viewModel = this.viewModel;
	        viewModel.onChange(function (evt) {
	            if (evt.prop === "/") {
	                _this.createUI();
	            }
	        });
	        this.createUI();
	    };
	    ParticleProperties.create = function (options) {
	        var view = new ParticleProperties();
	        view.reset(ParticleProperties.TYPE, options);
	        return view;
	    };
	    ParticleProperties.TYPE = "particles-view";
	    return ParticleProperties;
	}(qtk_1.PropertySheets));
	exports.ParticleProperties = ParticleProperties;
	;
	//# sourceMappingURL=particle-properties.js.map

/***/ },
/* 366 */
/***/ function(module, exports) {

	"use strict";
	;
	var ParticlesViewModelFactory = (function () {
	    function ParticlesViewModelFactory() {
	    }
	    ParticlesViewModelFactory.register = function (type, creator) {
	        ParticlesViewModelFactory.viewModels[type] = creator;
	    };
	    ParticlesViewModelFactory.create = function (type, options) {
	        var creator = ParticlesViewModelFactory.viewModels[type];
	        return creator(options);
	    };
	    ParticlesViewModelFactory.viewModels = {};
	    return ParticlesViewModelFactory;
	}());
	exports.ParticlesViewModelFactory = ParticlesViewModelFactory;
	//# sourceMappingURL=iparticles-view-model.js.map

/***/ },
/* 367 */
/***/ function(module, exports) {

	"use strict";
	var CommandDraw = (function () {
	    function CommandDraw(canvas) {
	        this._canvas = canvas;
	        return this;
	    }
	    CommandDraw.prototype.canExecute = function () {
	        return true;
	    };
	    CommandDraw.prototype.execute = function (args) {
	        var drawInfo = args;
	        var ctx = drawInfo.ctx;
	        var rect = drawInfo.rect;
	        var canvas = this._canvas;
	        if (canvas) {
	            var w = rect.w >> 0;
	            var h = rect.h >> 0;
	            if (canvas.width !== w || canvas.height !== h) {
	                canvas.width = w;
	                canvas.height = h;
	            }
	            ctx.drawImage(canvas, 0, 0);
	        }
	        return true;
	    };
	    CommandDraw.create = function (canvas) {
	        return new CommandDraw(canvas);
	    };
	    return CommandDraw;
	}());
	exports.CommandDraw = CommandDraw;
	;
	//# sourceMappingURL=command-draw.js.map

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var CommandNew = (function () {
	    function CommandNew(viewModel, choiceInfo) {
	        this._viewModel = viewModel;
	        this._choiceInfo = choiceInfo;
	    }
	    CommandNew.prototype.canExecute = function () {
	        return true;
	    };
	    CommandNew.prototype.execute = function (args) {
	        var viewModel = this._viewModel;
	        console.log("CommandNew");
	        qtk_1.InteractionRequest.choice(this._choiceInfo, function (ret) {
	            var arr = ret.value;
	            if (arr && arr.length) {
	                var template = arr[0].text;
	                viewModel.createDoc(template);
	            }
	        });
	        return true;
	    };
	    CommandNew.create = function (viewModel, templates) {
	        var choiceInfo = qtk_1.ChoiceInfo.create("Please choose a template", false, 300, 300);
	        templates.forEach(function (item) {
	            choiceInfo.addOption(item);
	        });
	        return new CommandNew(viewModel, choiceInfo);
	    };
	    return CommandNew;
	}());
	exports.CommandNew = CommandNew;
	;
	//# sourceMappingURL=command-new.js.map

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var CommandOpen = (function () {
	    function CommandOpen(viewModel) {
	        this._viewModel = viewModel;
	    }
	    CommandOpen.prototype.canExecute = function () {
	        var viewModel = this._viewModel;
	        var docList = viewModel.getDocList();
	        return docList && docList.length > 0;
	    };
	    CommandOpen.prototype.execute = function (args) {
	        var viewModel = this._viewModel;
	        var docList = viewModel.getDocList();
	        var choiceInfo = qtk_1.ChoiceInfo.create("Open...", false, 300, 300);
	        docList.forEach(function (item) {
	            choiceInfo.addOption(item);
	        });
	        qtk_1.InteractionRequest.choice(choiceInfo, function (ret) {
	            var arr = ret.value;
	            if (arr && arr.length) {
	                var fileName = arr[0].text;
	                viewModel.openDoc(fileName);
	            }
	        });
	        return true;
	    };
	    CommandOpen.create = function (viewModel) {
	        return new CommandOpen(viewModel);
	    };
	    return CommandOpen;
	}());
	exports.CommandOpen = CommandOpen;
	;
	//# sourceMappingURL=command-open.js.map

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var CommandSave = (function () {
	    function CommandSave(viewModel, isSaveAs) {
	        this._isSaveAs = isSaveAs;
	        this._viewModel = viewModel;
	        this._inputInfo = qtk_1.InputInfo.create("Please input file name:", null);
	    }
	    CommandSave.prototype.canExecute = function () {
	        return true;
	    };
	    CommandSave.prototype.execute = function (args) {
	        var viewModel = this._viewModel;
	        var fileName = viewModel.getDocName();
	        if (!fileName || this._isSaveAs) {
	            qtk_1.InteractionRequest.input(this._inputInfo, function (ret) {
	                if (ret.value) {
	                    viewModel.saveDoc(ret.value);
	                }
	            });
	        }
	        else {
	            viewModel.saveDoc(fileName);
	            qtk_1.InteractionRequest.toast(qtk_1.ToastInfo.create("Save done."));
	        }
	        return true;
	    };
	    CommandSave.create = function (viewModel, isSaveAs) {
	        return new CommandSave(viewModel, isSaveAs);
	    };
	    return CommandSave;
	}());
	exports.CommandSave = CommandSave;
	;
	//# sourceMappingURL=command-save.js.map

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var saveAs = __webpack_require__(372).default;
	var qtk_1 = __webpack_require__(4);
	var CommandExport = (function () {
	    function CommandExport(viewModel, choiceInfo) {
	        this._viewModel = viewModel;
	        this._choiceInfo = choiceInfo;
	    }
	    CommandExport.prototype.canExecute = function () {
	        return true;
	    };
	    CommandExport.prototype.execute = function (args) {
	        var viewModel = this._viewModel;
	        qtk_1.InteractionRequest.choice(this._choiceInfo, function (ret) {
	            var arr = ret.value;
	            if (arr && arr.length) {
	                var format = arr[0].text;
	                var result = viewModel.exportDoc(format);
	                if (result) {
	                    var blob = new Blob([result], { type: 'text/plain;charset=utf-8' });
	                    saveAs(blob, 'particles.json');
	                }
	            }
	        });
	        return true;
	    };
	    CommandExport.create = function (viewModel) {
	        var formatList = viewModel.getFormatList();
	        var choiceInfo = qtk_1.ChoiceInfo.create("Export as...", false, 300, 200);
	        formatList.forEach(function (item) {
	            choiceInfo.addOption(item);
	        });
	        return new CommandExport(viewModel, choiceInfo);
	    };
	    return CommandExport;
	}());
	exports.CommandExport = CommandExport;
	;
	//# sourceMappingURL=command-export.js.map

/***/ },
/* 372 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* FileSaver.js
	 * A saveAs() FileSaver implementation.
	 *
	 * By Eli Grey, http://eligrey.com
	 * ES6ified by Cole Chamberlain, https://github.com/cchamberlain
	 *
	 * License: MIT
	 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
	 */

	/*global self */
	/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

	/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

	var saveAs = window.saveAs || function (view) {
	  // IE <10 is explicitly unsupported
	  if (typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent)) return;
	  var doc = view.document;
	  // only get URL when necessary in case Blob.js hasn't overridden it yet
	  var get_URL = function get_URL() {
	    return view.URL || view.webkitURL || view;
	  };
	  var save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a');
	  var can_use_save_link = 'download' in save_link;
	  var click = function click(node) {
	    var event = new MouseEvent('click');
	    node.dispatchEvent(event);
	  };
	  var is_safari = /Version\/[\d\.]+.*Safari/.test(navigator.userAgent);
	  var webkit_req_fs = view.webkitRequestFileSystem;
	  var req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem;
	  var throw_outside = function throw_outside(ex) {
	    (view.setImmediate || view.setTimeout)(function () {
	      throw ex;
	    }, 0);
	  };
	  var force_saveable_type = 'application/octet-stream';
	  var fs_min_size = 0;
	  // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
	  var arbitrary_revoke_timeout = 1000 * 40; // in ms
	  var revoke = function revoke(file) {
	    var revoker = function revoker() {
	      if (typeof file === 'string') // file is an object URL
	        get_URL().revokeObjectURL(file);else // file is a File
	        file.remove();
	    };
	    /* // Take note W3C:
	    var
	      uri = typeof file === "string" ? file : file.toURL()
	    , revoker = function(evt) {
	      // idealy DownloadFinishedEvent.data would be the URL requested
	      if (evt.data === uri) {
	        if (typeof file === "string") { // file is an object URL
	          get_URL().revokeObjectURL(file);
	        } else { // file is a File
	          file.remove();
	        }
	      }
	    }
	    ;
	    view.addEventListener("downloadfinished", revoker);
	    */
	    setTimeout(revoker, arbitrary_revoke_timeout);
	  };
	  var dispatch = function dispatch(filesaver, event_types, event) {
	    event_types = [].concat(event_types);
	    var i = event_types.length;
	    while (i--) {
	      var listener = filesaver['on' + event_types[i]];
	      if (typeof listener === 'function') {
	        try {
	          listener.call(filesaver, event || filesaver);
	        } catch (ex) {
	          throw_outside(ex);
	        }
	      }
	    }
	  };
	  var auto_bom = function auto_bom(blob) {
	    // prepend BOM for UTF-8 XML and text/* types (including HTML)
	    if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) return new Blob(['﻿', blob], { type: blob.type });
	    return blob;
	  };

	  var FileSaver = function FileSaver(blob, name, no_auto_bom) {
	    _classCallCheck(this, FileSaver);

	    if (!no_auto_bom) blob = auto_bom(blob);
	    // First try a.download, then web filesystem, then object URLs
	    var filesaver = this,
	        type = blob.type,
	        blob_changed = false,
	        object_url,
	        target_view,
	        dispatch_all = function dispatch_all() {
	      dispatch(filesaver, 'writestart progress write writeend'.split(' '));
	    }
	    // on any filesys errors revert to saving with object URLs
	    ,
	        fs_error = function fs_error() {
	      if (target_view && is_safari && typeof FileReader !== 'undefined') {
	        // Safari doesn't allow downloading of blob urls
	        var reader = new FileReader();
	        reader.onloadend = function () {
	          var base64Data = reader.result;
	          target_view.location.href = 'data:attachment/file' + base64Data.slice(base64Data.search(/[,;]/));
	          filesaver.readyState = filesaver.DONE;
	          dispatch_all();
	        };
	        reader.readAsDataURL(blob);
	        filesaver.readyState = filesaver.INIT;
	        return;
	      }
	      // don't create more object URLs than needed
	      if (blob_changed || !object_url) {
	        object_url = get_URL().createObjectURL(blob);
	      }
	      if (target_view) {
	        target_view.location.href = object_url;
	      } else {
	        var new_tab = view.open(object_url, '_blank');
	        if (new_tab === undefined && is_safari) {
	          //Apple do not allow window.open, see http://bit.ly/1kZffRI
	          view.location.href = object_url;
	        }
	      }
	      filesaver.readyState = filesaver.DONE;
	      dispatch_all();
	      revoke(object_url);
	    },
	        abortable = function abortable(func) {
	      return function () {
	        if (filesaver.readyState !== filesaver.DONE) {
	          return func.apply(this, arguments);
	        }
	      };
	    },
	        create_if_not_found = { create: true, exclusive: false },
	        slice;

	    filesaver.readyState = filesaver.INIT;
	    if (!name) {
	      name = 'download';
	    }
	    if (can_use_save_link) {
	      object_url = get_URL().createObjectURL(blob);
	      setTimeout(function () {
	        save_link.href = object_url;
	        save_link.download = name;
	        click(save_link);
	        dispatch_all();
	        revoke(object_url);
	        filesaver.readyState = filesaver.DONE;
	      });
	      return;
	    }
	    // Object and web filesystem URLs have a problem saving in Google Chrome when
	    // viewed in a tab, so I force save with application/octet-stream
	    // http://code.google.com/p/chromium/issues/detail?id=91158
	    // Update: Google errantly closed 91158, I submitted it again:
	    // https://code.google.com/p/chromium/issues/detail?id=389642
	    if (view.chrome && type && type !== force_saveable_type) {
	      slice = blob.slice || blob.webkitSlice;
	      blob = slice.call(blob, 0, blob.size, force_saveable_type);
	      blob_changed = true;
	    }
	    // Since I can't be sure that the guessed media type will trigger a download
	    // in WebKit, I append .download to the filename.
	    // https://bugs.webkit.org/show_bug.cgi?id=65440
	    if (webkit_req_fs && name !== 'download') {
	      name += '.download';
	    }
	    if (type === force_saveable_type || webkit_req_fs) {
	      target_view = view;
	    }
	    if (!req_fs) {
	      fs_error();
	      return;
	    }
	    fs_min_size += blob.size;
	    req_fs(view.TEMPORARY, fs_min_size, abortable(function (fs) {
	      fs.root.getDirectory('saved', create_if_not_found, abortable(function (dir) {
	        var save = function save() {
	          dir.getFile(name, create_if_not_found, abortable(function (file) {
	            file.createWriter(abortable(function (writer) {
	              writer.onwriteend = function (event) {
	                target_view.location.href = file.toURL();
	                filesaver.readyState = filesaver.DONE;
	                dispatch(filesaver, 'writeend', event);
	                revoke(file);
	              };
	              writer.onerror = function () {
	                var error = writer.error;
	                if (error.code !== error.ABORT_ERR) {
	                  fs_error();
	                }
	              };
	              'writestart progress write abort'.split(' ').forEach(function (event) {
	                writer['on' + event] = filesaver['on' + event];
	              });
	              writer.write(blob);
	              filesaver.abort = function () {
	                writer.abort();
	                filesaver.readyState = filesaver.DONE;
	              };
	              filesaver.readyState = filesaver.WRITING;
	            }), fs_error);
	          }), fs_error);
	        };
	        dir.getFile(name, { create: false }, abortable(function (file) {
	          // delete file if it already exists
	          file.remove();
	          save();
	        }), abortable(function (ex) {
	          if (ex.code === ex.NOT_FOUND_ERR) {
	            save();
	          } else {
	            fs_error();
	          }
	        }));
	      }), fs_error);
	    }), fs_error);
	  };

	  var FS_proto = FileSaver.prototype;
	  var saveAs = function saveAs(blob, name, no_auto_bom) {
	    return new FileSaver(blob, name, no_auto_bom);
	  };

	  // IE 10+ (native saveAs)
	  if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
	    return function (blob, name, no_auto_bom) {
	      if (!no_auto_bom) blob = auto_bom(blob);
	      return navigator.msSaveOrOpenBlob(blob, name || 'download');
	    };
	  }

	  FS_proto.abort = function () {
	    var filesaver = this;
	    filesaver.readyState = filesaver.DONE;
	    dispatch(filesaver, 'abort');
	  };
	  FS_proto.readyState = FS_proto.INIT = 0;
	  FS_proto.WRITING = 1;
	  FS_proto.DONE = 2;

	  FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

	  return saveAs;
	}(typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || undefined.content);
	// `self` is undefined in Firefox for Android content script context
	// while `this` is nsIContentFrameMessageManager
	// with an attribute `content` that corresponds to the window

	exports.default = saveAs;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var CommandAbout = (function () {
	    function CommandAbout(viewModel, propsInfo) {
	        this._viewModel = viewModel;
	        this._propsInfo = propsInfo;
	    }
	    CommandAbout.prototype.canExecute = function () {
	        return true;
	    };
	    CommandAbout.prototype.execute = function (args) {
	        qtk_1.InteractionRequest.props(this._propsInfo, function (ret) {
	        });
	        return true;
	    };
	    CommandAbout.create = function (viewModel, engine) {
	        var data = {
	            author: "Li XianJing",
	            email: "xianjimli@hotmail.com",
	            home: "https://github.com/qtoolkit/qtk",
	            engine: engine
	        };
	        var descJson = [
	            { type: "text-readonly", name: "Author", path: "author" },
	            { type: "link", name: "Email", path: "email" },
	            { type: "link", name: "Home", path: "home" },
	            { type: "link", name: "Engine", path: "engine" },
	        ];
	        var pagePropsDesc = qtk_1.PagePropsDesc.create("About", descJson);
	        var propsInfo = qtk_1.PropsInfo.create(pagePropsDesc, data, false, 300);
	        return new CommandAbout(viewModel, propsInfo);
	    };
	    return CommandAbout;
	}());
	exports.CommandAbout = CommandAbout;
	;
	//# sourceMappingURL=command-about.js.map

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var qtk_1 = __webpack_require__(4);
	var CommandRemove = (function () {
	    function CommandRemove(viewModel) {
	        this._viewModel = viewModel;
	    }
	    CommandRemove.prototype.canExecute = function () {
	        var viewModel = this._viewModel;
	        var docList = viewModel.getDocList();
	        return docList && docList.length > 0;
	    };
	    CommandRemove.prototype.confirmRemove = function (items) {
	        var viewModel = this._viewModel;
	        var fileNames = items.map(function (item) {
	            return item.text;
	        }).join(",");
	        var info = qtk_1.ConfirmationInfo.create("Are you sure to remove " + fileNames + " ?", 300);
	        qtk_1.InteractionRequest.confirm(info, function (ret) {
	            if (info.confirmed) {
	                items.forEach(function (item) {
	                    viewModel.removeDoc(item.text);
	                });
	            }
	        });
	    };
	    CommandRemove.prototype.execute = function (args) {
	        var _this = this;
	        var viewModel = this._viewModel;
	        var docList = viewModel.getDocList();
	        var choiceInfo = qtk_1.ChoiceInfo.create("Remove...", true, 300, 300);
	        docList.forEach(function (item) {
	            choiceInfo.addOption(item);
	        });
	        qtk_1.InteractionRequest.choice(choiceInfo, function (ret) {
	            var arr = ret.value;
	            if (arr && arr.length) {
	                _this.confirmRemove(arr);
	            }
	        });
	        return true;
	    };
	    CommandRemove.create = function (viewModel) {
	        return new CommandRemove(viewModel);
	    };
	    return CommandRemove;
	}());
	exports.CommandRemove = CommandRemove;
	;
	//# sourceMappingURL=command-remove.js.map

/***/ },
/* 375 */
/***/ function(module, exports) {

	"use strict";
	var CommandContent = (function () {
	    function CommandContent(viewModel, helpURL) {
	        this._viewModel = viewModel;
	        this._helpURL = helpURL;
	    }
	    CommandContent.prototype.canExecute = function () {
	        return true;
	    };
	    CommandContent.prototype.execute = function (args) {
	        console.log("CommandContent");
	        window.open(this._helpURL, "_blank");
	        return true;
	    };
	    CommandContent.create = function (viewModel, helpURL) {
	        return new CommandContent(viewModel, helpURL);
	    };
	    return CommandContent;
	}());
	exports.CommandContent = CommandContent;
	;
	//# sourceMappingURL=command-content.js.map

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var document_1 = __webpack_require__(3);
	var qtk_1 = __webpack_require__(4);
	var ParticlesViewModel = (function (_super) {
	    __extends(ParticlesViewModel, _super);
	    function ParticlesViewModel(data, type, storage) {
	        _super.call(this, data);
	        this.type = type;
	        this.storage = storage;
	        this.canvas = document.createElement('canvas');
	        this.registerCommands();
	        this.registerConverters();
	        this.doc = document_1.Document.create();
	        this.loadTemp();
	        var me = this;
	        window.onunload = function () {
	            me.saveTemp();
	        };
	    }
	    ParticlesViewModel.prototype.onDocReplaced = function () {
	    };
	    ParticlesViewModel.prototype.getDocList = function () {
	        return this.docList;
	    };
	    ParticlesViewModel.prototype.getDocName = function () {
	        return this.fileName;
	    };
	    ParticlesViewModel.prototype.getPropsDesc = function () {
	        return this.doc.propsDesc;
	    };
	    ParticlesViewModel.prototype.saveDoc = function (fileName) {
	        var data = JSON.stringify(this.doc.toJson(), null, "\t");
	        this.fileName = fileName;
	        this.storage.set(fileName, data);
	        this.updateDocList();
	    };
	    ParticlesViewModel.prototype.syncData = function (data) {
	        this.data = data;
	        this.createEmitter();
	        this.updateDocList();
	        this.onDocReplaced();
	    };
	    ParticlesViewModel.prototype.createDoc = function (templateName) {
	        this.fileName = null;
	        this.doc.fromTemplate(templateName);
	        this.syncData(this.doc.data);
	    };
	    ParticlesViewModel.prototype.loadData = function (json) {
	        this.doc.fromJson(json);
	        this.syncData(this.doc.data);
	    };
	    ParticlesViewModel.prototype.openDoc = function (fileName) {
	        this.fileName = fileName;
	        var data = this.storage.get(fileName);
	        var json = JSON.parse(data);
	        this.loadData(json);
	    };
	    ParticlesViewModel.prototype.removeDoc = function (fileName) {
	        this.storage.remove(fileName);
	        this.updateDocList();
	    };
	    ParticlesViewModel.prototype.getFormatList = function () {
	        return ["json"];
	    };
	    ParticlesViewModel.prototype.exportDoc = function (format) {
	        if (format.indexOf("json") >= 0) {
	            return JSON.stringify(this.data, null, "\t");
	        }
	        return null;
	    };
	    ParticlesViewModel.prototype.setProp = function (path, value, converter, validationRule) {
	        var result = _super.prototype.setProp.call(this, path, value, converter, validationRule);
	        this.createEmitter();
	        return result;
	    };
	    ParticlesViewModel.prototype.getTemplateList = function () {
	        return this.doc.getTemplateList();
	    };
	    ParticlesViewModel.prototype.updateDocList = function () {
	        this.docList = this.storage.getItems();
	    };
	    ParticlesViewModel.prototype.getPropTitleWidth = function () {
	        return "30%";
	    };
	    ParticlesViewModel.prototype.saveTemp = function () {
	        var docInfo = {
	            fileName: this.fileName,
	            doc: this.doc.toJson()
	        };
	        var data = JSON.stringify(docInfo, null, "\t");
	        var key = "temp." + this.type;
	        localStorage.setItem(key, data);
	    };
	    ParticlesViewModel.prototype.loadTemp = function () {
	        var key = "temp." + this.type;
	        var str = localStorage.getItem(key);
	        if (str) {
	            var data = JSON.parse(str);
	            this.fileName = data.fileName;
	            this.loadData(data.doc);
	        }
	        else {
	            this.createDoc("default");
	        }
	    };
	    return ParticlesViewModel;
	}(qtk_1.ViewModel));
	exports.ParticlesViewModel = ParticlesViewModel;
	;
	//# sourceMappingURL=particles-view-model.js.map

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var proton = __webpack_require__(378);
	__webpack_require__(379);
	var qtk_1 = __webpack_require__(4);
	var proton_wrapper_1 = __webpack_require__(382);
	var qtk_particles_editor_1 = __webpack_require__(2);
	var qtk_particles_editor_2 = __webpack_require__(2);
	var qtk_particles_editor_3 = __webpack_require__(2);
	var ProtonViewModel = (function (_super) {
	    __extends(ProtonViewModel, _super);
	    function ProtonViewModel(storage) {
	        _super.call(this, null, ProtonViewModel.TYPE, storage);
	    }
	    ProtonViewModel.prototype.onDocReplaced = function () {
	        var globalCompositeOperation = this.data.globalCompositeOperation;
	        if (globalCompositeOperation) {
	            var context = this.canvas.getContext('2d');
	            setTimeout(function () {
	                context.globalCompositeOperation = globalCompositeOperation;
	            }, 300);
	        }
	    };
	    ProtonViewModel.prototype.registerConverters = function () {
	        this.registerValueConverter("radius", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("life", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("mass", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("point", qtk_1.Vector2Fixer.create(0, 1000, 0, 1000));
	        this.registerValueConverter("scale", qtk_1.RangeFixer.create(0, 10, 0, 10, false));
	        this.registerValueConverter("alpha", qtk_1.RangeFixer.create(0, 1, 0, 1, false));
	        this.registerValueConverter("rate-num", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("rate-time", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("v-rpan", qtk_1.RangeFixer.create(0, 1000, 0, 1000, true));
	        this.registerValueConverter("v-thapath", qtk_1.RangeFixer.create(-1000, 1000, -1000, 1000, true));
	        this.registerValueConverter("delay", qtk_1.NumberFixer.create(0, 10));
	    };
	    ProtonViewModel.prototype.registerCommands = function () {
	        this.registerCommand("draw", qtk_particles_editor_2.CommandDraw.create(this.canvas));
	        this.registerCommand("about", qtk_particles_editor_1.CommandAbout.create(this, "https://github.com/a-jie/Proton"));
	        this.registerCommand("content", qtk_particles_editor_1.CommandContent.create(this, "http://proton.jpeer.at/index.html"));
	        this.registerCommand("new", qtk_particles_editor_2.CommandNew.create(this, qtk_particles_editor_1.Document.getTemplateList()));
	        this.registerCommand("open", qtk_particles_editor_2.CommandOpen.create(this));
	        this.registerCommand("remove", qtk_particles_editor_1.CommandRemove.create(this));
	        this.registerCommand("save", qtk_particles_editor_2.CommandSave.create(this, false));
	        this.registerCommand("save-as", qtk_particles_editor_2.CommandSave.create(this, true));
	        this.registerCommand("export", qtk_particles_editor_2.CommandExport.create(this));
	    };
	    ProtonViewModel.prototype.createEmitter = function () {
	        var data = this.data;
	        var proton = ProtonViewModel.proton;
	        if (!this.renderer) {
	            var renderer = new Proton.Renderer('canvas', proton, this.canvas);
	            this.renderer = renderer;
	            renderer.start();
	        }
	        var emitter = this.protonEmitter;
	        if (emitter) {
	            proton.removeEmitter(emitter);
	            emitter.destroy();
	        }
	        this.protonEmitter = proton_wrapper_1.createParticlesEmitter(proton, data);
	    };
	    ProtonViewModel.update = function () {
	        ProtonViewModel.proton.update();
	        requestAnimationFrame(ProtonViewModel.update);
	    };
	    ProtonViewModel.create = function (options) {
	        if (!ProtonViewModel.proton) {
	            ProtonViewModel.proton = new Proton();
	            requestAnimationFrame(ProtonViewModel.update);
	        }
	        return new ProtonViewModel(options.storage);
	    };
	    ProtonViewModel.TYPE = "proton";
	    ProtonViewModel.proton = null;
	    return ProtonViewModel;
	}(qtk_particles_editor_3.ParticlesViewModel));
	exports.ProtonViewModel = ProtonViewModel;
	;
	qtk_particles_editor_3.ParticlesViewModelFactory.register(ProtonViewModel.TYPE, ProtonViewModel.create);
	//# sourceMappingURL=view-model.js.map

/***/ },
/* 378 */
/***/ function(module, exports) {

	/*!
	 * Proton v2.1.0
	 * https://github.com/a-jie/Proton
	 *
	 * Copyright 2011-2016, A-JIE
	 * Licensed under the MIT license
	 * http://www.opensource.org/licenses/mit-license
	 *
	 */

	(function(window, undefined) {
	    //the max particle number in pool
	    Proton.POOL_MAX = 1000;
	    Proton.TIME_STEP = 60;
	    Proton.USE_CLOCK = false;
	    //1:100
	    Proton.MEASURE = 100;
	    Proton.EULER = 'euler';
	    Proton.RK2 = 'runge-kutta2';
	    Proton.RK4 = 'runge-kutta4';
	    Proton.VERLET = 'verlet';

	    Proton.PARTICLE_CREATED = 'partilcleCreated';
	    Proton.PARTICLE_UPDATE = 'partilcleUpdate';
	    Proton.PARTICLE_SLEEP = 'particleSleep';
	    Proton.PARTICLE_DEAD = 'partilcleDead';
	    Proton.PROTON_UPDATE = 'protonUpdate';
	    Proton.PROTON_UPDATE_AFTER = 'protonUpdateAfter';
	    Proton.EMITTER_ADDED = 'emitterAdded';
	    Proton.EMITTER_REMOVED = 'emitterRemoved';

	    Proton.amendChangeTabsBug = true;
	    Proton.TextureBuffer = {};
	    Proton.TextureCanvasBuffer = {};

	    /**
	     * Proton is a html5 particle engine
	     *
	     * @class Proton
	     * @constructor
	     */
	    function Proton(proParticleCount, integrationType) {
	        this.integrationType = Proton.Util.initValue(integrationType, Proton.EULER);
	        this.emitters = [];
	        this.renderers = [];
	        this.time = 0;
	        this.oldTime = 0;

	        Proton.pool = new Proton.Pool(100);
	        Proton.integrator = new Proton.NumericalIntegration(this.integrationType);
	    }


	    Proton.prototype = {
	        /**
	         * add a type of Renderer
	         *
	         * @method addRender
	         * @param {Renderer} render
	         */
	        addRender: function(render) {
	            render.proton = this;
	            this.renderers.push(render.proton);
	        },
	        /**
	         * add the Emitter
	         *
	         * @method addEmitter
	         * @param {Emitter} emitter
	         */
	        addEmitter: function(emitter) {
	            this.emitters.push(emitter);
	            emitter.parent = this;

	            this.dispatchEvent(Proton.EMITTER_ADDED, emitter);
	        },

	        removeEmitter: function(emitter) {
	            var index = this.emitters.indexOf(emitter);
	            this.emitters.splice(index, 1);
	            emitter.parent = null;

	            this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);
	        },

	        update: function() {
	            this.dispatchEvent(Proton.PROTON_UPDATE);

	            if (Proton.USE_CLOCK) {
	                if (!this.oldTime)
	                    this.oldTime = new Date().getTime();

	                var time = new Date().getTime();
	                this.elapsed = (time - this.oldTime) / 1000;
	                if (Proton.amendChangeTabsBug)
	                    this.amendChangeTabsBug();
	                this.oldTime = time;
	            } else {
	                this.elapsed = 0.0167;
	            }

	            if (this.elapsed > 0) {
	                for (var i = 0; i < this.emitters.length; i++) {
	                    this.emitters[i].update(this.elapsed);
	                }
	            }

	            this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);
	        },

	        amendChangeTabsBug: function() {
	            if (this.elapsed > .5) {
	                this.oldTime = new Date().getTime();
	                this.elapsed = 0;
	            }
	        },

	        getCount: function() {
	            var total = 0;
	            var length = this.emitters.length;
	            for (var i = 0; i < length; i++) {
	                total += this.emitters[i].particles.length;
	            }
	            return total;
	        },

	        destroy: function() {
	            var length = this.emitters.length;
	            for (var i = 0; i < length; i++) {
	                this.emitters[i].destroy();
	                delete this.emitters[i];
	            }

	            this.emitters = [];
	            this.time = 0;
	            this.oldTime = 0;
	            Proton.pool.release();
	        }
	    };

	    window.Proton = Proton;


	/*
	 * EventDispatcher
	 * Visit http://createjs.com/ for documentation, updates and examples.
	 *
	 **/


	    function EventDispatcher() {
	        this.initialize();
	    };

	    EventDispatcher.initialize = function(target) {
	        target.addEventListener = p.addEventListener;
	        target.removeEventListener = p.removeEventListener;
	        target.removeAllEventListeners = p.removeAllEventListeners;
	        target.hasEventListener = p.hasEventListener;
	        target.dispatchEvent = p.dispatchEvent;
	    };

	    var p = EventDispatcher.prototype;

	    p._listeners = null;

	    p.initialize = function() {};
	    p.addEventListener = function(type, listener) {
	        if (!this._listeners) {
	            this._listeners = {};
	        } else {
	            this.removeEventListener(type, listener);
	        }

	        if (!this._listeners[type]) this._listeners[type] = []
	        this._listeners[type].push(listener);

	        return listener;
	    };

	    p.removeEventListener = function(type, listener) {
	        if (!this._listeners) return;
	        if (!this._listeners[type]) return;

	        var arr = this._listeners[type];
	        for (var i = 0, l = arr.length; i < l; i++) {
	            if (arr[i] == listener) {
	                if (l == 1) {
	                    delete(this._listeners[type]);
	                }
	                // allows for faster checks.
	                else {
	                    arr.splice(i, 1);
	                }
	                break;
	            }
	        }
	    };

	    p.removeAllEventListeners = function(type) {
	        if (!type)
	            this._listeners = null;
	        else if (this._listeners)
	            delete(this._listeners[type]);
	    };

	    p.dispatchEvent = function(eventName, eventTarget) {
	        var ret = false,
	            listeners = this._listeners;

	        if (eventName && listeners) {
	            var arr = listeners[eventName];
	            if (!arr) return ret;

	            arr = arr.slice();
	            // to avoid issues with items being removed or added during the dispatch

	            var handler, i = arr.length;
	            while (i--) {
	                var handler = arr[i];
	                ret = ret || handler(eventTarget);
	            }
	            
	        }

	        return !!ret;
	    };

	    p.hasEventListener = function(type) {
	        var listeners = this._listeners;
	        return !!(listeners && listeners[type]);
	    };

	    EventDispatcher.initialize(Proton.prototype);
	    Proton.EventDispatcher = EventDispatcher;



	    var Util = Util || {
	        initValue: function(value, defaults) {
	            var value = (value != null && value != undefined) ? value : defaults;
	            return value;
	        },

	        isArray: function(value) {
	            return typeof value === 'object' && value.hasOwnProperty('length');
	        },

	        destroyArray: function(array) {
	            array.length = 0;
	        },

	        destroyObject: function(obj) {
	            for (var o in obj)
	                delete obj[o];
	        },

	        getVector2D: function(postionOrX, y) {
	            if (typeof(postionOrX) == 'object') {
	                return postionOrX;
	            } else {
	                var vector2d = new Proton.Vector2D(postionOrX, y);
	                return vector2d;
	            }
	        },

	        classApply: function(constructor, argArray) {
	            if (!argArray) return new constructor;

	            var args = [null].concat(argArray);
	            var factoryFunction = constructor.bind.apply(constructor, args);
	            return new factoryFunction();
	        },

	        judgeVector2D: function(pOBJ) {
	            var result = '';
	            if (pOBJ.hasOwnProperty('x') || pOBJ.hasOwnProperty('y') || pOBJ.hasOwnProperty('p') || pOBJ.hasOwnProperty('position'))
	                result += 'p';
	            if (pOBJ.hasOwnProperty('vx') || pOBJ.hasOwnProperty('vx') || pOBJ.hasOwnProperty('v') || pOBJ.hasOwnProperty('velocity'))
	                result += 'v';
	            if (pOBJ.hasOwnProperty('ax') || pOBJ.hasOwnProperty('ax') || pOBJ.hasOwnProperty('a') || pOBJ.hasOwnProperty('accelerate'))
	                result += 'a';

	            return result;
	        },

	        setVector2DByObject: function(target, pOBJ) {
	            if (pOBJ.hasOwnProperty('x'))
	                target.p.x = pOBJ['x'];

	            if (pOBJ.hasOwnProperty('y'))
	                target.p.y = pOBJ['y'];

	            if (pOBJ.hasOwnProperty('vx'))
	                target.v.x = pOBJ['vx'];

	            if (pOBJ.hasOwnProperty('vy'))
	                target.v.y = pOBJ['vy'];

	            if (pOBJ.hasOwnProperty('ax'))
	                target.a.x = pOBJ['ax'];

	            if (pOBJ.hasOwnProperty('ay'))
	                target.a.y = pOBJ['ay'];

	            if (pOBJ.hasOwnProperty('p'))
	                particle.p.copy(pOBJ['p']);

	            if (pOBJ.hasOwnProperty('v'))
	                particle.v.copy(pOBJ['v']);

	            if (pOBJ.hasOwnProperty('a'))
	                particle.a.copy(pOBJ['a']);

	            if (pOBJ.hasOwnProperty('position'))
	                particle.p.copy(pOBJ['position']);

	            if (pOBJ.hasOwnProperty('velocity'))
	                particle.v.copy(pOBJ['velocity']);

	            if (pOBJ.hasOwnProperty('accelerate'))
	                particle.a.copy(pOBJ['accelerate']);
	        },
	        //强行添加属性
	        addPrototypeByObject: function(target, prototypeObject, filters) {
	            for (var singlePrototype in prototypeObject) {
	                if (filters) {
	                    if (filters.indexOf(singlePrototype) < 0)
	                        target[singlePrototype] = Proton.Util.getSpanValue(prototypeObject[singlePrototype]);
	                } else {
	                    target[singlePrototype] = Proton.Util.getSpanValue(prototypeObject[singlePrototype]);
	                }
	            }

	            return target;
	        },
	        //set prototype
	        setPrototypeByObject: function(target, prototypeObject, filters) {
	            for (var singlePrototype in prototypeObject) {
	                if (target.hasOwnProperty(singlePrototype)) {
	                    if (filters) {
	                        if (filters.indexOf(singlePrototype) < 0)
	                            target[singlePrototype] = Proton.Util.getSpanValue(prototypeObject[singlePrototype]);
	                    } else {
	                        target[singlePrototype] = Proton.Util.getSpanValue(prototypeObject[singlePrototype]);
	                    }
	                }
	            }

	            return target;
	        },

	        setSpanValue: function(a, b, c) {
	            if (a instanceof Proton.Span) {
	                return a;
	            } else {
	                if (!b) {
	                    return new Proton.Span(a);
	                } else {
	                    if (!c)
	                        return new Proton.Span(a, b);
	                    else
	                        return new Proton.Span(a, b, c);
	                }
	            }
	        },

	        getSpanValue: function(pan) {
	            if (pan instanceof Proton.Span)
	                return pan.getValue();
	            else
	                return pan;
	        },

	        inherits: function(subClass, superClass) {
	            subClass._super_ = superClass;
	            if (Object['create']) {
	                //console.log(subClass,superClass);
	                subClass.prototype = Object.create(superClass.prototype, {
	                    constructor: {
	                        value: subClass
	                    }
	                });
	            } else {
	                var F = function() {};
	                F.prototype = superClass.prototype;
	                subClass.prototype = new F();
	                subClass.prototype.constructor = subClass;
	            }
	        },

	        getImageData: function(context, image, rect) {
	            context.drawImage(image, rect.x, rect.y);
	            var imagedata = context.getImageData(rect.x, rect.y, rect.width, rect.height);
	            context.clearRect(rect.x, rect.y, rect.width, rect.height);
	            return imagedata;
	        },

	        getImage: function(img, particle, drawCanvas, fun) {
	            if (typeof(img) == 'string') {
	                this.loadAndSetImage(img, particle, drawCanvas, fun);
	            } else if (typeof(img) == 'object') {
	                this.loadAndSetImage(img.src, particle, drawCanvas, fun);
	            } else if (img instanceof Image) {
	                this.loadedImage(img.src, particle, drawCanvas, fun, img);
	            }
	        },

	        loadedImage: function(src, particle, drawCanvas, fun, target) {
	            particle.target = target;
	            particle.transform.src = src;
	            if (!Proton.TextureBuffer[src])
	                Proton.TextureBuffer[src] = particle.target;
	            if (drawCanvas) {
	                if (Proton.TextureCanvasBuffer[src]) {
	                    particle.transform.canvas = Proton.TextureCanvasBuffer[src];
	                } else {
	                    var _width = Proton.WebGLUtil.nhpot(particle.target.width);
	                    var _height = Proton.WebGLUtil.nhpot(particle.target.height);
	                    particle.transform.canvas = Proton.DomUtil.createCanvas('canvas' + src, _width, _height);
	                    var context = particle.transform.canvas.getContext('2d');
	                    context.drawImage(particle.target, 0, 0, particle.target.width, particle.target.height);
	                    Proton.TextureCanvasBuffer[src] = particle.transform.canvas;
	                }
	            }
	            if (fun)
	                fun(particle);
	        },

	        loadAndSetImage: function(src, particle, drawCanvas, fun) {
	            if (Proton.TextureBuffer[src]) {
	                this.loadedImage(src, particle, drawCanvas, fun, Proton.TextureBuffer[src]);
	            } else {
	                var self = this;
	                var myImage = new Image();
	                myImage.onload = function(e) {
	                    self.loadedImage(src, particle, drawCanvas, fun, e.target);
	                }
	                myImage.src = src;
	            }
	        },

	        hexToRGB: function(h) {
	            var hex16 = (h.charAt(0) == "#") ? h.substring(1, 7) : h;
	            var r = parseInt(hex16.substring(0, 2), 16);
	            var g = parseInt(hex16.substring(2, 4), 16);
	            var b = parseInt(hex16.substring(4, 6), 16);

	            return {
	                r: r,
	                g: g,
	                b: b
	            }
	        },

	        rgbToHex: function(rbg) {
	            return 'rgb(' + rbg.r + ', ' + rbg.g + ', ' + rbg.b + ')';
	        }
	    };

	    Proton.Util = Util;



	///bind
	if (!Function.prototype.bind) {
	    Function.prototype.bind = function(oThis) {
	        if (typeof this !== "function") {
	            // closest thing possible to the ECMAScript 5
	            // internal IsCallable function
	            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
	        }

	        var aArgs = Array.prototype.slice.call(arguments, 1),
	            fToBind = this,
	            fNOP = function() {},
	            fBound = function() {
	                return fToBind.apply(this instanceof fNOP ? this : oThis || this,
	                    aArgs.concat(Array.prototype.slice.call(arguments)));
	            };

	        fNOP.prototype = this.prototype;
	        fBound.prototype = new fNOP();

	        return fBound;
	    };
	}


		var WebGLUtil = WebGLUtil || {
			ipot : function(length) {
				return (length & (length - 1)) == 0;
			},

			nhpot : function(length) {--length;
				for (var i = 1; i < 32; i <<= 1) {
					length = length | length >> i;
				}
				return length + 1;
			},

			makeTranslation : function(tx, ty) {
				return [1, 0, 0, 0, 1, 0, tx, ty, 1];
			},

			makeRotation : function(angleInRadians) {
				var c = Math.cos(angleInRadians);
				var s = Math.sin(angleInRadians);
				return [c, -s, 0, s, c, 0, 0, 0, 1];
			},

			makeScale : function(sx, sy) {
				return [sx, 0, 0, 0, sy, 0, 0, 0, 1];
			},

			matrixMultiply : function(a, b) {
				var a00 = a[0 * 3 + 0];
				var a01 = a[0 * 3 + 1];
				var a02 = a[0 * 3 + 2];
				var a10 = a[1 * 3 + 0];
				var a11 = a[1 * 3 + 1];
				var a12 = a[1 * 3 + 2];
				var a20 = a[2 * 3 + 0];
				var a21 = a[2 * 3 + 1];
				var a22 = a[2 * 3 + 2];
				var b00 = b[0 * 3 + 0];
				var b01 = b[0 * 3 + 1];
				var b02 = b[0 * 3 + 2];
				var b10 = b[1 * 3 + 0];
				var b11 = b[1 * 3 + 1];
				var b12 = b[1 * 3 + 2];
				var b20 = b[2 * 3 + 0];
				var b21 = b[2 * 3 + 1];
				var b22 = b[2 * 3 + 2];
				return [a00 * b00 + a01 * b10 + a02 * b20, a00 * b01 + a01 * b11 + a02 * b21, a00 * b02 + a01 * b12 + a02 * b22, a10 * b00 + a11 * b10 + a12 * b20, a10 * b01 + a11 * b11 + a12 * b21, a10 * b02 + a11 * b12 + a12 * b22, a20 * b00 + a21 * b10 + a22 * b20, a20 * b01 + a21 * b11 + a22 * b21, a20 * b02 + a21 * b12 + a22 * b22];
			}
		}

		Proton.WebGLUtil = WebGLUtil;



		var DomUtil = DomUtil || {
			createCanvas : function($id, $width, $height, $position) {
				var element = document.createElement("canvas");
				var position = $position ? $position : 'absolute';
				element.id = $id;
				element.width = $width;
				element.height = $height;
				element.style.position = position;
				element.style.opacity = 0;
				this.transformDom(element, -500, -500, 0, 0);
				return element;
			},

			transformDom : function($div, $x, $y, $scale, $rotate) {
				$div.style.WebkitTransform = 'translate(' + $x + 'px, ' + $y + 'px) ' + 'scale(' + $scale + ') ' + 'rotate(' + $rotate + 'deg)';
				$div.style.MozTransform = 'translate(' + $x + 'px, ' + $y + 'px) ' + 'scale(' + $scale + ') ' + 'rotate(' + $rotate + 'deg)';
				$div.style.OTransform = 'translate(' + $x + 'px, ' + $y + 'px) ' + 'scale(' + $scale + ') ' + 'rotate(' + $rotate + 'deg)';
				$div.style.msTransform = 'translate(' + $x + 'px, ' + $y + 'px) ' + 'scale(' + $scale + ') ' + 'rotate(' + $rotate + 'deg)';
				$div.style.transform = 'translate(' + $x + 'px, ' + $y + 'px) ' + 'scale(' + $scale + ') ' + 'rotate(' + $rotate + 'deg)';
			}
		}

		Proton.DomUtil = DomUtil;



		function MStack() {
			this.mats = [];
			this.size = 0;
			for (var i = 0; i < 20; i++)
				this.mats.push(Proton.Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));
		}


		MStack.prototype.set = function(m, i) {
			if (i == 0)
				Proton.Mat3.set(m, this.mats[0]);
			else
				Proton.Mat3.multiply(this.mats[i - 1], m, this.mats[i]);
			this.size = Math.max(this.size, i + 1);
		}

		MStack.prototype.push = function(m) {
			if (this.size == 0)
				Proton.Mat3.set(m, this.mats[0]);
			else
				Proton.Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);
			this.size++;
		}

		MStack.prototype.pop = function() {
			if (this.size > 0)
				this.size--;
		}

		MStack.prototype.top = function() {
			return (this.mats[this.size - 1]);
		}

		Proton.MStack = MStack;




		Particle.ID = 0;
		/**
		 * the Particle class
		 *
		 * @class Proton.Particle
		 * @constructor
		 * @param {Object} pObj the parameters object;
		 * for example {life:3,dead:false}
		 */
		function Particle(pOBJ) {
			/**
			 * The particle's id;
			 * @property id
			 * @type {String} id
			 */
			this.id = 'particle_' + Particle.ID++;
			this.reset(true);
			Proton.Util.setPrototypeByObject(this, pOBJ);
		}


		Particle.prototype = {
			getDirection : function() {
				return Math.atan2(this.v.x, -this.v.y) * (180 / Math.PI);
			},

			reset : function(init) {
				this.life = Infinity;
				this.age = 0;
				//能量损失
				this.energy = 1;
				this.dead = false;
				this.sleep = false;
				this.target = null;
				this.sprite = null;
				this.parent = null;
				this.mass = 1;
				this.radius = 10;
				this.alpha = 1;
				this.scale = 1;
				this.rotation = 0;
				this.color = null;
				this.easing = Proton.ease.setEasingByName(Proton.easeLinear);
				if (init) {
					this.transform = {}
					this.p = new Proton.Vector2D();
					this.v = new Proton.Vector2D();
					this.a = new Proton.Vector2D();
					this.old = {
						p : new Proton.Vector2D(),
						v : new Proton.Vector2D(),
						a : new Proton.Vector2D()
					};
					this.behaviours = [];
				} else {
					Proton.Util.destroyObject(this.transform);
					this.p.set(0, 0);
					this.v.set(0, 0);
					this.a.set(0, 0);
					this.old.p.set(0, 0);
					this.old.v.set(0, 0);
					this.old.a.set(0, 0);
					this.removeAllBehaviours();
				}

				this.transform.rgb = {
					r : 255,
					g : 255,
					b : 255
				}
				return this;
			},

			update : function(time, index) {
				if (!this.sleep) {
					this.age += time;
					var length = this.behaviours.length, i;
					for ( i = 0; i < length; i++) {
						if (this.behaviours[i])
							this.behaviours[i].applyBehaviour(this, time, index)
					}
				} else {

				}

				if (this.age >= this.life) {
					this.destroy();
				} else {
					var scale = this.easing(this.age / this.life);
					this.energy = Math.max(1 - scale, 0);
				}

			},

			addBehaviour : function(behaviour) {
				this.behaviours.push(behaviour);
				if (behaviour.hasOwnProperty('parents'))
					behaviour.parents.push(this);
				behaviour.initialize(this);
			},

			addBehaviours : function(behaviours) {
				var length = behaviours.length, i;
				for ( i = 0; i < length; i++) {
					this.addBehaviour(behaviours[i]);
				}
			},

			removeBehaviour : function(behaviour) {
				var index = this.behaviours.indexOf(behaviour);
				if (index > -1) {
					var behaviour = this.behaviours.splice(index, 1);
					behaviour.parents = null;
				}
			},

			removeAllBehaviours : function() {
				Proton.Util.destroyArray(this.behaviours);
			},
			/**
			 * Destory this particle
			 * @method destroy
			 */
			destroy : function() {
				this.removeAllBehaviours();
				this.energy = 0;
				this.dead = true;
				this.parent = null;
			}
		};

		Proton.Particle = Particle;




	    function Pool() {
	        this.cID = 0;
	        this.list = {};
	    }
	    
	    Pool.prototype = {
	        create: function(obj, params) {
	            this.cID++;
	   
	            if (typeof obj == "function")
	                return Proton.Util.classApply(obj, params);
	            else
	                return obj.clone();
	        },

	        getCount: function() {
	            var count = 0;
	            for (var id in this.list)
	                count += this.list[id].length;

	            return count++;;
	        },

	        get: function(obj, params) {
	            var p, puid = obj.__puid || PUID.id(obj);
	            if (this.list[puid] && this.list[puid].length > 0)
	                p = this.list[puid].pop();
	            else
	                p = this.create(obj, params);

	            p.__puid = obj.__puid || puid;
	            return p;
	        },

	        set: function(obj) {
	            return this._getList(obj.__puid).push(obj);
	        },

	        destroy: function() {
	            for (var id in this.list) {
	                this.list[id].length = 0;
	                delete this.list[id];
	            }
	        },

	        _getList: function(uid) {
	            uid = uid || "default";
	            if (!this.list[uid]) this.list[uid] = [];
	            return this.list[uid];
	        }
	    }

	    Proton.Pool = Pool;

	    var PUID = {
	        _id: 0,
	        _uids: {},
	        id: function(obj) {
	            for (var id in this._uids) {
	                if (this._uids[id] == obj) return id;
	            }

	            var nid = "PUID_" + (this._id++);
	            this._uids[nid] = obj;
	            return nid;
	        },

	        hash: function(str) {
	            return;
	        }
	    }




		var MathUtils = {
			randomAToB : function(a, b, INT) {
				if (!INT)
					return a + Math.random() * (b - a );
				else
					return Math.floor(Math.random() * (b - a)) + a;
			},
			randomFloating : function(center, f, INT) {
				return MathUtils.randomAToB(center - f, center + f, INT);
			},
			randomZone : function(display) {

			},

			degreeTransform : function(a) {
				return a * Math.PI / 180;
			},

			toColor16 : function getRGB(num) {
				return "#" + num.toString(16);
			},
			
			randomColor : function() {
				return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);
			}
		}

		Proton.MathUtils = MathUtils;


	//数值积分

		var NumericalIntegration = function(type) {
			this.type = Proton.Util.initValue(type, Proton.EULER);
		}

		NumericalIntegration.prototype = {
			integrate : function(particles, time, damping) {
				this.eulerIntegrate(particles, time, damping);
			},

			eulerIntegrate : function(particle, time, damping) {
				if (!particle.sleep) {
					particle.old.p.copy(particle.p);
					particle.old.v.copy(particle.v);
					particle.a.multiplyScalar(1 / particle.mass);
					particle.v.add(particle.a.multiplyScalar(time));
					particle.p.add(particle.old.v.multiplyScalar(time));
					if (damping)
						particle.v.multiplyScalar(damping);
					particle.a.clear();
				}
			}
		}

		Proton.NumericalIntegration = NumericalIntegration;


	//@author mrdoob / http://mrdoob.com/

		var Vector2D = function(x, y) {
			this.x = x || 0;
			this.y = y || 0;
		}

		Vector2D.prototype = {
			set : function(x, y) {

				this.x = x;
				this.y = y;
				return this;

			},

			setX : function(x) {

				this.x = x;
				return this;

			},

			setY : function(y) {

				this.y = y;

				return this;

			},

			setComponent : function(index, value) {

				switch ( index ) {

					case 0:
						this.x = value;
						break;
					case 1:
						this.y = value;
						break;
					default:
						throw new Error("index is out of range: " + index);

				}

			},

			getGradient : function() {
				if (this.x != 0)
					return Math.atan2(this.y, this.x);
				else if (this.y > 0)
					return Math.PI / 2;
				else if (this.y < 0)
					return -Math.PI / 2;
			},

			getComponent : function(index) {

				switch ( index ) {

					case 0:
						return this.x;
					case 1:
						return this.y;
					default:
						throw new Error("index is out of range: " + index);

				}

			},

			copy : function(v) {

				this.x = v.x;
				this.y = v.y;

				return this;

			},

			add : function(v, w) {

				if (w !== undefined) {
					return this.addVectors(v, w);

				}

				this.x += v.x;
				this.y += v.y;

				return this;

			},

			addXY : function(a, b) {

				this.x += a;
				this.y += b;

				return this;

			},

			addVectors : function(a, b) {

				this.x = a.x + b.x;
				this.y = a.y + b.y;

				return this;

			},

			addScalar : function(s) {

				this.x += s;
				this.y += s;

				return this;

			},

			sub : function(v, w) {

				if (w !== undefined) {
					return this.subVectors(v, w);

				}

				this.x -= v.x;
				this.y -= v.y;

				return this;

			},

			subVectors : function(a, b) {

				this.x = a.x - b.x;
				this.y = a.y - b.y;

				return this;

			},

			multiplyScalar : function(s) {

				this.x *= s;
				this.y *= s;

				return this;

			},

			divideScalar : function(s) {

				if (s !== 0) {

					this.x /= s;
					this.y /= s;

				} else {

					this.set(0, 0);

				}

				return this;

			},

			min : function(v) {

				if (this.x > v.x) {

					this.x = v.x;

				}

				if (this.y > v.y) {

					this.y = v.y;

				}

				return this;

			},

			max : function(v) {

				if (this.x < v.x) {

					this.x = v.x;

				}

				if (this.y < v.y) {

					this.y = v.y;

				}

				return this;

			},

			clamp : function(min, max) {

				// This function assumes min < max, if this assumption isn't true it will not operate correctly

				if (this.x < min.x) {

					this.x = min.x;

				} else if (this.x > max.x) {

					this.x = max.x;

				}

				if (this.y < min.y) {

					this.y = min.y;

				} else if (this.y > max.y) {

					this.y = max.y;

				}

				return this;

			},

			negate : function() {

				return this.multiplyScalar(-1);

			},

			dot : function(v) {

				return this.x * v.x + this.y * v.y;

			},

			lengthSq : function() {

				return this.x * this.x + this.y * this.y;

			},

			length : function() {

				return Math.sqrt(this.x * this.x + this.y * this.y);

			},

			normalize : function() {

				return this.divideScalar(this.length());

			},

			distanceTo : function(v) {

				return Math.sqrt(this.distanceToSquared(v));

			},

			rotate : function(tha) {
				var x = this.x;
				var y = this.y;
				this.x = x * Math.cos(tha) + y * Math.sin(tha);
				this.y = -x * Math.sin(tha) + y * Math.cos(tha);
				return this;
			},

			distanceToSquared : function(v) {

				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;

			},

			setLength : function(l) {

				var oldLength = this.length();

				if (oldLength !== 0 && l !== oldLength) {

					this.multiplyScalar(l / oldLength);
				}

				return this;

			},

			lerp : function(v, alpha) {

				this.x += (v.x - this.x ) * alpha;
				this.y += (v.y - this.y ) * alpha;

				return this;

			},

			equals : function(v) {

				return ((v.x === this.x ) && (v.y === this.y ) );

			},

			toArray : function() {

				return [this.x, this.y];

			},

			clear : function() {
				this.x = 0.0;
				this.y = 0.0;
				return this;
			},

			clone : function() {

				return new Proton.Vector2D(this.x, this.y);

			}
		};

		Proton.Vector2D = Vector2D;



		var Polar2D = function(r, tha) {
			this.r = Math.abs(r) || 0;
			this.tha = tha || 0;
		}

		Polar2D.prototype = {
			set : function(r, tha) {

				this.r = r;
				this.tha = tha;
				return this;

			},

			setR : function(r) {

				this.r = r;
				return this;

			},

			setTha : function(tha) {

				this.tha = tha;

				return this;

			},

			copy : function(p) {

				this.r = p.r;
				this.tha = p.tha;

				return this;

			},

			toVector : function() {
				return new Proton.Vector2D(this.getX(), this.getY());
			},

			getX : function() {
				return this.r * Math.sin(this.tha);
			},

			getY : function() {
				return -this.r * Math.cos(this.tha);
			},

			normalize : function() {

				this.r = 1;
				return this;
			},

			equals : function(v) {

				return ((v.r === this.r ) && (v.tha === this.tha ) );

			},

			toArray : function() {

				return [this.r, this.tha];

			},

			clear : function() {
				this.r = 0.0;
				this.tha = 0.0;
				return this;
			},

			clone : function() {

				return new Proton.Polar2D(this.r, this.tha);

			}
		};

		Proton.Polar2D = Polar2D;



		function Span(a, b, center) {
			this.isArray = false;

			if (Proton.Util.isArray(a)) {
				this.isArray = true;
				this.a = a;
			} else {
				this.a = Proton.Util.initValue(a, 1);
				this.b = Proton.Util.initValue(b, this.a);
				this.center = Proton.Util.initValue(center, false);
			}
		}


		Span.prototype = {
			getValue : function(INT) {
				if (this.isArray) {
					return this.a[Math.floor(this.a.length * Math.random())];
				} else {
					if (!this.center)
						return Proton.MathUtils.randomAToB(this.a, this.b, INT);
					else
						return Proton.MathUtils.randomFloating(this.a, this.b, INT);
				}
			}
		}

		Proton.Span = Span;
		Proton.getSpan = function(a, b, center) {
			return new Proton.Span(a, b, center);
		}



		function ColorSpan(color) {
			if (Proton.Util.isArray(color)) {
				this.colorArr = color;
			} else {
				this.colorArr = [color];
			}
		}


		Proton.Util.inherits(ColorSpan, Proton.Span);
		ColorSpan.prototype.getValue = function() {
			var color = this.colorArr[Math.floor(this.colorArr.length * Math.random())];
			if (color == 'random' || color == 'Random')
				return Proton.MathUtils.randomColor();
			else
				return color;
		}

		Proton.ColorSpan = ColorSpan;



		function Rectangle(x, y, w, h) {
			this.x = x;
			this.y = y;
			this.width = w;
			this.height = h;
			this.bottom = this.y + this.height;
			this.right = this.x + this.width;
		}


		Rectangle.prototype = {
			contains : function(x, y) {
				if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)
					return true
				else
					return false
			}
		}

		Proton.Rectangle = Rectangle;



		var Mat3 = Mat3 || {
			create : function(mat3) {
				var mat = new Float32Array(9);
				if (mat3)
					this.set(mat3, mat);
				return mat;
			},
			set : function(mat1, mat2) {
				for (var i = 0; i < 9; i++)
					mat2[i] = mat1[i];
				return mat2;
			},
			multiply : function(mat, mat2, mat3) {
				var a00 = mat[0], a01 = mat[1], a02 = mat[2], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b10 = mat2[3], b11 = mat2[4], b20 = mat2[6], b21 = mat2[7];

				mat3[0] = b00 * a00 + b01 * a10;
				mat3[1] = b00 * a01 + b01 * a11;
				mat3[2] = a02 * b02;
				mat3[3] = b10 * a00 + b11 * a10;
				mat3[4] = b10 * a01 + b11 * a11;
				mat3[6] = b20 * a00 + b21 * a10 + a20;
				mat3[7] = b20 * a01 + b21 * a11 + a21;
				return mat3;
			},
			inverse : function(mat, mat3) {
				var a00 = mat[0], a01 = mat[1], a10 = mat[3], a11 = mat[4], a20 = mat[6], a21 = mat[7], b01 = a11, b11 = -a10, b21 = a21 * a10 - a11 * a20, d = a00 * b01 + a01 * b11, id;
				id = 1 / d;
				mat3[0] = b01 * id;
				mat3[1] = (-a01 ) * id;
				mat3[3] = b11 * id;
				mat3[4] = a00 * id;
				mat3[6] = b21 * id;
				mat3[7] = (-a21 * a00 + a01 * a20) * id;
				return mat3;
			},
			multiplyVec2 : function(m, vec, mat3) {
				var x = vec[0], y = vec[1];
				mat3[0] = x * m[0] + y * m[3] + m[6];
				mat3[1] = x * m[1] + y * m[4] + m[7];
				return mat3;
			}
		}

		Proton.Mat3 = Mat3;



		Behaviour.id = 0;
		/**
		 * The Behaviour class is the base for the other Behaviour
		 *
		 * @class Behaviour
		 * @constructor
		 */
		function Behaviour(life, easing) {
			/**
			 * The behaviour's id;
			 * @property id
			 * @type {String} id
			 */
			this.id = 'Behaviour_' + Behaviour.id++;
			this.life = Proton.Util.initValue(life, Infinity);
			/**
			 * The behaviour's decaying trend, for example Proton.easeOutQuart;
			 * @property easing
			 * @type {String}
			 * @default Proton.easeLinear
			 */
			this.easing = Proton.ease.setEasingByName(easing);
			this.age = 0;
			this.energy = 1;
			/**
			 * The behaviour is Dead;
			 * @property dead
			 * @type {Boolean}
			 */
			this.dead = false;
			/**
			 * The behaviour's parents array;
			 * @property parents
			 * @type {Array}
			 */
			this.parents = [];
			/**
			 * The behaviour name;
			 * @property name
			 * @type {string}
			 */
			this.name = 'Behaviour';
		}


		Behaviour.prototype = {
			/**
			 * Reset this behaviour's parameters
			 *
			 * @method reset
			 * @param {Number} this behaviour's life
			 * @param {String} this behaviour's easing
			 */
			reset : function(life, easing) {
				this.life = Proton.Util.initValue(life, Infinity);
				this.easing = Proton.Util.initValue(easing, Proton.ease.setEasingByName(Proton.easeLinear));
			},
			/**
			 * Normalize a force by 1:100;
			 *
			 * @method normalizeForce
			 * @param {Proton.Vector2D} force 
			 */
			normalizeForce : function(force) {
				return force.multiplyScalar(Proton.MEASURE);
			},

			/**
			 * Normalize a value by 1:100;
			 *
			 * @method normalizeValue
			 * @param {Number} value
			 */
			normalizeValue : function(value) {
				return value * Proton.MEASURE;
			},

			/**
			 * Initialize the behaviour's parameters for all particles
			 *
			 * @method initialize
			 * @param {Proton.Particle} particle
			 */
			initialize : function(particle) {
			},
			
			/**
			 * Apply this behaviour for all particles every time
			 *
			 * @method applyBehaviour
			 * @param {Proton.Particle} particle
			 * @param {Number} the integrate time 1/ms
			 * @param {Int} the particle index
			 */
			applyBehaviour : function(particle, time, index) {
				this.age += time;
				if (this.age >= this.life || this.dead) {
					this.energy = 0;
					this.dead = true;
					this.destroy();
				} else {
					var scale = this.easing(particle.age / particle.life);
					this.energy = Math.max(1 - scale, 0);
				}
			},
			
			/**
			 * Destory this behaviour
			 * @method destroy
			 */
			destroy : function() {
				var index;
				var length = this.parents.length, i;
				for ( i = 0; i < length; i++) {
					this.parents[i].removeBehaviour(this);
				}

				this.parents = [];
			}
		};

		Proton.Behaviour = Behaviour;



		/**
		 * The number of particles per second emission (a [particle]/b [s]);
		 * @class Proton.Rate
		 * @constructor
		 * @param {Array or Number or Proton.Span} numpan the number of each emission;
		 * @param {Array or Number or Proton.Span} timepan the time of each emission;
		 * for example: new Proton.Rate(new Proton.Span(10, 20), new Proton.Span(.1, .25));
		 */
		function Rate(numpan, timepan) {
			this.numPan = Proton.Util.initValue(numpan, 1);
			this.timePan = Proton.Util.initValue(timepan, 1);
			this.numPan = Proton.Util.setSpanValue(this.numPan);
			this.timePan = Proton.Util.setSpanValue(this.timePan);
			this.startTime = 0;
			this.nextTime = 0;
			this.init();
		}


		Rate.prototype = {
			init : function() {
				this.startTime = 0;
				this.nextTime = this.timePan.getValue();
			},

			getValue : function(time) {
				this.startTime += time;
				if (this.startTime >= this.nextTime) {
					this.startTime = 0;
					this.nextTime = this.timePan.getValue();
					if (this.numPan.b == 1) {
						if (this.numPan.getValue(false) > 0.5)
							return 1;
						else
							return 0;
					} else {
						return this.numPan.getValue(true);
					}
				}
				return 0;
			}
		}

		Proton.Rate = Rate;



		function Initialize() {

		}


		Initialize.prototype.reset = function() {

		}

		Initialize.prototype.init = function(emitter, particle) {
			if (particle) {
				this.initialize(particle);
			} else {
				this.initialize(emitter);
			}
		};

		///sub class init
		Initialize.prototype.initialize = function(target) {
		};

		Proton.Initialize = Initialize;



		var InitializeUtil = {

			initialize : function(emitter, particle, initializes) {
				var length = initializes.length, i;
				for ( i = 0; i < length; i++) {
					if (initializes[i] instanceof Proton.Initialize)
						initializes[i].init(emitter, particle);
					else
						Proton.InitializeUtil.init(emitter, particle, initializes[i]);
				}

				Proton.InitializeUtil.bindEmitter(emitter, particle);
			},
			
			//////////////////////init//////////////////////
			init : function(emitter, particle, initialize) {
				Proton.Util.setPrototypeByObject(particle, initialize);
				Proton.Util.setVector2DByObject(particle, initialize);
			},

			bindEmitter : function(emitter, particle) {
				if (emitter.bindEmitter) {
					particle.p.add(emitter.p);
					particle.v.add(emitter.v);
					particle.a.add(emitter.a);
					particle.v.rotate(Proton.MathUtils.degreeTransform(emitter.rotation));
				}
			}
			//////////////////////init//////////////////////
		}

		Proton.InitializeUtil = InitializeUtil;



		function Life(a, b, c) {
			Life._super_.call(this);
			this.lifePan = Proton.Util.setSpanValue(a, b, c);
		}


		Proton.Util.inherits(Life, Proton.Initialize);
		Life.prototype.initialize = function(target) {
			if (this.lifePan.a == Infinity)
				target.life = Infinity;
			else
				target.life = this.lifePan.getValue();
		};

		Proton.Life = Life;



		function Position(zone) {
			Position._super_.call(this);
			this.zone = Proton.Util.initValue(zone, new Proton.PointZone());
		}


		Proton.Util.inherits(Position, Proton.Initialize);
		Position.prototype.reset = function(zone) {
			this.zone = Proton.Util.initValue(zone, new Proton.PointZone());
		};

		Position.prototype.initialize = function(target) {
			this.zone.getPosition();
			target.p.x = this.zone.vector.x;
			target.p.y = this.zone.vector.y;
		};

		Proton.Position = Position;
		Proton.P = Position;



		//radius and tha
		function Velocity(rpan, thapan, type) {
			Velocity._super_.call(this);
			this.rPan = Proton.Util.setSpanValue(rpan);
			this.thaPan = Proton.Util.setSpanValue(thapan);
			this.type = Proton.Util.initValue(type, 'vector');
		}


		Proton.Util.inherits(Velocity, Proton.Initialize);

		Velocity.prototype.reset = function(rpan, thapan, type) {
			this.rPan = Proton.Util.setSpanValue(rpan);
			this.thaPan = Proton.Util.setSpanValue(thapan);
			this.type = Proton.Util.initValue(type, 'vector');
		};

		Velocity.prototype.normalizeVelocity = function(vr) {
			return vr * Proton.MEASURE;
		}

		Velocity.prototype.initialize = function(target) {
			if (this.type == 'p' || this.type == 'P' || this.type == 'polar') {
				var polar2d = new Proton.Polar2D(this.normalizeVelocity(this.rPan.getValue()), this.thaPan.getValue() * Math.PI / 180);
				target.v.x = polar2d.getX();
				target.v.y = polar2d.getY();
			} else {
				target.v.x = this.normalizeVelocity(this.rPan.getValue());
				target.v.y = this.normalizeVelocity(this.thaPan.getValue());
			}
		};

		Proton.Velocity = Velocity;
		Proton.V = Velocity;



		function Mass(a, b, c) {
			Mass._super_.call(this);
			this.massPan = Proton.Util.setSpanValue(a, b, c);
		}


		Proton.Util.inherits(Mass, Proton.Initialize);
		Mass.prototype.initialize = function(target) {
			target.mass = this.massPan.getValue();
		};

		Proton.Mass = Mass;



		function Radius(a, b, c) {
			Radius._super_.call(this);
			this.radius = Proton.Util.setSpanValue(a, b, c);
		}


		Proton.Util.inherits(Radius, Proton.Initialize);
		Radius.prototype.reset = function(a, b, c) {
			this.radius = Proton.Util.setSpanValue(a, b, c);
		};

		Radius.prototype.initialize = function(particle) {
			particle.radius = this.radius.getValue();
			particle.transform.oldRadius = particle.radius;
		};

		Proton.Radius = Radius;



		function ImageTarget(image, w, h) {
			ImageTarget._super_.call(this);
			this.image = this.setSpanValue(image);
			this.w = Proton.Util.initValue(w, 20);
			this.h = Proton.Util.initValue(h, this.w);
		}


		Proton.Util.inherits(ImageTarget, Proton.Initialize);
		ImageTarget.prototype.initialize = function(particle) {
			var imagetarget = this.image.getValue();
			if ( typeof (imagetarget) == 'string') {
				particle.target = {
					width : this.w,
					height : this.h,
					src : imagetarget
				}
			} else {
				particle.target = imagetarget;
			}
		};

		ImageTarget.prototype.setSpanValue = function(color) {
			if ( color instanceof Proton.ColorSpan) {
				return color;
			} else {
				return new Proton.ColorSpan(color);
			}
		}

		Proton.ImageTarget = ImageTarget;



		function Force(fx, fy, life, easing) {
			Force._super_.call(this, life, easing);
			this.force = this.normalizeForce(new Proton.Vector2D(fx, fy));
			this.name = "Force";
		}


		Proton.Util.inherits(Force, Proton.Behaviour);
		Force.prototype.reset = function(fx, fy, life, easing) {
			this.force = this.normalizeForce(new Proton.Vector2D(fx, fy));
			if (life)
				Force._super_.prototype.reset.call(this, life, easing);
		}

		Force.prototype.applyBehaviour = function(particle, time, index) {
			Force._super_.prototype.applyBehaviour.call(this, particle, time, index);
			particle.a.add(this.force);
		};

		Proton.Force = Force;
		Proton.F = Force;



		function Attraction(targetPosition, force, radius, life, easing) {
			Attraction._super_.call(this, life, easing);
			this.targetPosition = Proton.Util.initValue(targetPosition, new Proton.Vector2D);
			this.radius = Proton.Util.initValue(radius, 1000);
			this.force = Proton.Util.initValue(this.normalizeValue(force), 100);
			this.radiusSq = this.radius * this.radius
			this.attractionForce = new Proton.Vector2D();
			this.lengthSq = 0;
			this.name = "Attraction";
		}


		Proton.Util.inherits(Attraction, Proton.Behaviour);
		Attraction.prototype.reset = function(targetPosition, force, radius, life, easing) {
			this.targetPosition = Proton.Util.initValue(targetPosition, new Proton.Vector2D);
			this.radius = Proton.Util.initValue(radius, 1000);
			this.force = Proton.Util.initValue(this.normalizeValue(force), 100);
			this.radiusSq = this.radius * this.radius
			this.attractionForce = new Proton.Vector2D();
			this.lengthSq = 0;
			if (life)
				Attraction._super_.prototype.reset.call(this, life, easing);
		}

		Attraction.prototype.applyBehaviour = function(particle, time, index) {
			Attraction._super_.prototype.applyBehaviour.call(this, particle, time, index);
			this.attractionForce.copy(this.targetPosition);
			this.attractionForce.sub(particle.p);
			this.lengthSq = this.attractionForce.lengthSq();
			if (this.lengthSq > 0.000004 && this.lengthSq < this.radiusSq) {
				this.attractionForce.normalize();
				this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);
				this.attractionForce.multiplyScalar(this.force);
				particle.a.add(this.attractionForce);
			}
		};

		Proton.Attraction = Attraction;




		function RandomDrift(driftX, driftY, delay, life, easing) {
			RandomDrift._super_.call(this, life, easing);
			this.reset(driftX, driftY, delay);
			this.time = 0;
			this.name = "RandomDrift";
		}


		Proton.Util.inherits(RandomDrift, Proton.Behaviour);
		RandomDrift.prototype.reset = function(driftX, driftY, delay, life, easing) {
			this.panFoce = new Proton.Vector2D(driftX, driftY);
			this.panFoce = this.normalizeForce(this.panFoce);
			this.delay = delay;
			if (life)
				RandomDrift._super_.prototype.reset.call(this, life, easing);
		}

		RandomDrift.prototype.applyBehaviour = function(particle, time, index) {
			RandomDrift._super_.prototype.applyBehaviour.call(this, particle, time, index);
			this.time += time;
			if (this.time >= this.delay) {
				
				particle.a.addXY(Proton.MathUtils.randomAToB(-this.panFoce.x, this.panFoce.x), Proton.MathUtils.randomAToB(-this.panFoce.y, this.panFoce.y));
				this.time = 0;
			};
		};

		Proton.RandomDrift = RandomDrift;



		function Repulsion(targetPosition, force, radius, life, easing) {
			Repulsion._super_.call(this, targetPosition, force, radius, life, easing);
			this.force *= -1;
			this.name = "Repulsion";
		}


		Proton.Util.inherits(Repulsion, Proton.Attraction);
		Repulsion.prototype.reset = function(targetPosition, force, radius, life, easing) {
			Repulsion._super_.prototype.reset.call(this, targetPosition, force, radius, life, easing);
			this.force *= -1;
		}
		Proton.Repulsion = Repulsion;




		function Gravity(g, life, easing) {
			Gravity._super_.call(this, 0, g, life, easing);
			this.name = "Gravity";
		}


		Proton.Util.inherits(Gravity, Proton.Force);
		Gravity.prototype.reset = function(g, life, easing) {
			Gravity._super_.prototype.reset.call(this, 0, g, life, easing);
		}
		Proton.Gravity = Gravity;
		Proton.G = Gravity;



		//can use Collision(emitter,true,function(){}) or Collision();
		function Collision(emitter, mass, callback, life, easing) {
			Collision._super_.call(this, life, easing);
			this.reset(emitter, mass, callback);
			this.name = "Collision";
		}


		Proton.Util.inherits(Collision, Proton.Behaviour);
		Collision.prototype.reset = function(emitter, mass, callback, life, easing) {
			this.emitter = Proton.Util.initValue(emitter, null);
			this.mass = Proton.Util.initValue(mass, true);
			this.callback = Proton.Util.initValue(callback, null);
			this.collisionPool = [];
			this.delta = new Proton.Vector2D();
			if (life)
				Collision._super_.prototype.reset.call(this, life, easing);
		}

		Collision.prototype.applyBehaviour = function(particle, time, index) {
			var newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);
			var otherParticle;
			var lengthSq;
			var overlap;
			var averageMass1, averageMass2;
			var length = newPool.length;
			for (var i = 0; i < length; i++) {
				otherParticle = newPool[i];
				if (otherParticle !== particle) {
					this.delta.copy(otherParticle.p);
					this.delta.sub(particle.p);
					lengthSq = this.delta.lengthSq();
					distance = particle.radius + otherParticle.radius;

					if (lengthSq <= distance * distance) {
						overlap = distance - Math.sqrt(lengthSq);
						overlap += 0.5;
						totalMass = particle.mass + otherParticle.mass;
						averageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;
						averageMass2 = this.mass ? particle.mass / totalMass : 0.5;
						particle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));
						otherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));
						if (this.callback)
							this.callback(particle, otherParticle);
					}
				}
			}
		};

		Proton.Collision = Collision;




		function CrossZone(zone, crossType, life, easing) {
			CrossZone._super_.call(this, life, easing);
			this.reset(zone, crossType);
			///dead /bound /cross
			this.name = "CrossZone";
		}


		Proton.Util.inherits(CrossZone, Proton.Behaviour);
		CrossZone.prototype.reset = function(zone, crossType, life, easing) {
			this.zone = zone;
			this.zone.crossType = Proton.Util.initValue(crossType, "dead");
			if (life)
				CrossZone._super_.prototype.reset.call(this, life, easing);
		}

		CrossZone.prototype.applyBehaviour = function(particle, time, index) {
			CrossZone._super_.prototype.applyBehaviour.call(this, particle, time, index);
			this.zone.crossing(particle);
		};

		Proton.CrossZone = CrossZone;



		function Alpha(a, b, life, easing) {
			Alpha._super_.call(this, life, easing);
			this.reset(a, b);
			/**
			 * The Behaviour name;
			 * @property name
			 * @type {string}
			 */
			this.name = "Alpha";
		}


		Proton.Util.inherits(Alpha, Proton.Behaviour);
		Alpha.prototype.reset = function(a, b, life, easing) {
			if (b == null || b == undefined)
				this.same = true;
			else
				this.same = false;
			this.a = Proton.Util.setSpanValue(Proton.Util.initValue(a, 1));
			this.b = Proton.Util.setSpanValue(b);
			if (life)
				Alpha._super_.prototype.reset.call(this, life, easing);
		}

		Alpha.prototype.initialize = function(particle) {
			particle.transform.alphaA = this.a.getValue();
			if (this.same)
				particle.transform.alphaB = particle.transform.alphaA;
			else
				particle.transform.alphaB = this.b.getValue();
		};

		Alpha.prototype.applyBehaviour = function(particle, time, index) {
			Alpha._super_.prototype.applyBehaviour.call(this, particle, time, index);
			particle.alpha = particle.transform.alphaB + (particle.transform.alphaA - particle.transform.alphaB) * this.energy;
			if (particle.alpha < 0.001)
				particle.alpha = 0;
		};

		Proton.Alpha = Alpha;



		function Scale(a, b, life, easing) {
			Scale._super_.call(this, life, easing);
			this.reset(a, b);
			this.name = "Scale";
		}


		Proton.Util.inherits(Scale, Proton.Behaviour);
		Scale.prototype.reset = function(a, b, life, easing) {
			if (b == null || b == undefined)
				this.same = true;
			else
				this.same = false;
			this.a = Proton.Util.setSpanValue(Proton.Util.initValue(a, 1));
			this.b = Proton.Util.setSpanValue(b);
			if (life)
				Scale._super_.prototype.reset.call(this, life, easing);
		}

		Scale.prototype.initialize = function(particle) {
			particle.transform.scaleA = this.a.getValue();
			particle.transform.oldRadius = particle.radius;
			if (this.same)
				particle.transform.scaleB = particle.transform.scaleA;
			else
				particle.transform.scaleB = this.b.getValue();

		};

		Scale.prototype.applyBehaviour = function(particle, time, index) {
			Scale._super_.prototype.applyBehaviour.call(this, particle, time, index);
			particle.scale = particle.transform.scaleB + (particle.transform.scaleA - particle.transform.scaleB) * this.energy;
			if (particle.scale < 0.0001)
				particle.scale = 0;
			particle.radius = particle.transform.oldRadius * particle.scale;
		};

		Proton.Scale = Scale;



		function Rotate(a, b, style, life, easing) {
			Rotate._super_.call(this, life, easing);
			this.reset(a, b, style);
			this.name = "Rotate";
		}


		Proton.Util.inherits(Rotate, Proton.Behaviour);
		Rotate.prototype.reset = function(a, b, style, life, easing) {
			if (b == null || b == undefined)
				this.same = true;
			else
				this.same = false;
			this.a = Proton.Util.setSpanValue(Proton.Util.initValue(a, "Velocity"));
			this.b = Proton.Util.setSpanValue(Proton.Util.initValue(b, 0));
			this.style = Proton.Util.initValue(style, 'to');
			if (life)
				Rotate._super_.prototype.reset.call(this, life, easing);
		}

		Rotate.prototype.initialize = function(particle) {
			particle.rotation = this.a.getValue();
			particle.transform.rotationA = this.a.getValue();
			if (!this.same)
				particle.transform.rotationB = this.b.getValue();
		};

		Rotate.prototype.applyBehaviour = function(particle, time, index) {
			Rotate._super_.prototype.applyBehaviour.call(this, particle, time, index);
			if (!this.same) {
				if (this.style == 'to' || this.style == 'TO' || this.style == '_') {
					particle.rotation += particle.transform.rotationB + (particle.transform.rotationA - particle.transform.rotationB) * this.energy
				} else {
					particle.rotation += particle.transform.rotationB;
				}
			} else if (this.a.a == "V" || this.a.a == "Velocity" || this.a.a == "v") {
				//beta...
				particle.rotation = particle.getDirection();
			}
		};

		Proton.Rotate = Rotate;



		function Color(color1, color2, life, easing) {
			Color._super_.call(this, life, easing);
			this.reset(color1, color2);
			this.name = "Color";
		}


		Proton.Util.inherits(Color, Proton.Behaviour);
		Color.prototype.reset = function(color1, color2, life, easing) {
			this.color1 = this.setSpanValue(color1);
			this.color2 = this.setSpanValue(color2);
			if (life)
				Color._super_.prototype.reset.call(this, life, easing);
		}

		Color.prototype.initialize = function(particle) {
			particle.color = this.color1.getValue();
			particle.transform.beginRGB = Proton.Util.hexToRGB(particle.color);

			if (this.color2)
				particle.transform.endRGB = Proton.Util.hexToRGB(this.color2.getValue());
		};

		Color.prototype.applyBehaviour = function(particle, time, index) {
			if (this.color2) {
				Color._super_.prototype.applyBehaviour.call(this, particle, time, index);
				particle.transform.rgb.r = particle.transform.endRGB.r + (particle.transform.beginRGB.r - particle.transform.endRGB.r) * this.energy;
				particle.transform.rgb.g = particle.transform.endRGB.g + (particle.transform.beginRGB.g - particle.transform.endRGB.g) * this.energy;
				particle.transform.rgb.b = particle.transform.endRGB.b + (particle.transform.beginRGB.b - particle.transform.endRGB.b) * this.energy;
				particle.transform.rgb.r = parseInt(particle.transform.rgb.r, 10);
				particle.transform.rgb.g = parseInt(particle.transform.rgb.g, 10);
				particle.transform.rgb.b = parseInt(particle.transform.rgb.b, 10);
			} else {
				particle.transform.rgb.r = particle.transform.beginRGB.r;
				particle.transform.rgb.g = particle.transform.beginRGB.g;
				particle.transform.rgb.b = particle.transform.beginRGB.b;

			}
		};

		Color.prototype.setSpanValue = function(color) {
			if (color) {
				if ( color instanceof Proton.ColorSpan) {
					return color;
				} else {
					return new Proton.ColorSpan(color);
				}
			} else {
				return null;
			}
		}

		Proton.Color = Color;



		function GravityWell(centerPoint, force, life, easing) {
			GravityWell._super_.call(this, life, easing);
			this.distanceVec = new Proton.Vector2D();
			this.centerPoint = Proton.Util.initValue(centerPoint, new Proton.Vector2D);
			this.force = Proton.Util.initValue(this.normalizeValue(force), 100);
			this.name = "GravityWell";
		}


		Proton.Util.inherits(GravityWell, Proton.Behaviour);
		GravityWell.prototype.reset = function(centerPoint, force, life, easing) {
			this.distanceVec = new Proton.Vector2D();
			this.centerPoint = Proton.Util.initValue(centerPoint, new Proton.Vector2D);
			this.force = Proton.Util.initValue(this.normalizeValue(force), 100);
			if (life)
				GravityWell._super_.prototype.reset.call(this, life, easing);
		};
		GravityWell.prototype.initialize = function(particle) {

		};

		GravityWell.prototype.applyBehaviour = function(particle, time, index) {
			this.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);
			var distanceSq = this.distanceVec.lengthSq();
			if (distanceSq != 0) {
				var distance = this.distanceVec.length();
				var factor = (this.force * time ) / (distanceSq * distance );
				particle.v.x += factor * this.distanceVec.x;
				particle.v.y += factor * this.distanceVec.y;
			}
		}

		Proton.GravityWell = GravityWell;



		Emitter.ID = 0;
		/**
		 * You can use this emit particles.
		 *
		 * It will dispatch follow events:
		 * Proton.PARTICLE_CREATED
		 * Proton.PARTICLE_UPDATA
		 * Proton.PARTICLE_DEAD
		 *
		 * @class Proton.Emitter
		 * @constructor
		 * @param {Object} pObj the parameters object;
		 * for example {damping:0.01,bindEmitter:false}
		 */
		function Emitter(pObj) {
			this.initializes = [];
			this.particles = [];
			this.behaviours = [];
			this.emitTime = 0;
			this.emitTotalTimes = -1;
			/**
			 * The friction coefficient for all particle emit by This;
			 * @property damping
			 * @type {Number}
			 * @default 0.006
			 */
			this.damping = .006;
			/**
			 * If bindEmitter the particles can bind this emitter's property;
			 * @property bindEmitter
			 * @type {Boolean}
			 * @default true
			 */
			this.bindEmitter = true;
			/**
			 * The number of particles per second emit (a [particle]/b [s]);
			 * @property rate
			 * @type {Proton.Rate}
			 * @default Proton.Rate(1, .1)
			 */
			this.rate = new Proton.Rate(1, .1);
			Emitter._super_.call(this, pObj);
			/**
			 * The emitter's id;
			 * @property id
			 * @type {String} id
			 */
			this.id = 'emitter_' + Emitter.ID++;
		};

		Proton.Util.inherits(Emitter, Proton.Particle);
		Proton.EventDispatcher.initialize(Emitter.prototype);
		/**
		 * start emit particle
		 * @method emit
		 * @param {Number} emitTime begin emit time;
		 * @param {String} life the life of this emitter
		 */
		Emitter.prototype.emit = function(emitTime, life) {
			this.emitTime = 0;
			this.emitTotalTimes = Proton.Util.initValue(emitTime, Infinity);

			if (life == true || life == 'life' || life == 'destroy') {
				if (emitTime == 'once')
					this.life = 1;
				else
					this.life = this.emitTotalTimes;

			} else if (!isNaN(life)) {
				this.life = life;
			}

			this.rate.init();
		};

		/**
		 * stop emiting
		 * @method stopEmit
		 */
		Emitter.prototype.stopEmit = function() {
			this.emitTotalTimes = -1;
			this.emitTime = 0;
		};

		/**
		 * remove current all particles
		 * @method removeAllParticles
		 */
		Emitter.prototype.removeAllParticles = function() {
			for (var i = 0; i < this.particles.length; i++)
				this.particles[i].dead = true;
		};
		/**
		 * create single particle;
		 * 
		 * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})
		 * @method removeAllParticles
		 */
		Emitter.prototype.createParticle = function(initialize, behaviour) {
			var particle = Proton.pool.get(Proton.Particle);
			this.setupParticle(particle, initialize, behaviour);
			this.dispatchEvent(Proton.PARTICLE_CREATED, particle);

			return particle;
		};
		/**
		 * add initialize to this emitter
		 * @method addSelfInitialize
		 */
		Emitter.prototype.addSelfInitialize = function(pObj) {
			if (pObj['init']) {
				pObj.init(this);
			} else {
				this.initAll();
			}
		};
		/**
		 * add the Initialize to particles;
		 * 
		 * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);
		 * @method addInitialize
		 * @param {Proton.Initialize} initialize like this new Proton.Radius(1, 12)
		 */
		Emitter.prototype.addInitialize = function() {
			var length = arguments.length, i;
			for ( i = 0; i < length; i++) {
				this.initializes.push(arguments[i]);
			}
		};
		/**
		 * remove the Initialize
		 * @method removeInitialize
		 * @param {Proton.Initialize} initialize a initialize
		 */
		Emitter.prototype.removeInitialize = function(initializer) {
			var index = this.initializes.indexOf(initializer);
			if (index > -1) {
				this.initializes.splice(index, 1);
			}
		};

		/**
		 * remove all Initializes
		 * @method removeInitializers
		 */
		Emitter.prototype.removeInitializers = function() {
			Proton.Util.destroyArray(this.initializes);
		};
		/**
		 * add the Behaviour to particles;
		 * 
		 * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);
		 * @method addBehaviour
		 * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')
		 */
		Emitter.prototype.addBehaviour = function() {
			var length = arguments.length, i;
			for ( i = 0; i < length; i++) {
				this.behaviours.push(arguments[i]);
				if (arguments[i].hasOwnProperty("parents"))
					arguments[i].parents.push(this);
			}
		};
		/**
		 * remove the Behaviour
		 * @method removeBehaviour
		 * @param {Proton.Behaviour} behaviour a behaviour
		 */
		Emitter.prototype.removeBehaviour = function(behaviour) {
			var index = this.behaviours.indexOf(behaviour);
			if (index > -1)
				this.behaviours.splice(index, 1);
		};
		/**
		 * remove all behaviours
		 * @method removeAllBehaviours
		 */
		Emitter.prototype.removeAllBehaviours = function() {
			Proton.Util.destroyArray(this.behaviours);
		};

		Emitter.prototype.integrate = function(time) {
			var damping = 1 - this.damping;
			Proton.integrator.integrate(this, time, damping);
			var length = this.particles.length, i;
			for ( i = 0; i < length; i++) {
				var particle = this.particles[i];
				particle.update(time, i);
				Proton.integrator.integrate(particle, time, damping);

				this.dispatchEvent(Proton.PARTICLE_UPDATE, particle);
			}
		};

		Emitter.prototype.emitting = function(time) {
			if (this.emitTotalTimes == 'once') {
				var length = this.rate.getValue(99999), i;
				for ( i = 0; i < length; i++) {
					this.createParticle();
				}

				this.emitTotalTimes = 'none';
			} else if (!isNaN(this.emitTotalTimes)) {
				this.emitTime += time;
				if (this.emitTime < this.emitTotalTimes) {
					var length = this.rate.getValue(time), i;
					for ( i = 0; i < length; i++) {
						this.createParticle();
					}
				}
			}
		}

		Emitter.prototype.update = function(time) {
			this.age += time;
			if (this.age >= this.life || this.dead) {
				this.destroy();
			}

			this.emitting(time);
			this.integrate(time);
			var particle;
			var length = this.particles.length, k;
			for ( k = length - 1; k >= 0; k--) {
				particle = this.particles[k];
				if (particle.dead) {
					this.dispatchEvent(Proton.PARTICLE_DEAD , particle);

					Proton.pool.set(particle);
					this.particles.splice(k, 1);
				}
			}
		};

		Emitter.prototype.setupParticle = function(particle, initialize, behaviour) {
			var initializes = this.initializes;
			var behaviours = this.behaviours;

			if (initialize) {
				if ( initialize instanceof Array)
					initializes = initialize;
				else
					initializes = [initialize];
			}

			if (behaviour) {
				if ( behaviour instanceof Array)
					behaviours = behaviour;
				else
					behaviours = [behaviour];
			}

			particle.reset();
			Proton.InitializeUtil.initialize(this, particle, initializes);
			particle.addBehaviours(behaviours);
			particle.parent = this;
			this.particles.push(particle);
		};

		/**
		 * Destory this Emitter
		 * @method destroy
		 */
		Emitter.prototype.destroy = function() {
			this.dead = true;
			this.emitTotalTimes = -1;
			if (this.particles.length == 0) {
				this.removeInitializers();
				this.removeAllBehaviours();

				if (this.parent)
					this.parent.removeEmitter(this);
			}
		}

		Proton.Emitter = Emitter;



		/**
		 * The BehaviourEmitter class inherits from Proton.Emitter
		 *
		 * use the BehaviourEmitter you can add behaviours to self;
		 * @class Proton.BehaviourEmitter
		 * @constructor
		 * @param {Object} pObj the parameters object;
		 */
		function BehaviourEmitter(pObj) {
			this.selfBehaviours = [];
			BehaviourEmitter._super_.call(this, pObj);
		};

		Proton.Util.inherits(BehaviourEmitter, Proton.Emitter);
		/**
		 * add the Behaviour to emitter;
		 *
		 * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);
		 * @method addSelfBehaviour
		 * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')
		 */
		BehaviourEmitter.prototype.addSelfBehaviour = function() {
			var length = arguments.length, i;
			for ( i = 0; i < length; i++) {
				this.selfBehaviours.push(arguments[i]);
			}
		};
		/**
		 * remove the Behaviour for self
		 * @method removeSelfBehaviour
		 * @param {Proton.Behaviour} behaviour a behaviour
		 */
		BehaviourEmitter.prototype.removeSelfBehaviour = function(behaviour) {
			var index = this.selfBehaviours.indexOf(behaviour);
			if (index > -1)
				this.selfBehaviours.splice(index, 1);
		};

		BehaviourEmitter.prototype.update = function(time) {
			BehaviourEmitter._super_.prototype.update.call(this, time);

			if (!this.sleep) {
				var length = this.selfBehaviours.length, i;
				for ( i = 0; i < length; i++) {
					this.selfBehaviours[i].applyBehaviour(this, time, i)
				}
			}
		}

		Proton.BehaviourEmitter = BehaviourEmitter;



		/**
		 * The FollowEmitter class inherits from Proton.Emitter
		 *
		 * use the FollowEmitter will emit particle when mousemoving
		 *
		 * @class Proton.FollowEmitter
		 * @constructor
		 * @param {Element} mouseTarget mouseevent's target;
		 * @param {Number} ease the easing of following speed;
		 * @default 0.7
		 * @param {Object} pObj the parameters object;
		 */
		function FollowEmitter(mouseTarget, ease, pObj) {
			this.mouseTarget = Proton.Util.initValue(mouseTarget, window);
			this.ease = Proton.Util.initValue(ease, .7);
			this._allowEmitting = false;
			this.initEventHandler();
			FollowEmitter._super_.call(this, pObj);
		};

		Proton.Util.inherits(FollowEmitter, Proton.Emitter);
		FollowEmitter.prototype.initEventHandler = function() {
			var self = this;
			this.mousemoveHandler = function(e) {
				self.mousemove.call(self, e);
			};

			this.mousedownHandler = function(e) {
				self.mousedown.call(self, e);
			};

			this.mouseupHandler = function(e) {
				self.mouseup.call(self, e);
			};
			this.mouseTarget.addEventListener('mousemove', this.mousemoveHandler, false);
		}
		/**
		 * start emit particle
		 * @method emit
		 */
		FollowEmitter.prototype.emit = function() {
			this._allowEmitting = true;
		}
		/**
		 * stop emiting
		 * @method stopEmit
		 */
		FollowEmitter.prototype.stopEmit = function() {
			this._allowEmitting = false;
		}

		FollowEmitter.prototype.mousemove = function(e) {
			if (e.layerX || e.layerX == 0) {
				this.p.x += (e.layerX - this.p.x) * this.ease;
				this.p.y += (e.layerY - this.p.y) * this.ease;
			} else if (e.offsetX || e.offsetX == 0) {
				this.p.x += (e.offsetX - this.p.x) * this.ease;
				this.p.y += (e.offsetY - this.p.y) * this.ease;
			}
			if (this._allowEmitting)
				FollowEmitter._super_.prototype.emit.call(this, 'once');
		};
		/**
		 * Destory this Emitter
		 * @method destroy
		 */
		FollowEmitter.prototype.destroy = function() {
			FollowEmitter._super_.prototype.destroy.call(this);
			this.mouseTarget.removeEventListener('mousemove', this.mousemoveHandler, false);
		}

		Proton.FollowEmitter = FollowEmitter;



		var ease = ease || {
			easeLinear : function(value) {
				return value;
			},

			easeInQuad : function(value) {
				return Math.pow(value, 2);
			},

			easeOutQuad : function(value) {
				return -(Math.pow((value - 1), 2) - 1);
			},

			easeInOutQuad : function(value) {
				if ((value /= 0.5) < 1)
					return 0.5 * Math.pow(value, 2);
				return -0.5 * ((value -= 2) * value - 2);
			},

			easeInCubic : function(value) {
				return Math.pow(value, 3);
			},

			easeOutCubic : function(value) {
				return (Math.pow((value - 1), 3) + 1);
			},

			easeInOutCubic : function(value) {
				if ((value /= 0.5) < 1)
					return 0.5 * Math.pow(value, 3);
				return 0.5 * (Math.pow((value - 2), 3) + 2);
			},

			easeInQuart : function(value) {
				return Math.pow(value, 4);
			},

			easeOutQuart : function(value) {
				return -(Math.pow((value - 1), 4) - 1);
			},

			easeInOutQuart : function(value) {
				if ((value /= 0.5) < 1)
					return 0.5 * Math.pow(value, 4);
				return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);
			},
		
			easeInSine : function(value) {
				return -Math.cos(value * (Math.PI / 2)) + 1;
			},

			easeOutSine : function(value) {
				return Math.sin(value * (Math.PI / 2));
			},

			easeInOutSine : function(value) {
				return (-0.5 * (Math.cos(Math.PI * value) - 1));
			},

			easeInExpo : function(value) {
				return (value === 0) ? 0 : Math.pow(2, 10 * (value - 1));
			},

			easeOutExpo : function(value) {
				return (value === 1) ? 1 : -Math.pow(2, -10 * value) + 1;
			},

			easeInOutExpo : function(value) {
				if (value === 0)
					return 0;
				if (value === 1)
					return 1;
				if ((value /= 0.5) < 1)
					return 0.5 * Math.pow(2, 10 * (value - 1));
				return 0.5 * (-Math.pow(2, -10 * --value) + 2);
			},

			easeInCirc : function(value) {
				return -(Math.sqrt(1 - (value * value)) - 1);
			},

			easeOutCirc : function(value) {
				return Math.sqrt(1 - Math.pow((value - 1), 2));
			},

			easeInOutCirc : function(value) {
				if ((value /= 0.5) < 1)
					return -0.5 * (Math.sqrt(1 - value * value) - 1);
				return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);
			},
			
			easeInBack : function(value) {
				var s = 1.70158;
				return (value) * value * ((s + 1) * value - s);
			},

			easeOutBack : function(value) {
				var s = 1.70158;
				return ( value = value - 1) * value * ((s + 1) * value + s) + 1;
			},

			easeInOutBack : function(value) {
				var s = 1.70158;
				if ((value /= 0.5) < 1)
					return 0.5 * (value * value * (((s *= (1.525)) + 1) * value - s));
				return 0.5 * ((value -= 2) * value * (((s *= (1.525)) + 1) * value + s) + 2);
			},

			setEasingByName : function(name) {
				switch (name) {
					case 'easeLinear':
						return Proton.ease.easeLinear;
						break;

					case 'easeInQuad':
						return Proton.ease.easeInQuad;
						break;

					case 'easeOutQuad':
						return Proton.ease.easeOutQuad;
						break;

					case 'easeInOutQuad':
						return Proton.ease.easeInOutQuad;
						break;

					case 'easeInCubic':
						return Proton.ease.easeInCubic;
						break;

					case 'easeOutCubic':
						return Proton.ease.easeOutCubic;
						break;

					case 'easeInOutCubic':
						return Proton.ease.easeInOutCubic;
						break;

					case 'easeInQuart':
						return Proton.ease.easeInQuart;
						break;

					case 'easeOutQuart':
						return Proton.ease.easeOutQuart;
						break;

					case 'easeInOutQuart':
						return Proton.ease.easeInOutQuart;
						break;

					case 'easeInSine':
						return Proton.ease.easeInSine;
						break;

					case 'easeOutSine':
						return Proton.ease.easeOutSine;
						break;

					case 'easeInOutSine':
						return Proton.ease.easeInOutSine;
						break;

					case 'easeInExpo':
						return Proton.ease.easeInExpo;
						break;

					case 'easeOutExpo':
						return Proton.ease.easeOutExpo;
						break;

					case 'easeInOutExpo':
						return Proton.ease.easeInOutExpo;
						break;

					case 'easeInCirc':
						return Proton.ease.easeInCirc;
						break;

					case 'easeOutCirc':
						return Proton.ease.easeOutCirc;
						break;

					case 'easeInOutCirc':
						return Proton.ease.easeInOutCirc;
						break;

					case 'easeInBack':
						return Proton.ease.easeInBack;
						break;

					case 'easeOutBack':
						return Proton.ease.easeOutBack;
						break;

					case 'easeInOutBack':
						return Proton.ease.easeInOutBack;
						break;
					
					default:
						return Proton.ease.easeLinear;
						break;
				}
			}
		}

		Proton.ease = ease;
		Proton.easeLinear = 'easeLinear';

		Proton.easeInQuad = 'easeInQuad';
		Proton.easeOutQuad = 'easeOutQuad';
		Proton.easeInOutQuad = 'easeInOutQuad';

		Proton.easeInCubic = 'easeInCubic';
		Proton.easeOutCubic = 'easeOutCubic';
		Proton.easeInOutCubic = 'easeInOutCubic';

		Proton.easeInQuart = 'easeInQuart';
		Proton.easeOutQuart = 'easeOutQuart';
		Proton.easeInOutQuart = 'easeInOutQuart';

		Proton.easeInSine = 'easeInSine';
		Proton.easeOutSine = 'easeOutSine';
		Proton.easeInOutSine = 'easeInOutSine';

		Proton.easeInExpo = 'easeInExpo';
		Proton.easeOutExpo = 'easeOutExpo';
		Proton.easeInOutExpo = 'easeInOutExpo';

		Proton.easeInCirc = 'easeInCirc';
		Proton.easeOutCirc = 'easeOutCirc';
		Proton.easeInOutCirc = 'easeInOutCirc';

		Proton.easeInBack = 'easeInBack';
		Proton.easeOutBack = 'easeOutBack';
		Proton.easeInOutBack = 'easeInOutBack';
		


	//the own renderer

		function Renderer(type, proton, element) {
			///element dom/div canvas/canvas easeljs/cantainer(or stage)
			this.element = element;
			this.type = Proton.Util.initValue(type, 'canvas');
			this.proton = proton;
			this.renderer = this.getRenderer();
		}


		Renderer.prototype = {
			start : function() {
				this.addEventHandler();
				this.renderer.start();
			},
			stop : function() {
				this.renderer.stop();
			},

			resize : function(width, height) {
				this.renderer.resize(width, height);
			},
			setStroke : function(color, thinkness) {
				if (this.renderer.hasOwnProperty('stroke'))
					this.renderer.setStroke(color, thinkness);
				else
					alert('Sorry this renderer do not suppest stroke method!');
			},
			createImageData : function(data) {
				if (this.renderer instanceof Proton.PixelRender)
					this.renderer.createImageData(data);
			},
			setMaxRadius : function(radius) {
				if (this.renderer instanceof Proton.WebGLRender)
					this.renderer.setMaxRadius(radius);
			},
			blendEquation : function(A) {
				if (this.renderer instanceof Proton.WebGLRender)
					this.renderer.blendEquation(A);
			},
			blendFunc : function(A, B) {
				if (this.renderer instanceof Proton.WebGLRender)
					this.renderer.blendFunc(A, B);
			},
			setType : function(type) {
				this.type = type;
				this.renderer = this.getRenderer();
			},
			getRenderer : function() {
				switch(this.type) {
					case 'pixi':
						return new Proton.PixiRender(this.proton, this.element);
						break;

					case 'dom':
						return new Proton.DomRender(this.proton, this.element);
						break;

					case 'canvas':
						return new Proton.CanvasRender(this.proton, this.element);
						break;

					case 'webgl':
						return new Proton.WebGLRender(this.proton, this.element);
						break;

					case 'easel':
						return new Proton.EaselRender(this.proton, this.element);
						break;

					case 'easeljs':
						return new Proton.EaselRender(this.proton, this.element);
						break;

					case 'pixel':
						return new Proton.PixelRender(this.proton, this.element);
						break;

					default:
						return new Proton.BaseRender(this.proton, this.element);
				}
			},
			render : function(callback) {
				this.renderer.render(callback);
			},
			addEventHandler : function() {
				if (this.onProtonUpdate)
					this.renderer.onProtonUpdate = this.onProtonUpdate;

				if (this.onParticleCreated)
					this.renderer.onParticleCreated = this.onParticleCreated;

				if (this.onParticleUpdate)
					this.renderer.onParticleUpdate = this.onParticleUpdate;

				if (this.onParticleDead)
					this.renderer.onParticleDead = this.onParticleDead;
			}
		}

		Proton.Renderer = Renderer;



		function BaseRender(proton, element, stroke) {
			this.proton = proton;
			this.element = element;
			this.stroke = stroke;
			this.pool = new Proton.Pool();
		}


		BaseRender.prototype = {
			start : function() {
				var self = this;
				this.proton.addEventListener(Proton.PROTON_UPDATE, function() {
					self.onProtonUpdate.call(self);
				});

				this.proton.addEventListener(Proton.PROTON_UPDATE_AFTER, function() {
					self.onProtonUpdateAfter.call(self);
				});

				this.proton.addEventListener(Proton.EMITTER_ADDED, function(emitter) {
					self.onEmitterAdded.call(self, emitter);
				});

				this.proton.addEventListener(Proton.EMITTER_REMOVED, function(emitter) {
					self.onEmitterRemoved.call(self, emitter);
				});

				var length = this.proton.emitters.length, i;
				for ( i = 0; i < length; i++) {
					var emitter = this.proton.emitters[i];
					this.addEmitterListener(emitter);
				}
			},

			resize : function(width, height) {
			},

			addEmitterListener : function(emitter) {
				var self = this;
				emitter.addEventListener(Proton.PARTICLE_CREATED, function(particle) {
					self.onParticleCreated.call(self, particle);
				});
				emitter.addEventListener(Proton.PARTICLE_UPDATE, function(particle) {
					self.onParticleUpdate.call(self, particle);
				});
				emitter.addEventListener(Proton.PARTICLE_DEAD, function(particle) {
					self.onParticleDead.call(self, particle);
				});
			},

			stop : function() {
				var length = this.proton.emitters.length, i;
				this.proton.removeAllEventListeners();
				for ( i = 0; i < length; i++) {
					var emitter = this.proton.emitters[i];
					emitter.removeAllEventListeners();
				}
			},

			onEmitterAdded : function(emitter) {
				this.addEmitterListener(emitter);
			},

			onEmitterRemoved : function(emitter) {
				emitter.removeAllEventListeners();
			},

			onProtonUpdate : function() {

			},

			onProtonUpdateAfter : function() {

			},

			onParticleCreated : function(particle) {

			},

			onParticleUpdate : function(particle) {

			},

			onParticleDead : function(particle) {

			}
		}

		Proton.BaseRender = BaseRender;



		function DomRender(proton, element) {
			DomRender._super_.call(this, proton, element);
			this.stroke = null;
		}


		Proton.Util.inherits(DomRender, Proton.BaseRender);

		DomRender.prototype.start = function() {
			DomRender._super_.prototype.start.call(this);
		}

		DomRender.prototype.setStroke = function(color, thinkness) {
			color = Proton.Util.initValue(color, '#000000');
			thinkness = Proton.Util.initValue(thinkness, 1);
			this.stroke = {
				color : color,
				thinkness : thinkness
			};
		}

		DomRender.prototype.onProtonUpdate = function() {
		}

		DomRender.prototype.onParticleCreated = function(particle) {
			if (particle.target) {
				var self = this;
				Proton.Util.getImage(particle.target, particle, false, function(particle) {
					self.setImgInDIV.call(self, particle);
				});
			} else {
				particle.transform.canvas = Proton.DomUtil.createCanvas(particle.id + '_canvas', particle.radius + 1, particle.radius + 1, 'absolute');
				particle.transform.bakOldRadius = particle.radius;

				if (this.stroke) {
					particle.transform.canvas.width = 2 * particle.radius + this.stroke.thinkness * 2;
					particle.transform.canvas.height = 2 * particle.radius + this.stroke.thinkness * 2;
				} else {
					particle.transform.canvas.width = 2 * particle.radius + 1;
					particle.transform.canvas.height = 2 * particle.radius + 1;
				}

				particle.transform.context = particle.transform.canvas.getContext('2d');
				particle.transform.context.fillStyle = particle.color;
				particle.transform.context.beginPath();
				particle.transform.context.arc(particle.radius, particle.radius, particle.radius, 0, Math.PI * 2, true);

				if (this.stroke) {
					particle.transform.context.strokeStyle = this.stroke.color;
					particle.transform.context.lineWidth = this.stroke.thinkness;
					particle.transform.context.stroke();
				}

				particle.transform.context.closePath();
				particle.transform.context.fill();
				this.element.appendChild(particle.transform.canvas);
			}

		}

		DomRender.prototype.onParticleUpdate = function(particle) {
			if (particle.target) {
				if (particle.target instanceof Image) {
					particle.transform.canvas.style.opacity = particle.alpha;
					Proton.DomUtil.transformDom(particle.transform.canvas, particle.p.x - particle.target.width / 2, particle.p.y - particle.target.height / 2, particle.scale, particle.rotation);
				}
			} else {
				particle.transform.canvas.style.opacity = particle.alpha;
				if (particle.transform['oldRadius'])
					Proton.DomUtil.transformDom(particle.transform.canvas, particle.p.x - particle.transform.oldRadius, particle.p.y - particle.transform.oldRadius, particle.scale, particle.rotation);
				else
					Proton.DomUtil.transformDom(particle.transform.canvas, particle.p.x - particle.transform.bakOldRadius, particle.p.y - particle.transform.bakOldRadius, particle.scale, particle.rotation);
			}
		}

		DomRender.prototype.onParticleDead = function(particle) {
			if (particle.transform.canvas)
				this.element.removeChild(particle.transform.canvas);
		}

		DomRender.prototype.setImgInDIV = function(particle) {
			particle.transform.canvas = Proton.DomUtil.createCanvas(particle.id + '_canvas', particle.target.width + 1, particle.target.height + 1, 'absolute', particle.p.x - particle.radius, particle.p.y - particle.radius);
			particle.transform.context = particle.transform.canvas.getContext('2d');
			particle.transform.context.drawImage(particle.target, 0, 0, particle.target.width, particle.target.height);
			this.element.appendChild(particle.transform.canvas);
		}

		Proton.DomRender = DomRender;



	    function EaselRender(proton, element, stroke) {
	        EaselRender._super_.call(this, proton, element);
	        this.stroke = stroke;
	    }


	    Proton.Util.inherits(EaselRender, Proton.BaseRender);
	    EaselRender.prototype.resize = function(width, height) {

	    }
	    EaselRender.prototype.start = function() {
	        EaselRender._super_.prototype.start.call(this);
	    };

	    EaselRender.prototype.onProtonUpdate = function() {

	    }

	    EaselRender.prototype.onParticleCreated = function(particle) {
	        if (particle.target) {
	            particle.target = this.pool.get(particle.target);
	            if (!particle.target.parent) {
	                if (!!particle.target['image']) {
	                    particle.target.regX = particle.target.image.width / 2;
	                    particle.target.regY = particle.target.image.height / 2;
	                }
	                this.element.addChild(particle.target);
	            }
	        } else {
	            var graphics = this.pool.get(createjs.Graphics);
	            if (this.stroke) {
	                if (this.stroke == true) {
	                    graphics.beginStroke('#000000');
	                } else if (this.stroke instanceof String) {
	                    graphics.beginStroke(this.stroke);
	                }
	            }

	            graphics.beginFill(particle.color).drawCircle(0, 0, particle.radius);
	            var shape = new createjs.Shape(graphics);
	            particle.target = shape;
	            this.element.addChild(particle.target);
	        }
	    }

	    EaselRender.prototype.onParticleUpdate = function(particle) {
	        if (particle.target) {
	            particle.target.x = particle.p.x;
	            particle.target.y = particle.p.y;
	            particle.target.alpha = particle.alpha;
	            particle.target.scaleX = particle.target.scaleY = particle.scale;
	            particle.target.rotation = particle.rotation;
	        }
	    }

	    EaselRender.prototype.onParticleDead = function(particle) {
	        if (particle.target) {
	            particle.target.parent && particle.target.parent.removeChild(particle.target);
	            this.pool.set(particle.target);
	            particle.target = null;
	        }
	    }

	    Proton.EaselRender = EaselRender;



		function CanvasRender(proton, element) {
			CanvasRender._super_.call(this, proton, element);
			this.stroke = null;
			this.context = this.element.getContext("2d");
			this.bufferCache = {};
		}


		Proton.Util.inherits(CanvasRender, Proton.BaseRender);
		CanvasRender.prototype.resize = function(width, height) {
			this.element.width = width;
			this.element.height = height;
		}
		CanvasRender.prototype.start = function() {
			CanvasRender._super_.prototype.start.call(this);
		}

		CanvasRender.prototype.setStroke = function(color, thinkness) {
			color = Proton.Util.initValue(color, '#000000');
			thinkness = Proton.Util.initValue(thinkness, 1);
			this.stroke = {
				color : color,
				thinkness : thinkness
			};
		}

		CanvasRender.prototype.onProtonUpdate = function() {
			this.context.clearRect(0, 0, this.element.width, this.element.height);
		}

		CanvasRender.prototype.onParticleCreated = function(particle) {
			if (particle.target)
				Proton.Util.getImage(particle.target, particle, false);
			else
				particle.color = particle.color ? particle.color : '#ff0000';
		}

		CanvasRender.prototype.onParticleUpdate = function(particle) {
			if (particle.target) {
				if (particle.target instanceof Image) {
					var w = particle.target.width * particle.scale | 0;
					var h = particle.target.height * particle.scale | 0;
					var x = particle.p.x - w / 2;
					var y = particle.p.y - h / 2;

					if (!!particle.color) {
						if (!particle.transform["buffer"])
							particle.transform.buffer = this.getBuffer(particle.target);
						var bufferContext = particle.transform.buffer.getContext('2d');
						bufferContext.clearRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);
						bufferContext.globalAlpha = particle.alpha;
						bufferContext.drawImage(particle.target, 0, 0);
						bufferContext.globalCompositeOperation = "source-atop";
						bufferContext.fillStyle = Proton.Util.rgbToHex(particle.transform.rgb);
						bufferContext.fillRect(0, 0, particle.transform.buffer.width, particle.transform.buffer.height);
						bufferContext.globalCompositeOperation = "source-over";
						bufferContext.globalAlpha = 1;
						this.context.drawImage(particle.transform.buffer, 0, 0, particle.transform.buffer.width, particle.transform.buffer.height, x, y, w, h);
					} else {
						this.context.save();
						this.context.globalAlpha = particle.alpha;
						this.context.translate(particle.p.x, particle.p.y);
						this.context.rotate(Proton.MathUtils.degreeTransform(particle.rotation));
						this.context.translate(-particle.p.x, -particle.p.y);
						this.context.drawImage(particle.target, 0, 0, particle.target.width, particle.target.height, x, y, w, h);
						this.context.globalAlpha = 1;
						this.context.restore();
					}
				}
			} else {
				if (particle.transform["rgb"])
					this.context.fillStyle = 'rgba(' + particle.transform.rgb.r + ',' + particle.transform.rgb.g + ',' + particle.transform.rgb.b + ',' + particle.alpha + ')';
				else
					this.context.fillStyle = particle.color;
				this.context.beginPath();
				this.context.arc(particle.p.x, particle.p.y, particle.radius, 0, Math.PI * 2, true);
				if (this.stroke) {
					this.context.strokeStyle = this.stroke.color;
					this.context.lineWidth = this.stroke.thinkness;
					this.context.stroke();
				}

				this.context.closePath();
				this.context.fill();
			}
		}

		CanvasRender.prototype.onParticleDead = function(particle) {

		}

		CanvasRender.prototype.getBuffer = function(image) {
			if ( image instanceof Image) {
				var size = image.width + '_' + image.height;
				var canvas = this.bufferCache[size];
				if (!canvas) {
					canvas = document.createElement('canvas');
					canvas.width = image.width;
					canvas.height = image.height;
					this.bufferCache[size] = canvas;
				}
				return canvas;
			}
		}

		Proton.CanvasRender = CanvasRender;



		function PixelRender(proton, element, rectangle) {
			PixelRender._super_.call(this, proton, element);
			this.context = this.element.getContext('2d');
			this.imageData = null;
			this.rectangle = null;
			this.rectangle = rectangle;
			this.createImageData(rectangle);
		}


		Proton.Util.inherits(PixelRender, Proton.BaseRender);
		PixelRender.prototype.resize = function(width, height) {
			this.element.width = width;
			this.element.height = height;
		}
		PixelRender.prototype.createImageData = function(rectangle) {
			if (!rectangle)
				this.rectangle = new Proton.Rectangle(0, 0, this.element.width, this.element.height);
			else
				this.rectangle = rectangle;
			this.imageData = this.context.createImageData(this.rectangle.width, this.rectangle.height);
			this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);
		}

		PixelRender.prototype.start = function() {
			PixelRender._super_.prototype.start.call(this);
		};

		PixelRender.prototype.onProtonUpdate = function() {
			this.context.clearRect(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);
			this.imageData = this.context.getImageData(this.rectangle.x, this.rectangle.y, this.rectangle.width, this.rectangle.height);
		}

		PixelRender.prototype.onProtonUpdateAfter = function() {
			this.context.putImageData(this.imageData, this.rectangle.x, this.rectangle.y);
		}

		PixelRender.prototype.onParticleCreated = function(particle) {

		}

		PixelRender.prototype.onParticleUpdate = function(particle) {
			if (this.imageData) {
				this.setPixel(this.imageData, Math.floor(particle.p.x - this.rectangle.x), Math.floor(particle.p.y - this.rectangle.y), particle);
			}
		}

		PixelRender.prototype.setPixel = function(imagedata, x, y, particle) {
			var rgb = particle.transform.rgb;
			if ((x < 0) || (x > this.element.width) || (y < 0) || (y > this.elementwidth))
				return;

			var i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;

			imagedata.data[i] = rgb.r;
			imagedata.data[i + 1] = rgb.g;
			imagedata.data[i + 2] = rgb.b;
			imagedata.data[i + 3] = particle.alpha * 255;
		}

		PixelRender.prototype.onParticleDead = function(particle) {

		}

		Proton.PixelRender = PixelRender;



		function WebGLRender(proton, element) {
			WebGLRender._super_.call(this, proton, element);
			this.gl = this.element.getContext('experimental-webgl', {
				antialias : true,
				stencil : false,
				depth : false
			});
			if (!this.gl)
				alert("Sorry your browser do not suppest WebGL!");
			this.initVar();
			this.setMaxRadius();
			this.initShaders();
			this.initBuffers();
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
			this.gl.enable(this.gl.BLEND);
		}


		Proton.Util.inherits(WebGLRender, Proton.BaseRender);
		WebGLRender.prototype.resize = function(width, height) {
			this.umat[4] = -2;
			this.umat[7] = 1;
			this.smat[0] = 1 / width;
			this.smat[4] = 1 / height;
			this.mstack.set(this.umat, 0);
			this.mstack.set(this.smat, 1);
			this.gl.viewport(0, 0, width, height);
			this.element.width = width;
			this.element.height = height;
		}

		WebGLRender.prototype.setMaxRadius = function(radius) {
			this.circleCanvasURL = this.createCircle(radius);
		}

		WebGLRender.prototype.getVertexShader = function() {
			var vsSource = ["uniform vec2 viewport;", "attribute vec2 aVertexPosition;", "attribute vec2 aTextureCoord;", "uniform mat3 tMat;", "varying vec2 vTextureCoord;", "varying float alpha;", "void main() {", "vec3 v = tMat * vec3(aVertexPosition, 1.0);", "gl_Position = vec4(v.x, v.y, 0, 1);", "vTextureCoord = aTextureCoord;", "alpha = tMat[0][2];", "}"].join("\n");
			return vsSource;
		}

		WebGLRender.prototype.getFragmentShader = function() {
			var fsSource = ["precision mediump float;", "varying vec2 vTextureCoord;", "varying float alpha;", "uniform sampler2D uSampler;", "uniform vec4 color;", "uniform bool useTexture;", "uniform vec3 uColor;", "void main() {", "vec4 textureColor = texture2D(uSampler, vTextureCoord);", "gl_FragColor = textureColor * vec4(uColor, 1.0);", "gl_FragColor.w *= alpha;", "}"].join("\n");
			return fsSource;
		}

		WebGLRender.prototype.initVar = function() {
			this.mstack = new Proton.MStack();
			this.umat = Proton.Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);
			this.smat = Proton.Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);
			this.texturebuffers = {};
		}

		WebGLRender.prototype.start = function() {
			WebGLRender._super_.prototype.start.call(this);
			this.resize(this.element.width, this.element.height);
		}

		WebGLRender.prototype.blendEquation = function(A) {
			this.gl.blendEquation(this.gl[A]);
		}

		WebGLRender.prototype.blendFunc = function(A, B) {
			this.gl.blendFunc(this.gl[A], this.gl[B]);
		}

		WebGLRender.prototype.getShader = function(gl, str, fs) {
			var shader;
			if (fs)
				shader = gl.createShader(gl.FRAGMENT_SHADER);
			else
				shader = gl.createShader(gl.VERTEX_SHADER);
			gl.shaderSource(shader, str);
			gl.compileShader(shader);

			if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
				alert(gl.getShaderInfoLog(shader));
				return null;
			}
			return shader;
		}

		WebGLRender.prototype.initShaders = function() {
			var fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);
			var vertexShader = this.getShader(this.gl, this.getVertexShader(), false);

			this.sprogram = this.gl.createProgram();
			this.gl.attachShader(this.sprogram, vertexShader);
			this.gl.attachShader(this.sprogram, fragmentShader);
			this.gl.linkProgram(this.sprogram);
			if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))
				alert("Could not initialise shaders");

			this.gl.useProgram(this.sprogram);
			this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, "aVertexPosition");
			this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, "aTextureCoord");
			this.gl.enableVertexAttribArray(this.sprogram.tca);
			this.gl.enableVertexAttribArray(this.sprogram.vpa);

			this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, "tMat");
			this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, "uSampler");
			this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, "useTexture");
			this.sprogram.color = this.gl.getUniformLocation(this.sprogram, "uColor");
			this.gl.uniform1i(this.sprogram.useTex, 1);
		};

		WebGLRender.prototype.initBuffers = function() {
			this.unitIBuffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);
			var vs = [0, 3, 1, 0, 2, 3];
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);

			var ids = [];
			for (var i = 0; i < 100; i++)
				ids.push(i);

			idx = new Uint16Array(ids);
			this.unitI33 = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);

			ids = [];
			for ( i = 0; i < 100; i++)
				ids.push(i, i + 1, i + 2);

			idx = new Uint16Array(ids);
			this.stripBuffer = this.gl.createBuffer();
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);
		};

		WebGLRender.prototype.createCircle = function(raidus) {
			this.circleCanvasRadius = Proton.WebGLUtil.nhpot(Proton.Util.initValue(raidus, 32));
			var canvas = Proton.DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);
			var context = canvas.getContext('2d');
			context.beginPath();
			context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);
			context.closePath();
			context.fillStyle = '#FFF';
			context.fill();
			return canvas.toDataURL();
		};

		WebGLRender.prototype.setImgInCanvas = function(particle) {
			var _w = particle.target.width;
			var _h = particle.target.height;
			var _width = Proton.WebGLUtil.nhpot(particle.target.width);
			var _height = Proton.WebGLUtil.nhpot(particle.target.height);
			var _scaleX = particle.target.width / _width;
			var _scaleY = particle.target.height / _height;

			if (!this.texturebuffers[particle.transform.src])
				this.texturebuffers[particle.transform.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];
			particle.transform.texture = this.texturebuffers[particle.transform.src][0];
			particle.transform.vcBuffer = this.texturebuffers[particle.transform.src][1];
			particle.transform.tcBuffer = this.texturebuffers[particle.transform.src][2];
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);
			this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);

			var context = particle.transform.canvas.getContext('2d');
			var data = context.getImageData(0, 0, _width, _height);

			this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);
			this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);
			this.gl.generateMipmap(this.gl.TEXTURE_2D);
			particle.transform.textureLoaded = true;
			particle.transform.textureWidth = _w;
			particle.transform.textureHeight = _h;
		}

		WebGLRender.prototype.setStroke = function(color, thinkness) {

		}

		WebGLRender.prototype.onProtonUpdate = function() {
			//this.gl.clearColor(0, 0, 0, 1);
			//this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
		}

		WebGLRender.prototype.onParticleCreated = function(particle) {
			var self = this;
			particle.transform.textureLoaded = false;
			particle.transform.tmat = Proton.Mat3.create();
			particle.transform.tmat[8] = 1;
			particle.transform.imat = Proton.Mat3.create();
			particle.transform.imat[8] = 1;
			if (particle.target) {
				Proton.Util.getImage(particle.target, particle, true, function(particle) {
					self.setImgInCanvas.call(self, particle);
					particle.transform.oldScale = 1;
				});
			} else {
				Proton.Util.getImage(this.circleCanvasURL, particle, true, function(particle) {
					self.setImgInCanvas.call(self, particle);
					particle.transform.oldScale = particle.radius / self.circleCanvasRadius;
				});
			}
		}

		WebGLRender.prototype.onParticleUpdate = function(particle) {
			if (particle.transform.textureLoaded) {
				this.updateMatrix(particle);
				this.gl.uniform3f(this.sprogram.color, particle.transform.rgb.r / 255, particle.transform.rgb.g / 255, particle.transform.rgb.b / 255);
				this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());
				this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.vcBuffer);
				this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);
				this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.transform.tcBuffer);
				this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);
				this.gl.bindTexture(this.gl.TEXTURE_2D, particle.transform.texture);
				this.gl.uniform1i(this.sprogram.samplerUniform, 0);
				this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);
				this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);
				this.mstack.pop();
			}
		}

		WebGLRender.prototype.onParticleDead = function(particle) {
			
		}

		WebGLRender.prototype.updateMatrix = function(particle) {
			var moveOriginMatrix = Proton.WebGLUtil.makeTranslation(-particle.transform.textureWidth / 2, -particle.transform.textureHeight / 2);
			var translationMatrix = Proton.WebGLUtil.makeTranslation(particle.p.x, particle.p.y);
			var angel = particle.rotation * (Math.PI / 180);
			var rotationMatrix = Proton.WebGLUtil.makeRotation(angel);
			var scale = particle.scale * particle.transform.oldScale;
			var scaleMatrix = Proton.WebGLUtil.makeScale(scale, scale);

			var matrix = Proton.WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);
			matrix = Proton.WebGLUtil.matrixMultiply(matrix, rotationMatrix);
			matrix = Proton.WebGLUtil.matrixMultiply(matrix, translationMatrix);

			Proton.Mat3.inverse(matrix, particle.transform.imat);
			matrix[2] = particle.alpha;
			this.mstack.push(matrix);
		}

		Proton.WebGLRender = WebGLRender;



		function Zone() {
			this.vector = new Proton.Vector2D(0, 0);
			this.random = 0;
			this.crossType = "dead";
			this.alert = true;
		}


		Zone.prototype = {
			getPosition : function() {

			},

			crossing : function(particle) {

			}
		};

		Proton.Zone = Zone;



		function LineZone(x1, y1, x2, y2, direction) {
			LineZone._super_.call(this);
			if (x2 - x1 >= 0) {
				this.x1 = x1;
				this.y1 = y1;
				this.x2 = x2;
				this.y2 = y2;
			} else {
				this.x1 = x2;
				this.y1 = y2;
				this.x2 = x1;
				this.y2 = y1;
			}
			this.dx = this.x2 - this.x1;
			this.dy = this.y2 - this.y1;
			this.minx = Math.min(this.x1, this.x2);
			this.miny = Math.min(this.y1, this.y2);
			this.maxx = Math.max(this.x1, this.x2);
			this.maxy = Math.max(this.y1, this.y2);
			this.dot = this.x2 * this.y1 - this.x1 * this.y2;
			this.xxyy = this.dx * this.dx + this.dy * this.dy;
			this.gradient = this.getGradient();
			this.length = this.getLength();
			this.direction = Proton.Util.initValue(direction, '>');
		}


		Proton.Util.inherits(LineZone, Proton.Zone);
		LineZone.prototype.getPosition = function() {
			this.random = Math.random();
			this.vector.x = this.x1 + this.random * this.length * Math.cos(this.gradient);
			this.vector.y = this.y1 + this.random * this.length * Math.sin(this.gradient);
			return this.vector;
		}

		LineZone.prototype.getDirection = function(x, y) {
			var A = this.dy;
			var B = -this.dx;
			var C = this.dot;
			var D = B == 0 ? 1 : B;
			if ((A * x + B * y + C) * D > 0)
				return true
			else
				return false;
		}

		LineZone.prototype.getDistance = function(x, y) {
			var A = this.dy;
			var B = -this.dx;
			var C = this.dot;
			var D = (A * x + B * y + C);
			return D / Math.sqrt(this.xxyy);
		}

		LineZone.prototype.getSymmetric = function(v) {
			var tha2 = v.getGradient();
			var tha1 = this.getGradient();
			var tha = 2 * (tha1 - tha2);
			var oldx = v.x;
			var oldy = v.y;
			v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);
			v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);
			return v;
		}

		LineZone.prototype.getGradient = function() {
			return Math.atan2(this.dy, this.dx);
		}

		LineZone.prototype.getRange = function(particle, fun) {
			var angle = Math.abs(this.getGradient());
			if (angle <= Math.PI / 4) {
				if (particle.p.x < this.maxx && particle.p.x > this.minx) {
					fun();
				}
			} else {
				if (particle.p.y < this.maxy && particle.p.y > this.miny) {
					fun();
				}
			}
		}

		LineZone.prototype.getLength = function() {
			return Math.sqrt(this.dx * this.dx + this.dy * this.dy)
		}

		LineZone.prototype.crossing = function(particle) {
			var self = this;
			if (this.crossType == "dead") {
				if (this.direction == ">" || this.direction == "R" || this.direction == "right" || this.direction == "down") {
					this.getRange(particle, function() {
						if (self.getDirection(particle.p.x, particle.p.y))
							particle.dead = true;
					})
				} else {
					this.getRange(particle, function() {
						if (!self.getDirection(particle.p.x, particle.p.y))
							particle.dead = true;
					})
				}
			} else if (this.crossType == "bound") {
				this.getRange(particle, function() {
					if (self.getDistance(particle.p.x, particle.p.y) <= particle.radius) {
						if (self.dx == 0) {
							particle.v.x *= -1;
						} else if (self.dy == 0) {
							particle.v.y *= -1;
						} else {
							self.getSymmetric(particle.v);
						}
					}
				});
			} else if (this.crossType == "cross") {
				if (this.alert) {
					alert('Sorry lineZone does not support cross method');
					this.alert = false;
				}
			}
		}

		Proton.LineZone = LineZone;



		function CircleZone(x, y, radius) {
			CircleZone._super_.call(this);
			this.x = x;
			this.y = y;
			this.radius = radius;
			this.angle = 0;
			this.center = {
				x : this.x,
				y : this.y
			};
		}


		Proton.Util.inherits(CircleZone, Proton.Zone);
		CircleZone.prototype.getPosition = function() {
			this.random = Math.random();
			this.angle = Math.PI * 2 * Math.random();
			this.vector.x = this.x + this.random * this.radius * Math.cos(this.angle);
			this.vector.y = this.y + this.random * this.radius * Math.sin(this.angle);
			return this.vector;
		}

		CircleZone.prototype.setCenter = function(x, y) {
			this.center.x = x;
			this.center.y = y;
		}

		CircleZone.prototype.crossing = function(particle) {
			var d = particle.p.distanceTo(this.center);
			if (this.crossType == "dead") {
				if (d - particle.radius > this.radius)
					particle.dead = true;
			} else if (this.crossType == "bound") {
				if (d + particle.radius >= this.radius)
					this.getSymmetric(particle);
			} else if (this.crossType == "cross") {
				if (this.alert) {
					alert('Sorry CircleZone does not support cross method');
					this.alert = false;
				}
			}
		}

		CircleZone.prototype.getSymmetric = function(particle) {
			var tha2 = particle.v.getGradient();
			var tha1 = this.getGradient(particle);
			var tha = 2 * (tha1 - tha2);
			var oldx = particle.v.x;
			var oldy = particle.v.y;
			particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);
			particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);
		}

		CircleZone.prototype.getGradient = function(particle) {
			return -Math.PI / 2 + Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x);
		}

		Proton.CircleZone = CircleZone;



		function PointZone(x, y) {
			PointZone._super_.call(this);
			this.x = x;
			this.y = y;
		}


		Proton.Util.inherits(PointZone, Proton.Zone);
		PointZone.prototype.getPosition = function() {
			this.vector.x = this.x;
			this.vector.y = this.y;
			return this.vector;
		}

		PointZone.prototype.crossing = function(particle) {
			if (this.alert) {
				alert('Sorry PointZone does not support crossing method');
				this.alert = false;
			}
		}

		Proton.PointZone = PointZone;



		function RectZone(x, y, width, height) {
			RectZone._super_.call(this);
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
		}


		Proton.Util.inherits(RectZone, Proton.Zone);
		RectZone.prototype.getPosition = function() {
			this.vector.x = this.x + Math.random() * this.width;
			this.vector.y = this.y + Math.random() * this.height;
			return this.vector;
		}

		RectZone.prototype.crossing = function(particle) {
			if (this.crossType == "dead") {
				if (particle.p.x + particle.radius < this.x)
					particle.dead = true;
				else if (particle.p.x - particle.radius > this.x + this.width)
					particle.dead = true;

				if (particle.p.y + particle.radius < this.y)
					particle.dead = true;
				else if (particle.p.y - particle.radius > this.y + this.height)
					particle.dead = true;
			} else if (this.crossType == "bound") {
				if (particle.p.x - particle.radius < this.x) {
					particle.p.x = this.x + particle.radius;
					particle.v.x *= -1;
				} else if (particle.p.x + particle.radius > this.x + this.width) {
					particle.p.x = this.x + this.width - particle.radius;
					particle.v.x *= -1;
				}
				
				if (particle.p.y - particle.radius < this.y) {
					particle.p.y = this.y + particle.radius;
					particle.v.y *= -1;
				} else if (particle.p.y + particle.radius > this.y + this.height) {
					particle.p.y = this.y + this.height - particle.radius;
					particle.v.y *= -1;
				}
			} else if (this.crossType == "cross") {
				if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)
					particle.p.x = this.x + this.width + particle.radius;
				else if (particle.p.x - particle.radius > this.x + this.width && particle.v.x >= 0)
					particle.p.x = this.x - particle.radius;

				if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)
					particle.p.y = this.y + this.height + particle.radius;
				else if (particle.p.y - particle.radius > this.y + this.height && particle.v.y >= 0)
					particle.p.y = this.y - particle.radius;
			}
		}

		Proton.RectZone = RectZone;



		function ImageZone(imageData, x, y, d) {
			ImageZone._super_.call(this);
			this.reset(imageData, x, y, d);
		}


		Proton.Util.inherits(ImageZone, Proton.Zone);
		ImageZone.prototype.reset = function(imageData, x, y, d) {
			this.imageData = imageData;
			this.x = Proton.Util.initValue(x, 0);
			this.y = Proton.Util.initValue(y, 0);
			this.d = Proton.Util.initValue(d, 2);
			this.vectors = [];
			this.setVectors();
		}

		ImageZone.prototype.setVectors = function() {
			var i, j;
			var length1 = this.imageData.width;
			var length2 = this.imageData.height;
			for ( i = 0; i < length1; i += this.d) {
				for ( j = 0; j < length2; j += this.d) {
					var index = ((j >> 0) * length1 + (i >> 0)) * 4;
					if (this.imageData.data[index + 3] > 0) {
						this.vectors.push({
							x : i + this.x,
							y : j + this.y
						});
					}
				}
			}
			return this.vector;
		}

		ImageZone.prototype.getBound = function(x, y) {
			var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;
			if (this.imageData.data[index + 3] > 0)
				return true;
			else
				return false;
		}

		ImageZone.prototype.getPosition = function() {
			return this.vector.copy(this.vectors[Math.floor(Math.random() * this.vectors.length)]);
		}

		ImageZone.prototype.getColor = function(x, y) {
			x -= this.x;
			y -= this.y;
			var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;
			return {
				r : this.imageData.data[i],
				g : this.imageData.data[i + 1],
				b : this.imageData.data[i + 2],
				a : this.imageData.data[i + 3]
			};
		}

		ImageZone.prototype.crossing = function(particle) {
			if (this.crossType == "dead") {
				if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))
					particle.dead = true;
				else
					particle.dead = false;
			} else if (this.crossType == "bound") {
				if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))
					particle.v.negate();
			}
		}

		Proton.ImageZone = ImageZone;


	/**
	 * You can use this emit particles.
	 *
	 * This method will console.log the fixed number of your info  in updata or requestAnimationFrame
	 * 
	 * use like this Proton.log('+12',mc); log 12 times
	 *
	 * @class Proton.log
	 * @constructor
	 * @param {*} logInfo;
	 */

		var log = function() {
			if (window.console && window.console.log) {
				var arg = arguments;
				if ( typeof arguments[0] == 'string') {
					if (arguments[0].indexOf('+') == 0) {
						var n = parseInt(arguments[0]);
						if (log.once < n) {
							delete arg[0];
							console.log(arg);
							log.once++;
						}
					} else {
						console.log(arg);
					}
				} else {
					console.log(arg);
				}
			}
		}

		log.once = 0;
		Proton.log = log;



		var Debug = Debug || {
			addEventListener : function(proton, fun) {
				proton.addEventListener(Proton.PROTON_UPDATE, function() {
					fun();
				});
			},

			setStyle : function(c) {
				var color = c || '#ff0000';
				var rgb = Proton.Util.hexToRGB(color);
				var style = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + 0.5 + ')';
				return style;
			},

			drawZone : function(proton, canvas, zone, clear) {
				var context = canvas.getContext('2d');
				var style = this.setStyle();
				this.addEventListener(proton, function() {
					if (clear)
						context.clearRect(0, 0, canvas.width, canvas.height);

					if ( zone instanceof Proton.PointZone) {
						context.beginPath();
						context.fillStyle = style;
						context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);
						context.fill();
						context.closePath();
					} else if ( zone instanceof Proton.LineZone) {
						context.beginPath();
						context.strokeStyle = style;
						context.moveTo(zone.x1, zone.y1);
						context.lineTo(zone.x2, zone.y2);
						context.stroke();
						context.closePath();
					} else if ( zone instanceof Proton.RectZone) {
						context.beginPath();
						context.strokeStyle = style;
						context.drawRect(zone.x, zone.y, zone.width, zone.height);
						context.stroke();
						context.closePath();
					} else if ( zone instanceof Proton.CircleZone) {
						context.beginPath();
						context.strokeStyle = style;
						context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);
						context.stroke();
						context.closePath();
					}
				});
			},

			drawEmitter : function(proton, canvas, emitter, clear) {
				var context = canvas.getContext('2d');
				var style = this.setStyle();
				this.addEventListener(proton, function() {
					if (clear)
						context.clearRect(0, 0, canvas.width, canvas.height);

					context.beginPath();
					context.fillStyle = style;
					context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);
					context.fill();
					context.closePath();
				});
			},

			test : {},

			setTest : function(id, value) {
				this.test[id] = value;
			},

			getTest : function(id) {
				if (this.test.hasOwnProperty(id))
					return this.test[id];
				else
					return false;
			}
		}

		Proton.Debug = Debug;


	})(window);
	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

	// requestAnimationFrame polyfill by Erik Möller
	// fixes from Paul Irish and Tino Zijdel
	( function() {
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() {
						callback(currTime + timeToCall);
					}, timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
		}()); 

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var default_1 = __webpack_require__(380);
	var big_fire_1 = __webpack_require__(381);
	var qtk_particles_editor_1 = __webpack_require__(2);
	qtk_particles_editor_1.Document.registerTemplate("default", default_1.defaultTemplate);
	qtk_particles_editor_1.Document.registerTemplate("Big Fire", big_fire_1.bigFireTemplate);
	//# sourceMappingURL=templates.js.map

/***/ },
/* 380 */
/***/ function(module, exports) {

	"use strict";
	exports.defaultTemplate = [
	    {
	        title: "Initialize",
	        propsDesc: [
	            { type: "range", name: "Radius", converter: "radius", path: "radius", value: { first: 1, second: 12 } },
	            { type: "range", name: "Life", converter: "life", path: "life", value: { first: 2, second: 4 } },
	            { type: "range", name: "Mass", converter: "mass", path: "mass", value: { first: 1, second: 1 } },
	            { type: "vector2", name: "Position", path: "position", converter: "point", value: { x: 300, y: 300 } },
	            { type: "line", name: "Rate" },
	            { type: "range", name: "number", converter: "rate-num", path: "rateNum", value: { first: 10, second: 20 } },
	            { type: "range", name: "time", converter: "rate-time", path: "rateTime", value: { first: .1, second: .25 } },
	            { type: "line", name: "Velocity" },
	            { type: "options", name: "Type", converter: "velocity", path: "vType", value: "polar",
	                options: ["polar", "linear"] },
	            { type: "range", name: "rpan", converter: "v-rpan", path: "vRpan", value: { first: 2, second: 4 } },
	            { type: "range", name: "thapan", converter: "v-thapath", path: "vThapan", value: { first: -30, second: 30 } },
	            { type: "line" },
	            { type: "line", name: "Color" },
	            { type: "text", name: "Begin", converter: "color", path: "colorBegin", value: "ff0000" },
	            { type: "text", name: "End", converter: "color", path: "colorEnd", value: "random" },
	            { type: "line" }
	        ]
	    },
	    {
	        title: "Behaviour",
	        propsDesc: [
	            { type: "range", name: "Scale", path: "scale", converter: "scale", value: { first: 1, second: 0.7 } },
	            { type: "range", name: "Alpha", path: "alpha", converter: "alpha", value: { first: 1, second: 0 } },
	            { type: "line", name: "Drift" },
	            { type: "vector2", name: "Point", path: "driftPoint", converter: "point", value: { x: 30, y: 30 } },
	            { type: "number", name: "Delay", path: "driftDelay", converter: "delay", value: 0.05 },
	            { type: "line" }
	        ]
	    }
	];
	//# sourceMappingURL=default.js.map

/***/ },
/* 381 */
/***/ function(module, exports) {

	"use strict";
	var imageURL = "https://qtoolkit.github.io/qtk-proton-editor/assets/fire.png";
	exports.bigFireTemplate = [
	    {
	        title: "Initialize",
	        propsDesc: [
	            { type: "hide", path: "globalCompositeOperation", value: "lighter" },
	            { type: "text", name: "Background", path: "backGroundColor", value: "Black" },
	            { type: "line", name: "Rate" },
	            { type: "range", name: "number", converter: "rate-num", path: "rateNum", value: { first: 5, second: 13 } },
	            { type: "range", name: "time", converter: "rate-time", path: "rateTime", value: { first: .1, second: .1 } },
	            { type: "line" },
	            { type: "range", name: "Mass", converter: "mass", path: "mass", value: { first: 1, second: 1 } },
	            { type: "text", name: "image", path: "image", value: imageURL },
	            { type: "vector3", name: "Position", path: "positionCircle", converter: "circle", zTitle: "R",
	                value: { x: 300, y: 300, z: 10 } },
	            { type: "range", name: "Life", converter: "life", path: "life", value: { first: 5, second: 7 } },
	            { type: "line", name: "Velocity" },
	            { type: "options", name: "Type", converter: "velocity", path: "vType", value: "polar",
	                options: ["polar", "linear"] },
	            { type: "range", name: "rpan", converter: "v-rpan", path: "vRpan", value: { first: 2, second: 3 } },
	            { type: "hide", path: "vRpanCenter", value: false },
	            { type: "range", name: "thapan", converter: "v-thapath", path: "vThapan", value: { first: 0, second: 30 } },
	            { type: "hide", path: "vThapanCenter", value: true },
	            { type: "line" }
	        ]
	    },
	    {
	        title: "Behaviour",
	        propsDesc: [
	            { type: "range", name: "Scale", path: "scale", converter: "scale", value: { first: 1, second: 0.2 } },
	            { type: "range", name: "Alpha", path: "alpha", converter: "alpha", value: { first: 1, second: 0.2 } }
	        ]
	    }
	];
	//# sourceMappingURL=big-fire.js.map

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var proton = __webpack_require__(378);
	function createParticlesEmitter(proton, data) {
	    var emitter = new Proton.Emitter();
	    if (data.image) {
	        var image = new Image();
	        image.onload = function () {
	            _createParticlesEmitter(proton, emitter, data, image);
	        };
	        image.src = data.image;
	    }
	    else {
	        _createParticlesEmitter(proton, emitter, data, null);
	    }
	    return emitter;
	}
	exports.createParticlesEmitter = createParticlesEmitter;
	function _createParticlesEmitter(proton, emitter, data, image) {
	    if (image) {
	        emitter.addInitialize(new Proton.ImageTarget(image));
	    }
	    if (data.rateNum && data.rateTime) {
	        emitter.rate = new Proton.Rate(new Proton.Span(data.rateNum.first, data.rateNum.second), new Proton.Span(data.rateTime.first, data.rateTime.second));
	    }
	    if (data.mass) {
	        emitter.addInitialize(new Proton.Mass(data.mass.first, data.mass.second));
	    }
	    if (data.radius) {
	        emitter.addInitialize(new Proton.Radius(data.radius.first, data.radius.second));
	    }
	    if (data.life) {
	        emitter.addInitialize(new Proton.Life(data.life.first, data.life.second));
	    }
	    if (data.positionCircle) {
	        var pc = data.positionCircle;
	        emitter.addInitialize(new Proton.Position(new Proton.CircleZone(pc.x, pc.y, pc.z)));
	    }
	    if (data.vRpan && data.vType && data.vThapan) {
	        var velocity = new Proton.Velocity(new Proton.Span(data.vRpan.first, data.vRpan.second, data.vRpanCenter), new Proton.Span(data.vThapan.first, data.vThapan.second, data.vThapanCenter), data.vType);
	        emitter.addInitialize(velocity);
	    }
	    if (data.driftPoint) {
	        emitter.addBehaviour(new Proton.RandomDrift(data.driftPoint.x, data.driftPoint.y, data.driftDelay));
	    }
	    if (data.colorBegin && data.colorEnd) {
	        emitter.addBehaviour(new Proton.Color(data.colorBegin, data.colorEnd, Infinity, Proton.easeOutQuart));
	    }
	    if (data.scale) {
	        emitter.addBehaviour(new Proton.Scale(data.scale.first, data.scale.second));
	    }
	    if (data.alpha) {
	        emitter.addBehaviour(new Proton.Alpha(data.alpha.first, data.alpha.second));
	    }
	    if (data.position) {
	        emitter.p.x = data.position.x;
	        emitter.p.y = data.position.y;
	    }
	    emitter.emit();
	    proton.addEmitter(emitter);
	    return emitter;
	}
	//# sourceMappingURL=proton-wrapper.js.map

/***/ }
/******/ ]);